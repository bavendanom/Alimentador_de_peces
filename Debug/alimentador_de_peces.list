
alimentador_de_peces.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf68  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800d028  0800d028  0000e028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d748  0800d748  0000f1e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d748  0800d748  0000f1e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d748  0800d748  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d748  0800d748  0000e748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d74c  0800d74c  0000e74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800d750  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  200001e0  0800d930  0000f1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  0800d930  0000f730  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150aa  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee1  00000000  00000000  000242b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00027198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f71  00000000  00000000  00028530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012f5e  00000000  00000000  000294a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019023  00000000  00000000  0003c3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d8ec  00000000  00000000  00055422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2d0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da4  00000000  00000000  000c2d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000c8af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d010 	.word	0x0800d010

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d010 	.word	0x0800d010

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fb5f 	bl	8001b14 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fa9f 	bl	80019a4 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb51 	bl	8001b14 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb47 	bl	8001b14 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fac9 	bl	8001a2c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fabf 	bl	8001a2c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fb55 	bl	8000b74 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fad5 	bl	8000a84 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb47 	bl	8000b74 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb3d 	bl	8000b74 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae3 	bl	8000ad4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fad9 	bl	8000ad4 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fadd>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	46ce      	mov	lr, r9
 8000534:	4647      	mov	r7, r8
 8000536:	0243      	lsls	r3, r0, #9
 8000538:	0a5a      	lsrs	r2, r3, #9
 800053a:	024e      	lsls	r6, r1, #9
 800053c:	0045      	lsls	r5, r0, #1
 800053e:	0fc4      	lsrs	r4, r0, #31
 8000540:	0048      	lsls	r0, r1, #1
 8000542:	4691      	mov	r9, r2
 8000544:	0e2d      	lsrs	r5, r5, #24
 8000546:	0a72      	lsrs	r2, r6, #9
 8000548:	0e00      	lsrs	r0, r0, #24
 800054a:	4694      	mov	ip, r2
 800054c:	b580      	push	{r7, lr}
 800054e:	099b      	lsrs	r3, r3, #6
 8000550:	0fc9      	lsrs	r1, r1, #31
 8000552:	09b6      	lsrs	r6, r6, #6
 8000554:	1a2a      	subs	r2, r5, r0
 8000556:	428c      	cmp	r4, r1
 8000558:	d021      	beq.n	800059e <__aeabi_fadd+0x6e>
 800055a:	2a00      	cmp	r2, #0
 800055c:	dd0d      	ble.n	800057a <__aeabi_fadd+0x4a>
 800055e:	2800      	cmp	r0, #0
 8000560:	d12d      	bne.n	80005be <__aeabi_fadd+0x8e>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x38>
 8000566:	e08d      	b.n	8000684 <__aeabi_fadd+0x154>
 8000568:	1e51      	subs	r1, r2, #1
 800056a:	2a01      	cmp	r2, #1
 800056c:	d100      	bne.n	8000570 <__aeabi_fadd+0x40>
 800056e:	e11d      	b.n	80007ac <__aeabi_fadd+0x27c>
 8000570:	2aff      	cmp	r2, #255	@ 0xff
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x46>
 8000574:	e0ab      	b.n	80006ce <__aeabi_fadd+0x19e>
 8000576:	000a      	movs	r2, r1
 8000578:	e027      	b.n	80005ca <__aeabi_fadd+0x9a>
 800057a:	2a00      	cmp	r2, #0
 800057c:	d04d      	beq.n	800061a <__aeabi_fadd+0xea>
 800057e:	1b42      	subs	r2, r0, r5
 8000580:	2d00      	cmp	r5, #0
 8000582:	d000      	beq.n	8000586 <__aeabi_fadd+0x56>
 8000584:	e0cc      	b.n	8000720 <__aeabi_fadd+0x1f0>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x5c>
 800058a:	e079      	b.n	8000680 <__aeabi_fadd+0x150>
 800058c:	1e54      	subs	r4, r2, #1
 800058e:	2a01      	cmp	r2, #1
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x64>
 8000592:	e128      	b.n	80007e6 <__aeabi_fadd+0x2b6>
 8000594:	2aff      	cmp	r2, #255	@ 0xff
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x6a>
 8000598:	e097      	b.n	80006ca <__aeabi_fadd+0x19a>
 800059a:	0022      	movs	r2, r4
 800059c:	e0c5      	b.n	800072a <__aeabi_fadd+0x1fa>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	dc00      	bgt.n	80005a4 <__aeabi_fadd+0x74>
 80005a2:	e096      	b.n	80006d2 <__aeabi_fadd+0x1a2>
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d04f      	beq.n	8000648 <__aeabi_fadd+0x118>
 80005a8:	2dff      	cmp	r5, #255	@ 0xff
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x7e>
 80005ac:	e08f      	b.n	80006ce <__aeabi_fadd+0x19e>
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	04c9      	lsls	r1, r1, #19
 80005b2:	430e      	orrs	r6, r1
 80005b4:	2a1b      	cmp	r2, #27
 80005b6:	dd51      	ble.n	800065c <__aeabi_fadd+0x12c>
 80005b8:	002a      	movs	r2, r5
 80005ba:	3301      	adds	r3, #1
 80005bc:	e018      	b.n	80005f0 <__aeabi_fadd+0xc0>
 80005be:	2dff      	cmp	r5, #255	@ 0xff
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x94>
 80005c2:	e084      	b.n	80006ce <__aeabi_fadd+0x19e>
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	04c9      	lsls	r1, r1, #19
 80005c8:	430e      	orrs	r6, r1
 80005ca:	2101      	movs	r1, #1
 80005cc:	2a1b      	cmp	r2, #27
 80005ce:	dc08      	bgt.n	80005e2 <__aeabi_fadd+0xb2>
 80005d0:	0031      	movs	r1, r6
 80005d2:	2020      	movs	r0, #32
 80005d4:	40d1      	lsrs	r1, r2
 80005d6:	1a82      	subs	r2, r0, r2
 80005d8:	4096      	lsls	r6, r2
 80005da:	0032      	movs	r2, r6
 80005dc:	1e50      	subs	r0, r2, #1
 80005de:	4182      	sbcs	r2, r0
 80005e0:	4311      	orrs	r1, r2
 80005e2:	1a5b      	subs	r3, r3, r1
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d459      	bmi.n	800069c <__aeabi_fadd+0x16c>
 80005e8:	2107      	movs	r1, #7
 80005ea:	002a      	movs	r2, r5
 80005ec:	4019      	ands	r1, r3
 80005ee:	d049      	beq.n	8000684 <__aeabi_fadd+0x154>
 80005f0:	210f      	movs	r1, #15
 80005f2:	4019      	ands	r1, r3
 80005f4:	2904      	cmp	r1, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fadd+0xca>
 80005f8:	3304      	adds	r3, #4
 80005fa:	0159      	lsls	r1, r3, #5
 80005fc:	d542      	bpl.n	8000684 <__aeabi_fadd+0x154>
 80005fe:	1c50      	adds	r0, r2, #1
 8000600:	2afe      	cmp	r2, #254	@ 0xfe
 8000602:	d03a      	beq.n	800067a <__aeabi_fadd+0x14a>
 8000604:	019b      	lsls	r3, r3, #6
 8000606:	b2c0      	uxtb	r0, r0
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	05c0      	lsls	r0, r0, #23
 800060c:	4318      	orrs	r0, r3
 800060e:	07e4      	lsls	r4, r4, #31
 8000610:	4320      	orrs	r0, r4
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800061a:	20fe      	movs	r0, #254	@ 0xfe
 800061c:	4680      	mov	r8, r0
 800061e:	1c6f      	adds	r7, r5, #1
 8000620:	0038      	movs	r0, r7
 8000622:	4647      	mov	r7, r8
 8000624:	4207      	tst	r7, r0
 8000626:	d000      	beq.n	800062a <__aeabi_fadd+0xfa>
 8000628:	e08e      	b.n	8000748 <__aeabi_fadd+0x218>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x100>
 800062e:	e0b4      	b.n	800079a <__aeabi_fadd+0x26a>
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0x106>
 8000634:	e0db      	b.n	80007ee <__aeabi_fadd+0x2be>
 8000636:	2e00      	cmp	r6, #0
 8000638:	d06c      	beq.n	8000714 <__aeabi_fadd+0x1e4>
 800063a:	1b98      	subs	r0, r3, r6
 800063c:	0145      	lsls	r5, r0, #5
 800063e:	d400      	bmi.n	8000642 <__aeabi_fadd+0x112>
 8000640:	e0f7      	b.n	8000832 <__aeabi_fadd+0x302>
 8000642:	000c      	movs	r4, r1
 8000644:	1af3      	subs	r3, r6, r3
 8000646:	e03d      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d01b      	beq.n	8000684 <__aeabi_fadd+0x154>
 800064c:	1e51      	subs	r1, r2, #1
 800064e:	2a01      	cmp	r2, #1
 8000650:	d100      	bne.n	8000654 <__aeabi_fadd+0x124>
 8000652:	e082      	b.n	800075a <__aeabi_fadd+0x22a>
 8000654:	2aff      	cmp	r2, #255	@ 0xff
 8000656:	d03a      	beq.n	80006ce <__aeabi_fadd+0x19e>
 8000658:	000a      	movs	r2, r1
 800065a:	e7ab      	b.n	80005b4 <__aeabi_fadd+0x84>
 800065c:	0031      	movs	r1, r6
 800065e:	2020      	movs	r0, #32
 8000660:	40d1      	lsrs	r1, r2
 8000662:	1a82      	subs	r2, r0, r2
 8000664:	4096      	lsls	r6, r2
 8000666:	0032      	movs	r2, r6
 8000668:	1e50      	subs	r0, r2, #1
 800066a:	4182      	sbcs	r2, r0
 800066c:	430a      	orrs	r2, r1
 800066e:	189b      	adds	r3, r3, r2
 8000670:	015a      	lsls	r2, r3, #5
 8000672:	d5b9      	bpl.n	80005e8 <__aeabi_fadd+0xb8>
 8000674:	1c6a      	adds	r2, r5, #1
 8000676:	2dfe      	cmp	r5, #254	@ 0xfe
 8000678:	d175      	bne.n	8000766 <__aeabi_fadd+0x236>
 800067a:	20ff      	movs	r0, #255	@ 0xff
 800067c:	2300      	movs	r3, #0
 800067e:	e7c4      	b.n	800060a <__aeabi_fadd+0xda>
 8000680:	000c      	movs	r4, r1
 8000682:	0033      	movs	r3, r6
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	2aff      	cmp	r2, #255	@ 0xff
 8000688:	d146      	bne.n	8000718 <__aeabi_fadd+0x1e8>
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <__aeabi_fadd+0x14a>
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	03d2      	lsls	r2, r2, #15
 8000692:	4313      	orrs	r3, r2
 8000694:	025b      	lsls	r3, r3, #9
 8000696:	20ff      	movs	r0, #255	@ 0xff
 8000698:	0a5b      	lsrs	r3, r3, #9
 800069a:	e7b6      	b.n	800060a <__aeabi_fadd+0xda>
 800069c:	019f      	lsls	r7, r3, #6
 800069e:	09bf      	lsrs	r7, r7, #6
 80006a0:	0038      	movs	r0, r7
 80006a2:	f002 fa89 	bl	8002bb8 <__clzsi2>
 80006a6:	3805      	subs	r0, #5
 80006a8:	4087      	lsls	r7, r0
 80006aa:	4285      	cmp	r5, r0
 80006ac:	dc24      	bgt.n	80006f8 <__aeabi_fadd+0x1c8>
 80006ae:	003b      	movs	r3, r7
 80006b0:	2120      	movs	r1, #32
 80006b2:	1b42      	subs	r2, r0, r5
 80006b4:	3201      	adds	r2, #1
 80006b6:	40d3      	lsrs	r3, r2
 80006b8:	1a8a      	subs	r2, r1, r2
 80006ba:	4097      	lsls	r7, r2
 80006bc:	1e7a      	subs	r2, r7, #1
 80006be:	4197      	sbcs	r7, r2
 80006c0:	2200      	movs	r2, #0
 80006c2:	433b      	orrs	r3, r7
 80006c4:	0759      	lsls	r1, r3, #29
 80006c6:	d193      	bne.n	80005f0 <__aeabi_fadd+0xc0>
 80006c8:	e797      	b.n	80005fa <__aeabi_fadd+0xca>
 80006ca:	000c      	movs	r4, r1
 80006cc:	0033      	movs	r3, r6
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	e7db      	b.n	800068a <__aeabi_fadd+0x15a>
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d014      	beq.n	8000700 <__aeabi_fadd+0x1d0>
 80006d6:	1b42      	subs	r2, r0, r5
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d14b      	bne.n	8000774 <__aeabi_fadd+0x244>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0d0      	beq.n	8000682 <__aeabi_fadd+0x152>
 80006e0:	1e51      	subs	r1, r2, #1
 80006e2:	2a01      	cmp	r2, #1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x1b8>
 80006e6:	e09e      	b.n	8000826 <__aeabi_fadd+0x2f6>
 80006e8:	2aff      	cmp	r2, #255	@ 0xff
 80006ea:	d0ef      	beq.n	80006cc <__aeabi_fadd+0x19c>
 80006ec:	000a      	movs	r2, r1
 80006ee:	2a1b      	cmp	r2, #27
 80006f0:	dd5f      	ble.n	80007b2 <__aeabi_fadd+0x282>
 80006f2:	0002      	movs	r2, r0
 80006f4:	1c73      	adds	r3, r6, #1
 80006f6:	e77b      	b.n	80005f0 <__aeabi_fadd+0xc0>
 80006f8:	4b50      	ldr	r3, [pc, #320]	@ (800083c <__aeabi_fadd+0x30c>)
 80006fa:	1a2a      	subs	r2, r5, r0
 80006fc:	403b      	ands	r3, r7
 80006fe:	e7e1      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000700:	21fe      	movs	r1, #254	@ 0xfe
 8000702:	1c6a      	adds	r2, r5, #1
 8000704:	4211      	tst	r1, r2
 8000706:	d13b      	bne.n	8000780 <__aeabi_fadd+0x250>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d15d      	bne.n	80007c8 <__aeabi_fadd+0x298>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d07f      	beq.n	8000810 <__aeabi_fadd+0x2e0>
 8000710:	2e00      	cmp	r6, #0
 8000712:	d17f      	bne.n	8000814 <__aeabi_fadd+0x2e4>
 8000714:	2200      	movs	r2, #0
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	025b      	lsls	r3, r3, #9
 800071a:	0a5b      	lsrs	r3, r3, #9
 800071c:	b2d0      	uxtb	r0, r2
 800071e:	e774      	b.n	800060a <__aeabi_fadd+0xda>
 8000720:	28ff      	cmp	r0, #255	@ 0xff
 8000722:	d0d2      	beq.n	80006ca <__aeabi_fadd+0x19a>
 8000724:	2480      	movs	r4, #128	@ 0x80
 8000726:	04e4      	lsls	r4, r4, #19
 8000728:	4323      	orrs	r3, r4
 800072a:	2401      	movs	r4, #1
 800072c:	2a1b      	cmp	r2, #27
 800072e:	dc07      	bgt.n	8000740 <__aeabi_fadd+0x210>
 8000730:	001c      	movs	r4, r3
 8000732:	2520      	movs	r5, #32
 8000734:	40d4      	lsrs	r4, r2
 8000736:	1aaa      	subs	r2, r5, r2
 8000738:	4093      	lsls	r3, r2
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	4193      	sbcs	r3, r2
 800073e:	431c      	orrs	r4, r3
 8000740:	1b33      	subs	r3, r6, r4
 8000742:	0005      	movs	r5, r0
 8000744:	000c      	movs	r4, r1
 8000746:	e74d      	b.n	80005e4 <__aeabi_fadd+0xb4>
 8000748:	1b9f      	subs	r7, r3, r6
 800074a:	017a      	lsls	r2, r7, #5
 800074c:	d422      	bmi.n	8000794 <__aeabi_fadd+0x264>
 800074e:	2f00      	cmp	r7, #0
 8000750:	d1a6      	bne.n	80006a0 <__aeabi_fadd+0x170>
 8000752:	2400      	movs	r4, #0
 8000754:	2000      	movs	r0, #0
 8000756:	2300      	movs	r3, #0
 8000758:	e757      	b.n	800060a <__aeabi_fadd+0xda>
 800075a:	199b      	adds	r3, r3, r6
 800075c:	2501      	movs	r5, #1
 800075e:	3201      	adds	r2, #1
 8000760:	0159      	lsls	r1, r3, #5
 8000762:	d400      	bmi.n	8000766 <__aeabi_fadd+0x236>
 8000764:	e740      	b.n	80005e8 <__aeabi_fadd+0xb8>
 8000766:	2101      	movs	r1, #1
 8000768:	4835      	ldr	r0, [pc, #212]	@ (8000840 <__aeabi_fadd+0x310>)
 800076a:	4019      	ands	r1, r3
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	4003      	ands	r3, r0
 8000770:	430b      	orrs	r3, r1
 8000772:	e7a7      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000774:	28ff      	cmp	r0, #255	@ 0xff
 8000776:	d0a9      	beq.n	80006cc <__aeabi_fadd+0x19c>
 8000778:	2180      	movs	r1, #128	@ 0x80
 800077a:	04c9      	lsls	r1, r1, #19
 800077c:	430b      	orrs	r3, r1
 800077e:	e7b6      	b.n	80006ee <__aeabi_fadd+0x1be>
 8000780:	2aff      	cmp	r2, #255	@ 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x256>
 8000784:	e779      	b.n	800067a <__aeabi_fadd+0x14a>
 8000786:	199b      	adds	r3, r3, r6
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	0759      	lsls	r1, r3, #29
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x260>
 800078e:	e72f      	b.n	80005f0 <__aeabi_fadd+0xc0>
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	e7c1      	b.n	8000718 <__aeabi_fadd+0x1e8>
 8000794:	000c      	movs	r4, r1
 8000796:	1af7      	subs	r7, r6, r3
 8000798:	e782      	b.n	80006a0 <__aeabi_fadd+0x170>
 800079a:	2b00      	cmp	r3, #0
 800079c:	d12c      	bne.n	80007f8 <__aeabi_fadd+0x2c8>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d193      	bne.n	80006ca <__aeabi_fadd+0x19a>
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	2400      	movs	r4, #0
 80007a6:	20ff      	movs	r0, #255	@ 0xff
 80007a8:	03db      	lsls	r3, r3, #15
 80007aa:	e72e      	b.n	800060a <__aeabi_fadd+0xda>
 80007ac:	2501      	movs	r5, #1
 80007ae:	1b9b      	subs	r3, r3, r6
 80007b0:	e718      	b.n	80005e4 <__aeabi_fadd+0xb4>
 80007b2:	0019      	movs	r1, r3
 80007b4:	2520      	movs	r5, #32
 80007b6:	40d1      	lsrs	r1, r2
 80007b8:	1aaa      	subs	r2, r5, r2
 80007ba:	4093      	lsls	r3, r2
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	4193      	sbcs	r3, r2
 80007c0:	430b      	orrs	r3, r1
 80007c2:	0005      	movs	r5, r0
 80007c4:	199b      	adds	r3, r3, r6
 80007c6:	e753      	b.n	8000670 <__aeabi_fadd+0x140>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x29e>
 80007cc:	e77e      	b.n	80006cc <__aeabi_fadd+0x19c>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x2a4>
 80007d2:	e77c      	b.n	80006ce <__aeabi_fadd+0x19e>
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	03d2      	lsls	r2, r2, #15
 80007d8:	4591      	cmp	r9, r2
 80007da:	d302      	bcc.n	80007e2 <__aeabi_fadd+0x2b2>
 80007dc:	4594      	cmp	ip, r2
 80007de:	d200      	bcs.n	80007e2 <__aeabi_fadd+0x2b2>
 80007e0:	0033      	movs	r3, r6
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	e753      	b.n	800068e <__aeabi_fadd+0x15e>
 80007e6:	000c      	movs	r4, r1
 80007e8:	1af3      	subs	r3, r6, r3
 80007ea:	3501      	adds	r5, #1
 80007ec:	e6fa      	b.n	80005e4 <__aeabi_fadd+0xb4>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d0af      	beq.n	8000752 <__aeabi_fadd+0x222>
 80007f2:	000c      	movs	r4, r1
 80007f4:	0033      	movs	r3, r6
 80007f6:	e78d      	b.n	8000714 <__aeabi_fadd+0x1e4>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2ce>
 80007fc:	e767      	b.n	80006ce <__aeabi_fadd+0x19e>
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	03d2      	lsls	r2, r2, #15
 8000802:	4591      	cmp	r9, r2
 8000804:	d3ed      	bcc.n	80007e2 <__aeabi_fadd+0x2b2>
 8000806:	4594      	cmp	ip, r2
 8000808:	d2eb      	bcs.n	80007e2 <__aeabi_fadd+0x2b2>
 800080a:	000c      	movs	r4, r1
 800080c:	0033      	movs	r3, r6
 800080e:	e7e8      	b.n	80007e2 <__aeabi_fadd+0x2b2>
 8000810:	0033      	movs	r3, r6
 8000812:	e77f      	b.n	8000714 <__aeabi_fadd+0x1e4>
 8000814:	199b      	adds	r3, r3, r6
 8000816:	2200      	movs	r2, #0
 8000818:	0159      	lsls	r1, r3, #5
 800081a:	d5b9      	bpl.n	8000790 <__aeabi_fadd+0x260>
 800081c:	4a07      	ldr	r2, [pc, #28]	@ (800083c <__aeabi_fadd+0x30c>)
 800081e:	4013      	ands	r3, r2
 8000820:	08db      	lsrs	r3, r3, #3
 8000822:	2201      	movs	r2, #1
 8000824:	e778      	b.n	8000718 <__aeabi_fadd+0x1e8>
 8000826:	199b      	adds	r3, r3, r6
 8000828:	3201      	adds	r2, #1
 800082a:	3501      	adds	r5, #1
 800082c:	0159      	lsls	r1, r3, #5
 800082e:	d49a      	bmi.n	8000766 <__aeabi_fadd+0x236>
 8000830:	e6da      	b.n	80005e8 <__aeabi_fadd+0xb8>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d08d      	beq.n	8000752 <__aeabi_fadd+0x222>
 8000836:	08db      	lsrs	r3, r3, #3
 8000838:	e76e      	b.n	8000718 <__aeabi_fadd+0x1e8>
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	fbffffff 	.word	0xfbffffff
 8000840:	7dffffff 	.word	0x7dffffff

08000844 <__aeabi_fdiv>:
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	464f      	mov	r7, r9
 8000848:	4646      	mov	r6, r8
 800084a:	46d6      	mov	lr, sl
 800084c:	0244      	lsls	r4, r0, #9
 800084e:	b5c0      	push	{r6, r7, lr}
 8000850:	0047      	lsls	r7, r0, #1
 8000852:	1c0e      	adds	r6, r1, #0
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	0e3f      	lsrs	r7, r7, #24
 8000858:	0fc5      	lsrs	r5, r0, #31
 800085a:	2f00      	cmp	r7, #0
 800085c:	d03c      	beq.n	80008d8 <__aeabi_fdiv+0x94>
 800085e:	2fff      	cmp	r7, #255	@ 0xff
 8000860:	d042      	beq.n	80008e8 <__aeabi_fdiv+0xa4>
 8000862:	2300      	movs	r3, #0
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	4699      	mov	r9, r3
 8000868:	469a      	mov	sl, r3
 800086a:	00e4      	lsls	r4, r4, #3
 800086c:	04d2      	lsls	r2, r2, #19
 800086e:	4314      	orrs	r4, r2
 8000870:	3f7f      	subs	r7, #127	@ 0x7f
 8000872:	0273      	lsls	r3, r6, #9
 8000874:	0a5b      	lsrs	r3, r3, #9
 8000876:	4698      	mov	r8, r3
 8000878:	0073      	lsls	r3, r6, #1
 800087a:	0e1b      	lsrs	r3, r3, #24
 800087c:	0ff6      	lsrs	r6, r6, #31
 800087e:	2b00      	cmp	r3, #0
 8000880:	d01b      	beq.n	80008ba <__aeabi_fdiv+0x76>
 8000882:	2bff      	cmp	r3, #255	@ 0xff
 8000884:	d013      	beq.n	80008ae <__aeabi_fdiv+0x6a>
 8000886:	4642      	mov	r2, r8
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	00d2      	lsls	r2, r2, #3
 800088c:	04c9      	lsls	r1, r1, #19
 800088e:	4311      	orrs	r1, r2
 8000890:	4688      	mov	r8, r1
 8000892:	2000      	movs	r0, #0
 8000894:	3b7f      	subs	r3, #127	@ 0x7f
 8000896:	0029      	movs	r1, r5
 8000898:	1aff      	subs	r7, r7, r3
 800089a:	464b      	mov	r3, r9
 800089c:	4071      	eors	r1, r6
 800089e:	b2c9      	uxtb	r1, r1
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d900      	bls.n	80008a6 <__aeabi_fdiv+0x62>
 80008a4:	e0b5      	b.n	8000a12 <__aeabi_fdiv+0x1ce>
 80008a6:	4a74      	ldr	r2, [pc, #464]	@ (8000a78 <__aeabi_fdiv+0x234>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	58d3      	ldr	r3, [r2, r3]
 80008ac:	469f      	mov	pc, r3
 80008ae:	4643      	mov	r3, r8
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d13f      	bne.n	8000934 <__aeabi_fdiv+0xf0>
 80008b4:	3fff      	subs	r7, #255	@ 0xff
 80008b6:	3302      	adds	r3, #2
 80008b8:	e003      	b.n	80008c2 <__aeabi_fdiv+0x7e>
 80008ba:	4643      	mov	r3, r8
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d12d      	bne.n	800091c <__aeabi_fdiv+0xd8>
 80008c0:	2301      	movs	r3, #1
 80008c2:	0029      	movs	r1, r5
 80008c4:	464a      	mov	r2, r9
 80008c6:	4071      	eors	r1, r6
 80008c8:	b2c9      	uxtb	r1, r1
 80008ca:	431a      	orrs	r2, r3
 80008cc:	2a0e      	cmp	r2, #14
 80008ce:	d838      	bhi.n	8000942 <__aeabi_fdiv+0xfe>
 80008d0:	486a      	ldr	r0, [pc, #424]	@ (8000a7c <__aeabi_fdiv+0x238>)
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	5882      	ldr	r2, [r0, r2]
 80008d6:	4697      	mov	pc, r2
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d113      	bne.n	8000904 <__aeabi_fdiv+0xc0>
 80008dc:	2304      	movs	r3, #4
 80008de:	4699      	mov	r9, r3
 80008e0:	3b03      	subs	r3, #3
 80008e2:	2700      	movs	r7, #0
 80008e4:	469a      	mov	sl, r3
 80008e6:	e7c4      	b.n	8000872 <__aeabi_fdiv+0x2e>
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	d105      	bne.n	80008f8 <__aeabi_fdiv+0xb4>
 80008ec:	2308      	movs	r3, #8
 80008ee:	4699      	mov	r9, r3
 80008f0:	3b06      	subs	r3, #6
 80008f2:	27ff      	movs	r7, #255	@ 0xff
 80008f4:	469a      	mov	sl, r3
 80008f6:	e7bc      	b.n	8000872 <__aeabi_fdiv+0x2e>
 80008f8:	230c      	movs	r3, #12
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b09      	subs	r3, #9
 80008fe:	27ff      	movs	r7, #255	@ 0xff
 8000900:	469a      	mov	sl, r3
 8000902:	e7b6      	b.n	8000872 <__aeabi_fdiv+0x2e>
 8000904:	0020      	movs	r0, r4
 8000906:	f002 f957 	bl	8002bb8 <__clzsi2>
 800090a:	2776      	movs	r7, #118	@ 0x76
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	409c      	lsls	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	427f      	negs	r7, r7
 8000914:	4699      	mov	r9, r3
 8000916:	469a      	mov	sl, r3
 8000918:	1a3f      	subs	r7, r7, r0
 800091a:	e7aa      	b.n	8000872 <__aeabi_fdiv+0x2e>
 800091c:	4640      	mov	r0, r8
 800091e:	f002 f94b 	bl	8002bb8 <__clzsi2>
 8000922:	4642      	mov	r2, r8
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409a      	lsls	r2, r3
 8000928:	2376      	movs	r3, #118	@ 0x76
 800092a:	425b      	negs	r3, r3
 800092c:	1a1b      	subs	r3, r3, r0
 800092e:	4690      	mov	r8, r2
 8000930:	2000      	movs	r0, #0
 8000932:	e7b0      	b.n	8000896 <__aeabi_fdiv+0x52>
 8000934:	2303      	movs	r3, #3
 8000936:	464a      	mov	r2, r9
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	2003      	movs	r0, #3
 800093e:	33fc      	adds	r3, #252	@ 0xfc
 8000940:	e7a9      	b.n	8000896 <__aeabi_fdiv+0x52>
 8000942:	000d      	movs	r5, r1
 8000944:	20ff      	movs	r0, #255	@ 0xff
 8000946:	2200      	movs	r2, #0
 8000948:	05c0      	lsls	r0, r0, #23
 800094a:	07ed      	lsls	r5, r5, #31
 800094c:	4310      	orrs	r0, r2
 800094e:	4328      	orrs	r0, r5
 8000950:	bce0      	pop	{r5, r6, r7}
 8000952:	46ba      	mov	sl, r7
 8000954:	46b1      	mov	r9, r6
 8000956:	46a8      	mov	r8, r5
 8000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095a:	000d      	movs	r5, r1
 800095c:	2000      	movs	r0, #0
 800095e:	2200      	movs	r2, #0
 8000960:	e7f2      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000962:	4653      	mov	r3, sl
 8000964:	2b02      	cmp	r3, #2
 8000966:	d0ed      	beq.n	8000944 <__aeabi_fdiv+0x100>
 8000968:	2b03      	cmp	r3, #3
 800096a:	d033      	beq.n	80009d4 <__aeabi_fdiv+0x190>
 800096c:	46a0      	mov	r8, r4
 800096e:	2b01      	cmp	r3, #1
 8000970:	d105      	bne.n	800097e <__aeabi_fdiv+0x13a>
 8000972:	2000      	movs	r0, #0
 8000974:	2200      	movs	r2, #0
 8000976:	e7e7      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000978:	0035      	movs	r5, r6
 800097a:	2803      	cmp	r0, #3
 800097c:	d07a      	beq.n	8000a74 <__aeabi_fdiv+0x230>
 800097e:	003b      	movs	r3, r7
 8000980:	337f      	adds	r3, #127	@ 0x7f
 8000982:	2b00      	cmp	r3, #0
 8000984:	dd2d      	ble.n	80009e2 <__aeabi_fdiv+0x19e>
 8000986:	4642      	mov	r2, r8
 8000988:	0752      	lsls	r2, r2, #29
 800098a:	d007      	beq.n	800099c <__aeabi_fdiv+0x158>
 800098c:	220f      	movs	r2, #15
 800098e:	4641      	mov	r1, r8
 8000990:	400a      	ands	r2, r1
 8000992:	2a04      	cmp	r2, #4
 8000994:	d002      	beq.n	800099c <__aeabi_fdiv+0x158>
 8000996:	2204      	movs	r2, #4
 8000998:	4694      	mov	ip, r2
 800099a:	44e0      	add	r8, ip
 800099c:	4642      	mov	r2, r8
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	d505      	bpl.n	80009ae <__aeabi_fdiv+0x16a>
 80009a2:	4642      	mov	r2, r8
 80009a4:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <__aeabi_fdiv+0x23c>)
 80009a6:	401a      	ands	r2, r3
 80009a8:	003b      	movs	r3, r7
 80009aa:	4690      	mov	r8, r2
 80009ac:	3380      	adds	r3, #128	@ 0x80
 80009ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80009b0:	dcc8      	bgt.n	8000944 <__aeabi_fdiv+0x100>
 80009b2:	4642      	mov	r2, r8
 80009b4:	0192      	lsls	r2, r2, #6
 80009b6:	0a52      	lsrs	r2, r2, #9
 80009b8:	b2d8      	uxtb	r0, r3
 80009ba:	e7c5      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	2500      	movs	r5, #0
 80009c0:	20ff      	movs	r0, #255	@ 0xff
 80009c2:	03d2      	lsls	r2, r2, #15
 80009c4:	e7c0      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	03d2      	lsls	r2, r2, #15
 80009ca:	4214      	tst	r4, r2
 80009cc:	d002      	beq.n	80009d4 <__aeabi_fdiv+0x190>
 80009ce:	4643      	mov	r3, r8
 80009d0:	4213      	tst	r3, r2
 80009d2:	d049      	beq.n	8000a68 <__aeabi_fdiv+0x224>
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	03d2      	lsls	r2, r2, #15
 80009d8:	4322      	orrs	r2, r4
 80009da:	0252      	lsls	r2, r2, #9
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	0a52      	lsrs	r2, r2, #9
 80009e0:	e7b2      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009e2:	2201      	movs	r2, #1
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b1b      	cmp	r3, #27
 80009e8:	dcc3      	bgt.n	8000972 <__aeabi_fdiv+0x12e>
 80009ea:	4642      	mov	r2, r8
 80009ec:	40da      	lsrs	r2, r3
 80009ee:	4643      	mov	r3, r8
 80009f0:	379e      	adds	r7, #158	@ 0x9e
 80009f2:	40bb      	lsls	r3, r7
 80009f4:	1e59      	subs	r1, r3, #1
 80009f6:	418b      	sbcs	r3, r1
 80009f8:	431a      	orrs	r2, r3
 80009fa:	0753      	lsls	r3, r2, #29
 80009fc:	d004      	beq.n	8000a08 <__aeabi_fdiv+0x1c4>
 80009fe:	230f      	movs	r3, #15
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fdiv+0x1c4>
 8000a06:	3204      	adds	r2, #4
 8000a08:	0153      	lsls	r3, r2, #5
 8000a0a:	d529      	bpl.n	8000a60 <__aeabi_fdiv+0x21c>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	e79a      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a12:	4642      	mov	r2, r8
 8000a14:	0163      	lsls	r3, r4, #5
 8000a16:	0155      	lsls	r5, r2, #5
 8000a18:	42ab      	cmp	r3, r5
 8000a1a:	d215      	bcs.n	8000a48 <__aeabi_fdiv+0x204>
 8000a1c:	201b      	movs	r0, #27
 8000a1e:	2200      	movs	r2, #0
 8000a20:	3f01      	subs	r7, #1
 8000a22:	2601      	movs	r6, #1
 8000a24:	001c      	movs	r4, r3
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	db01      	blt.n	8000a32 <__aeabi_fdiv+0x1ee>
 8000a2e:	429d      	cmp	r5, r3
 8000a30:	d801      	bhi.n	8000a36 <__aeabi_fdiv+0x1f2>
 8000a32:	1b5b      	subs	r3, r3, r5
 8000a34:	4332      	orrs	r2, r6
 8000a36:	3801      	subs	r0, #1
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d1f3      	bne.n	8000a24 <__aeabi_fdiv+0x1e0>
 8000a3c:	1e58      	subs	r0, r3, #1
 8000a3e:	4183      	sbcs	r3, r0
 8000a40:	4313      	orrs	r3, r2
 8000a42:	4698      	mov	r8, r3
 8000a44:	000d      	movs	r5, r1
 8000a46:	e79a      	b.n	800097e <__aeabi_fdiv+0x13a>
 8000a48:	201a      	movs	r0, #26
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	1b5b      	subs	r3, r3, r5
 8000a4e:	e7e8      	b.n	8000a22 <__aeabi_fdiv+0x1de>
 8000a50:	3b02      	subs	r3, #2
 8000a52:	425a      	negs	r2, r3
 8000a54:	4153      	adcs	r3, r2
 8000a56:	425b      	negs	r3, r3
 8000a58:	0035      	movs	r5, r6
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	b2d8      	uxtb	r0, r3
 8000a5e:	e773      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a60:	0192      	lsls	r2, r2, #6
 8000a62:	2000      	movs	r0, #0
 8000a64:	0a52      	lsrs	r2, r2, #9
 8000a66:	e76f      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	0252      	lsls	r2, r2, #9
 8000a6c:	0035      	movs	r5, r6
 8000a6e:	20ff      	movs	r0, #255	@ 0xff
 8000a70:	0a52      	lsrs	r2, r2, #9
 8000a72:	e769      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a74:	4644      	mov	r4, r8
 8000a76:	e7ad      	b.n	80009d4 <__aeabi_fdiv+0x190>
 8000a78:	0800d270 	.word	0x0800d270
 8000a7c:	0800d2b0 	.word	0x0800d2b0
 8000a80:	f7ffffff 	.word	0xf7ffffff

08000a84 <__eqsf2>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	0042      	lsls	r2, r0, #1
 8000a88:	024e      	lsls	r6, r1, #9
 8000a8a:	004c      	lsls	r4, r1, #1
 8000a8c:	0245      	lsls	r5, r0, #9
 8000a8e:	0a6d      	lsrs	r5, r5, #9
 8000a90:	0e12      	lsrs	r2, r2, #24
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a76      	lsrs	r6, r6, #9
 8000a96:	0e24      	lsrs	r4, r4, #24
 8000a98:	0fc9      	lsrs	r1, r1, #31
 8000a9a:	2aff      	cmp	r2, #255	@ 0xff
 8000a9c:	d010      	beq.n	8000ac0 <__eqsf2+0x3c>
 8000a9e:	2cff      	cmp	r4, #255	@ 0xff
 8000aa0:	d00c      	beq.n	8000abc <__eqsf2+0x38>
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	42a2      	cmp	r2, r4
 8000aa6:	d10a      	bne.n	8000abe <__eqsf2+0x3a>
 8000aa8:	42b5      	cmp	r5, r6
 8000aaa:	d108      	bne.n	8000abe <__eqsf2+0x3a>
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d00f      	beq.n	8000ad0 <__eqsf2+0x4c>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	d104      	bne.n	8000abe <__eqsf2+0x3a>
 8000ab4:	0028      	movs	r0, r5
 8000ab6:	1e43      	subs	r3, r0, #1
 8000ab8:	4198      	sbcs	r0, r3
 8000aba:	e000      	b.n	8000abe <__eqsf2+0x3a>
 8000abc:	2001      	movs	r0, #1
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	2cff      	cmp	r4, #255	@ 0xff
 8000ac4:	d1fb      	bne.n	8000abe <__eqsf2+0x3a>
 8000ac6:	4335      	orrs	r5, r6
 8000ac8:	d1f9      	bne.n	8000abe <__eqsf2+0x3a>
 8000aca:	404b      	eors	r3, r1
 8000acc:	0018      	movs	r0, r3
 8000ace:	e7f6      	b.n	8000abe <__eqsf2+0x3a>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e7f4      	b.n	8000abe <__eqsf2+0x3a>

08000ad4 <__gesf2>:
 8000ad4:	b530      	push	{r4, r5, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	024d      	lsls	r5, r1, #9
 8000adc:	0fc3      	lsrs	r3, r0, #31
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a6d      	lsrs	r5, r5, #9
 8000ae6:	0e00      	lsrs	r0, r0, #24
 8000ae8:	0fc9      	lsrs	r1, r1, #31
 8000aea:	2aff      	cmp	r2, #255	@ 0xff
 8000aec:	d019      	beq.n	8000b22 <__gesf2+0x4e>
 8000aee:	28ff      	cmp	r0, #255	@ 0xff
 8000af0:	d00b      	beq.n	8000b0a <__gesf2+0x36>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d11e      	bne.n	8000b34 <__gesf2+0x60>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d10b      	bne.n	8000b12 <__gesf2+0x3e>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d027      	beq.n	8000b4e <__gesf2+0x7a>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d134      	bne.n	8000b6c <__gesf2+0x98>
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d02f      	beq.n	8000b66 <__gesf2+0x92>
 8000b06:	0008      	movs	r0, r1
 8000b08:	bd30      	pop	{r4, r5, pc}
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d128      	bne.n	8000b60 <__gesf2+0x8c>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d101      	bne.n	8000b16 <__gesf2+0x42>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d0f5      	beq.n	8000b02 <__gesf2+0x2e>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d107      	bne.n	8000b2a <__gesf2+0x56>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d023      	beq.n	8000b66 <__gesf2+0x92>
 8000b1e:	0018      	movs	r0, r3
 8000b20:	e7f2      	b.n	8000b08 <__gesf2+0x34>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d11c      	bne.n	8000b60 <__gesf2+0x8c>
 8000b26:	28ff      	cmp	r0, #255	@ 0xff
 8000b28:	d014      	beq.n	8000b54 <__gesf2+0x80>
 8000b2a:	1e58      	subs	r0, r3, #1
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	4018      	ands	r0, r3
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7e9      	b.n	8000b08 <__gesf2+0x34>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d0f8      	beq.n	8000b2a <__gesf2+0x56>
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d1f6      	bne.n	8000b2a <__gesf2+0x56>
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	dcf4      	bgt.n	8000b2a <__gesf2+0x56>
 8000b40:	dbeb      	blt.n	8000b1a <__gesf2+0x46>
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	d8f1      	bhi.n	8000b2a <__gesf2+0x56>
 8000b46:	2000      	movs	r0, #0
 8000b48:	42ac      	cmp	r4, r5
 8000b4a:	d2dd      	bcs.n	8000b08 <__gesf2+0x34>
 8000b4c:	e7e5      	b.n	8000b1a <__gesf2+0x46>
 8000b4e:	2c00      	cmp	r4, #0
 8000b50:	d0da      	beq.n	8000b08 <__gesf2+0x34>
 8000b52:	e7ea      	b.n	8000b2a <__gesf2+0x56>
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d103      	bne.n	8000b60 <__gesf2+0x8c>
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d1e6      	bne.n	8000b2a <__gesf2+0x56>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e7d3      	b.n	8000b08 <__gesf2+0x34>
 8000b60:	2002      	movs	r0, #2
 8000b62:	4240      	negs	r0, r0
 8000b64:	e7d0      	b.n	8000b08 <__gesf2+0x34>
 8000b66:	2001      	movs	r0, #1
 8000b68:	4240      	negs	r0, r0
 8000b6a:	e7cd      	b.n	8000b08 <__gesf2+0x34>
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d0e8      	beq.n	8000b42 <__gesf2+0x6e>
 8000b70:	e7db      	b.n	8000b2a <__gesf2+0x56>
 8000b72:	46c0      	nop			@ (mov r8, r8)

08000b74 <__lesf2>:
 8000b74:	b530      	push	{r4, r5, lr}
 8000b76:	0042      	lsls	r2, r0, #1
 8000b78:	0244      	lsls	r4, r0, #9
 8000b7a:	024d      	lsls	r5, r1, #9
 8000b7c:	0fc3      	lsrs	r3, r0, #31
 8000b7e:	0048      	lsls	r0, r1, #1
 8000b80:	0a64      	lsrs	r4, r4, #9
 8000b82:	0e12      	lsrs	r2, r2, #24
 8000b84:	0a6d      	lsrs	r5, r5, #9
 8000b86:	0e00      	lsrs	r0, r0, #24
 8000b88:	0fc9      	lsrs	r1, r1, #31
 8000b8a:	2aff      	cmp	r2, #255	@ 0xff
 8000b8c:	d01a      	beq.n	8000bc4 <__lesf2+0x50>
 8000b8e:	28ff      	cmp	r0, #255	@ 0xff
 8000b90:	d00e      	beq.n	8000bb0 <__lesf2+0x3c>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d11e      	bne.n	8000bd4 <__lesf2+0x60>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d10e      	bne.n	8000bb8 <__lesf2+0x44>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d02a      	beq.n	8000bf4 <__lesf2+0x80>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d00c      	beq.n	8000bbc <__lesf2+0x48>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d01d      	beq.n	8000be2 <__lesf2+0x6e>
 8000ba6:	1e58      	subs	r0, r3, #1
 8000ba8:	2302      	movs	r3, #2
 8000baa:	4018      	ands	r0, r3
 8000bac:	3801      	subs	r0, #1
 8000bae:	e010      	b.n	8000bd2 <__lesf2+0x5e>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d10d      	bne.n	8000bd0 <__lesf2+0x5c>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d120      	bne.n	8000bfa <__lesf2+0x86>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d11e      	bne.n	8000bfa <__lesf2+0x86>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d023      	beq.n	8000c08 <__lesf2+0x94>
 8000bc0:	0008      	movs	r0, r1
 8000bc2:	e006      	b.n	8000bd2 <__lesf2+0x5e>
 8000bc4:	2c00      	cmp	r4, #0
 8000bc6:	d103      	bne.n	8000bd0 <__lesf2+0x5c>
 8000bc8:	28ff      	cmp	r0, #255	@ 0xff
 8000bca:	d1ec      	bne.n	8000ba6 <__lesf2+0x32>
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d017      	beq.n	8000c00 <__lesf2+0x8c>
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	bd30      	pop	{r4, r5, pc}
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d0e6      	beq.n	8000ba6 <__lesf2+0x32>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d1e4      	bne.n	8000ba6 <__lesf2+0x32>
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	dce2      	bgt.n	8000ba6 <__lesf2+0x32>
 8000be0:	db04      	blt.n	8000bec <__lesf2+0x78>
 8000be2:	42ac      	cmp	r4, r5
 8000be4:	d8df      	bhi.n	8000ba6 <__lesf2+0x32>
 8000be6:	2000      	movs	r0, #0
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d2f2      	bcs.n	8000bd2 <__lesf2+0x5e>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00b      	beq.n	8000c08 <__lesf2+0x94>
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	e7ee      	b.n	8000bd2 <__lesf2+0x5e>
 8000bf4:	2c00      	cmp	r4, #0
 8000bf6:	d0ec      	beq.n	8000bd2 <__lesf2+0x5e>
 8000bf8:	e7d5      	b.n	8000ba6 <__lesf2+0x32>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d1d3      	bne.n	8000ba6 <__lesf2+0x32>
 8000bfe:	e7f5      	b.n	8000bec <__lesf2+0x78>
 8000c00:	2000      	movs	r0, #0
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d0e5      	beq.n	8000bd2 <__lesf2+0x5e>
 8000c06:	e7ce      	b.n	8000ba6 <__lesf2+0x32>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7e1      	b.n	8000bd2 <__lesf2+0x5e>
 8000c0e:	46c0      	nop			@ (mov r8, r8)

08000c10 <__aeabi_i2f>:
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d013      	beq.n	8000c3e <__aeabi_i2f+0x2e>
 8000c16:	17c3      	asrs	r3, r0, #31
 8000c18:	18c5      	adds	r5, r0, r3
 8000c1a:	405d      	eors	r5, r3
 8000c1c:	0fc4      	lsrs	r4, r0, #31
 8000c1e:	0028      	movs	r0, r5
 8000c20:	f001 ffca 	bl	8002bb8 <__clzsi2>
 8000c24:	239e      	movs	r3, #158	@ 0x9e
 8000c26:	0001      	movs	r1, r0
 8000c28:	1a1b      	subs	r3, r3, r0
 8000c2a:	2b96      	cmp	r3, #150	@ 0x96
 8000c2c:	dc0f      	bgt.n	8000c4e <__aeabi_i2f+0x3e>
 8000c2e:	2808      	cmp	r0, #8
 8000c30:	d034      	beq.n	8000c9c <__aeabi_i2f+0x8c>
 8000c32:	3908      	subs	r1, #8
 8000c34:	408d      	lsls	r5, r1
 8000c36:	026d      	lsls	r5, r5, #9
 8000c38:	0a6d      	lsrs	r5, r5, #9
 8000c3a:	b2d8      	uxtb	r0, r3
 8000c3c:	e002      	b.n	8000c44 <__aeabi_i2f+0x34>
 8000c3e:	2400      	movs	r4, #0
 8000c40:	2000      	movs	r0, #0
 8000c42:	2500      	movs	r5, #0
 8000c44:	05c0      	lsls	r0, r0, #23
 8000c46:	4328      	orrs	r0, r5
 8000c48:	07e4      	lsls	r4, r4, #31
 8000c4a:	4320      	orrs	r0, r4
 8000c4c:	bd70      	pop	{r4, r5, r6, pc}
 8000c4e:	2b99      	cmp	r3, #153	@ 0x99
 8000c50:	dc16      	bgt.n	8000c80 <__aeabi_i2f+0x70>
 8000c52:	1f42      	subs	r2, r0, #5
 8000c54:	2805      	cmp	r0, #5
 8000c56:	d000      	beq.n	8000c5a <__aeabi_i2f+0x4a>
 8000c58:	4095      	lsls	r5, r2
 8000c5a:	002a      	movs	r2, r5
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <__aeabi_i2f+0x94>)
 8000c5e:	4002      	ands	r2, r0
 8000c60:	076e      	lsls	r6, r5, #29
 8000c62:	d009      	beq.n	8000c78 <__aeabi_i2f+0x68>
 8000c64:	260f      	movs	r6, #15
 8000c66:	4035      	ands	r5, r6
 8000c68:	2d04      	cmp	r5, #4
 8000c6a:	d005      	beq.n	8000c78 <__aeabi_i2f+0x68>
 8000c6c:	3204      	adds	r2, #4
 8000c6e:	0155      	lsls	r5, r2, #5
 8000c70:	d502      	bpl.n	8000c78 <__aeabi_i2f+0x68>
 8000c72:	239f      	movs	r3, #159	@ 0x9f
 8000c74:	4002      	ands	r2, r0
 8000c76:	1a5b      	subs	r3, r3, r1
 8000c78:	0192      	lsls	r2, r2, #6
 8000c7a:	0a55      	lsrs	r5, r2, #9
 8000c7c:	b2d8      	uxtb	r0, r3
 8000c7e:	e7e1      	b.n	8000c44 <__aeabi_i2f+0x34>
 8000c80:	2205      	movs	r2, #5
 8000c82:	1a12      	subs	r2, r2, r0
 8000c84:	0028      	movs	r0, r5
 8000c86:	40d0      	lsrs	r0, r2
 8000c88:	0002      	movs	r2, r0
 8000c8a:	0008      	movs	r0, r1
 8000c8c:	301b      	adds	r0, #27
 8000c8e:	4085      	lsls	r5, r0
 8000c90:	0028      	movs	r0, r5
 8000c92:	1e45      	subs	r5, r0, #1
 8000c94:	41a8      	sbcs	r0, r5
 8000c96:	4302      	orrs	r2, r0
 8000c98:	0015      	movs	r5, r2
 8000c9a:	e7de      	b.n	8000c5a <__aeabi_i2f+0x4a>
 8000c9c:	026d      	lsls	r5, r5, #9
 8000c9e:	2096      	movs	r0, #150	@ 0x96
 8000ca0:	0a6d      	lsrs	r5, r5, #9
 8000ca2:	e7cf      	b.n	8000c44 <__aeabi_i2f+0x34>
 8000ca4:	fbffffff 	.word	0xfbffffff

08000ca8 <__aeabi_dadd>:
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000caa:	4657      	mov	r7, sl
 8000cac:	464e      	mov	r6, r9
 8000cae:	4645      	mov	r5, r8
 8000cb0:	46de      	mov	lr, fp
 8000cb2:	b5e0      	push	{r5, r6, r7, lr}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	9000      	str	r0, [sp, #0]
 8000cb8:	9101      	str	r1, [sp, #4]
 8000cba:	030c      	lsls	r4, r1, #12
 8000cbc:	004f      	lsls	r7, r1, #1
 8000cbe:	0fce      	lsrs	r6, r1, #31
 8000cc0:	0a61      	lsrs	r1, r4, #9
 8000cc2:	9c00      	ldr	r4, [sp, #0]
 8000cc4:	031d      	lsls	r5, r3, #12
 8000cc6:	0f64      	lsrs	r4, r4, #29
 8000cc8:	430c      	orrs	r4, r1
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	9200      	str	r2, [sp, #0]
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	00c8      	lsls	r0, r1, #3
 8000cd2:	0059      	lsls	r1, r3, #1
 8000cd4:	0d4b      	lsrs	r3, r1, #21
 8000cd6:	4699      	mov	r9, r3
 8000cd8:	9a00      	ldr	r2, [sp, #0]
 8000cda:	9b01      	ldr	r3, [sp, #4]
 8000cdc:	0a6d      	lsrs	r5, r5, #9
 8000cde:	0fd9      	lsrs	r1, r3, #31
 8000ce0:	0f53      	lsrs	r3, r2, #29
 8000ce2:	432b      	orrs	r3, r5
 8000ce4:	469a      	mov	sl, r3
 8000ce6:	9b00      	ldr	r3, [sp, #0]
 8000ce8:	0d7f      	lsrs	r7, r7, #21
 8000cea:	00da      	lsls	r2, r3, #3
 8000cec:	4694      	mov	ip, r2
 8000cee:	464a      	mov	r2, r9
 8000cf0:	46b0      	mov	r8, r6
 8000cf2:	1aba      	subs	r2, r7, r2
 8000cf4:	428e      	cmp	r6, r1
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x52>
 8000cf8:	e0b0      	b.n	8000e5c <__aeabi_dadd+0x1b4>
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	dc00      	bgt.n	8000d00 <__aeabi_dadd+0x58>
 8000cfe:	e078      	b.n	8000df2 <__aeabi_dadd+0x14a>
 8000d00:	4649      	mov	r1, r9
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x60>
 8000d06:	e0e9      	b.n	8000edc <__aeabi_dadd+0x234>
 8000d08:	49c9      	ldr	r1, [pc, #804]	@ (8001030 <__aeabi_dadd+0x388>)
 8000d0a:	428f      	cmp	r7, r1
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_dadd+0x68>
 8000d0e:	e195      	b.n	800103c <__aeabi_dadd+0x394>
 8000d10:	2501      	movs	r5, #1
 8000d12:	2a38      	cmp	r2, #56	@ 0x38
 8000d14:	dc16      	bgt.n	8000d44 <__aeabi_dadd+0x9c>
 8000d16:	2180      	movs	r1, #128	@ 0x80
 8000d18:	4653      	mov	r3, sl
 8000d1a:	0409      	lsls	r1, r1, #16
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	469a      	mov	sl, r3
 8000d20:	2a1f      	cmp	r2, #31
 8000d22:	dd00      	ble.n	8000d26 <__aeabi_dadd+0x7e>
 8000d24:	e1e7      	b.n	80010f6 <__aeabi_dadd+0x44e>
 8000d26:	2120      	movs	r1, #32
 8000d28:	4655      	mov	r5, sl
 8000d2a:	1a8b      	subs	r3, r1, r2
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	409d      	lsls	r5, r3
 8000d30:	40d1      	lsrs	r1, r2
 8000d32:	430d      	orrs	r5, r1
 8000d34:	4661      	mov	r1, ip
 8000d36:	4099      	lsls	r1, r3
 8000d38:	1e4b      	subs	r3, r1, #1
 8000d3a:	4199      	sbcs	r1, r3
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	40d3      	lsrs	r3, r2
 8000d40:	430d      	orrs	r5, r1
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	1b45      	subs	r5, r0, r5
 8000d46:	42a8      	cmp	r0, r5
 8000d48:	4180      	sbcs	r0, r0
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	1a24      	subs	r4, r4, r0
 8000d4e:	0223      	lsls	r3, r4, #8
 8000d50:	d400      	bmi.n	8000d54 <__aeabi_dadd+0xac>
 8000d52:	e10f      	b.n	8000f74 <__aeabi_dadd+0x2cc>
 8000d54:	0264      	lsls	r4, r4, #9
 8000d56:	0a64      	lsrs	r4, r4, #9
 8000d58:	2c00      	cmp	r4, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0xb6>
 8000d5c:	e139      	b.n	8000fd2 <__aeabi_dadd+0x32a>
 8000d5e:	0020      	movs	r0, r4
 8000d60:	f001 ff2a 	bl	8002bb8 <__clzsi2>
 8000d64:	0003      	movs	r3, r0
 8000d66:	3b08      	subs	r3, #8
 8000d68:	2120      	movs	r1, #32
 8000d6a:	0028      	movs	r0, r5
 8000d6c:	1aca      	subs	r2, r1, r3
 8000d6e:	40d0      	lsrs	r0, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	0002      	movs	r2, r0
 8000d74:	409d      	lsls	r5, r3
 8000d76:	4322      	orrs	r2, r4
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	dd00      	ble.n	8000d7e <__aeabi_dadd+0xd6>
 8000d7c:	e173      	b.n	8001066 <__aeabi_dadd+0x3be>
 8000d7e:	1bd8      	subs	r0, r3, r7
 8000d80:	3001      	adds	r0, #1
 8000d82:	1a09      	subs	r1, r1, r0
 8000d84:	002c      	movs	r4, r5
 8000d86:	408d      	lsls	r5, r1
 8000d88:	40c4      	lsrs	r4, r0
 8000d8a:	1e6b      	subs	r3, r5, #1
 8000d8c:	419d      	sbcs	r5, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	40c2      	lsrs	r2, r0
 8000d92:	408b      	lsls	r3, r1
 8000d94:	4325      	orrs	r5, r4
 8000d96:	2700      	movs	r7, #0
 8000d98:	0014      	movs	r4, r2
 8000d9a:	431d      	orrs	r5, r3
 8000d9c:	076b      	lsls	r3, r5, #29
 8000d9e:	d009      	beq.n	8000db4 <__aeabi_dadd+0x10c>
 8000da0:	230f      	movs	r3, #15
 8000da2:	402b      	ands	r3, r5
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d005      	beq.n	8000db4 <__aeabi_dadd+0x10c>
 8000da8:	1d2b      	adds	r3, r5, #4
 8000daa:	42ab      	cmp	r3, r5
 8000dac:	41ad      	sbcs	r5, r5
 8000dae:	426d      	negs	r5, r5
 8000db0:	1964      	adds	r4, r4, r5
 8000db2:	001d      	movs	r5, r3
 8000db4:	0223      	lsls	r3, r4, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_dadd+0x112>
 8000db8:	e12d      	b.n	8001016 <__aeabi_dadd+0x36e>
 8000dba:	4a9d      	ldr	r2, [pc, #628]	@ (8001030 <__aeabi_dadd+0x388>)
 8000dbc:	3701      	adds	r7, #1
 8000dbe:	4297      	cmp	r7, r2
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dadd+0x11c>
 8000dc2:	e0d3      	b.n	8000f6c <__aeabi_dadd+0x2c4>
 8000dc4:	4646      	mov	r6, r8
 8000dc6:	499b      	ldr	r1, [pc, #620]	@ (8001034 <__aeabi_dadd+0x38c>)
 8000dc8:	08ed      	lsrs	r5, r5, #3
 8000dca:	4021      	ands	r1, r4
 8000dcc:	074a      	lsls	r2, r1, #29
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	057c      	lsls	r4, r7, #21
 8000dd2:	024d      	lsls	r5, r1, #9
 8000dd4:	0b2d      	lsrs	r5, r5, #12
 8000dd6:	0d64      	lsrs	r4, r4, #21
 8000dd8:	0524      	lsls	r4, r4, #20
 8000dda:	432c      	orrs	r4, r5
 8000ddc:	07f6      	lsls	r6, r6, #31
 8000dde:	4334      	orrs	r4, r6
 8000de0:	0010      	movs	r0, r2
 8000de2:	0021      	movs	r1, r4
 8000de4:	b003      	add	sp, #12
 8000de6:	bcf0      	pop	{r4, r5, r6, r7}
 8000de8:	46bb      	mov	fp, r7
 8000dea:	46b2      	mov	sl, r6
 8000dec:	46a9      	mov	r9, r5
 8000dee:	46a0      	mov	r8, r4
 8000df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x150>
 8000df6:	e084      	b.n	8000f02 <__aeabi_dadd+0x25a>
 8000df8:	464a      	mov	r2, r9
 8000dfa:	1bd2      	subs	r2, r2, r7
 8000dfc:	2f00      	cmp	r7, #0
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_dadd+0x15a>
 8000e00:	e16d      	b.n	80010de <__aeabi_dadd+0x436>
 8000e02:	0025      	movs	r5, r4
 8000e04:	4305      	orrs	r5, r0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x162>
 8000e08:	e127      	b.n	800105a <__aeabi_dadd+0x3b2>
 8000e0a:	1e56      	subs	r6, r2, #1
 8000e0c:	2a01      	cmp	r2, #1
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dadd+0x16a>
 8000e10:	e23b      	b.n	800128a <__aeabi_dadd+0x5e2>
 8000e12:	4d87      	ldr	r5, [pc, #540]	@ (8001030 <__aeabi_dadd+0x388>)
 8000e14:	42aa      	cmp	r2, r5
 8000e16:	d100      	bne.n	8000e1a <__aeabi_dadd+0x172>
 8000e18:	e26a      	b.n	80012f0 <__aeabi_dadd+0x648>
 8000e1a:	2501      	movs	r5, #1
 8000e1c:	2e38      	cmp	r6, #56	@ 0x38
 8000e1e:	dc12      	bgt.n	8000e46 <__aeabi_dadd+0x19e>
 8000e20:	0032      	movs	r2, r6
 8000e22:	2a1f      	cmp	r2, #31
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_dadd+0x180>
 8000e26:	e1f8      	b.n	800121a <__aeabi_dadd+0x572>
 8000e28:	2620      	movs	r6, #32
 8000e2a:	0025      	movs	r5, r4
 8000e2c:	1ab6      	subs	r6, r6, r2
 8000e2e:	0007      	movs	r7, r0
 8000e30:	4653      	mov	r3, sl
 8000e32:	40b0      	lsls	r0, r6
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	40b5      	lsls	r5, r6
 8000e38:	40d7      	lsrs	r7, r2
 8000e3a:	1e46      	subs	r6, r0, #1
 8000e3c:	41b0      	sbcs	r0, r6
 8000e3e:	1b1b      	subs	r3, r3, r4
 8000e40:	469a      	mov	sl, r3
 8000e42:	433d      	orrs	r5, r7
 8000e44:	4305      	orrs	r5, r0
 8000e46:	4662      	mov	r2, ip
 8000e48:	1b55      	subs	r5, r2, r5
 8000e4a:	45ac      	cmp	ip, r5
 8000e4c:	4192      	sbcs	r2, r2
 8000e4e:	4653      	mov	r3, sl
 8000e50:	4252      	negs	r2, r2
 8000e52:	000e      	movs	r6, r1
 8000e54:	464f      	mov	r7, r9
 8000e56:	4688      	mov	r8, r1
 8000e58:	1a9c      	subs	r4, r3, r2
 8000e5a:	e778      	b.n	8000d4e <__aeabi_dadd+0xa6>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	dc00      	bgt.n	8000e62 <__aeabi_dadd+0x1ba>
 8000e60:	e08e      	b.n	8000f80 <__aeabi_dadd+0x2d8>
 8000e62:	4649      	mov	r1, r9
 8000e64:	2900      	cmp	r1, #0
 8000e66:	d175      	bne.n	8000f54 <__aeabi_dadd+0x2ac>
 8000e68:	4661      	mov	r1, ip
 8000e6a:	4653      	mov	r3, sl
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dadd+0x1ca>
 8000e70:	e0f6      	b.n	8001060 <__aeabi_dadd+0x3b8>
 8000e72:	1e51      	subs	r1, r2, #1
 8000e74:	2a01      	cmp	r2, #1
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x1d2>
 8000e78:	e191      	b.n	800119e <__aeabi_dadd+0x4f6>
 8000e7a:	4d6d      	ldr	r5, [pc, #436]	@ (8001030 <__aeabi_dadd+0x388>)
 8000e7c:	42aa      	cmp	r2, r5
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0x1da>
 8000e80:	e0dc      	b.n	800103c <__aeabi_dadd+0x394>
 8000e82:	2501      	movs	r5, #1
 8000e84:	2938      	cmp	r1, #56	@ 0x38
 8000e86:	dc14      	bgt.n	8000eb2 <__aeabi_dadd+0x20a>
 8000e88:	000a      	movs	r2, r1
 8000e8a:	2a1f      	cmp	r2, #31
 8000e8c:	dd00      	ble.n	8000e90 <__aeabi_dadd+0x1e8>
 8000e8e:	e1a2      	b.n	80011d6 <__aeabi_dadd+0x52e>
 8000e90:	2120      	movs	r1, #32
 8000e92:	4653      	mov	r3, sl
 8000e94:	1a89      	subs	r1, r1, r2
 8000e96:	408b      	lsls	r3, r1
 8000e98:	001d      	movs	r5, r3
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	40d3      	lsrs	r3, r2
 8000e9e:	431d      	orrs	r5, r3
 8000ea0:	4663      	mov	r3, ip
 8000ea2:	408b      	lsls	r3, r1
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	1e4b      	subs	r3, r1, #1
 8000ea8:	4199      	sbcs	r1, r3
 8000eaa:	4653      	mov	r3, sl
 8000eac:	40d3      	lsrs	r3, r2
 8000eae:	430d      	orrs	r5, r1
 8000eb0:	18e4      	adds	r4, r4, r3
 8000eb2:	182d      	adds	r5, r5, r0
 8000eb4:	4285      	cmp	r5, r0
 8000eb6:	4180      	sbcs	r0, r0
 8000eb8:	4240      	negs	r0, r0
 8000eba:	1824      	adds	r4, r4, r0
 8000ebc:	0223      	lsls	r3, r4, #8
 8000ebe:	d559      	bpl.n	8000f74 <__aeabi_dadd+0x2cc>
 8000ec0:	4b5b      	ldr	r3, [pc, #364]	@ (8001030 <__aeabi_dadd+0x388>)
 8000ec2:	3701      	adds	r7, #1
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	d051      	beq.n	8000f6c <__aeabi_dadd+0x2c4>
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4b5a      	ldr	r3, [pc, #360]	@ (8001034 <__aeabi_dadd+0x38c>)
 8000ecc:	086a      	lsrs	r2, r5, #1
 8000ece:	401c      	ands	r4, r3
 8000ed0:	4029      	ands	r1, r5
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	07e5      	lsls	r5, r4, #31
 8000ed6:	4315      	orrs	r5, r2
 8000ed8:	0864      	lsrs	r4, r4, #1
 8000eda:	e75f      	b.n	8000d9c <__aeabi_dadd+0xf4>
 8000edc:	4661      	mov	r1, ip
 8000ede:	4653      	mov	r3, sl
 8000ee0:	4319      	orrs	r1, r3
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x23e>
 8000ee4:	e0bc      	b.n	8001060 <__aeabi_dadd+0x3b8>
 8000ee6:	1e51      	subs	r1, r2, #1
 8000ee8:	2a01      	cmp	r2, #1
 8000eea:	d100      	bne.n	8000eee <__aeabi_dadd+0x246>
 8000eec:	e164      	b.n	80011b8 <__aeabi_dadd+0x510>
 8000eee:	4d50      	ldr	r5, [pc, #320]	@ (8001030 <__aeabi_dadd+0x388>)
 8000ef0:	42aa      	cmp	r2, r5
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x24e>
 8000ef4:	e16a      	b.n	80011cc <__aeabi_dadd+0x524>
 8000ef6:	2501      	movs	r5, #1
 8000ef8:	2938      	cmp	r1, #56	@ 0x38
 8000efa:	dd00      	ble.n	8000efe <__aeabi_dadd+0x256>
 8000efc:	e722      	b.n	8000d44 <__aeabi_dadd+0x9c>
 8000efe:	000a      	movs	r2, r1
 8000f00:	e70e      	b.n	8000d20 <__aeabi_dadd+0x78>
 8000f02:	4a4d      	ldr	r2, [pc, #308]	@ (8001038 <__aeabi_dadd+0x390>)
 8000f04:	1c7d      	adds	r5, r7, #1
 8000f06:	4215      	tst	r5, r2
 8000f08:	d000      	beq.n	8000f0c <__aeabi_dadd+0x264>
 8000f0a:	e0d0      	b.n	80010ae <__aeabi_dadd+0x406>
 8000f0c:	0025      	movs	r5, r4
 8000f0e:	4662      	mov	r2, ip
 8000f10:	4653      	mov	r3, sl
 8000f12:	4305      	orrs	r5, r0
 8000f14:	431a      	orrs	r2, r3
 8000f16:	2f00      	cmp	r7, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_dadd+0x274>
 8000f1a:	e137      	b.n	800118c <__aeabi_dadd+0x4e4>
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x27a>
 8000f20:	e1a8      	b.n	8001274 <__aeabi_dadd+0x5cc>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d100      	bne.n	8000f28 <__aeabi_dadd+0x280>
 8000f26:	e16a      	b.n	80011fe <__aeabi_dadd+0x556>
 8000f28:	4663      	mov	r3, ip
 8000f2a:	1ac5      	subs	r5, r0, r3
 8000f2c:	4653      	mov	r3, sl
 8000f2e:	1ae2      	subs	r2, r4, r3
 8000f30:	42a8      	cmp	r0, r5
 8000f32:	419b      	sbcs	r3, r3
 8000f34:	425b      	negs	r3, r3
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	021a      	lsls	r2, r3, #8
 8000f3a:	d400      	bmi.n	8000f3e <__aeabi_dadd+0x296>
 8000f3c:	e203      	b.n	8001346 <__aeabi_dadd+0x69e>
 8000f3e:	4663      	mov	r3, ip
 8000f40:	1a1d      	subs	r5, r3, r0
 8000f42:	45ac      	cmp	ip, r5
 8000f44:	4192      	sbcs	r2, r2
 8000f46:	4653      	mov	r3, sl
 8000f48:	4252      	negs	r2, r2
 8000f4a:	1b1c      	subs	r4, r3, r4
 8000f4c:	000e      	movs	r6, r1
 8000f4e:	4688      	mov	r8, r1
 8000f50:	1aa4      	subs	r4, r4, r2
 8000f52:	e723      	b.n	8000d9c <__aeabi_dadd+0xf4>
 8000f54:	4936      	ldr	r1, [pc, #216]	@ (8001030 <__aeabi_dadd+0x388>)
 8000f56:	428f      	cmp	r7, r1
 8000f58:	d070      	beq.n	800103c <__aeabi_dadd+0x394>
 8000f5a:	2501      	movs	r5, #1
 8000f5c:	2a38      	cmp	r2, #56	@ 0x38
 8000f5e:	dca8      	bgt.n	8000eb2 <__aeabi_dadd+0x20a>
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	4653      	mov	r3, sl
 8000f64:	0409      	lsls	r1, r1, #16
 8000f66:	430b      	orrs	r3, r1
 8000f68:	469a      	mov	sl, r3
 8000f6a:	e78e      	b.n	8000e8a <__aeabi_dadd+0x1e2>
 8000f6c:	003c      	movs	r4, r7
 8000f6e:	2500      	movs	r5, #0
 8000f70:	2200      	movs	r2, #0
 8000f72:	e731      	b.n	8000dd8 <__aeabi_dadd+0x130>
 8000f74:	2307      	movs	r3, #7
 8000f76:	402b      	ands	r3, r5
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d000      	beq.n	8000f7e <__aeabi_dadd+0x2d6>
 8000f7c:	e710      	b.n	8000da0 <__aeabi_dadd+0xf8>
 8000f7e:	e093      	b.n	80010a8 <__aeabi_dadd+0x400>
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	d074      	beq.n	800106e <__aeabi_dadd+0x3c6>
 8000f84:	464a      	mov	r2, r9
 8000f86:	1bd2      	subs	r2, r2, r7
 8000f88:	2f00      	cmp	r7, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0x2e6>
 8000f8c:	e0c7      	b.n	800111e <__aeabi_dadd+0x476>
 8000f8e:	4928      	ldr	r1, [pc, #160]	@ (8001030 <__aeabi_dadd+0x388>)
 8000f90:	4589      	cmp	r9, r1
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x2ee>
 8000f94:	e185      	b.n	80012a2 <__aeabi_dadd+0x5fa>
 8000f96:	2501      	movs	r5, #1
 8000f98:	2a38      	cmp	r2, #56	@ 0x38
 8000f9a:	dc12      	bgt.n	8000fc2 <__aeabi_dadd+0x31a>
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0409      	lsls	r1, r1, #16
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2a1f      	cmp	r2, #31
 8000fa4:	dd00      	ble.n	8000fa8 <__aeabi_dadd+0x300>
 8000fa6:	e1ab      	b.n	8001300 <__aeabi_dadd+0x658>
 8000fa8:	2120      	movs	r1, #32
 8000faa:	0025      	movs	r5, r4
 8000fac:	1a89      	subs	r1, r1, r2
 8000fae:	0007      	movs	r7, r0
 8000fb0:	4088      	lsls	r0, r1
 8000fb2:	408d      	lsls	r5, r1
 8000fb4:	40d7      	lsrs	r7, r2
 8000fb6:	1e41      	subs	r1, r0, #1
 8000fb8:	4188      	sbcs	r0, r1
 8000fba:	40d4      	lsrs	r4, r2
 8000fbc:	433d      	orrs	r5, r7
 8000fbe:	4305      	orrs	r5, r0
 8000fc0:	44a2      	add	sl, r4
 8000fc2:	4465      	add	r5, ip
 8000fc4:	4565      	cmp	r5, ip
 8000fc6:	4192      	sbcs	r2, r2
 8000fc8:	4252      	negs	r2, r2
 8000fca:	4452      	add	r2, sl
 8000fcc:	0014      	movs	r4, r2
 8000fce:	464f      	mov	r7, r9
 8000fd0:	e774      	b.n	8000ebc <__aeabi_dadd+0x214>
 8000fd2:	0028      	movs	r0, r5
 8000fd4:	f001 fdf0 	bl	8002bb8 <__clzsi2>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	3318      	adds	r3, #24
 8000fdc:	2b1f      	cmp	r3, #31
 8000fde:	dc00      	bgt.n	8000fe2 <__aeabi_dadd+0x33a>
 8000fe0:	e6c2      	b.n	8000d68 <__aeabi_dadd+0xc0>
 8000fe2:	002a      	movs	r2, r5
 8000fe4:	3808      	subs	r0, #8
 8000fe6:	4082      	lsls	r2, r0
 8000fe8:	429f      	cmp	r7, r3
 8000fea:	dd00      	ble.n	8000fee <__aeabi_dadd+0x346>
 8000fec:	e0a9      	b.n	8001142 <__aeabi_dadd+0x49a>
 8000fee:	1bdb      	subs	r3, r3, r7
 8000ff0:	1c58      	adds	r0, r3, #1
 8000ff2:	281f      	cmp	r0, #31
 8000ff4:	dc00      	bgt.n	8000ff8 <__aeabi_dadd+0x350>
 8000ff6:	e1ac      	b.n	8001352 <__aeabi_dadd+0x6aa>
 8000ff8:	0015      	movs	r5, r2
 8000ffa:	3b1f      	subs	r3, #31
 8000ffc:	40dd      	lsrs	r5, r3
 8000ffe:	2820      	cmp	r0, #32
 8001000:	d005      	beq.n	800100e <__aeabi_dadd+0x366>
 8001002:	2340      	movs	r3, #64	@ 0x40
 8001004:	1a1b      	subs	r3, r3, r0
 8001006:	409a      	lsls	r2, r3
 8001008:	1e53      	subs	r3, r2, #1
 800100a:	419a      	sbcs	r2, r3
 800100c:	4315      	orrs	r5, r2
 800100e:	2307      	movs	r3, #7
 8001010:	2700      	movs	r7, #0
 8001012:	402b      	ands	r3, r5
 8001014:	e7b0      	b.n	8000f78 <__aeabi_dadd+0x2d0>
 8001016:	08ed      	lsrs	r5, r5, #3
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <__aeabi_dadd+0x388>)
 800101a:	0762      	lsls	r2, r4, #29
 800101c:	432a      	orrs	r2, r5
 800101e:	08e4      	lsrs	r4, r4, #3
 8001020:	429f      	cmp	r7, r3
 8001022:	d00f      	beq.n	8001044 <__aeabi_dadd+0x39c>
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	0b25      	lsrs	r5, r4, #12
 8001028:	057c      	lsls	r4, r7, #21
 800102a:	0d64      	lsrs	r4, r4, #21
 800102c:	e6d4      	b.n	8000dd8 <__aeabi_dadd+0x130>
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	000007ff 	.word	0x000007ff
 8001034:	ff7fffff 	.word	0xff7fffff
 8001038:	000007fe 	.word	0x000007fe
 800103c:	08c0      	lsrs	r0, r0, #3
 800103e:	0762      	lsls	r2, r4, #29
 8001040:	4302      	orrs	r2, r0
 8001042:	08e4      	lsrs	r4, r4, #3
 8001044:	0013      	movs	r3, r2
 8001046:	4323      	orrs	r3, r4
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x3a4>
 800104a:	e186      	b.n	800135a <__aeabi_dadd+0x6b2>
 800104c:	2580      	movs	r5, #128	@ 0x80
 800104e:	032d      	lsls	r5, r5, #12
 8001050:	4325      	orrs	r5, r4
 8001052:	032d      	lsls	r5, r5, #12
 8001054:	4cc3      	ldr	r4, [pc, #780]	@ (8001364 <__aeabi_dadd+0x6bc>)
 8001056:	0b2d      	lsrs	r5, r5, #12
 8001058:	e6be      	b.n	8000dd8 <__aeabi_dadd+0x130>
 800105a:	4660      	mov	r0, ip
 800105c:	4654      	mov	r4, sl
 800105e:	000e      	movs	r6, r1
 8001060:	0017      	movs	r7, r2
 8001062:	08c5      	lsrs	r5, r0, #3
 8001064:	e7d8      	b.n	8001018 <__aeabi_dadd+0x370>
 8001066:	4cc0      	ldr	r4, [pc, #768]	@ (8001368 <__aeabi_dadd+0x6c0>)
 8001068:	1aff      	subs	r7, r7, r3
 800106a:	4014      	ands	r4, r2
 800106c:	e696      	b.n	8000d9c <__aeabi_dadd+0xf4>
 800106e:	4abf      	ldr	r2, [pc, #764]	@ (800136c <__aeabi_dadd+0x6c4>)
 8001070:	1c79      	adds	r1, r7, #1
 8001072:	4211      	tst	r1, r2
 8001074:	d16b      	bne.n	800114e <__aeabi_dadd+0x4a6>
 8001076:	0022      	movs	r2, r4
 8001078:	4302      	orrs	r2, r0
 800107a:	2f00      	cmp	r7, #0
 800107c:	d000      	beq.n	8001080 <__aeabi_dadd+0x3d8>
 800107e:	e0db      	b.n	8001238 <__aeabi_dadd+0x590>
 8001080:	2a00      	cmp	r2, #0
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0x3de>
 8001084:	e12d      	b.n	80012e2 <__aeabi_dadd+0x63a>
 8001086:	4662      	mov	r2, ip
 8001088:	4653      	mov	r3, sl
 800108a:	431a      	orrs	r2, r3
 800108c:	d100      	bne.n	8001090 <__aeabi_dadd+0x3e8>
 800108e:	e0b6      	b.n	80011fe <__aeabi_dadd+0x556>
 8001090:	4663      	mov	r3, ip
 8001092:	18c5      	adds	r5, r0, r3
 8001094:	4285      	cmp	r5, r0
 8001096:	4180      	sbcs	r0, r0
 8001098:	4454      	add	r4, sl
 800109a:	4240      	negs	r0, r0
 800109c:	1824      	adds	r4, r4, r0
 800109e:	0223      	lsls	r3, r4, #8
 80010a0:	d502      	bpl.n	80010a8 <__aeabi_dadd+0x400>
 80010a2:	000f      	movs	r7, r1
 80010a4:	4bb0      	ldr	r3, [pc, #704]	@ (8001368 <__aeabi_dadd+0x6c0>)
 80010a6:	401c      	ands	r4, r3
 80010a8:	003a      	movs	r2, r7
 80010aa:	0028      	movs	r0, r5
 80010ac:	e7d8      	b.n	8001060 <__aeabi_dadd+0x3b8>
 80010ae:	4662      	mov	r2, ip
 80010b0:	1a85      	subs	r5, r0, r2
 80010b2:	42a8      	cmp	r0, r5
 80010b4:	4192      	sbcs	r2, r2
 80010b6:	4653      	mov	r3, sl
 80010b8:	4252      	negs	r2, r2
 80010ba:	4691      	mov	r9, r2
 80010bc:	1ae3      	subs	r3, r4, r3
 80010be:	001a      	movs	r2, r3
 80010c0:	464b      	mov	r3, r9
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	4691      	mov	r9, r2
 80010c8:	021a      	lsls	r2, r3, #8
 80010ca:	d454      	bmi.n	8001176 <__aeabi_dadd+0x4ce>
 80010cc:	464a      	mov	r2, r9
 80010ce:	464c      	mov	r4, r9
 80010d0:	432a      	orrs	r2, r5
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dadd+0x42e>
 80010d4:	e640      	b.n	8000d58 <__aeabi_dadd+0xb0>
 80010d6:	2600      	movs	r6, #0
 80010d8:	2400      	movs	r4, #0
 80010da:	2500      	movs	r5, #0
 80010dc:	e67c      	b.n	8000dd8 <__aeabi_dadd+0x130>
 80010de:	4da1      	ldr	r5, [pc, #644]	@ (8001364 <__aeabi_dadd+0x6bc>)
 80010e0:	45a9      	cmp	r9, r5
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dadd+0x43e>
 80010e4:	e090      	b.n	8001208 <__aeabi_dadd+0x560>
 80010e6:	2501      	movs	r5, #1
 80010e8:	2a38      	cmp	r2, #56	@ 0x38
 80010ea:	dd00      	ble.n	80010ee <__aeabi_dadd+0x446>
 80010ec:	e6ab      	b.n	8000e46 <__aeabi_dadd+0x19e>
 80010ee:	2580      	movs	r5, #128	@ 0x80
 80010f0:	042d      	lsls	r5, r5, #16
 80010f2:	432c      	orrs	r4, r5
 80010f4:	e695      	b.n	8000e22 <__aeabi_dadd+0x17a>
 80010f6:	0011      	movs	r1, r2
 80010f8:	4655      	mov	r5, sl
 80010fa:	3920      	subs	r1, #32
 80010fc:	40cd      	lsrs	r5, r1
 80010fe:	46a9      	mov	r9, r5
 8001100:	2a20      	cmp	r2, #32
 8001102:	d006      	beq.n	8001112 <__aeabi_dadd+0x46a>
 8001104:	2140      	movs	r1, #64	@ 0x40
 8001106:	4653      	mov	r3, sl
 8001108:	1a8a      	subs	r2, r1, r2
 800110a:	4093      	lsls	r3, r2
 800110c:	4662      	mov	r2, ip
 800110e:	431a      	orrs	r2, r3
 8001110:	4694      	mov	ip, r2
 8001112:	4665      	mov	r5, ip
 8001114:	1e6b      	subs	r3, r5, #1
 8001116:	419d      	sbcs	r5, r3
 8001118:	464b      	mov	r3, r9
 800111a:	431d      	orrs	r5, r3
 800111c:	e612      	b.n	8000d44 <__aeabi_dadd+0x9c>
 800111e:	0021      	movs	r1, r4
 8001120:	4301      	orrs	r1, r0
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x47e>
 8001124:	e0c4      	b.n	80012b0 <__aeabi_dadd+0x608>
 8001126:	1e51      	subs	r1, r2, #1
 8001128:	2a01      	cmp	r2, #1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x486>
 800112c:	e0fb      	b.n	8001326 <__aeabi_dadd+0x67e>
 800112e:	4d8d      	ldr	r5, [pc, #564]	@ (8001364 <__aeabi_dadd+0x6bc>)
 8001130:	42aa      	cmp	r2, r5
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x48e>
 8001134:	e0b5      	b.n	80012a2 <__aeabi_dadd+0x5fa>
 8001136:	2501      	movs	r5, #1
 8001138:	2938      	cmp	r1, #56	@ 0x38
 800113a:	dd00      	ble.n	800113e <__aeabi_dadd+0x496>
 800113c:	e741      	b.n	8000fc2 <__aeabi_dadd+0x31a>
 800113e:	000a      	movs	r2, r1
 8001140:	e72f      	b.n	8000fa2 <__aeabi_dadd+0x2fa>
 8001142:	4c89      	ldr	r4, [pc, #548]	@ (8001368 <__aeabi_dadd+0x6c0>)
 8001144:	1aff      	subs	r7, r7, r3
 8001146:	4014      	ands	r4, r2
 8001148:	0762      	lsls	r2, r4, #29
 800114a:	08e4      	lsrs	r4, r4, #3
 800114c:	e76a      	b.n	8001024 <__aeabi_dadd+0x37c>
 800114e:	4a85      	ldr	r2, [pc, #532]	@ (8001364 <__aeabi_dadd+0x6bc>)
 8001150:	4291      	cmp	r1, r2
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x4ae>
 8001154:	e0e3      	b.n	800131e <__aeabi_dadd+0x676>
 8001156:	4663      	mov	r3, ip
 8001158:	18c2      	adds	r2, r0, r3
 800115a:	4282      	cmp	r2, r0
 800115c:	4180      	sbcs	r0, r0
 800115e:	0023      	movs	r3, r4
 8001160:	4240      	negs	r0, r0
 8001162:	4453      	add	r3, sl
 8001164:	181b      	adds	r3, r3, r0
 8001166:	07dd      	lsls	r5, r3, #31
 8001168:	085c      	lsrs	r4, r3, #1
 800116a:	2307      	movs	r3, #7
 800116c:	0852      	lsrs	r2, r2, #1
 800116e:	4315      	orrs	r5, r2
 8001170:	000f      	movs	r7, r1
 8001172:	402b      	ands	r3, r5
 8001174:	e700      	b.n	8000f78 <__aeabi_dadd+0x2d0>
 8001176:	4663      	mov	r3, ip
 8001178:	1a1d      	subs	r5, r3, r0
 800117a:	45ac      	cmp	ip, r5
 800117c:	4192      	sbcs	r2, r2
 800117e:	4653      	mov	r3, sl
 8001180:	4252      	negs	r2, r2
 8001182:	1b1c      	subs	r4, r3, r4
 8001184:	000e      	movs	r6, r1
 8001186:	4688      	mov	r8, r1
 8001188:	1aa4      	subs	r4, r4, r2
 800118a:	e5e5      	b.n	8000d58 <__aeabi_dadd+0xb0>
 800118c:	2d00      	cmp	r5, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x4ea>
 8001190:	e091      	b.n	80012b6 <__aeabi_dadd+0x60e>
 8001192:	2a00      	cmp	r2, #0
 8001194:	d138      	bne.n	8001208 <__aeabi_dadd+0x560>
 8001196:	2480      	movs	r4, #128	@ 0x80
 8001198:	2600      	movs	r6, #0
 800119a:	0324      	lsls	r4, r4, #12
 800119c:	e756      	b.n	800104c <__aeabi_dadd+0x3a4>
 800119e:	4663      	mov	r3, ip
 80011a0:	18c5      	adds	r5, r0, r3
 80011a2:	4285      	cmp	r5, r0
 80011a4:	4180      	sbcs	r0, r0
 80011a6:	4454      	add	r4, sl
 80011a8:	4240      	negs	r0, r0
 80011aa:	1824      	adds	r4, r4, r0
 80011ac:	2701      	movs	r7, #1
 80011ae:	0223      	lsls	r3, r4, #8
 80011b0:	d400      	bmi.n	80011b4 <__aeabi_dadd+0x50c>
 80011b2:	e6df      	b.n	8000f74 <__aeabi_dadd+0x2cc>
 80011b4:	2702      	movs	r7, #2
 80011b6:	e687      	b.n	8000ec8 <__aeabi_dadd+0x220>
 80011b8:	4663      	mov	r3, ip
 80011ba:	1ac5      	subs	r5, r0, r3
 80011bc:	42a8      	cmp	r0, r5
 80011be:	4180      	sbcs	r0, r0
 80011c0:	4653      	mov	r3, sl
 80011c2:	4240      	negs	r0, r0
 80011c4:	1ae4      	subs	r4, r4, r3
 80011c6:	2701      	movs	r7, #1
 80011c8:	1a24      	subs	r4, r4, r0
 80011ca:	e5c0      	b.n	8000d4e <__aeabi_dadd+0xa6>
 80011cc:	0762      	lsls	r2, r4, #29
 80011ce:	08c0      	lsrs	r0, r0, #3
 80011d0:	4302      	orrs	r2, r0
 80011d2:	08e4      	lsrs	r4, r4, #3
 80011d4:	e736      	b.n	8001044 <__aeabi_dadd+0x39c>
 80011d6:	0011      	movs	r1, r2
 80011d8:	4653      	mov	r3, sl
 80011da:	3920      	subs	r1, #32
 80011dc:	40cb      	lsrs	r3, r1
 80011de:	4699      	mov	r9, r3
 80011e0:	2a20      	cmp	r2, #32
 80011e2:	d006      	beq.n	80011f2 <__aeabi_dadd+0x54a>
 80011e4:	2140      	movs	r1, #64	@ 0x40
 80011e6:	4653      	mov	r3, sl
 80011e8:	1a8a      	subs	r2, r1, r2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	4662      	mov	r2, ip
 80011ee:	431a      	orrs	r2, r3
 80011f0:	4694      	mov	ip, r2
 80011f2:	4665      	mov	r5, ip
 80011f4:	1e6b      	subs	r3, r5, #1
 80011f6:	419d      	sbcs	r5, r3
 80011f8:	464b      	mov	r3, r9
 80011fa:	431d      	orrs	r5, r3
 80011fc:	e659      	b.n	8000eb2 <__aeabi_dadd+0x20a>
 80011fe:	0762      	lsls	r2, r4, #29
 8001200:	08c0      	lsrs	r0, r0, #3
 8001202:	4302      	orrs	r2, r0
 8001204:	08e4      	lsrs	r4, r4, #3
 8001206:	e70d      	b.n	8001024 <__aeabi_dadd+0x37c>
 8001208:	4653      	mov	r3, sl
 800120a:	075a      	lsls	r2, r3, #29
 800120c:	4663      	mov	r3, ip
 800120e:	08d8      	lsrs	r0, r3, #3
 8001210:	4653      	mov	r3, sl
 8001212:	000e      	movs	r6, r1
 8001214:	4302      	orrs	r2, r0
 8001216:	08dc      	lsrs	r4, r3, #3
 8001218:	e714      	b.n	8001044 <__aeabi_dadd+0x39c>
 800121a:	0015      	movs	r5, r2
 800121c:	0026      	movs	r6, r4
 800121e:	3d20      	subs	r5, #32
 8001220:	40ee      	lsrs	r6, r5
 8001222:	2a20      	cmp	r2, #32
 8001224:	d003      	beq.n	800122e <__aeabi_dadd+0x586>
 8001226:	2540      	movs	r5, #64	@ 0x40
 8001228:	1aaa      	subs	r2, r5, r2
 800122a:	4094      	lsls	r4, r2
 800122c:	4320      	orrs	r0, r4
 800122e:	1e42      	subs	r2, r0, #1
 8001230:	4190      	sbcs	r0, r2
 8001232:	0005      	movs	r5, r0
 8001234:	4335      	orrs	r5, r6
 8001236:	e606      	b.n	8000e46 <__aeabi_dadd+0x19e>
 8001238:	2a00      	cmp	r2, #0
 800123a:	d07c      	beq.n	8001336 <__aeabi_dadd+0x68e>
 800123c:	4662      	mov	r2, ip
 800123e:	4653      	mov	r3, sl
 8001240:	08c0      	lsrs	r0, r0, #3
 8001242:	431a      	orrs	r2, r3
 8001244:	d100      	bne.n	8001248 <__aeabi_dadd+0x5a0>
 8001246:	e6fa      	b.n	800103e <__aeabi_dadd+0x396>
 8001248:	0762      	lsls	r2, r4, #29
 800124a:	4310      	orrs	r0, r2
 800124c:	2280      	movs	r2, #128	@ 0x80
 800124e:	08e4      	lsrs	r4, r4, #3
 8001250:	0312      	lsls	r2, r2, #12
 8001252:	4214      	tst	r4, r2
 8001254:	d008      	beq.n	8001268 <__aeabi_dadd+0x5c0>
 8001256:	08d9      	lsrs	r1, r3, #3
 8001258:	4211      	tst	r1, r2
 800125a:	d105      	bne.n	8001268 <__aeabi_dadd+0x5c0>
 800125c:	4663      	mov	r3, ip
 800125e:	08d8      	lsrs	r0, r3, #3
 8001260:	4653      	mov	r3, sl
 8001262:	000c      	movs	r4, r1
 8001264:	075b      	lsls	r3, r3, #29
 8001266:	4318      	orrs	r0, r3
 8001268:	0f42      	lsrs	r2, r0, #29
 800126a:	00c0      	lsls	r0, r0, #3
 800126c:	08c0      	lsrs	r0, r0, #3
 800126e:	0752      	lsls	r2, r2, #29
 8001270:	4302      	orrs	r2, r0
 8001272:	e6e7      	b.n	8001044 <__aeabi_dadd+0x39c>
 8001274:	2a00      	cmp	r2, #0
 8001276:	d100      	bne.n	800127a <__aeabi_dadd+0x5d2>
 8001278:	e72d      	b.n	80010d6 <__aeabi_dadd+0x42e>
 800127a:	4663      	mov	r3, ip
 800127c:	08d8      	lsrs	r0, r3, #3
 800127e:	4653      	mov	r3, sl
 8001280:	075a      	lsls	r2, r3, #29
 8001282:	000e      	movs	r6, r1
 8001284:	4302      	orrs	r2, r0
 8001286:	08dc      	lsrs	r4, r3, #3
 8001288:	e6cc      	b.n	8001024 <__aeabi_dadd+0x37c>
 800128a:	4663      	mov	r3, ip
 800128c:	1a1d      	subs	r5, r3, r0
 800128e:	45ac      	cmp	ip, r5
 8001290:	4192      	sbcs	r2, r2
 8001292:	4653      	mov	r3, sl
 8001294:	4252      	negs	r2, r2
 8001296:	1b1c      	subs	r4, r3, r4
 8001298:	000e      	movs	r6, r1
 800129a:	4688      	mov	r8, r1
 800129c:	1aa4      	subs	r4, r4, r2
 800129e:	3701      	adds	r7, #1
 80012a0:	e555      	b.n	8000d4e <__aeabi_dadd+0xa6>
 80012a2:	4663      	mov	r3, ip
 80012a4:	08d9      	lsrs	r1, r3, #3
 80012a6:	4653      	mov	r3, sl
 80012a8:	075a      	lsls	r2, r3, #29
 80012aa:	430a      	orrs	r2, r1
 80012ac:	08dc      	lsrs	r4, r3, #3
 80012ae:	e6c9      	b.n	8001044 <__aeabi_dadd+0x39c>
 80012b0:	4660      	mov	r0, ip
 80012b2:	4654      	mov	r4, sl
 80012b4:	e6d4      	b.n	8001060 <__aeabi_dadd+0x3b8>
 80012b6:	08c0      	lsrs	r0, r0, #3
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_dadd+0x616>
 80012bc:	e6bf      	b.n	800103e <__aeabi_dadd+0x396>
 80012be:	0762      	lsls	r2, r4, #29
 80012c0:	4310      	orrs	r0, r2
 80012c2:	2280      	movs	r2, #128	@ 0x80
 80012c4:	08e4      	lsrs	r4, r4, #3
 80012c6:	0312      	lsls	r2, r2, #12
 80012c8:	4214      	tst	r4, r2
 80012ca:	d0cd      	beq.n	8001268 <__aeabi_dadd+0x5c0>
 80012cc:	08dd      	lsrs	r5, r3, #3
 80012ce:	4215      	tst	r5, r2
 80012d0:	d1ca      	bne.n	8001268 <__aeabi_dadd+0x5c0>
 80012d2:	4663      	mov	r3, ip
 80012d4:	08d8      	lsrs	r0, r3, #3
 80012d6:	4653      	mov	r3, sl
 80012d8:	075b      	lsls	r3, r3, #29
 80012da:	000e      	movs	r6, r1
 80012dc:	002c      	movs	r4, r5
 80012de:	4318      	orrs	r0, r3
 80012e0:	e7c2      	b.n	8001268 <__aeabi_dadd+0x5c0>
 80012e2:	4663      	mov	r3, ip
 80012e4:	08d9      	lsrs	r1, r3, #3
 80012e6:	4653      	mov	r3, sl
 80012e8:	075a      	lsls	r2, r3, #29
 80012ea:	430a      	orrs	r2, r1
 80012ec:	08dc      	lsrs	r4, r3, #3
 80012ee:	e699      	b.n	8001024 <__aeabi_dadd+0x37c>
 80012f0:	4663      	mov	r3, ip
 80012f2:	08d8      	lsrs	r0, r3, #3
 80012f4:	4653      	mov	r3, sl
 80012f6:	075a      	lsls	r2, r3, #29
 80012f8:	000e      	movs	r6, r1
 80012fa:	4302      	orrs	r2, r0
 80012fc:	08dc      	lsrs	r4, r3, #3
 80012fe:	e6a1      	b.n	8001044 <__aeabi_dadd+0x39c>
 8001300:	0011      	movs	r1, r2
 8001302:	0027      	movs	r7, r4
 8001304:	3920      	subs	r1, #32
 8001306:	40cf      	lsrs	r7, r1
 8001308:	2a20      	cmp	r2, #32
 800130a:	d003      	beq.n	8001314 <__aeabi_dadd+0x66c>
 800130c:	2140      	movs	r1, #64	@ 0x40
 800130e:	1a8a      	subs	r2, r1, r2
 8001310:	4094      	lsls	r4, r2
 8001312:	4320      	orrs	r0, r4
 8001314:	1e42      	subs	r2, r0, #1
 8001316:	4190      	sbcs	r0, r2
 8001318:	0005      	movs	r5, r0
 800131a:	433d      	orrs	r5, r7
 800131c:	e651      	b.n	8000fc2 <__aeabi_dadd+0x31a>
 800131e:	000c      	movs	r4, r1
 8001320:	2500      	movs	r5, #0
 8001322:	2200      	movs	r2, #0
 8001324:	e558      	b.n	8000dd8 <__aeabi_dadd+0x130>
 8001326:	4460      	add	r0, ip
 8001328:	4560      	cmp	r0, ip
 800132a:	4192      	sbcs	r2, r2
 800132c:	4454      	add	r4, sl
 800132e:	4252      	negs	r2, r2
 8001330:	0005      	movs	r5, r0
 8001332:	18a4      	adds	r4, r4, r2
 8001334:	e73a      	b.n	80011ac <__aeabi_dadd+0x504>
 8001336:	4653      	mov	r3, sl
 8001338:	075a      	lsls	r2, r3, #29
 800133a:	4663      	mov	r3, ip
 800133c:	08d9      	lsrs	r1, r3, #3
 800133e:	4653      	mov	r3, sl
 8001340:	430a      	orrs	r2, r1
 8001342:	08dc      	lsrs	r4, r3, #3
 8001344:	e67e      	b.n	8001044 <__aeabi_dadd+0x39c>
 8001346:	001a      	movs	r2, r3
 8001348:	001c      	movs	r4, r3
 800134a:	432a      	orrs	r2, r5
 800134c:	d000      	beq.n	8001350 <__aeabi_dadd+0x6a8>
 800134e:	e6ab      	b.n	80010a8 <__aeabi_dadd+0x400>
 8001350:	e6c1      	b.n	80010d6 <__aeabi_dadd+0x42e>
 8001352:	2120      	movs	r1, #32
 8001354:	2500      	movs	r5, #0
 8001356:	1a09      	subs	r1, r1, r0
 8001358:	e519      	b.n	8000d8e <__aeabi_dadd+0xe6>
 800135a:	2200      	movs	r2, #0
 800135c:	2500      	movs	r5, #0
 800135e:	4c01      	ldr	r4, [pc, #4]	@ (8001364 <__aeabi_dadd+0x6bc>)
 8001360:	e53a      	b.n	8000dd8 <__aeabi_dadd+0x130>
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	000007ff 	.word	0x000007ff
 8001368:	ff7fffff 	.word	0xff7fffff
 800136c:	000007fe 	.word	0x000007fe

08001370 <__aeabi_ddiv>:
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	46de      	mov	lr, fp
 8001374:	4645      	mov	r5, r8
 8001376:	4657      	mov	r7, sl
 8001378:	464e      	mov	r6, r9
 800137a:	b5e0      	push	{r5, r6, r7, lr}
 800137c:	b087      	sub	sp, #28
 800137e:	9200      	str	r2, [sp, #0]
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	030b      	lsls	r3, r1, #12
 8001384:	0b1b      	lsrs	r3, r3, #12
 8001386:	469b      	mov	fp, r3
 8001388:	0fca      	lsrs	r2, r1, #31
 800138a:	004b      	lsls	r3, r1, #1
 800138c:	0004      	movs	r4, r0
 800138e:	4680      	mov	r8, r0
 8001390:	0d5b      	lsrs	r3, r3, #21
 8001392:	9202      	str	r2, [sp, #8]
 8001394:	d100      	bne.n	8001398 <__aeabi_ddiv+0x28>
 8001396:	e16a      	b.n	800166e <__aeabi_ddiv+0x2fe>
 8001398:	4ad4      	ldr	r2, [pc, #848]	@ (80016ec <__aeabi_ddiv+0x37c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d100      	bne.n	80013a0 <__aeabi_ddiv+0x30>
 800139e:	e18c      	b.n	80016ba <__aeabi_ddiv+0x34a>
 80013a0:	4659      	mov	r1, fp
 80013a2:	0f42      	lsrs	r2, r0, #29
 80013a4:	00c9      	lsls	r1, r1, #3
 80013a6:	430a      	orrs	r2, r1
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	0409      	lsls	r1, r1, #16
 80013ac:	4311      	orrs	r1, r2
 80013ae:	00c2      	lsls	r2, r0, #3
 80013b0:	4690      	mov	r8, r2
 80013b2:	4acf      	ldr	r2, [pc, #828]	@ (80016f0 <__aeabi_ddiv+0x380>)
 80013b4:	4689      	mov	r9, r1
 80013b6:	4692      	mov	sl, r2
 80013b8:	449a      	add	sl, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	2400      	movs	r4, #0
 80013be:	9303      	str	r3, [sp, #12]
 80013c0:	9e00      	ldr	r6, [sp, #0]
 80013c2:	9f01      	ldr	r7, [sp, #4]
 80013c4:	033b      	lsls	r3, r7, #12
 80013c6:	0b1b      	lsrs	r3, r3, #12
 80013c8:	469b      	mov	fp, r3
 80013ca:	007b      	lsls	r3, r7, #1
 80013cc:	0030      	movs	r0, r6
 80013ce:	0d5b      	lsrs	r3, r3, #21
 80013d0:	0ffd      	lsrs	r5, r7, #31
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x68>
 80013d6:	e128      	b.n	800162a <__aeabi_ddiv+0x2ba>
 80013d8:	4ac4      	ldr	r2, [pc, #784]	@ (80016ec <__aeabi_ddiv+0x37c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d100      	bne.n	80013e0 <__aeabi_ddiv+0x70>
 80013de:	e177      	b.n	80016d0 <__aeabi_ddiv+0x360>
 80013e0:	4659      	mov	r1, fp
 80013e2:	0f72      	lsrs	r2, r6, #29
 80013e4:	00c9      	lsls	r1, r1, #3
 80013e6:	430a      	orrs	r2, r1
 80013e8:	2180      	movs	r1, #128	@ 0x80
 80013ea:	0409      	lsls	r1, r1, #16
 80013ec:	4311      	orrs	r1, r2
 80013ee:	468b      	mov	fp, r1
 80013f0:	49bf      	ldr	r1, [pc, #764]	@ (80016f0 <__aeabi_ddiv+0x380>)
 80013f2:	00f2      	lsls	r2, r6, #3
 80013f4:	468c      	mov	ip, r1
 80013f6:	4651      	mov	r1, sl
 80013f8:	4463      	add	r3, ip
 80013fa:	1acb      	subs	r3, r1, r3
 80013fc:	469a      	mov	sl, r3
 80013fe:	2300      	movs	r3, #0
 8001400:	9e02      	ldr	r6, [sp, #8]
 8001402:	406e      	eors	r6, r5
 8001404:	2c0f      	cmp	r4, #15
 8001406:	d827      	bhi.n	8001458 <__aeabi_ddiv+0xe8>
 8001408:	49ba      	ldr	r1, [pc, #744]	@ (80016f4 <__aeabi_ddiv+0x384>)
 800140a:	00a4      	lsls	r4, r4, #2
 800140c:	5909      	ldr	r1, [r1, r4]
 800140e:	468f      	mov	pc, r1
 8001410:	46cb      	mov	fp, r9
 8001412:	4642      	mov	r2, r8
 8001414:	9e02      	ldr	r6, [sp, #8]
 8001416:	9b03      	ldr	r3, [sp, #12]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d016      	beq.n	800144a <__aeabi_ddiv+0xda>
 800141c:	2b03      	cmp	r3, #3
 800141e:	d100      	bne.n	8001422 <__aeabi_ddiv+0xb2>
 8001420:	e2a6      	b.n	8001970 <__aeabi_ddiv+0x600>
 8001422:	2b01      	cmp	r3, #1
 8001424:	d000      	beq.n	8001428 <__aeabi_ddiv+0xb8>
 8001426:	e0df      	b.n	80015e8 <__aeabi_ddiv+0x278>
 8001428:	2200      	movs	r2, #0
 800142a:	2300      	movs	r3, #0
 800142c:	2400      	movs	r4, #0
 800142e:	4690      	mov	r8, r2
 8001430:	051b      	lsls	r3, r3, #20
 8001432:	4323      	orrs	r3, r4
 8001434:	07f6      	lsls	r6, r6, #31
 8001436:	4333      	orrs	r3, r6
 8001438:	4640      	mov	r0, r8
 800143a:	0019      	movs	r1, r3
 800143c:	b007      	add	sp, #28
 800143e:	bcf0      	pop	{r4, r5, r6, r7}
 8001440:	46bb      	mov	fp, r7
 8001442:	46b2      	mov	sl, r6
 8001444:	46a9      	mov	r9, r5
 8001446:	46a0      	mov	r8, r4
 8001448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144a:	2200      	movs	r2, #0
 800144c:	2400      	movs	r4, #0
 800144e:	4690      	mov	r8, r2
 8001450:	4ba6      	ldr	r3, [pc, #664]	@ (80016ec <__aeabi_ddiv+0x37c>)
 8001452:	e7ed      	b.n	8001430 <__aeabi_ddiv+0xc0>
 8001454:	002e      	movs	r6, r5
 8001456:	e7df      	b.n	8001418 <__aeabi_ddiv+0xa8>
 8001458:	45cb      	cmp	fp, r9
 800145a:	d200      	bcs.n	800145e <__aeabi_ddiv+0xee>
 800145c:	e1d4      	b.n	8001808 <__aeabi_ddiv+0x498>
 800145e:	d100      	bne.n	8001462 <__aeabi_ddiv+0xf2>
 8001460:	e1cf      	b.n	8001802 <__aeabi_ddiv+0x492>
 8001462:	2301      	movs	r3, #1
 8001464:	425b      	negs	r3, r3
 8001466:	469c      	mov	ip, r3
 8001468:	4644      	mov	r4, r8
 800146a:	4648      	mov	r0, r9
 800146c:	2700      	movs	r7, #0
 800146e:	44e2      	add	sl, ip
 8001470:	465b      	mov	r3, fp
 8001472:	0e15      	lsrs	r5, r2, #24
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	431d      	orrs	r5, r3
 8001478:	0c19      	lsrs	r1, r3, #16
 800147a:	042b      	lsls	r3, r5, #16
 800147c:	0212      	lsls	r2, r2, #8
 800147e:	9500      	str	r5, [sp, #0]
 8001480:	0c1d      	lsrs	r5, r3, #16
 8001482:	4691      	mov	r9, r2
 8001484:	9102      	str	r1, [sp, #8]
 8001486:	9503      	str	r5, [sp, #12]
 8001488:	f7fe feea 	bl	8000260 <__aeabi_uidivmod>
 800148c:	0002      	movs	r2, r0
 800148e:	436a      	muls	r2, r5
 8001490:	040b      	lsls	r3, r1, #16
 8001492:	0c21      	lsrs	r1, r4, #16
 8001494:	4680      	mov	r8, r0
 8001496:	4319      	orrs	r1, r3
 8001498:	428a      	cmp	r2, r1
 800149a:	d909      	bls.n	80014b0 <__aeabi_ddiv+0x140>
 800149c:	9d00      	ldr	r5, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	46ac      	mov	ip, r5
 80014a2:	425b      	negs	r3, r3
 80014a4:	4461      	add	r1, ip
 80014a6:	469c      	mov	ip, r3
 80014a8:	44e0      	add	r8, ip
 80014aa:	428d      	cmp	r5, r1
 80014ac:	d800      	bhi.n	80014b0 <__aeabi_ddiv+0x140>
 80014ae:	e1fb      	b.n	80018a8 <__aeabi_ddiv+0x538>
 80014b0:	1a88      	subs	r0, r1, r2
 80014b2:	9902      	ldr	r1, [sp, #8]
 80014b4:	f7fe fed4 	bl	8000260 <__aeabi_uidivmod>
 80014b8:	9a03      	ldr	r2, [sp, #12]
 80014ba:	0424      	lsls	r4, r4, #16
 80014bc:	4342      	muls	r2, r0
 80014be:	0409      	lsls	r1, r1, #16
 80014c0:	0c24      	lsrs	r4, r4, #16
 80014c2:	0003      	movs	r3, r0
 80014c4:	430c      	orrs	r4, r1
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d906      	bls.n	80014d8 <__aeabi_ddiv+0x168>
 80014ca:	9900      	ldr	r1, [sp, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	468c      	mov	ip, r1
 80014d0:	4464      	add	r4, ip
 80014d2:	42a1      	cmp	r1, r4
 80014d4:	d800      	bhi.n	80014d8 <__aeabi_ddiv+0x168>
 80014d6:	e1e1      	b.n	800189c <__aeabi_ddiv+0x52c>
 80014d8:	1aa0      	subs	r0, r4, r2
 80014da:	4642      	mov	r2, r8
 80014dc:	0412      	lsls	r2, r2, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	4693      	mov	fp, r2
 80014e2:	464b      	mov	r3, r9
 80014e4:	4659      	mov	r1, fp
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	001d      	movs	r5, r3
 80014ea:	9304      	str	r3, [sp, #16]
 80014ec:	040b      	lsls	r3, r1, #16
 80014ee:	4649      	mov	r1, r9
 80014f0:	0409      	lsls	r1, r1, #16
 80014f2:	0c09      	lsrs	r1, r1, #16
 80014f4:	000c      	movs	r4, r1
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	435c      	muls	r4, r3
 80014fa:	0c12      	lsrs	r2, r2, #16
 80014fc:	436b      	muls	r3, r5
 80014fe:	4688      	mov	r8, r1
 8001500:	4351      	muls	r1, r2
 8001502:	436a      	muls	r2, r5
 8001504:	0c25      	lsrs	r5, r4, #16
 8001506:	46ac      	mov	ip, r5
 8001508:	185b      	adds	r3, r3, r1
 800150a:	4463      	add	r3, ip
 800150c:	4299      	cmp	r1, r3
 800150e:	d903      	bls.n	8001518 <__aeabi_ddiv+0x1a8>
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	0249      	lsls	r1, r1, #9
 8001514:	468c      	mov	ip, r1
 8001516:	4462      	add	r2, ip
 8001518:	0c19      	lsrs	r1, r3, #16
 800151a:	0424      	lsls	r4, r4, #16
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	0c24      	lsrs	r4, r4, #16
 8001520:	188a      	adds	r2, r1, r2
 8001522:	191c      	adds	r4, r3, r4
 8001524:	4290      	cmp	r0, r2
 8001526:	d302      	bcc.n	800152e <__aeabi_ddiv+0x1be>
 8001528:	d116      	bne.n	8001558 <__aeabi_ddiv+0x1e8>
 800152a:	42a7      	cmp	r7, r4
 800152c:	d214      	bcs.n	8001558 <__aeabi_ddiv+0x1e8>
 800152e:	465b      	mov	r3, fp
 8001530:	9d00      	ldr	r5, [sp, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	444f      	add	r7, r9
 8001536:	9305      	str	r3, [sp, #20]
 8001538:	454f      	cmp	r7, r9
 800153a:	419b      	sbcs	r3, r3
 800153c:	46ac      	mov	ip, r5
 800153e:	425b      	negs	r3, r3
 8001540:	4463      	add	r3, ip
 8001542:	18c0      	adds	r0, r0, r3
 8001544:	4285      	cmp	r5, r0
 8001546:	d300      	bcc.n	800154a <__aeabi_ddiv+0x1da>
 8001548:	e1a1      	b.n	800188e <__aeabi_ddiv+0x51e>
 800154a:	4282      	cmp	r2, r0
 800154c:	d900      	bls.n	8001550 <__aeabi_ddiv+0x1e0>
 800154e:	e1f6      	b.n	800193e <__aeabi_ddiv+0x5ce>
 8001550:	d100      	bne.n	8001554 <__aeabi_ddiv+0x1e4>
 8001552:	e1f1      	b.n	8001938 <__aeabi_ddiv+0x5c8>
 8001554:	9b05      	ldr	r3, [sp, #20]
 8001556:	469b      	mov	fp, r3
 8001558:	1b3c      	subs	r4, r7, r4
 800155a:	42a7      	cmp	r7, r4
 800155c:	41bf      	sbcs	r7, r7
 800155e:	9d00      	ldr	r5, [sp, #0]
 8001560:	1a80      	subs	r0, r0, r2
 8001562:	427f      	negs	r7, r7
 8001564:	1bc0      	subs	r0, r0, r7
 8001566:	4285      	cmp	r5, r0
 8001568:	d100      	bne.n	800156c <__aeabi_ddiv+0x1fc>
 800156a:	e1d0      	b.n	800190e <__aeabi_ddiv+0x59e>
 800156c:	9902      	ldr	r1, [sp, #8]
 800156e:	f7fe fe77 	bl	8000260 <__aeabi_uidivmod>
 8001572:	9a03      	ldr	r2, [sp, #12]
 8001574:	040b      	lsls	r3, r1, #16
 8001576:	4342      	muls	r2, r0
 8001578:	0c21      	lsrs	r1, r4, #16
 800157a:	0007      	movs	r7, r0
 800157c:	4319      	orrs	r1, r3
 800157e:	428a      	cmp	r2, r1
 8001580:	d900      	bls.n	8001584 <__aeabi_ddiv+0x214>
 8001582:	e178      	b.n	8001876 <__aeabi_ddiv+0x506>
 8001584:	1a88      	subs	r0, r1, r2
 8001586:	9902      	ldr	r1, [sp, #8]
 8001588:	f7fe fe6a 	bl	8000260 <__aeabi_uidivmod>
 800158c:	9a03      	ldr	r2, [sp, #12]
 800158e:	0424      	lsls	r4, r4, #16
 8001590:	4342      	muls	r2, r0
 8001592:	0409      	lsls	r1, r1, #16
 8001594:	0c24      	lsrs	r4, r4, #16
 8001596:	0003      	movs	r3, r0
 8001598:	430c      	orrs	r4, r1
 800159a:	42a2      	cmp	r2, r4
 800159c:	d900      	bls.n	80015a0 <__aeabi_ddiv+0x230>
 800159e:	e15d      	b.n	800185c <__aeabi_ddiv+0x4ec>
 80015a0:	4641      	mov	r1, r8
 80015a2:	1aa4      	subs	r4, r4, r2
 80015a4:	043a      	lsls	r2, r7, #16
 80015a6:	431a      	orrs	r2, r3
 80015a8:	9d04      	ldr	r5, [sp, #16]
 80015aa:	0413      	lsls	r3, r2, #16
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	4359      	muls	r1, r3
 80015b0:	4647      	mov	r7, r8
 80015b2:	436b      	muls	r3, r5
 80015b4:	469c      	mov	ip, r3
 80015b6:	0c10      	lsrs	r0, r2, #16
 80015b8:	4347      	muls	r7, r0
 80015ba:	0c0b      	lsrs	r3, r1, #16
 80015bc:	44bc      	add	ip, r7
 80015be:	4463      	add	r3, ip
 80015c0:	4368      	muls	r0, r5
 80015c2:	429f      	cmp	r7, r3
 80015c4:	d903      	bls.n	80015ce <__aeabi_ddiv+0x25e>
 80015c6:	2580      	movs	r5, #128	@ 0x80
 80015c8:	026d      	lsls	r5, r5, #9
 80015ca:	46ac      	mov	ip, r5
 80015cc:	4460      	add	r0, ip
 80015ce:	0c1f      	lsrs	r7, r3, #16
 80015d0:	0409      	lsls	r1, r1, #16
 80015d2:	041b      	lsls	r3, r3, #16
 80015d4:	0c09      	lsrs	r1, r1, #16
 80015d6:	183f      	adds	r7, r7, r0
 80015d8:	185b      	adds	r3, r3, r1
 80015da:	42bc      	cmp	r4, r7
 80015dc:	d200      	bcs.n	80015e0 <__aeabi_ddiv+0x270>
 80015de:	e102      	b.n	80017e6 <__aeabi_ddiv+0x476>
 80015e0:	d100      	bne.n	80015e4 <__aeabi_ddiv+0x274>
 80015e2:	e0fd      	b.n	80017e0 <__aeabi_ddiv+0x470>
 80015e4:	2301      	movs	r3, #1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <__aeabi_ddiv+0x388>)
 80015ea:	4453      	add	r3, sl
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	dc00      	bgt.n	80015f2 <__aeabi_ddiv+0x282>
 80015f0:	e0ae      	b.n	8001750 <__aeabi_ddiv+0x3e0>
 80015f2:	0751      	lsls	r1, r2, #29
 80015f4:	d000      	beq.n	80015f8 <__aeabi_ddiv+0x288>
 80015f6:	e198      	b.n	800192a <__aeabi_ddiv+0x5ba>
 80015f8:	4659      	mov	r1, fp
 80015fa:	01c9      	lsls	r1, r1, #7
 80015fc:	d506      	bpl.n	800160c <__aeabi_ddiv+0x29c>
 80015fe:	4659      	mov	r1, fp
 8001600:	4b3e      	ldr	r3, [pc, #248]	@ (80016fc <__aeabi_ddiv+0x38c>)
 8001602:	4019      	ands	r1, r3
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	468b      	mov	fp, r1
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4453      	add	r3, sl
 800160c:	493c      	ldr	r1, [pc, #240]	@ (8001700 <__aeabi_ddiv+0x390>)
 800160e:	428b      	cmp	r3, r1
 8001610:	dd00      	ble.n	8001614 <__aeabi_ddiv+0x2a4>
 8001612:	e71a      	b.n	800144a <__aeabi_ddiv+0xda>
 8001614:	4659      	mov	r1, fp
 8001616:	08d2      	lsrs	r2, r2, #3
 8001618:	0749      	lsls	r1, r1, #29
 800161a:	4311      	orrs	r1, r2
 800161c:	465a      	mov	r2, fp
 800161e:	055b      	lsls	r3, r3, #21
 8001620:	0254      	lsls	r4, r2, #9
 8001622:	4688      	mov	r8, r1
 8001624:	0b24      	lsrs	r4, r4, #12
 8001626:	0d5b      	lsrs	r3, r3, #21
 8001628:	e702      	b.n	8001430 <__aeabi_ddiv+0xc0>
 800162a:	465a      	mov	r2, fp
 800162c:	9b00      	ldr	r3, [sp, #0]
 800162e:	431a      	orrs	r2, r3
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x2c4>
 8001632:	e07e      	b.n	8001732 <__aeabi_ddiv+0x3c2>
 8001634:	465b      	mov	r3, fp
 8001636:	2b00      	cmp	r3, #0
 8001638:	d100      	bne.n	800163c <__aeabi_ddiv+0x2cc>
 800163a:	e100      	b.n	800183e <__aeabi_ddiv+0x4ce>
 800163c:	4658      	mov	r0, fp
 800163e:	f001 fabb 	bl	8002bb8 <__clzsi2>
 8001642:	0002      	movs	r2, r0
 8001644:	0003      	movs	r3, r0
 8001646:	3a0b      	subs	r2, #11
 8001648:	271d      	movs	r7, #29
 800164a:	9e00      	ldr	r6, [sp, #0]
 800164c:	1aba      	subs	r2, r7, r2
 800164e:	0019      	movs	r1, r3
 8001650:	4658      	mov	r0, fp
 8001652:	40d6      	lsrs	r6, r2
 8001654:	3908      	subs	r1, #8
 8001656:	4088      	lsls	r0, r1
 8001658:	0032      	movs	r2, r6
 800165a:	4302      	orrs	r2, r0
 800165c:	4693      	mov	fp, r2
 800165e:	9a00      	ldr	r2, [sp, #0]
 8001660:	408a      	lsls	r2, r1
 8001662:	4928      	ldr	r1, [pc, #160]	@ (8001704 <__aeabi_ddiv+0x394>)
 8001664:	4453      	add	r3, sl
 8001666:	468a      	mov	sl, r1
 8001668:	449a      	add	sl, r3
 800166a:	2300      	movs	r3, #0
 800166c:	e6c8      	b.n	8001400 <__aeabi_ddiv+0x90>
 800166e:	465b      	mov	r3, fp
 8001670:	4303      	orrs	r3, r0
 8001672:	4699      	mov	r9, r3
 8001674:	d056      	beq.n	8001724 <__aeabi_ddiv+0x3b4>
 8001676:	465b      	mov	r3, fp
 8001678:	2b00      	cmp	r3, #0
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x30e>
 800167c:	e0cd      	b.n	800181a <__aeabi_ddiv+0x4aa>
 800167e:	4658      	mov	r0, fp
 8001680:	f001 fa9a 	bl	8002bb8 <__clzsi2>
 8001684:	230b      	movs	r3, #11
 8001686:	425b      	negs	r3, r3
 8001688:	469c      	mov	ip, r3
 800168a:	0002      	movs	r2, r0
 800168c:	4484      	add	ip, r0
 800168e:	4666      	mov	r6, ip
 8001690:	231d      	movs	r3, #29
 8001692:	1b9b      	subs	r3, r3, r6
 8001694:	0026      	movs	r6, r4
 8001696:	0011      	movs	r1, r2
 8001698:	4658      	mov	r0, fp
 800169a:	40de      	lsrs	r6, r3
 800169c:	3908      	subs	r1, #8
 800169e:	4088      	lsls	r0, r1
 80016a0:	0033      	movs	r3, r6
 80016a2:	4303      	orrs	r3, r0
 80016a4:	4699      	mov	r9, r3
 80016a6:	0023      	movs	r3, r4
 80016a8:	408b      	lsls	r3, r1
 80016aa:	4698      	mov	r8, r3
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <__aeabi_ddiv+0x398>)
 80016ae:	2400      	movs	r4, #0
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	469a      	mov	sl, r3
 80016b4:	2300      	movs	r3, #0
 80016b6:	9303      	str	r3, [sp, #12]
 80016b8:	e682      	b.n	80013c0 <__aeabi_ddiv+0x50>
 80016ba:	465a      	mov	r2, fp
 80016bc:	4302      	orrs	r2, r0
 80016be:	4691      	mov	r9, r2
 80016c0:	d12a      	bne.n	8001718 <__aeabi_ddiv+0x3a8>
 80016c2:	2200      	movs	r2, #0
 80016c4:	469a      	mov	sl, r3
 80016c6:	2302      	movs	r3, #2
 80016c8:	4690      	mov	r8, r2
 80016ca:	2408      	movs	r4, #8
 80016cc:	9303      	str	r3, [sp, #12]
 80016ce:	e677      	b.n	80013c0 <__aeabi_ddiv+0x50>
 80016d0:	465a      	mov	r2, fp
 80016d2:	9b00      	ldr	r3, [sp, #0]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <__aeabi_ddiv+0x39c>)
 80016d8:	469c      	mov	ip, r3
 80016da:	44e2      	add	sl, ip
 80016dc:	2a00      	cmp	r2, #0
 80016de:	d117      	bne.n	8001710 <__aeabi_ddiv+0x3a0>
 80016e0:	2302      	movs	r3, #2
 80016e2:	431c      	orrs	r4, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	469b      	mov	fp, r3
 80016e8:	3302      	adds	r3, #2
 80016ea:	e689      	b.n	8001400 <__aeabi_ddiv+0x90>
 80016ec:	000007ff 	.word	0x000007ff
 80016f0:	fffffc01 	.word	0xfffffc01
 80016f4:	0800d2ec 	.word	0x0800d2ec
 80016f8:	000003ff 	.word	0x000003ff
 80016fc:	feffffff 	.word	0xfeffffff
 8001700:	000007fe 	.word	0x000007fe
 8001704:	000003f3 	.word	0x000003f3
 8001708:	fffffc0d 	.word	0xfffffc0d
 800170c:	fffff801 	.word	0xfffff801
 8001710:	2303      	movs	r3, #3
 8001712:	0032      	movs	r2, r6
 8001714:	431c      	orrs	r4, r3
 8001716:	e673      	b.n	8001400 <__aeabi_ddiv+0x90>
 8001718:	469a      	mov	sl, r3
 800171a:	2303      	movs	r3, #3
 800171c:	46d9      	mov	r9, fp
 800171e:	240c      	movs	r4, #12
 8001720:	9303      	str	r3, [sp, #12]
 8001722:	e64d      	b.n	80013c0 <__aeabi_ddiv+0x50>
 8001724:	2300      	movs	r3, #0
 8001726:	4698      	mov	r8, r3
 8001728:	469a      	mov	sl, r3
 800172a:	3301      	adds	r3, #1
 800172c:	2404      	movs	r4, #4
 800172e:	9303      	str	r3, [sp, #12]
 8001730:	e646      	b.n	80013c0 <__aeabi_ddiv+0x50>
 8001732:	2301      	movs	r3, #1
 8001734:	431c      	orrs	r4, r3
 8001736:	2300      	movs	r3, #0
 8001738:	469b      	mov	fp, r3
 800173a:	3301      	adds	r3, #1
 800173c:	e660      	b.n	8001400 <__aeabi_ddiv+0x90>
 800173e:	2300      	movs	r3, #0
 8001740:	2480      	movs	r4, #128	@ 0x80
 8001742:	4698      	mov	r8, r3
 8001744:	2600      	movs	r6, #0
 8001746:	4b92      	ldr	r3, [pc, #584]	@ (8001990 <__aeabi_ddiv+0x620>)
 8001748:	0324      	lsls	r4, r4, #12
 800174a:	e671      	b.n	8001430 <__aeabi_ddiv+0xc0>
 800174c:	2201      	movs	r2, #1
 800174e:	4252      	negs	r2, r2
 8001750:	2101      	movs	r1, #1
 8001752:	1ac9      	subs	r1, r1, r3
 8001754:	2938      	cmp	r1, #56	@ 0x38
 8001756:	dd00      	ble.n	800175a <__aeabi_ddiv+0x3ea>
 8001758:	e666      	b.n	8001428 <__aeabi_ddiv+0xb8>
 800175a:	291f      	cmp	r1, #31
 800175c:	dc00      	bgt.n	8001760 <__aeabi_ddiv+0x3f0>
 800175e:	e0ab      	b.n	80018b8 <__aeabi_ddiv+0x548>
 8001760:	201f      	movs	r0, #31
 8001762:	4240      	negs	r0, r0
 8001764:	1ac3      	subs	r3, r0, r3
 8001766:	4658      	mov	r0, fp
 8001768:	40d8      	lsrs	r0, r3
 800176a:	0003      	movs	r3, r0
 800176c:	2920      	cmp	r1, #32
 800176e:	d004      	beq.n	800177a <__aeabi_ddiv+0x40a>
 8001770:	4658      	mov	r0, fp
 8001772:	4988      	ldr	r1, [pc, #544]	@ (8001994 <__aeabi_ddiv+0x624>)
 8001774:	4451      	add	r1, sl
 8001776:	4088      	lsls	r0, r1
 8001778:	4302      	orrs	r2, r0
 800177a:	1e51      	subs	r1, r2, #1
 800177c:	418a      	sbcs	r2, r1
 800177e:	431a      	orrs	r2, r3
 8001780:	2307      	movs	r3, #7
 8001782:	0019      	movs	r1, r3
 8001784:	2400      	movs	r4, #0
 8001786:	4011      	ands	r1, r2
 8001788:	4213      	tst	r3, r2
 800178a:	d00c      	beq.n	80017a6 <__aeabi_ddiv+0x436>
 800178c:	230f      	movs	r3, #15
 800178e:	4013      	ands	r3, r2
 8001790:	2b04      	cmp	r3, #4
 8001792:	d100      	bne.n	8001796 <__aeabi_ddiv+0x426>
 8001794:	e0f9      	b.n	800198a <__aeabi_ddiv+0x61a>
 8001796:	1d11      	adds	r1, r2, #4
 8001798:	4291      	cmp	r1, r2
 800179a:	419b      	sbcs	r3, r3
 800179c:	000a      	movs	r2, r1
 800179e:	425b      	negs	r3, r3
 80017a0:	0759      	lsls	r1, r3, #29
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	0b1c      	lsrs	r4, r3, #12
 80017a6:	08d2      	lsrs	r2, r2, #3
 80017a8:	430a      	orrs	r2, r1
 80017aa:	4690      	mov	r8, r2
 80017ac:	2300      	movs	r3, #0
 80017ae:	e63f      	b.n	8001430 <__aeabi_ddiv+0xc0>
 80017b0:	2480      	movs	r4, #128	@ 0x80
 80017b2:	464b      	mov	r3, r9
 80017b4:	0324      	lsls	r4, r4, #12
 80017b6:	4223      	tst	r3, r4
 80017b8:	d009      	beq.n	80017ce <__aeabi_ddiv+0x45e>
 80017ba:	465b      	mov	r3, fp
 80017bc:	4223      	tst	r3, r4
 80017be:	d106      	bne.n	80017ce <__aeabi_ddiv+0x45e>
 80017c0:	431c      	orrs	r4, r3
 80017c2:	0324      	lsls	r4, r4, #12
 80017c4:	002e      	movs	r6, r5
 80017c6:	4690      	mov	r8, r2
 80017c8:	4b71      	ldr	r3, [pc, #452]	@ (8001990 <__aeabi_ddiv+0x620>)
 80017ca:	0b24      	lsrs	r4, r4, #12
 80017cc:	e630      	b.n	8001430 <__aeabi_ddiv+0xc0>
 80017ce:	2480      	movs	r4, #128	@ 0x80
 80017d0:	464b      	mov	r3, r9
 80017d2:	0324      	lsls	r4, r4, #12
 80017d4:	431c      	orrs	r4, r3
 80017d6:	0324      	lsls	r4, r4, #12
 80017d8:	9e02      	ldr	r6, [sp, #8]
 80017da:	4b6d      	ldr	r3, [pc, #436]	@ (8001990 <__aeabi_ddiv+0x620>)
 80017dc:	0b24      	lsrs	r4, r4, #12
 80017de:	e627      	b.n	8001430 <__aeabi_ddiv+0xc0>
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d100      	bne.n	80017e6 <__aeabi_ddiv+0x476>
 80017e4:	e700      	b.n	80015e8 <__aeabi_ddiv+0x278>
 80017e6:	9800      	ldr	r0, [sp, #0]
 80017e8:	1e51      	subs	r1, r2, #1
 80017ea:	4684      	mov	ip, r0
 80017ec:	4464      	add	r4, ip
 80017ee:	4284      	cmp	r4, r0
 80017f0:	d200      	bcs.n	80017f4 <__aeabi_ddiv+0x484>
 80017f2:	e084      	b.n	80018fe <__aeabi_ddiv+0x58e>
 80017f4:	42bc      	cmp	r4, r7
 80017f6:	d200      	bcs.n	80017fa <__aeabi_ddiv+0x48a>
 80017f8:	e0ae      	b.n	8001958 <__aeabi_ddiv+0x5e8>
 80017fa:	d100      	bne.n	80017fe <__aeabi_ddiv+0x48e>
 80017fc:	e0c1      	b.n	8001982 <__aeabi_ddiv+0x612>
 80017fe:	000a      	movs	r2, r1
 8001800:	e6f0      	b.n	80015e4 <__aeabi_ddiv+0x274>
 8001802:	4542      	cmp	r2, r8
 8001804:	d900      	bls.n	8001808 <__aeabi_ddiv+0x498>
 8001806:	e62c      	b.n	8001462 <__aeabi_ddiv+0xf2>
 8001808:	464b      	mov	r3, r9
 800180a:	07dc      	lsls	r4, r3, #31
 800180c:	0858      	lsrs	r0, r3, #1
 800180e:	4643      	mov	r3, r8
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	431c      	orrs	r4, r3
 8001814:	4643      	mov	r3, r8
 8001816:	07df      	lsls	r7, r3, #31
 8001818:	e62a      	b.n	8001470 <__aeabi_ddiv+0x100>
 800181a:	f001 f9cd 	bl	8002bb8 <__clzsi2>
 800181e:	2315      	movs	r3, #21
 8001820:	469c      	mov	ip, r3
 8001822:	4484      	add	ip, r0
 8001824:	0002      	movs	r2, r0
 8001826:	4663      	mov	r3, ip
 8001828:	3220      	adds	r2, #32
 800182a:	2b1c      	cmp	r3, #28
 800182c:	dc00      	bgt.n	8001830 <__aeabi_ddiv+0x4c0>
 800182e:	e72e      	b.n	800168e <__aeabi_ddiv+0x31e>
 8001830:	0023      	movs	r3, r4
 8001832:	3808      	subs	r0, #8
 8001834:	4083      	lsls	r3, r0
 8001836:	4699      	mov	r9, r3
 8001838:	2300      	movs	r3, #0
 800183a:	4698      	mov	r8, r3
 800183c:	e736      	b.n	80016ac <__aeabi_ddiv+0x33c>
 800183e:	f001 f9bb 	bl	8002bb8 <__clzsi2>
 8001842:	0002      	movs	r2, r0
 8001844:	0003      	movs	r3, r0
 8001846:	3215      	adds	r2, #21
 8001848:	3320      	adds	r3, #32
 800184a:	2a1c      	cmp	r2, #28
 800184c:	dc00      	bgt.n	8001850 <__aeabi_ddiv+0x4e0>
 800184e:	e6fb      	b.n	8001648 <__aeabi_ddiv+0x2d8>
 8001850:	9900      	ldr	r1, [sp, #0]
 8001852:	3808      	subs	r0, #8
 8001854:	4081      	lsls	r1, r0
 8001856:	2200      	movs	r2, #0
 8001858:	468b      	mov	fp, r1
 800185a:	e702      	b.n	8001662 <__aeabi_ddiv+0x2f2>
 800185c:	9900      	ldr	r1, [sp, #0]
 800185e:	3b01      	subs	r3, #1
 8001860:	468c      	mov	ip, r1
 8001862:	4464      	add	r4, ip
 8001864:	42a1      	cmp	r1, r4
 8001866:	d900      	bls.n	800186a <__aeabi_ddiv+0x4fa>
 8001868:	e69a      	b.n	80015a0 <__aeabi_ddiv+0x230>
 800186a:	42a2      	cmp	r2, r4
 800186c:	d800      	bhi.n	8001870 <__aeabi_ddiv+0x500>
 800186e:	e697      	b.n	80015a0 <__aeabi_ddiv+0x230>
 8001870:	1e83      	subs	r3, r0, #2
 8001872:	4464      	add	r4, ip
 8001874:	e694      	b.n	80015a0 <__aeabi_ddiv+0x230>
 8001876:	46ac      	mov	ip, r5
 8001878:	4461      	add	r1, ip
 800187a:	3f01      	subs	r7, #1
 800187c:	428d      	cmp	r5, r1
 800187e:	d900      	bls.n	8001882 <__aeabi_ddiv+0x512>
 8001880:	e680      	b.n	8001584 <__aeabi_ddiv+0x214>
 8001882:	428a      	cmp	r2, r1
 8001884:	d800      	bhi.n	8001888 <__aeabi_ddiv+0x518>
 8001886:	e67d      	b.n	8001584 <__aeabi_ddiv+0x214>
 8001888:	1e87      	subs	r7, r0, #2
 800188a:	4461      	add	r1, ip
 800188c:	e67a      	b.n	8001584 <__aeabi_ddiv+0x214>
 800188e:	4285      	cmp	r5, r0
 8001890:	d000      	beq.n	8001894 <__aeabi_ddiv+0x524>
 8001892:	e65f      	b.n	8001554 <__aeabi_ddiv+0x1e4>
 8001894:	45b9      	cmp	r9, r7
 8001896:	d900      	bls.n	800189a <__aeabi_ddiv+0x52a>
 8001898:	e65c      	b.n	8001554 <__aeabi_ddiv+0x1e4>
 800189a:	e656      	b.n	800154a <__aeabi_ddiv+0x1da>
 800189c:	42a2      	cmp	r2, r4
 800189e:	d800      	bhi.n	80018a2 <__aeabi_ddiv+0x532>
 80018a0:	e61a      	b.n	80014d8 <__aeabi_ddiv+0x168>
 80018a2:	1e83      	subs	r3, r0, #2
 80018a4:	4464      	add	r4, ip
 80018a6:	e617      	b.n	80014d8 <__aeabi_ddiv+0x168>
 80018a8:	428a      	cmp	r2, r1
 80018aa:	d800      	bhi.n	80018ae <__aeabi_ddiv+0x53e>
 80018ac:	e600      	b.n	80014b0 <__aeabi_ddiv+0x140>
 80018ae:	46ac      	mov	ip, r5
 80018b0:	1e83      	subs	r3, r0, #2
 80018b2:	4698      	mov	r8, r3
 80018b4:	4461      	add	r1, ip
 80018b6:	e5fb      	b.n	80014b0 <__aeabi_ddiv+0x140>
 80018b8:	4837      	ldr	r0, [pc, #220]	@ (8001998 <__aeabi_ddiv+0x628>)
 80018ba:	0014      	movs	r4, r2
 80018bc:	4450      	add	r0, sl
 80018be:	4082      	lsls	r2, r0
 80018c0:	465b      	mov	r3, fp
 80018c2:	0017      	movs	r7, r2
 80018c4:	4083      	lsls	r3, r0
 80018c6:	40cc      	lsrs	r4, r1
 80018c8:	1e7a      	subs	r2, r7, #1
 80018ca:	4197      	sbcs	r7, r2
 80018cc:	4323      	orrs	r3, r4
 80018ce:	433b      	orrs	r3, r7
 80018d0:	001a      	movs	r2, r3
 80018d2:	465b      	mov	r3, fp
 80018d4:	40cb      	lsrs	r3, r1
 80018d6:	0751      	lsls	r1, r2, #29
 80018d8:	d009      	beq.n	80018ee <__aeabi_ddiv+0x57e>
 80018da:	210f      	movs	r1, #15
 80018dc:	4011      	ands	r1, r2
 80018de:	2904      	cmp	r1, #4
 80018e0:	d005      	beq.n	80018ee <__aeabi_ddiv+0x57e>
 80018e2:	1d11      	adds	r1, r2, #4
 80018e4:	4291      	cmp	r1, r2
 80018e6:	4192      	sbcs	r2, r2
 80018e8:	4252      	negs	r2, r2
 80018ea:	189b      	adds	r3, r3, r2
 80018ec:	000a      	movs	r2, r1
 80018ee:	0219      	lsls	r1, r3, #8
 80018f0:	d400      	bmi.n	80018f4 <__aeabi_ddiv+0x584>
 80018f2:	e755      	b.n	80017a0 <__aeabi_ddiv+0x430>
 80018f4:	2200      	movs	r2, #0
 80018f6:	2301      	movs	r3, #1
 80018f8:	2400      	movs	r4, #0
 80018fa:	4690      	mov	r8, r2
 80018fc:	e598      	b.n	8001430 <__aeabi_ddiv+0xc0>
 80018fe:	000a      	movs	r2, r1
 8001900:	42bc      	cmp	r4, r7
 8001902:	d000      	beq.n	8001906 <__aeabi_ddiv+0x596>
 8001904:	e66e      	b.n	80015e4 <__aeabi_ddiv+0x274>
 8001906:	454b      	cmp	r3, r9
 8001908:	d000      	beq.n	800190c <__aeabi_ddiv+0x59c>
 800190a:	e66b      	b.n	80015e4 <__aeabi_ddiv+0x274>
 800190c:	e66c      	b.n	80015e8 <__aeabi_ddiv+0x278>
 800190e:	4b23      	ldr	r3, [pc, #140]	@ (800199c <__aeabi_ddiv+0x62c>)
 8001910:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <__aeabi_ddiv+0x630>)
 8001912:	4453      	add	r3, sl
 8001914:	4592      	cmp	sl, r2
 8001916:	da00      	bge.n	800191a <__aeabi_ddiv+0x5aa>
 8001918:	e718      	b.n	800174c <__aeabi_ddiv+0x3dc>
 800191a:	2101      	movs	r1, #1
 800191c:	4249      	negs	r1, r1
 800191e:	1d0a      	adds	r2, r1, #4
 8001920:	428a      	cmp	r2, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	4249      	negs	r1, r1
 8001926:	448b      	add	fp, r1
 8001928:	e666      	b.n	80015f8 <__aeabi_ddiv+0x288>
 800192a:	210f      	movs	r1, #15
 800192c:	4011      	ands	r1, r2
 800192e:	2904      	cmp	r1, #4
 8001930:	d100      	bne.n	8001934 <__aeabi_ddiv+0x5c4>
 8001932:	e661      	b.n	80015f8 <__aeabi_ddiv+0x288>
 8001934:	0011      	movs	r1, r2
 8001936:	e7f2      	b.n	800191e <__aeabi_ddiv+0x5ae>
 8001938:	42bc      	cmp	r4, r7
 800193a:	d800      	bhi.n	800193e <__aeabi_ddiv+0x5ce>
 800193c:	e60a      	b.n	8001554 <__aeabi_ddiv+0x1e4>
 800193e:	2302      	movs	r3, #2
 8001940:	425b      	negs	r3, r3
 8001942:	469c      	mov	ip, r3
 8001944:	9900      	ldr	r1, [sp, #0]
 8001946:	444f      	add	r7, r9
 8001948:	454f      	cmp	r7, r9
 800194a:	419b      	sbcs	r3, r3
 800194c:	44e3      	add	fp, ip
 800194e:	468c      	mov	ip, r1
 8001950:	425b      	negs	r3, r3
 8001952:	4463      	add	r3, ip
 8001954:	18c0      	adds	r0, r0, r3
 8001956:	e5ff      	b.n	8001558 <__aeabi_ddiv+0x1e8>
 8001958:	4649      	mov	r1, r9
 800195a:	9d00      	ldr	r5, [sp, #0]
 800195c:	0048      	lsls	r0, r1, #1
 800195e:	4548      	cmp	r0, r9
 8001960:	4189      	sbcs	r1, r1
 8001962:	46ac      	mov	ip, r5
 8001964:	4249      	negs	r1, r1
 8001966:	4461      	add	r1, ip
 8001968:	4681      	mov	r9, r0
 800196a:	3a02      	subs	r2, #2
 800196c:	1864      	adds	r4, r4, r1
 800196e:	e7c7      	b.n	8001900 <__aeabi_ddiv+0x590>
 8001970:	2480      	movs	r4, #128	@ 0x80
 8001972:	465b      	mov	r3, fp
 8001974:	0324      	lsls	r4, r4, #12
 8001976:	431c      	orrs	r4, r3
 8001978:	0324      	lsls	r4, r4, #12
 800197a:	4690      	mov	r8, r2
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <__aeabi_ddiv+0x620>)
 800197e:	0b24      	lsrs	r4, r4, #12
 8001980:	e556      	b.n	8001430 <__aeabi_ddiv+0xc0>
 8001982:	4599      	cmp	r9, r3
 8001984:	d3e8      	bcc.n	8001958 <__aeabi_ddiv+0x5e8>
 8001986:	000a      	movs	r2, r1
 8001988:	e7bd      	b.n	8001906 <__aeabi_ddiv+0x596>
 800198a:	2300      	movs	r3, #0
 800198c:	e708      	b.n	80017a0 <__aeabi_ddiv+0x430>
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	000007ff 	.word	0x000007ff
 8001994:	0000043e 	.word	0x0000043e
 8001998:	0000041e 	.word	0x0000041e
 800199c:	000003ff 	.word	0x000003ff
 80019a0:	fffffc02 	.word	0xfffffc02

080019a4 <__eqdf2>:
 80019a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a6:	4657      	mov	r7, sl
 80019a8:	46de      	mov	lr, fp
 80019aa:	464e      	mov	r6, r9
 80019ac:	4645      	mov	r5, r8
 80019ae:	b5e0      	push	{r5, r6, r7, lr}
 80019b0:	000d      	movs	r5, r1
 80019b2:	0004      	movs	r4, r0
 80019b4:	0fe8      	lsrs	r0, r5, #31
 80019b6:	4683      	mov	fp, r0
 80019b8:	0309      	lsls	r1, r1, #12
 80019ba:	0fd8      	lsrs	r0, r3, #31
 80019bc:	0b09      	lsrs	r1, r1, #12
 80019be:	4682      	mov	sl, r0
 80019c0:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <__eqdf2+0x84>)
 80019c2:	468c      	mov	ip, r1
 80019c4:	031f      	lsls	r7, r3, #12
 80019c6:	0069      	lsls	r1, r5, #1
 80019c8:	005e      	lsls	r6, r3, #1
 80019ca:	0d49      	lsrs	r1, r1, #21
 80019cc:	0b3f      	lsrs	r7, r7, #12
 80019ce:	0d76      	lsrs	r6, r6, #21
 80019d0:	4281      	cmp	r1, r0
 80019d2:	d018      	beq.n	8001a06 <__eqdf2+0x62>
 80019d4:	4286      	cmp	r6, r0
 80019d6:	d00f      	beq.n	80019f8 <__eqdf2+0x54>
 80019d8:	2001      	movs	r0, #1
 80019da:	42b1      	cmp	r1, r6
 80019dc:	d10d      	bne.n	80019fa <__eqdf2+0x56>
 80019de:	45bc      	cmp	ip, r7
 80019e0:	d10b      	bne.n	80019fa <__eqdf2+0x56>
 80019e2:	4294      	cmp	r4, r2
 80019e4:	d109      	bne.n	80019fa <__eqdf2+0x56>
 80019e6:	45d3      	cmp	fp, sl
 80019e8:	d01c      	beq.n	8001a24 <__eqdf2+0x80>
 80019ea:	2900      	cmp	r1, #0
 80019ec:	d105      	bne.n	80019fa <__eqdf2+0x56>
 80019ee:	4660      	mov	r0, ip
 80019f0:	4320      	orrs	r0, r4
 80019f2:	1e43      	subs	r3, r0, #1
 80019f4:	4198      	sbcs	r0, r3
 80019f6:	e000      	b.n	80019fa <__eqdf2+0x56>
 80019f8:	2001      	movs	r0, #1
 80019fa:	bcf0      	pop	{r4, r5, r6, r7}
 80019fc:	46bb      	mov	fp, r7
 80019fe:	46b2      	mov	sl, r6
 8001a00:	46a9      	mov	r9, r5
 8001a02:	46a0      	mov	r8, r4
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a06:	2001      	movs	r0, #1
 8001a08:	428e      	cmp	r6, r1
 8001a0a:	d1f6      	bne.n	80019fa <__eqdf2+0x56>
 8001a0c:	4661      	mov	r1, ip
 8001a0e:	4339      	orrs	r1, r7
 8001a10:	000f      	movs	r7, r1
 8001a12:	4317      	orrs	r7, r2
 8001a14:	4327      	orrs	r7, r4
 8001a16:	d1f0      	bne.n	80019fa <__eqdf2+0x56>
 8001a18:	465b      	mov	r3, fp
 8001a1a:	4652      	mov	r2, sl
 8001a1c:	1a98      	subs	r0, r3, r2
 8001a1e:	1e43      	subs	r3, r0, #1
 8001a20:	4198      	sbcs	r0, r3
 8001a22:	e7ea      	b.n	80019fa <__eqdf2+0x56>
 8001a24:	2000      	movs	r0, #0
 8001a26:	e7e8      	b.n	80019fa <__eqdf2+0x56>
 8001a28:	000007ff 	.word	0x000007ff

08001a2c <__gedf2>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	4645      	mov	r5, r8
 8001a34:	46de      	mov	lr, fp
 8001a36:	b5e0      	push	{r5, r6, r7, lr}
 8001a38:	000d      	movs	r5, r1
 8001a3a:	030f      	lsls	r7, r1, #12
 8001a3c:	0b39      	lsrs	r1, r7, #12
 8001a3e:	b083      	sub	sp, #12
 8001a40:	0004      	movs	r4, r0
 8001a42:	4680      	mov	r8, r0
 8001a44:	9101      	str	r1, [sp, #4]
 8001a46:	0058      	lsls	r0, r3, #1
 8001a48:	0fe9      	lsrs	r1, r5, #31
 8001a4a:	4f31      	ldr	r7, [pc, #196]	@ (8001b10 <__gedf2+0xe4>)
 8001a4c:	0d40      	lsrs	r0, r0, #21
 8001a4e:	468c      	mov	ip, r1
 8001a50:	006e      	lsls	r6, r5, #1
 8001a52:	0319      	lsls	r1, r3, #12
 8001a54:	4682      	mov	sl, r0
 8001a56:	4691      	mov	r9, r2
 8001a58:	0d76      	lsrs	r6, r6, #21
 8001a5a:	0b09      	lsrs	r1, r1, #12
 8001a5c:	0fd8      	lsrs	r0, r3, #31
 8001a5e:	42be      	cmp	r6, r7
 8001a60:	d01f      	beq.n	8001aa2 <__gedf2+0x76>
 8001a62:	45ba      	cmp	sl, r7
 8001a64:	d00f      	beq.n	8001a86 <__gedf2+0x5a>
 8001a66:	2e00      	cmp	r6, #0
 8001a68:	d12f      	bne.n	8001aca <__gedf2+0x9e>
 8001a6a:	4655      	mov	r5, sl
 8001a6c:	9e01      	ldr	r6, [sp, #4]
 8001a6e:	4334      	orrs	r4, r6
 8001a70:	2d00      	cmp	r5, #0
 8001a72:	d127      	bne.n	8001ac4 <__gedf2+0x98>
 8001a74:	430a      	orrs	r2, r1
 8001a76:	d03a      	beq.n	8001aee <__gedf2+0xc2>
 8001a78:	2c00      	cmp	r4, #0
 8001a7a:	d145      	bne.n	8001b08 <__gedf2+0xdc>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d11a      	bne.n	8001ab6 <__gedf2+0x8a>
 8001a80:	2001      	movs	r0, #1
 8001a82:	4240      	negs	r0, r0
 8001a84:	e017      	b.n	8001ab6 <__gedf2+0x8a>
 8001a86:	4311      	orrs	r1, r2
 8001a88:	d13b      	bne.n	8001b02 <__gedf2+0xd6>
 8001a8a:	2e00      	cmp	r6, #0
 8001a8c:	d102      	bne.n	8001a94 <__gedf2+0x68>
 8001a8e:	9f01      	ldr	r7, [sp, #4]
 8001a90:	4327      	orrs	r7, r4
 8001a92:	d0f3      	beq.n	8001a7c <__gedf2+0x50>
 8001a94:	4584      	cmp	ip, r0
 8001a96:	d109      	bne.n	8001aac <__gedf2+0x80>
 8001a98:	4663      	mov	r3, ip
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <__gedf2+0x54>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	e009      	b.n	8001ab6 <__gedf2+0x8a>
 8001aa2:	9f01      	ldr	r7, [sp, #4]
 8001aa4:	4327      	orrs	r7, r4
 8001aa6:	d12c      	bne.n	8001b02 <__gedf2+0xd6>
 8001aa8:	45b2      	cmp	sl, r6
 8001aaa:	d024      	beq.n	8001af6 <__gedf2+0xca>
 8001aac:	4663      	mov	r3, ip
 8001aae:	2002      	movs	r0, #2
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	4018      	ands	r0, r3
 8001ab4:	3801      	subs	r0, #1
 8001ab6:	b003      	add	sp, #12
 8001ab8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aba:	46bb      	mov	fp, r7
 8001abc:	46b2      	mov	sl, r6
 8001abe:	46a9      	mov	r9, r5
 8001ac0:	46a0      	mov	r8, r4
 8001ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac4:	2c00      	cmp	r4, #0
 8001ac6:	d0d9      	beq.n	8001a7c <__gedf2+0x50>
 8001ac8:	e7e4      	b.n	8001a94 <__gedf2+0x68>
 8001aca:	4654      	mov	r4, sl
 8001acc:	2c00      	cmp	r4, #0
 8001ace:	d0ed      	beq.n	8001aac <__gedf2+0x80>
 8001ad0:	4584      	cmp	ip, r0
 8001ad2:	d1eb      	bne.n	8001aac <__gedf2+0x80>
 8001ad4:	4556      	cmp	r6, sl
 8001ad6:	dce9      	bgt.n	8001aac <__gedf2+0x80>
 8001ad8:	dbde      	blt.n	8001a98 <__gedf2+0x6c>
 8001ada:	9b01      	ldr	r3, [sp, #4]
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d8e5      	bhi.n	8001aac <__gedf2+0x80>
 8001ae0:	d1da      	bne.n	8001a98 <__gedf2+0x6c>
 8001ae2:	45c8      	cmp	r8, r9
 8001ae4:	d8e2      	bhi.n	8001aac <__gedf2+0x80>
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	45c8      	cmp	r8, r9
 8001aea:	d2e4      	bcs.n	8001ab6 <__gedf2+0x8a>
 8001aec:	e7d4      	b.n	8001a98 <__gedf2+0x6c>
 8001aee:	2000      	movs	r0, #0
 8001af0:	2c00      	cmp	r4, #0
 8001af2:	d0e0      	beq.n	8001ab6 <__gedf2+0x8a>
 8001af4:	e7da      	b.n	8001aac <__gedf2+0x80>
 8001af6:	4311      	orrs	r1, r2
 8001af8:	d103      	bne.n	8001b02 <__gedf2+0xd6>
 8001afa:	4584      	cmp	ip, r0
 8001afc:	d1d6      	bne.n	8001aac <__gedf2+0x80>
 8001afe:	2000      	movs	r0, #0
 8001b00:	e7d9      	b.n	8001ab6 <__gedf2+0x8a>
 8001b02:	2002      	movs	r0, #2
 8001b04:	4240      	negs	r0, r0
 8001b06:	e7d6      	b.n	8001ab6 <__gedf2+0x8a>
 8001b08:	4584      	cmp	ip, r0
 8001b0a:	d0e6      	beq.n	8001ada <__gedf2+0xae>
 8001b0c:	e7ce      	b.n	8001aac <__gedf2+0x80>
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	000007ff 	.word	0x000007ff

08001b14 <__ledf2>:
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	4657      	mov	r7, sl
 8001b18:	464e      	mov	r6, r9
 8001b1a:	4645      	mov	r5, r8
 8001b1c:	46de      	mov	lr, fp
 8001b1e:	b5e0      	push	{r5, r6, r7, lr}
 8001b20:	000d      	movs	r5, r1
 8001b22:	030f      	lsls	r7, r1, #12
 8001b24:	0004      	movs	r4, r0
 8001b26:	4680      	mov	r8, r0
 8001b28:	0fe8      	lsrs	r0, r5, #31
 8001b2a:	0b39      	lsrs	r1, r7, #12
 8001b2c:	4684      	mov	ip, r0
 8001b2e:	b083      	sub	sp, #12
 8001b30:	0058      	lsls	r0, r3, #1
 8001b32:	4f30      	ldr	r7, [pc, #192]	@ (8001bf4 <__ledf2+0xe0>)
 8001b34:	0d40      	lsrs	r0, r0, #21
 8001b36:	9101      	str	r1, [sp, #4]
 8001b38:	031e      	lsls	r6, r3, #12
 8001b3a:	0069      	lsls	r1, r5, #1
 8001b3c:	4682      	mov	sl, r0
 8001b3e:	4691      	mov	r9, r2
 8001b40:	0d49      	lsrs	r1, r1, #21
 8001b42:	0b36      	lsrs	r6, r6, #12
 8001b44:	0fd8      	lsrs	r0, r3, #31
 8001b46:	42b9      	cmp	r1, r7
 8001b48:	d020      	beq.n	8001b8c <__ledf2+0x78>
 8001b4a:	45ba      	cmp	sl, r7
 8001b4c:	d00f      	beq.n	8001b6e <__ledf2+0x5a>
 8001b4e:	2900      	cmp	r1, #0
 8001b50:	d12b      	bne.n	8001baa <__ledf2+0x96>
 8001b52:	9901      	ldr	r1, [sp, #4]
 8001b54:	430c      	orrs	r4, r1
 8001b56:	4651      	mov	r1, sl
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d137      	bne.n	8001bcc <__ledf2+0xb8>
 8001b5c:	4332      	orrs	r2, r6
 8001b5e:	d038      	beq.n	8001bd2 <__ledf2+0xbe>
 8001b60:	2c00      	cmp	r4, #0
 8001b62:	d144      	bne.n	8001bee <__ledf2+0xda>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d119      	bne.n	8001b9c <__ledf2+0x88>
 8001b68:	2001      	movs	r0, #1
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	e016      	b.n	8001b9c <__ledf2+0x88>
 8001b6e:	4316      	orrs	r6, r2
 8001b70:	d113      	bne.n	8001b9a <__ledf2+0x86>
 8001b72:	2900      	cmp	r1, #0
 8001b74:	d102      	bne.n	8001b7c <__ledf2+0x68>
 8001b76:	9f01      	ldr	r7, [sp, #4]
 8001b78:	4327      	orrs	r7, r4
 8001b7a:	d0f3      	beq.n	8001b64 <__ledf2+0x50>
 8001b7c:	4584      	cmp	ip, r0
 8001b7e:	d020      	beq.n	8001bc2 <__ledf2+0xae>
 8001b80:	4663      	mov	r3, ip
 8001b82:	2002      	movs	r0, #2
 8001b84:	3b01      	subs	r3, #1
 8001b86:	4018      	ands	r0, r3
 8001b88:	3801      	subs	r0, #1
 8001b8a:	e007      	b.n	8001b9c <__ledf2+0x88>
 8001b8c:	9f01      	ldr	r7, [sp, #4]
 8001b8e:	4327      	orrs	r7, r4
 8001b90:	d103      	bne.n	8001b9a <__ledf2+0x86>
 8001b92:	458a      	cmp	sl, r1
 8001b94:	d1f4      	bne.n	8001b80 <__ledf2+0x6c>
 8001b96:	4316      	orrs	r6, r2
 8001b98:	d01f      	beq.n	8001bda <__ledf2+0xc6>
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	b003      	add	sp, #12
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	4654      	mov	r4, sl
 8001bac:	2c00      	cmp	r4, #0
 8001bae:	d0e7      	beq.n	8001b80 <__ledf2+0x6c>
 8001bb0:	4584      	cmp	ip, r0
 8001bb2:	d1e5      	bne.n	8001b80 <__ledf2+0x6c>
 8001bb4:	4551      	cmp	r1, sl
 8001bb6:	dce3      	bgt.n	8001b80 <__ledf2+0x6c>
 8001bb8:	db03      	blt.n	8001bc2 <__ledf2+0xae>
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	42b3      	cmp	r3, r6
 8001bbe:	d8df      	bhi.n	8001b80 <__ledf2+0x6c>
 8001bc0:	d00f      	beq.n	8001be2 <__ledf2+0xce>
 8001bc2:	4663      	mov	r3, ip
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0cf      	beq.n	8001b68 <__ledf2+0x54>
 8001bc8:	4660      	mov	r0, ip
 8001bca:	e7e7      	b.n	8001b9c <__ledf2+0x88>
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	d0c9      	beq.n	8001b64 <__ledf2+0x50>
 8001bd0:	e7d4      	b.n	8001b7c <__ledf2+0x68>
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	2c00      	cmp	r4, #0
 8001bd6:	d0e1      	beq.n	8001b9c <__ledf2+0x88>
 8001bd8:	e7d2      	b.n	8001b80 <__ledf2+0x6c>
 8001bda:	4584      	cmp	ip, r0
 8001bdc:	d1d0      	bne.n	8001b80 <__ledf2+0x6c>
 8001bde:	2000      	movs	r0, #0
 8001be0:	e7dc      	b.n	8001b9c <__ledf2+0x88>
 8001be2:	45c8      	cmp	r8, r9
 8001be4:	d8cc      	bhi.n	8001b80 <__ledf2+0x6c>
 8001be6:	2000      	movs	r0, #0
 8001be8:	45c8      	cmp	r8, r9
 8001bea:	d2d7      	bcs.n	8001b9c <__ledf2+0x88>
 8001bec:	e7e9      	b.n	8001bc2 <__ledf2+0xae>
 8001bee:	4584      	cmp	ip, r0
 8001bf0:	d0e3      	beq.n	8001bba <__ledf2+0xa6>
 8001bf2:	e7c5      	b.n	8001b80 <__ledf2+0x6c>
 8001bf4:	000007ff 	.word	0x000007ff

08001bf8 <__aeabi_dmul>:
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	4657      	mov	r7, sl
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	464e      	mov	r6, r9
 8001c00:	4645      	mov	r5, r8
 8001c02:	b5e0      	push	{r5, r6, r7, lr}
 8001c04:	001f      	movs	r7, r3
 8001c06:	030b      	lsls	r3, r1, #12
 8001c08:	0b1b      	lsrs	r3, r3, #12
 8001c0a:	0016      	movs	r6, r2
 8001c0c:	469a      	mov	sl, r3
 8001c0e:	0fca      	lsrs	r2, r1, #31
 8001c10:	004b      	lsls	r3, r1, #1
 8001c12:	0004      	movs	r4, r0
 8001c14:	4693      	mov	fp, r2
 8001c16:	b087      	sub	sp, #28
 8001c18:	0d5b      	lsrs	r3, r3, #21
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dmul+0x26>
 8001c1c:	e0d5      	b.n	8001dca <__aeabi_dmul+0x1d2>
 8001c1e:	4abb      	ldr	r2, [pc, #748]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d100      	bne.n	8001c26 <__aeabi_dmul+0x2e>
 8001c24:	e0f8      	b.n	8001e18 <__aeabi_dmul+0x220>
 8001c26:	4651      	mov	r1, sl
 8001c28:	0f42      	lsrs	r2, r0, #29
 8001c2a:	00c9      	lsls	r1, r1, #3
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	2180      	movs	r1, #128	@ 0x80
 8001c30:	0409      	lsls	r1, r1, #16
 8001c32:	4311      	orrs	r1, r2
 8001c34:	00c2      	lsls	r2, r0, #3
 8001c36:	4691      	mov	r9, r2
 8001c38:	4ab5      	ldr	r2, [pc, #724]	@ (8001f10 <__aeabi_dmul+0x318>)
 8001c3a:	468a      	mov	sl, r1
 8001c3c:	189d      	adds	r5, r3, r2
 8001c3e:	2300      	movs	r3, #0
 8001c40:	4698      	mov	r8, r3
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	033c      	lsls	r4, r7, #12
 8001c46:	007b      	lsls	r3, r7, #1
 8001c48:	0ffa      	lsrs	r2, r7, #31
 8001c4a:	0030      	movs	r0, r6
 8001c4c:	0b24      	lsrs	r4, r4, #12
 8001c4e:	0d5b      	lsrs	r3, r3, #21
 8001c50:	9200      	str	r2, [sp, #0]
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dmul+0x5e>
 8001c54:	e096      	b.n	8001d84 <__aeabi_dmul+0x18c>
 8001c56:	4aad      	ldr	r2, [pc, #692]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d031      	beq.n	8001cc0 <__aeabi_dmul+0xc8>
 8001c5c:	0f72      	lsrs	r2, r6, #29
 8001c5e:	00e4      	lsls	r4, r4, #3
 8001c60:	4322      	orrs	r2, r4
 8001c62:	2480      	movs	r4, #128	@ 0x80
 8001c64:	0424      	lsls	r4, r4, #16
 8001c66:	4314      	orrs	r4, r2
 8001c68:	4aa9      	ldr	r2, [pc, #676]	@ (8001f10 <__aeabi_dmul+0x318>)
 8001c6a:	00f0      	lsls	r0, r6, #3
 8001c6c:	4694      	mov	ip, r2
 8001c6e:	4463      	add	r3, ip
 8001c70:	195b      	adds	r3, r3, r5
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	9201      	str	r2, [sp, #4]
 8001c76:	4642      	mov	r2, r8
 8001c78:	2600      	movs	r6, #0
 8001c7a:	2a0a      	cmp	r2, #10
 8001c7c:	dc42      	bgt.n	8001d04 <__aeabi_dmul+0x10c>
 8001c7e:	465a      	mov	r2, fp
 8001c80:	9900      	ldr	r1, [sp, #0]
 8001c82:	404a      	eors	r2, r1
 8001c84:	4693      	mov	fp, r2
 8001c86:	4642      	mov	r2, r8
 8001c88:	2a02      	cmp	r2, #2
 8001c8a:	dc32      	bgt.n	8001cf2 <__aeabi_dmul+0xfa>
 8001c8c:	3a01      	subs	r2, #1
 8001c8e:	2a01      	cmp	r2, #1
 8001c90:	d900      	bls.n	8001c94 <__aeabi_dmul+0x9c>
 8001c92:	e149      	b.n	8001f28 <__aeabi_dmul+0x330>
 8001c94:	2e02      	cmp	r6, #2
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dmul+0xa2>
 8001c98:	e0ca      	b.n	8001e30 <__aeabi_dmul+0x238>
 8001c9a:	2e01      	cmp	r6, #1
 8001c9c:	d13d      	bne.n	8001d1a <__aeabi_dmul+0x122>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	465a      	mov	r2, fp
 8001ca8:	051b      	lsls	r3, r3, #20
 8001caa:	4323      	orrs	r3, r4
 8001cac:	07d2      	lsls	r2, r2, #31
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	b007      	add	sp, #28
 8001cb4:	bcf0      	pop	{r4, r5, r6, r7}
 8001cb6:	46bb      	mov	fp, r7
 8001cb8:	46b2      	mov	sl, r6
 8001cba:	46a9      	mov	r9, r5
 8001cbc:	46a0      	mov	r8, r4
 8001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc0:	4b92      	ldr	r3, [pc, #584]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001cc2:	4326      	orrs	r6, r4
 8001cc4:	18eb      	adds	r3, r5, r3
 8001cc6:	2e00      	cmp	r6, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dmul+0xd4>
 8001cca:	e0bb      	b.n	8001e44 <__aeabi_dmul+0x24c>
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4641      	mov	r1, r8
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	465a      	mov	r2, fp
 8001cd4:	4688      	mov	r8, r1
 8001cd6:	9900      	ldr	r1, [sp, #0]
 8001cd8:	404a      	eors	r2, r1
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	0109      	lsls	r1, r1, #4
 8001cde:	468c      	mov	ip, r1
 8001ce0:	0029      	movs	r1, r5
 8001ce2:	4461      	add	r1, ip
 8001ce4:	9101      	str	r1, [sp, #4]
 8001ce6:	4641      	mov	r1, r8
 8001ce8:	290a      	cmp	r1, #10
 8001cea:	dd00      	ble.n	8001cee <__aeabi_dmul+0xf6>
 8001cec:	e233      	b.n	8002156 <__aeabi_dmul+0x55e>
 8001cee:	4693      	mov	fp, r2
 8001cf0:	2603      	movs	r6, #3
 8001cf2:	4642      	mov	r2, r8
 8001cf4:	2701      	movs	r7, #1
 8001cf6:	4097      	lsls	r7, r2
 8001cf8:	21a6      	movs	r1, #166	@ 0xa6
 8001cfa:	003a      	movs	r2, r7
 8001cfc:	00c9      	lsls	r1, r1, #3
 8001cfe:	400a      	ands	r2, r1
 8001d00:	420f      	tst	r7, r1
 8001d02:	d031      	beq.n	8001d68 <__aeabi_dmul+0x170>
 8001d04:	9e02      	ldr	r6, [sp, #8]
 8001d06:	2e02      	cmp	r6, #2
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dmul+0x114>
 8001d0a:	e235      	b.n	8002178 <__aeabi_dmul+0x580>
 8001d0c:	2e03      	cmp	r6, #3
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dmul+0x11a>
 8001d10:	e1d2      	b.n	80020b8 <__aeabi_dmul+0x4c0>
 8001d12:	4654      	mov	r4, sl
 8001d14:	4648      	mov	r0, r9
 8001d16:	2e01      	cmp	r6, #1
 8001d18:	d0c1      	beq.n	8001c9e <__aeabi_dmul+0xa6>
 8001d1a:	9a01      	ldr	r2, [sp, #4]
 8001d1c:	4b7d      	ldr	r3, [pc, #500]	@ (8001f14 <__aeabi_dmul+0x31c>)
 8001d1e:	4694      	mov	ip, r2
 8001d20:	4463      	add	r3, ip
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_dmul+0x130>
 8001d26:	e0c0      	b.n	8001eaa <__aeabi_dmul+0x2b2>
 8001d28:	0742      	lsls	r2, r0, #29
 8001d2a:	d009      	beq.n	8001d40 <__aeabi_dmul+0x148>
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	4002      	ands	r2, r0
 8001d30:	2a04      	cmp	r2, #4
 8001d32:	d005      	beq.n	8001d40 <__aeabi_dmul+0x148>
 8001d34:	1d02      	adds	r2, r0, #4
 8001d36:	4282      	cmp	r2, r0
 8001d38:	4180      	sbcs	r0, r0
 8001d3a:	4240      	negs	r0, r0
 8001d3c:	1824      	adds	r4, r4, r0
 8001d3e:	0010      	movs	r0, r2
 8001d40:	01e2      	lsls	r2, r4, #7
 8001d42:	d506      	bpl.n	8001d52 <__aeabi_dmul+0x15a>
 8001d44:	4b74      	ldr	r3, [pc, #464]	@ (8001f18 <__aeabi_dmul+0x320>)
 8001d46:	9a01      	ldr	r2, [sp, #4]
 8001d48:	401c      	ands	r4, r3
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	4694      	mov	ip, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4463      	add	r3, ip
 8001d52:	4a72      	ldr	r2, [pc, #456]	@ (8001f1c <__aeabi_dmul+0x324>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	dc6b      	bgt.n	8001e30 <__aeabi_dmul+0x238>
 8001d58:	0762      	lsls	r2, r4, #29
 8001d5a:	08c0      	lsrs	r0, r0, #3
 8001d5c:	0264      	lsls	r4, r4, #9
 8001d5e:	055b      	lsls	r3, r3, #21
 8001d60:	4302      	orrs	r2, r0
 8001d62:	0b24      	lsrs	r4, r4, #12
 8001d64:	0d5b      	lsrs	r3, r3, #21
 8001d66:	e79d      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8001d68:	2190      	movs	r1, #144	@ 0x90
 8001d6a:	0089      	lsls	r1, r1, #2
 8001d6c:	420f      	tst	r7, r1
 8001d6e:	d163      	bne.n	8001e38 <__aeabi_dmul+0x240>
 8001d70:	2288      	movs	r2, #136	@ 0x88
 8001d72:	423a      	tst	r2, r7
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dmul+0x180>
 8001d76:	e0d7      	b.n	8001f28 <__aeabi_dmul+0x330>
 8001d78:	9b00      	ldr	r3, [sp, #0]
 8001d7a:	46a2      	mov	sl, r4
 8001d7c:	469b      	mov	fp, r3
 8001d7e:	4681      	mov	r9, r0
 8001d80:	9602      	str	r6, [sp, #8]
 8001d82:	e7bf      	b.n	8001d04 <__aeabi_dmul+0x10c>
 8001d84:	0023      	movs	r3, r4
 8001d86:	4333      	orrs	r3, r6
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dmul+0x194>
 8001d8a:	e07f      	b.n	8001e8c <__aeabi_dmul+0x294>
 8001d8c:	2c00      	cmp	r4, #0
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dmul+0x19a>
 8001d90:	e1ad      	b.n	80020ee <__aeabi_dmul+0x4f6>
 8001d92:	0020      	movs	r0, r4
 8001d94:	f000 ff10 	bl	8002bb8 <__clzsi2>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	3a0b      	subs	r2, #11
 8001d9e:	201d      	movs	r0, #29
 8001da0:	0019      	movs	r1, r3
 8001da2:	1a82      	subs	r2, r0, r2
 8001da4:	0030      	movs	r0, r6
 8001da6:	3908      	subs	r1, #8
 8001da8:	40d0      	lsrs	r0, r2
 8001daa:	408c      	lsls	r4, r1
 8001dac:	4304      	orrs	r4, r0
 8001dae:	0030      	movs	r0, r6
 8001db0:	4088      	lsls	r0, r1
 8001db2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f20 <__aeabi_dmul+0x328>)
 8001db4:	1aeb      	subs	r3, r5, r3
 8001db6:	4694      	mov	ip, r2
 8001db8:	4463      	add	r3, ip
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	9201      	str	r2, [sp, #4]
 8001dbe:	4642      	mov	r2, r8
 8001dc0:	2600      	movs	r6, #0
 8001dc2:	2a0a      	cmp	r2, #10
 8001dc4:	dc00      	bgt.n	8001dc8 <__aeabi_dmul+0x1d0>
 8001dc6:	e75a      	b.n	8001c7e <__aeabi_dmul+0x86>
 8001dc8:	e79c      	b.n	8001d04 <__aeabi_dmul+0x10c>
 8001dca:	4653      	mov	r3, sl
 8001dcc:	4303      	orrs	r3, r0
 8001dce:	4699      	mov	r9, r3
 8001dd0:	d054      	beq.n	8001e7c <__aeabi_dmul+0x284>
 8001dd2:	4653      	mov	r3, sl
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dmul+0x1e2>
 8001dd8:	e177      	b.n	80020ca <__aeabi_dmul+0x4d2>
 8001dda:	4650      	mov	r0, sl
 8001ddc:	f000 feec 	bl	8002bb8 <__clzsi2>
 8001de0:	230b      	movs	r3, #11
 8001de2:	425b      	negs	r3, r3
 8001de4:	469c      	mov	ip, r3
 8001de6:	0002      	movs	r2, r0
 8001de8:	4484      	add	ip, r0
 8001dea:	0011      	movs	r1, r2
 8001dec:	4650      	mov	r0, sl
 8001dee:	3908      	subs	r1, #8
 8001df0:	4088      	lsls	r0, r1
 8001df2:	231d      	movs	r3, #29
 8001df4:	4680      	mov	r8, r0
 8001df6:	4660      	mov	r0, ip
 8001df8:	1a1b      	subs	r3, r3, r0
 8001dfa:	0020      	movs	r0, r4
 8001dfc:	40d8      	lsrs	r0, r3
 8001dfe:	0003      	movs	r3, r0
 8001e00:	4640      	mov	r0, r8
 8001e02:	4303      	orrs	r3, r0
 8001e04:	469a      	mov	sl, r3
 8001e06:	0023      	movs	r3, r4
 8001e08:	408b      	lsls	r3, r1
 8001e0a:	4699      	mov	r9, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	4d44      	ldr	r5, [pc, #272]	@ (8001f20 <__aeabi_dmul+0x328>)
 8001e10:	4698      	mov	r8, r3
 8001e12:	1aad      	subs	r5, r5, r2
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	e715      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8001e18:	4652      	mov	r2, sl
 8001e1a:	4302      	orrs	r2, r0
 8001e1c:	4691      	mov	r9, r2
 8001e1e:	d126      	bne.n	8001e6e <__aeabi_dmul+0x276>
 8001e20:	2200      	movs	r2, #0
 8001e22:	001d      	movs	r5, r3
 8001e24:	2302      	movs	r3, #2
 8001e26:	4692      	mov	sl, r2
 8001e28:	3208      	adds	r2, #8
 8001e2a:	4690      	mov	r8, r2
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	e709      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8001e30:	2400      	movs	r4, #0
 8001e32:	2200      	movs	r2, #0
 8001e34:	4b35      	ldr	r3, [pc, #212]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001e36:	e735      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2480      	movs	r4, #128	@ 0x80
 8001e3c:	469b      	mov	fp, r3
 8001e3e:	0324      	lsls	r4, r4, #12
 8001e40:	4b32      	ldr	r3, [pc, #200]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001e42:	e72f      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8001e44:	2202      	movs	r2, #2
 8001e46:	4641      	mov	r1, r8
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	2280      	movs	r2, #128	@ 0x80
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	4694      	mov	ip, r2
 8001e50:	002a      	movs	r2, r5
 8001e52:	4462      	add	r2, ip
 8001e54:	4688      	mov	r8, r1
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	290a      	cmp	r1, #10
 8001e5a:	dd00      	ble.n	8001e5e <__aeabi_dmul+0x266>
 8001e5c:	e752      	b.n	8001d04 <__aeabi_dmul+0x10c>
 8001e5e:	465a      	mov	r2, fp
 8001e60:	2000      	movs	r0, #0
 8001e62:	9900      	ldr	r1, [sp, #0]
 8001e64:	0004      	movs	r4, r0
 8001e66:	404a      	eors	r2, r1
 8001e68:	4693      	mov	fp, r2
 8001e6a:	2602      	movs	r6, #2
 8001e6c:	e70b      	b.n	8001c86 <__aeabi_dmul+0x8e>
 8001e6e:	220c      	movs	r2, #12
 8001e70:	001d      	movs	r5, r3
 8001e72:	2303      	movs	r3, #3
 8001e74:	4681      	mov	r9, r0
 8001e76:	4690      	mov	r8, r2
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	e6e3      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	469a      	mov	sl, r3
 8001e80:	3304      	adds	r3, #4
 8001e82:	4698      	mov	r8, r3
 8001e84:	3b03      	subs	r3, #3
 8001e86:	2500      	movs	r5, #0
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	e6db      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8001e8c:	4642      	mov	r2, r8
 8001e8e:	3301      	adds	r3, #1
 8001e90:	431a      	orrs	r2, r3
 8001e92:	002b      	movs	r3, r5
 8001e94:	4690      	mov	r8, r2
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	9201      	str	r2, [sp, #4]
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	2601      	movs	r6, #1
 8001ea2:	2a0a      	cmp	r2, #10
 8001ea4:	dc00      	bgt.n	8001ea8 <__aeabi_dmul+0x2b0>
 8001ea6:	e6ea      	b.n	8001c7e <__aeabi_dmul+0x86>
 8001ea8:	e72c      	b.n	8001d04 <__aeabi_dmul+0x10c>
 8001eaa:	2201      	movs	r2, #1
 8001eac:	1ad2      	subs	r2, r2, r3
 8001eae:	2a38      	cmp	r2, #56	@ 0x38
 8001eb0:	dd00      	ble.n	8001eb4 <__aeabi_dmul+0x2bc>
 8001eb2:	e6f4      	b.n	8001c9e <__aeabi_dmul+0xa6>
 8001eb4:	2a1f      	cmp	r2, #31
 8001eb6:	dc00      	bgt.n	8001eba <__aeabi_dmul+0x2c2>
 8001eb8:	e12a      	b.n	8002110 <__aeabi_dmul+0x518>
 8001eba:	211f      	movs	r1, #31
 8001ebc:	4249      	negs	r1, r1
 8001ebe:	1acb      	subs	r3, r1, r3
 8001ec0:	0021      	movs	r1, r4
 8001ec2:	40d9      	lsrs	r1, r3
 8001ec4:	000b      	movs	r3, r1
 8001ec6:	2a20      	cmp	r2, #32
 8001ec8:	d005      	beq.n	8001ed6 <__aeabi_dmul+0x2de>
 8001eca:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <__aeabi_dmul+0x32c>)
 8001ecc:	9d01      	ldr	r5, [sp, #4]
 8001ece:	4694      	mov	ip, r2
 8001ed0:	4465      	add	r5, ip
 8001ed2:	40ac      	lsls	r4, r5
 8001ed4:	4320      	orrs	r0, r4
 8001ed6:	1e42      	subs	r2, r0, #1
 8001ed8:	4190      	sbcs	r0, r2
 8001eda:	4318      	orrs	r0, r3
 8001edc:	2307      	movs	r3, #7
 8001ede:	0019      	movs	r1, r3
 8001ee0:	2400      	movs	r4, #0
 8001ee2:	4001      	ands	r1, r0
 8001ee4:	4203      	tst	r3, r0
 8001ee6:	d00c      	beq.n	8001f02 <__aeabi_dmul+0x30a>
 8001ee8:	230f      	movs	r3, #15
 8001eea:	4003      	ands	r3, r0
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dmul+0x2fa>
 8001ef0:	e140      	b.n	8002174 <__aeabi_dmul+0x57c>
 8001ef2:	1d03      	adds	r3, r0, #4
 8001ef4:	4283      	cmp	r3, r0
 8001ef6:	41a4      	sbcs	r4, r4
 8001ef8:	0018      	movs	r0, r3
 8001efa:	4264      	negs	r4, r4
 8001efc:	0761      	lsls	r1, r4, #29
 8001efe:	0264      	lsls	r4, r4, #9
 8001f00:	0b24      	lsrs	r4, r4, #12
 8001f02:	08c2      	lsrs	r2, r0, #3
 8001f04:	2300      	movs	r3, #0
 8001f06:	430a      	orrs	r2, r1
 8001f08:	e6cc      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	000007ff 	.word	0x000007ff
 8001f10:	fffffc01 	.word	0xfffffc01
 8001f14:	000003ff 	.word	0x000003ff
 8001f18:	feffffff 	.word	0xfeffffff
 8001f1c:	000007fe 	.word	0x000007fe
 8001f20:	fffffc0d 	.word	0xfffffc0d
 8001f24:	0000043e 	.word	0x0000043e
 8001f28:	4649      	mov	r1, r9
 8001f2a:	464a      	mov	r2, r9
 8001f2c:	0409      	lsls	r1, r1, #16
 8001f2e:	0c09      	lsrs	r1, r1, #16
 8001f30:	000d      	movs	r5, r1
 8001f32:	0c16      	lsrs	r6, r2, #16
 8001f34:	0c02      	lsrs	r2, r0, #16
 8001f36:	0400      	lsls	r0, r0, #16
 8001f38:	0c00      	lsrs	r0, r0, #16
 8001f3a:	4345      	muls	r5, r0
 8001f3c:	46ac      	mov	ip, r5
 8001f3e:	0005      	movs	r5, r0
 8001f40:	4375      	muls	r5, r6
 8001f42:	46a8      	mov	r8, r5
 8001f44:	0015      	movs	r5, r2
 8001f46:	000f      	movs	r7, r1
 8001f48:	4375      	muls	r5, r6
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	9502      	str	r5, [sp, #8]
 8001f4e:	002a      	movs	r2, r5
 8001f50:	9d00      	ldr	r5, [sp, #0]
 8001f52:	436f      	muls	r7, r5
 8001f54:	4665      	mov	r5, ip
 8001f56:	0c2d      	lsrs	r5, r5, #16
 8001f58:	46a9      	mov	r9, r5
 8001f5a:	4447      	add	r7, r8
 8001f5c:	444f      	add	r7, r9
 8001f5e:	45b8      	cmp	r8, r7
 8001f60:	d905      	bls.n	8001f6e <__aeabi_dmul+0x376>
 8001f62:	0015      	movs	r5, r2
 8001f64:	2280      	movs	r2, #128	@ 0x80
 8001f66:	0252      	lsls	r2, r2, #9
 8001f68:	4690      	mov	r8, r2
 8001f6a:	4445      	add	r5, r8
 8001f6c:	9502      	str	r5, [sp, #8]
 8001f6e:	0c3d      	lsrs	r5, r7, #16
 8001f70:	9503      	str	r5, [sp, #12]
 8001f72:	4665      	mov	r5, ip
 8001f74:	042d      	lsls	r5, r5, #16
 8001f76:	043f      	lsls	r7, r7, #16
 8001f78:	0c2d      	lsrs	r5, r5, #16
 8001f7a:	46ac      	mov	ip, r5
 8001f7c:	003d      	movs	r5, r7
 8001f7e:	4465      	add	r5, ip
 8001f80:	9504      	str	r5, [sp, #16]
 8001f82:	0c25      	lsrs	r5, r4, #16
 8001f84:	0424      	lsls	r4, r4, #16
 8001f86:	0c24      	lsrs	r4, r4, #16
 8001f88:	46ac      	mov	ip, r5
 8001f8a:	0025      	movs	r5, r4
 8001f8c:	4375      	muls	r5, r6
 8001f8e:	46a8      	mov	r8, r5
 8001f90:	4665      	mov	r5, ip
 8001f92:	000f      	movs	r7, r1
 8001f94:	4369      	muls	r1, r5
 8001f96:	4441      	add	r1, r8
 8001f98:	4689      	mov	r9, r1
 8001f9a:	4367      	muls	r7, r4
 8001f9c:	0c39      	lsrs	r1, r7, #16
 8001f9e:	4449      	add	r1, r9
 8001fa0:	436e      	muls	r6, r5
 8001fa2:	4588      	cmp	r8, r1
 8001fa4:	d903      	bls.n	8001fae <__aeabi_dmul+0x3b6>
 8001fa6:	2280      	movs	r2, #128	@ 0x80
 8001fa8:	0252      	lsls	r2, r2, #9
 8001faa:	4690      	mov	r8, r2
 8001fac:	4446      	add	r6, r8
 8001fae:	0c0d      	lsrs	r5, r1, #16
 8001fb0:	46a8      	mov	r8, r5
 8001fb2:	0035      	movs	r5, r6
 8001fb4:	4445      	add	r5, r8
 8001fb6:	9505      	str	r5, [sp, #20]
 8001fb8:	9d03      	ldr	r5, [sp, #12]
 8001fba:	043f      	lsls	r7, r7, #16
 8001fbc:	46a8      	mov	r8, r5
 8001fbe:	0c3f      	lsrs	r7, r7, #16
 8001fc0:	0409      	lsls	r1, r1, #16
 8001fc2:	19c9      	adds	r1, r1, r7
 8001fc4:	4488      	add	r8, r1
 8001fc6:	4645      	mov	r5, r8
 8001fc8:	9503      	str	r5, [sp, #12]
 8001fca:	4655      	mov	r5, sl
 8001fcc:	042e      	lsls	r6, r5, #16
 8001fce:	0c36      	lsrs	r6, r6, #16
 8001fd0:	0c2f      	lsrs	r7, r5, #16
 8001fd2:	0035      	movs	r5, r6
 8001fd4:	4345      	muls	r5, r0
 8001fd6:	4378      	muls	r0, r7
 8001fd8:	4681      	mov	r9, r0
 8001fda:	0038      	movs	r0, r7
 8001fdc:	46a8      	mov	r8, r5
 8001fde:	0c2d      	lsrs	r5, r5, #16
 8001fe0:	46aa      	mov	sl, r5
 8001fe2:	9a00      	ldr	r2, [sp, #0]
 8001fe4:	4350      	muls	r0, r2
 8001fe6:	4372      	muls	r2, r6
 8001fe8:	444a      	add	r2, r9
 8001fea:	4452      	add	r2, sl
 8001fec:	4591      	cmp	r9, r2
 8001fee:	d903      	bls.n	8001ff8 <__aeabi_dmul+0x400>
 8001ff0:	2580      	movs	r5, #128	@ 0x80
 8001ff2:	026d      	lsls	r5, r5, #9
 8001ff4:	46a9      	mov	r9, r5
 8001ff6:	4448      	add	r0, r9
 8001ff8:	0c15      	lsrs	r5, r2, #16
 8001ffa:	46a9      	mov	r9, r5
 8001ffc:	4645      	mov	r5, r8
 8001ffe:	042d      	lsls	r5, r5, #16
 8002000:	0c2d      	lsrs	r5, r5, #16
 8002002:	46a8      	mov	r8, r5
 8002004:	4665      	mov	r5, ip
 8002006:	437d      	muls	r5, r7
 8002008:	0412      	lsls	r2, r2, #16
 800200a:	4448      	add	r0, r9
 800200c:	4490      	add	r8, r2
 800200e:	46a9      	mov	r9, r5
 8002010:	0032      	movs	r2, r6
 8002012:	4665      	mov	r5, ip
 8002014:	4362      	muls	r2, r4
 8002016:	436e      	muls	r6, r5
 8002018:	437c      	muls	r4, r7
 800201a:	0c17      	lsrs	r7, r2, #16
 800201c:	1936      	adds	r6, r6, r4
 800201e:	19bf      	adds	r7, r7, r6
 8002020:	42bc      	cmp	r4, r7
 8002022:	d903      	bls.n	800202c <__aeabi_dmul+0x434>
 8002024:	2480      	movs	r4, #128	@ 0x80
 8002026:	0264      	lsls	r4, r4, #9
 8002028:	46a4      	mov	ip, r4
 800202a:	44e1      	add	r9, ip
 800202c:	9c02      	ldr	r4, [sp, #8]
 800202e:	9e03      	ldr	r6, [sp, #12]
 8002030:	46a4      	mov	ip, r4
 8002032:	9d05      	ldr	r5, [sp, #20]
 8002034:	4466      	add	r6, ip
 8002036:	428e      	cmp	r6, r1
 8002038:	4189      	sbcs	r1, r1
 800203a:	46ac      	mov	ip, r5
 800203c:	0412      	lsls	r2, r2, #16
 800203e:	043c      	lsls	r4, r7, #16
 8002040:	0c12      	lsrs	r2, r2, #16
 8002042:	18a2      	adds	r2, r4, r2
 8002044:	4462      	add	r2, ip
 8002046:	4249      	negs	r1, r1
 8002048:	1854      	adds	r4, r2, r1
 800204a:	4446      	add	r6, r8
 800204c:	46a4      	mov	ip, r4
 800204e:	4546      	cmp	r6, r8
 8002050:	41a4      	sbcs	r4, r4
 8002052:	4682      	mov	sl, r0
 8002054:	4264      	negs	r4, r4
 8002056:	46a0      	mov	r8, r4
 8002058:	42aa      	cmp	r2, r5
 800205a:	4192      	sbcs	r2, r2
 800205c:	458c      	cmp	ip, r1
 800205e:	4189      	sbcs	r1, r1
 8002060:	44e2      	add	sl, ip
 8002062:	44d0      	add	r8, sl
 8002064:	4249      	negs	r1, r1
 8002066:	4252      	negs	r2, r2
 8002068:	430a      	orrs	r2, r1
 800206a:	45a0      	cmp	r8, r4
 800206c:	41a4      	sbcs	r4, r4
 800206e:	4582      	cmp	sl, r0
 8002070:	4189      	sbcs	r1, r1
 8002072:	4264      	negs	r4, r4
 8002074:	4249      	negs	r1, r1
 8002076:	430c      	orrs	r4, r1
 8002078:	4641      	mov	r1, r8
 800207a:	0c3f      	lsrs	r7, r7, #16
 800207c:	19d2      	adds	r2, r2, r7
 800207e:	1912      	adds	r2, r2, r4
 8002080:	0dcc      	lsrs	r4, r1, #23
 8002082:	9904      	ldr	r1, [sp, #16]
 8002084:	0270      	lsls	r0, r6, #9
 8002086:	4308      	orrs	r0, r1
 8002088:	1e41      	subs	r1, r0, #1
 800208a:	4188      	sbcs	r0, r1
 800208c:	4641      	mov	r1, r8
 800208e:	444a      	add	r2, r9
 8002090:	0df6      	lsrs	r6, r6, #23
 8002092:	0252      	lsls	r2, r2, #9
 8002094:	4330      	orrs	r0, r6
 8002096:	0249      	lsls	r1, r1, #9
 8002098:	4314      	orrs	r4, r2
 800209a:	4308      	orrs	r0, r1
 800209c:	01d2      	lsls	r2, r2, #7
 800209e:	d535      	bpl.n	800210c <__aeabi_dmul+0x514>
 80020a0:	2201      	movs	r2, #1
 80020a2:	0843      	lsrs	r3, r0, #1
 80020a4:	4002      	ands	r2, r0
 80020a6:	4313      	orrs	r3, r2
 80020a8:	07e0      	lsls	r0, r4, #31
 80020aa:	4318      	orrs	r0, r3
 80020ac:	0864      	lsrs	r4, r4, #1
 80020ae:	e634      	b.n	8001d1a <__aeabi_dmul+0x122>
 80020b0:	9b00      	ldr	r3, [sp, #0]
 80020b2:	46a2      	mov	sl, r4
 80020b4:	469b      	mov	fp, r3
 80020b6:	4681      	mov	r9, r0
 80020b8:	2480      	movs	r4, #128	@ 0x80
 80020ba:	4653      	mov	r3, sl
 80020bc:	0324      	lsls	r4, r4, #12
 80020be:	431c      	orrs	r4, r3
 80020c0:	0324      	lsls	r4, r4, #12
 80020c2:	464a      	mov	r2, r9
 80020c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <__aeabi_dmul+0x588>)
 80020c6:	0b24      	lsrs	r4, r4, #12
 80020c8:	e5ec      	b.n	8001ca4 <__aeabi_dmul+0xac>
 80020ca:	f000 fd75 	bl	8002bb8 <__clzsi2>
 80020ce:	2315      	movs	r3, #21
 80020d0:	469c      	mov	ip, r3
 80020d2:	4484      	add	ip, r0
 80020d4:	0002      	movs	r2, r0
 80020d6:	4663      	mov	r3, ip
 80020d8:	3220      	adds	r2, #32
 80020da:	2b1c      	cmp	r3, #28
 80020dc:	dc00      	bgt.n	80020e0 <__aeabi_dmul+0x4e8>
 80020de:	e684      	b.n	8001dea <__aeabi_dmul+0x1f2>
 80020e0:	2300      	movs	r3, #0
 80020e2:	4699      	mov	r9, r3
 80020e4:	0023      	movs	r3, r4
 80020e6:	3808      	subs	r0, #8
 80020e8:	4083      	lsls	r3, r0
 80020ea:	469a      	mov	sl, r3
 80020ec:	e68e      	b.n	8001e0c <__aeabi_dmul+0x214>
 80020ee:	f000 fd63 	bl	8002bb8 <__clzsi2>
 80020f2:	0002      	movs	r2, r0
 80020f4:	0003      	movs	r3, r0
 80020f6:	3215      	adds	r2, #21
 80020f8:	3320      	adds	r3, #32
 80020fa:	2a1c      	cmp	r2, #28
 80020fc:	dc00      	bgt.n	8002100 <__aeabi_dmul+0x508>
 80020fe:	e64e      	b.n	8001d9e <__aeabi_dmul+0x1a6>
 8002100:	0002      	movs	r2, r0
 8002102:	0034      	movs	r4, r6
 8002104:	3a08      	subs	r2, #8
 8002106:	2000      	movs	r0, #0
 8002108:	4094      	lsls	r4, r2
 800210a:	e652      	b.n	8001db2 <__aeabi_dmul+0x1ba>
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	e604      	b.n	8001d1a <__aeabi_dmul+0x122>
 8002110:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <__aeabi_dmul+0x58c>)
 8002112:	0021      	movs	r1, r4
 8002114:	469c      	mov	ip, r3
 8002116:	0003      	movs	r3, r0
 8002118:	9d01      	ldr	r5, [sp, #4]
 800211a:	40d3      	lsrs	r3, r2
 800211c:	4465      	add	r5, ip
 800211e:	40a9      	lsls	r1, r5
 8002120:	4319      	orrs	r1, r3
 8002122:	0003      	movs	r3, r0
 8002124:	40ab      	lsls	r3, r5
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	4183      	sbcs	r3, r0
 800212a:	4319      	orrs	r1, r3
 800212c:	0008      	movs	r0, r1
 800212e:	40d4      	lsrs	r4, r2
 8002130:	074b      	lsls	r3, r1, #29
 8002132:	d009      	beq.n	8002148 <__aeabi_dmul+0x550>
 8002134:	230f      	movs	r3, #15
 8002136:	400b      	ands	r3, r1
 8002138:	2b04      	cmp	r3, #4
 800213a:	d005      	beq.n	8002148 <__aeabi_dmul+0x550>
 800213c:	1d0b      	adds	r3, r1, #4
 800213e:	428b      	cmp	r3, r1
 8002140:	4180      	sbcs	r0, r0
 8002142:	4240      	negs	r0, r0
 8002144:	1824      	adds	r4, r4, r0
 8002146:	0018      	movs	r0, r3
 8002148:	0223      	lsls	r3, r4, #8
 800214a:	d400      	bmi.n	800214e <__aeabi_dmul+0x556>
 800214c:	e6d6      	b.n	8001efc <__aeabi_dmul+0x304>
 800214e:	2301      	movs	r3, #1
 8002150:	2400      	movs	r4, #0
 8002152:	2200      	movs	r2, #0
 8002154:	e5a6      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8002156:	290f      	cmp	r1, #15
 8002158:	d1aa      	bne.n	80020b0 <__aeabi_dmul+0x4b8>
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	4652      	mov	r2, sl
 800215e:	031b      	lsls	r3, r3, #12
 8002160:	421a      	tst	r2, r3
 8002162:	d0a9      	beq.n	80020b8 <__aeabi_dmul+0x4c0>
 8002164:	421c      	tst	r4, r3
 8002166:	d1a7      	bne.n	80020b8 <__aeabi_dmul+0x4c0>
 8002168:	431c      	orrs	r4, r3
 800216a:	9b00      	ldr	r3, [sp, #0]
 800216c:	0002      	movs	r2, r0
 800216e:	469b      	mov	fp, r3
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <__aeabi_dmul+0x588>)
 8002172:	e597      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8002174:	2400      	movs	r4, #0
 8002176:	e6c1      	b.n	8001efc <__aeabi_dmul+0x304>
 8002178:	2400      	movs	r4, #0
 800217a:	4b01      	ldr	r3, [pc, #4]	@ (8002180 <__aeabi_dmul+0x588>)
 800217c:	0022      	movs	r2, r4
 800217e:	e591      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8002180:	000007ff 	.word	0x000007ff
 8002184:	0000041e 	.word	0x0000041e

08002188 <__aeabi_dsub>:
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	464e      	mov	r6, r9
 800218c:	4645      	mov	r5, r8
 800218e:	46de      	mov	lr, fp
 8002190:	4657      	mov	r7, sl
 8002192:	b5e0      	push	{r5, r6, r7, lr}
 8002194:	b085      	sub	sp, #20
 8002196:	9000      	str	r0, [sp, #0]
 8002198:	9101      	str	r1, [sp, #4]
 800219a:	030c      	lsls	r4, r1, #12
 800219c:	004f      	lsls	r7, r1, #1
 800219e:	0fce      	lsrs	r6, r1, #31
 80021a0:	0a61      	lsrs	r1, r4, #9
 80021a2:	9c00      	ldr	r4, [sp, #0]
 80021a4:	46b0      	mov	r8, r6
 80021a6:	0f64      	lsrs	r4, r4, #29
 80021a8:	430c      	orrs	r4, r1
 80021aa:	9900      	ldr	r1, [sp, #0]
 80021ac:	0d7f      	lsrs	r7, r7, #21
 80021ae:	00c8      	lsls	r0, r1, #3
 80021b0:	0011      	movs	r1, r2
 80021b2:	001a      	movs	r2, r3
 80021b4:	031b      	lsls	r3, r3, #12
 80021b6:	469c      	mov	ip, r3
 80021b8:	9100      	str	r1, [sp, #0]
 80021ba:	9201      	str	r2, [sp, #4]
 80021bc:	0051      	lsls	r1, r2, #1
 80021be:	0d4b      	lsrs	r3, r1, #21
 80021c0:	4699      	mov	r9, r3
 80021c2:	9b01      	ldr	r3, [sp, #4]
 80021c4:	9d00      	ldr	r5, [sp, #0]
 80021c6:	0fd9      	lsrs	r1, r3, #31
 80021c8:	4663      	mov	r3, ip
 80021ca:	0f6a      	lsrs	r2, r5, #29
 80021cc:	0a5b      	lsrs	r3, r3, #9
 80021ce:	4313      	orrs	r3, r2
 80021d0:	00ea      	lsls	r2, r5, #3
 80021d2:	4694      	mov	ip, r2
 80021d4:	4693      	mov	fp, r2
 80021d6:	4ac1      	ldr	r2, [pc, #772]	@ (80024dc <__aeabi_dsub+0x354>)
 80021d8:	9003      	str	r0, [sp, #12]
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	4591      	cmp	r9, r2
 80021de:	d100      	bne.n	80021e2 <__aeabi_dsub+0x5a>
 80021e0:	e0cd      	b.n	800237e <__aeabi_dsub+0x1f6>
 80021e2:	2501      	movs	r5, #1
 80021e4:	4069      	eors	r1, r5
 80021e6:	464d      	mov	r5, r9
 80021e8:	1b7d      	subs	r5, r7, r5
 80021ea:	46aa      	mov	sl, r5
 80021ec:	428e      	cmp	r6, r1
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dsub+0x6a>
 80021f0:	e080      	b.n	80022f4 <__aeabi_dsub+0x16c>
 80021f2:	2d00      	cmp	r5, #0
 80021f4:	dc00      	bgt.n	80021f8 <__aeabi_dsub+0x70>
 80021f6:	e335      	b.n	8002864 <__aeabi_dsub+0x6dc>
 80021f8:	4649      	mov	r1, r9
 80021fa:	2900      	cmp	r1, #0
 80021fc:	d100      	bne.n	8002200 <__aeabi_dsub+0x78>
 80021fe:	e0df      	b.n	80023c0 <__aeabi_dsub+0x238>
 8002200:	4297      	cmp	r7, r2
 8002202:	d100      	bne.n	8002206 <__aeabi_dsub+0x7e>
 8002204:	e194      	b.n	8002530 <__aeabi_dsub+0x3a8>
 8002206:	4652      	mov	r2, sl
 8002208:	2501      	movs	r5, #1
 800220a:	2a38      	cmp	r2, #56	@ 0x38
 800220c:	dc19      	bgt.n	8002242 <__aeabi_dsub+0xba>
 800220e:	2280      	movs	r2, #128	@ 0x80
 8002210:	9b02      	ldr	r3, [sp, #8]
 8002212:	0412      	lsls	r2, r2, #16
 8002214:	4313      	orrs	r3, r2
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	4652      	mov	r2, sl
 800221a:	2a1f      	cmp	r2, #31
 800221c:	dd00      	ble.n	8002220 <__aeabi_dsub+0x98>
 800221e:	e1e3      	b.n	80025e8 <__aeabi_dsub+0x460>
 8002220:	4653      	mov	r3, sl
 8002222:	2220      	movs	r2, #32
 8002224:	4661      	mov	r1, ip
 8002226:	9d02      	ldr	r5, [sp, #8]
 8002228:	1ad2      	subs	r2, r2, r3
 800222a:	4095      	lsls	r5, r2
 800222c:	40d9      	lsrs	r1, r3
 800222e:	430d      	orrs	r5, r1
 8002230:	4661      	mov	r1, ip
 8002232:	4091      	lsls	r1, r2
 8002234:	000a      	movs	r2, r1
 8002236:	1e51      	subs	r1, r2, #1
 8002238:	418a      	sbcs	r2, r1
 800223a:	4315      	orrs	r5, r2
 800223c:	9a02      	ldr	r2, [sp, #8]
 800223e:	40da      	lsrs	r2, r3
 8002240:	1aa4      	subs	r4, r4, r2
 8002242:	1b45      	subs	r5, r0, r5
 8002244:	42a8      	cmp	r0, r5
 8002246:	4180      	sbcs	r0, r0
 8002248:	4240      	negs	r0, r0
 800224a:	1a24      	subs	r4, r4, r0
 800224c:	0223      	lsls	r3, r4, #8
 800224e:	d400      	bmi.n	8002252 <__aeabi_dsub+0xca>
 8002250:	e13d      	b.n	80024ce <__aeabi_dsub+0x346>
 8002252:	0264      	lsls	r4, r4, #9
 8002254:	0a64      	lsrs	r4, r4, #9
 8002256:	2c00      	cmp	r4, #0
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0xd4>
 800225a:	e147      	b.n	80024ec <__aeabi_dsub+0x364>
 800225c:	0020      	movs	r0, r4
 800225e:	f000 fcab 	bl	8002bb8 <__clzsi2>
 8002262:	0003      	movs	r3, r0
 8002264:	3b08      	subs	r3, #8
 8002266:	2120      	movs	r1, #32
 8002268:	0028      	movs	r0, r5
 800226a:	1aca      	subs	r2, r1, r3
 800226c:	40d0      	lsrs	r0, r2
 800226e:	409c      	lsls	r4, r3
 8002270:	0002      	movs	r2, r0
 8002272:	409d      	lsls	r5, r3
 8002274:	4322      	orrs	r2, r4
 8002276:	429f      	cmp	r7, r3
 8002278:	dd00      	ble.n	800227c <__aeabi_dsub+0xf4>
 800227a:	e177      	b.n	800256c <__aeabi_dsub+0x3e4>
 800227c:	1bd8      	subs	r0, r3, r7
 800227e:	3001      	adds	r0, #1
 8002280:	1a09      	subs	r1, r1, r0
 8002282:	002c      	movs	r4, r5
 8002284:	408d      	lsls	r5, r1
 8002286:	40c4      	lsrs	r4, r0
 8002288:	1e6b      	subs	r3, r5, #1
 800228a:	419d      	sbcs	r5, r3
 800228c:	0013      	movs	r3, r2
 800228e:	40c2      	lsrs	r2, r0
 8002290:	408b      	lsls	r3, r1
 8002292:	4325      	orrs	r5, r4
 8002294:	2700      	movs	r7, #0
 8002296:	0014      	movs	r4, r2
 8002298:	431d      	orrs	r5, r3
 800229a:	076b      	lsls	r3, r5, #29
 800229c:	d009      	beq.n	80022b2 <__aeabi_dsub+0x12a>
 800229e:	230f      	movs	r3, #15
 80022a0:	402b      	ands	r3, r5
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d005      	beq.n	80022b2 <__aeabi_dsub+0x12a>
 80022a6:	1d2b      	adds	r3, r5, #4
 80022a8:	42ab      	cmp	r3, r5
 80022aa:	41ad      	sbcs	r5, r5
 80022ac:	426d      	negs	r5, r5
 80022ae:	1964      	adds	r4, r4, r5
 80022b0:	001d      	movs	r5, r3
 80022b2:	0223      	lsls	r3, r4, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_dsub+0x130>
 80022b6:	e140      	b.n	800253a <__aeabi_dsub+0x3b2>
 80022b8:	4a88      	ldr	r2, [pc, #544]	@ (80024dc <__aeabi_dsub+0x354>)
 80022ba:	3701      	adds	r7, #1
 80022bc:	4297      	cmp	r7, r2
 80022be:	d100      	bne.n	80022c2 <__aeabi_dsub+0x13a>
 80022c0:	e101      	b.n	80024c6 <__aeabi_dsub+0x33e>
 80022c2:	2601      	movs	r6, #1
 80022c4:	4643      	mov	r3, r8
 80022c6:	4986      	ldr	r1, [pc, #536]	@ (80024e0 <__aeabi_dsub+0x358>)
 80022c8:	08ed      	lsrs	r5, r5, #3
 80022ca:	4021      	ands	r1, r4
 80022cc:	074a      	lsls	r2, r1, #29
 80022ce:	432a      	orrs	r2, r5
 80022d0:	057c      	lsls	r4, r7, #21
 80022d2:	024d      	lsls	r5, r1, #9
 80022d4:	0b2d      	lsrs	r5, r5, #12
 80022d6:	0d64      	lsrs	r4, r4, #21
 80022d8:	401e      	ands	r6, r3
 80022da:	0524      	lsls	r4, r4, #20
 80022dc:	432c      	orrs	r4, r5
 80022de:	07f6      	lsls	r6, r6, #31
 80022e0:	4334      	orrs	r4, r6
 80022e2:	0010      	movs	r0, r2
 80022e4:	0021      	movs	r1, r4
 80022e6:	b005      	add	sp, #20
 80022e8:	bcf0      	pop	{r4, r5, r6, r7}
 80022ea:	46bb      	mov	fp, r7
 80022ec:	46b2      	mov	sl, r6
 80022ee:	46a9      	mov	r9, r5
 80022f0:	46a0      	mov	r8, r4
 80022f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f4:	2d00      	cmp	r5, #0
 80022f6:	dc00      	bgt.n	80022fa <__aeabi_dsub+0x172>
 80022f8:	e2d0      	b.n	800289c <__aeabi_dsub+0x714>
 80022fa:	4649      	mov	r1, r9
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d000      	beq.n	8002302 <__aeabi_dsub+0x17a>
 8002300:	e0d4      	b.n	80024ac <__aeabi_dsub+0x324>
 8002302:	4661      	mov	r1, ip
 8002304:	9b02      	ldr	r3, [sp, #8]
 8002306:	4319      	orrs	r1, r3
 8002308:	d100      	bne.n	800230c <__aeabi_dsub+0x184>
 800230a:	e12b      	b.n	8002564 <__aeabi_dsub+0x3dc>
 800230c:	1e69      	subs	r1, r5, #1
 800230e:	2d01      	cmp	r5, #1
 8002310:	d100      	bne.n	8002314 <__aeabi_dsub+0x18c>
 8002312:	e1d9      	b.n	80026c8 <__aeabi_dsub+0x540>
 8002314:	4295      	cmp	r5, r2
 8002316:	d100      	bne.n	800231a <__aeabi_dsub+0x192>
 8002318:	e10a      	b.n	8002530 <__aeabi_dsub+0x3a8>
 800231a:	2501      	movs	r5, #1
 800231c:	2938      	cmp	r1, #56	@ 0x38
 800231e:	dc17      	bgt.n	8002350 <__aeabi_dsub+0x1c8>
 8002320:	468a      	mov	sl, r1
 8002322:	4653      	mov	r3, sl
 8002324:	2b1f      	cmp	r3, #31
 8002326:	dd00      	ble.n	800232a <__aeabi_dsub+0x1a2>
 8002328:	e1e7      	b.n	80026fa <__aeabi_dsub+0x572>
 800232a:	2220      	movs	r2, #32
 800232c:	1ad2      	subs	r2, r2, r3
 800232e:	9b02      	ldr	r3, [sp, #8]
 8002330:	4661      	mov	r1, ip
 8002332:	4093      	lsls	r3, r2
 8002334:	001d      	movs	r5, r3
 8002336:	4653      	mov	r3, sl
 8002338:	40d9      	lsrs	r1, r3
 800233a:	4663      	mov	r3, ip
 800233c:	4093      	lsls	r3, r2
 800233e:	001a      	movs	r2, r3
 8002340:	430d      	orrs	r5, r1
 8002342:	1e51      	subs	r1, r2, #1
 8002344:	418a      	sbcs	r2, r1
 8002346:	4653      	mov	r3, sl
 8002348:	4315      	orrs	r5, r2
 800234a:	9a02      	ldr	r2, [sp, #8]
 800234c:	40da      	lsrs	r2, r3
 800234e:	18a4      	adds	r4, r4, r2
 8002350:	182d      	adds	r5, r5, r0
 8002352:	4285      	cmp	r5, r0
 8002354:	4180      	sbcs	r0, r0
 8002356:	4240      	negs	r0, r0
 8002358:	1824      	adds	r4, r4, r0
 800235a:	0223      	lsls	r3, r4, #8
 800235c:	d400      	bmi.n	8002360 <__aeabi_dsub+0x1d8>
 800235e:	e0b6      	b.n	80024ce <__aeabi_dsub+0x346>
 8002360:	4b5e      	ldr	r3, [pc, #376]	@ (80024dc <__aeabi_dsub+0x354>)
 8002362:	3701      	adds	r7, #1
 8002364:	429f      	cmp	r7, r3
 8002366:	d100      	bne.n	800236a <__aeabi_dsub+0x1e2>
 8002368:	e0ad      	b.n	80024c6 <__aeabi_dsub+0x33e>
 800236a:	2101      	movs	r1, #1
 800236c:	4b5c      	ldr	r3, [pc, #368]	@ (80024e0 <__aeabi_dsub+0x358>)
 800236e:	086a      	lsrs	r2, r5, #1
 8002370:	401c      	ands	r4, r3
 8002372:	4029      	ands	r1, r5
 8002374:	430a      	orrs	r2, r1
 8002376:	07e5      	lsls	r5, r4, #31
 8002378:	4315      	orrs	r5, r2
 800237a:	0864      	lsrs	r4, r4, #1
 800237c:	e78d      	b.n	800229a <__aeabi_dsub+0x112>
 800237e:	4a59      	ldr	r2, [pc, #356]	@ (80024e4 <__aeabi_dsub+0x35c>)
 8002380:	9b02      	ldr	r3, [sp, #8]
 8002382:	4692      	mov	sl, r2
 8002384:	4662      	mov	r2, ip
 8002386:	44ba      	add	sl, r7
 8002388:	431a      	orrs	r2, r3
 800238a:	d02c      	beq.n	80023e6 <__aeabi_dsub+0x25e>
 800238c:	428e      	cmp	r6, r1
 800238e:	d02e      	beq.n	80023ee <__aeabi_dsub+0x266>
 8002390:	4652      	mov	r2, sl
 8002392:	2a00      	cmp	r2, #0
 8002394:	d060      	beq.n	8002458 <__aeabi_dsub+0x2d0>
 8002396:	2f00      	cmp	r7, #0
 8002398:	d100      	bne.n	800239c <__aeabi_dsub+0x214>
 800239a:	e0db      	b.n	8002554 <__aeabi_dsub+0x3cc>
 800239c:	4663      	mov	r3, ip
 800239e:	000e      	movs	r6, r1
 80023a0:	9c02      	ldr	r4, [sp, #8]
 80023a2:	08d8      	lsrs	r0, r3, #3
 80023a4:	0762      	lsls	r2, r4, #29
 80023a6:	4302      	orrs	r2, r0
 80023a8:	08e4      	lsrs	r4, r4, #3
 80023aa:	0013      	movs	r3, r2
 80023ac:	4323      	orrs	r3, r4
 80023ae:	d100      	bne.n	80023b2 <__aeabi_dsub+0x22a>
 80023b0:	e254      	b.n	800285c <__aeabi_dsub+0x6d4>
 80023b2:	2580      	movs	r5, #128	@ 0x80
 80023b4:	032d      	lsls	r5, r5, #12
 80023b6:	4325      	orrs	r5, r4
 80023b8:	032d      	lsls	r5, r5, #12
 80023ba:	4c48      	ldr	r4, [pc, #288]	@ (80024dc <__aeabi_dsub+0x354>)
 80023bc:	0b2d      	lsrs	r5, r5, #12
 80023be:	e78c      	b.n	80022da <__aeabi_dsub+0x152>
 80023c0:	4661      	mov	r1, ip
 80023c2:	9b02      	ldr	r3, [sp, #8]
 80023c4:	4319      	orrs	r1, r3
 80023c6:	d100      	bne.n	80023ca <__aeabi_dsub+0x242>
 80023c8:	e0cc      	b.n	8002564 <__aeabi_dsub+0x3dc>
 80023ca:	0029      	movs	r1, r5
 80023cc:	3901      	subs	r1, #1
 80023ce:	2d01      	cmp	r5, #1
 80023d0:	d100      	bne.n	80023d4 <__aeabi_dsub+0x24c>
 80023d2:	e188      	b.n	80026e6 <__aeabi_dsub+0x55e>
 80023d4:	4295      	cmp	r5, r2
 80023d6:	d100      	bne.n	80023da <__aeabi_dsub+0x252>
 80023d8:	e0aa      	b.n	8002530 <__aeabi_dsub+0x3a8>
 80023da:	2501      	movs	r5, #1
 80023dc:	2938      	cmp	r1, #56	@ 0x38
 80023de:	dd00      	ble.n	80023e2 <__aeabi_dsub+0x25a>
 80023e0:	e72f      	b.n	8002242 <__aeabi_dsub+0xba>
 80023e2:	468a      	mov	sl, r1
 80023e4:	e718      	b.n	8002218 <__aeabi_dsub+0x90>
 80023e6:	2201      	movs	r2, #1
 80023e8:	4051      	eors	r1, r2
 80023ea:	428e      	cmp	r6, r1
 80023ec:	d1d0      	bne.n	8002390 <__aeabi_dsub+0x208>
 80023ee:	4653      	mov	r3, sl
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x26e>
 80023f4:	e0be      	b.n	8002574 <__aeabi_dsub+0x3ec>
 80023f6:	2f00      	cmp	r7, #0
 80023f8:	d000      	beq.n	80023fc <__aeabi_dsub+0x274>
 80023fa:	e138      	b.n	800266e <__aeabi_dsub+0x4e6>
 80023fc:	46ca      	mov	sl, r9
 80023fe:	0022      	movs	r2, r4
 8002400:	4302      	orrs	r2, r0
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x27e>
 8002404:	e1e2      	b.n	80027cc <__aeabi_dsub+0x644>
 8002406:	4653      	mov	r3, sl
 8002408:	1e59      	subs	r1, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d100      	bne.n	8002410 <__aeabi_dsub+0x288>
 800240e:	e20d      	b.n	800282c <__aeabi_dsub+0x6a4>
 8002410:	4a32      	ldr	r2, [pc, #200]	@ (80024dc <__aeabi_dsub+0x354>)
 8002412:	4592      	cmp	sl, r2
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x290>
 8002416:	e1d2      	b.n	80027be <__aeabi_dsub+0x636>
 8002418:	2701      	movs	r7, #1
 800241a:	2938      	cmp	r1, #56	@ 0x38
 800241c:	dc13      	bgt.n	8002446 <__aeabi_dsub+0x2be>
 800241e:	291f      	cmp	r1, #31
 8002420:	dd00      	ble.n	8002424 <__aeabi_dsub+0x29c>
 8002422:	e1ee      	b.n	8002802 <__aeabi_dsub+0x67a>
 8002424:	2220      	movs	r2, #32
 8002426:	9b02      	ldr	r3, [sp, #8]
 8002428:	1a52      	subs	r2, r2, r1
 800242a:	0025      	movs	r5, r4
 800242c:	0007      	movs	r7, r0
 800242e:	469a      	mov	sl, r3
 8002430:	40cc      	lsrs	r4, r1
 8002432:	4090      	lsls	r0, r2
 8002434:	4095      	lsls	r5, r2
 8002436:	40cf      	lsrs	r7, r1
 8002438:	44a2      	add	sl, r4
 800243a:	1e42      	subs	r2, r0, #1
 800243c:	4190      	sbcs	r0, r2
 800243e:	4653      	mov	r3, sl
 8002440:	432f      	orrs	r7, r5
 8002442:	4307      	orrs	r7, r0
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	003d      	movs	r5, r7
 8002448:	4465      	add	r5, ip
 800244a:	4565      	cmp	r5, ip
 800244c:	4192      	sbcs	r2, r2
 800244e:	9b02      	ldr	r3, [sp, #8]
 8002450:	4252      	negs	r2, r2
 8002452:	464f      	mov	r7, r9
 8002454:	18d4      	adds	r4, r2, r3
 8002456:	e780      	b.n	800235a <__aeabi_dsub+0x1d2>
 8002458:	4a23      	ldr	r2, [pc, #140]	@ (80024e8 <__aeabi_dsub+0x360>)
 800245a:	1c7d      	adds	r5, r7, #1
 800245c:	4215      	tst	r5, r2
 800245e:	d000      	beq.n	8002462 <__aeabi_dsub+0x2da>
 8002460:	e0aa      	b.n	80025b8 <__aeabi_dsub+0x430>
 8002462:	4662      	mov	r2, ip
 8002464:	0025      	movs	r5, r4
 8002466:	9b02      	ldr	r3, [sp, #8]
 8002468:	4305      	orrs	r5, r0
 800246a:	431a      	orrs	r2, r3
 800246c:	2f00      	cmp	r7, #0
 800246e:	d000      	beq.n	8002472 <__aeabi_dsub+0x2ea>
 8002470:	e0f5      	b.n	800265e <__aeabi_dsub+0x4d6>
 8002472:	2d00      	cmp	r5, #0
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x2f0>
 8002476:	e16b      	b.n	8002750 <__aeabi_dsub+0x5c8>
 8002478:	2a00      	cmp	r2, #0
 800247a:	d100      	bne.n	800247e <__aeabi_dsub+0x2f6>
 800247c:	e152      	b.n	8002724 <__aeabi_dsub+0x59c>
 800247e:	4663      	mov	r3, ip
 8002480:	1ac5      	subs	r5, r0, r3
 8002482:	9b02      	ldr	r3, [sp, #8]
 8002484:	1ae2      	subs	r2, r4, r3
 8002486:	42a8      	cmp	r0, r5
 8002488:	419b      	sbcs	r3, r3
 800248a:	425b      	negs	r3, r3
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	d400      	bmi.n	8002494 <__aeabi_dsub+0x30c>
 8002492:	e1d5      	b.n	8002840 <__aeabi_dsub+0x6b8>
 8002494:	4663      	mov	r3, ip
 8002496:	1a1d      	subs	r5, r3, r0
 8002498:	45ac      	cmp	ip, r5
 800249a:	4192      	sbcs	r2, r2
 800249c:	2601      	movs	r6, #1
 800249e:	9b02      	ldr	r3, [sp, #8]
 80024a0:	4252      	negs	r2, r2
 80024a2:	1b1c      	subs	r4, r3, r4
 80024a4:	4688      	mov	r8, r1
 80024a6:	1aa4      	subs	r4, r4, r2
 80024a8:	400e      	ands	r6, r1
 80024aa:	e6f6      	b.n	800229a <__aeabi_dsub+0x112>
 80024ac:	4297      	cmp	r7, r2
 80024ae:	d03f      	beq.n	8002530 <__aeabi_dsub+0x3a8>
 80024b0:	4652      	mov	r2, sl
 80024b2:	2501      	movs	r5, #1
 80024b4:	2a38      	cmp	r2, #56	@ 0x38
 80024b6:	dd00      	ble.n	80024ba <__aeabi_dsub+0x332>
 80024b8:	e74a      	b.n	8002350 <__aeabi_dsub+0x1c8>
 80024ba:	2280      	movs	r2, #128	@ 0x80
 80024bc:	9b02      	ldr	r3, [sp, #8]
 80024be:	0412      	lsls	r2, r2, #16
 80024c0:	4313      	orrs	r3, r2
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	e72d      	b.n	8002322 <__aeabi_dsub+0x19a>
 80024c6:	003c      	movs	r4, r7
 80024c8:	2500      	movs	r5, #0
 80024ca:	2200      	movs	r2, #0
 80024cc:	e705      	b.n	80022da <__aeabi_dsub+0x152>
 80024ce:	2307      	movs	r3, #7
 80024d0:	402b      	ands	r3, r5
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d000      	beq.n	80024d8 <__aeabi_dsub+0x350>
 80024d6:	e6e2      	b.n	800229e <__aeabi_dsub+0x116>
 80024d8:	e06b      	b.n	80025b2 <__aeabi_dsub+0x42a>
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	000007ff 	.word	0x000007ff
 80024e0:	ff7fffff 	.word	0xff7fffff
 80024e4:	fffff801 	.word	0xfffff801
 80024e8:	000007fe 	.word	0x000007fe
 80024ec:	0028      	movs	r0, r5
 80024ee:	f000 fb63 	bl	8002bb8 <__clzsi2>
 80024f2:	0003      	movs	r3, r0
 80024f4:	3318      	adds	r3, #24
 80024f6:	2b1f      	cmp	r3, #31
 80024f8:	dc00      	bgt.n	80024fc <__aeabi_dsub+0x374>
 80024fa:	e6b4      	b.n	8002266 <__aeabi_dsub+0xde>
 80024fc:	002a      	movs	r2, r5
 80024fe:	3808      	subs	r0, #8
 8002500:	4082      	lsls	r2, r0
 8002502:	429f      	cmp	r7, r3
 8002504:	dd00      	ble.n	8002508 <__aeabi_dsub+0x380>
 8002506:	e0b9      	b.n	800267c <__aeabi_dsub+0x4f4>
 8002508:	1bdb      	subs	r3, r3, r7
 800250a:	1c58      	adds	r0, r3, #1
 800250c:	281f      	cmp	r0, #31
 800250e:	dc00      	bgt.n	8002512 <__aeabi_dsub+0x38a>
 8002510:	e1a0      	b.n	8002854 <__aeabi_dsub+0x6cc>
 8002512:	0015      	movs	r5, r2
 8002514:	3b1f      	subs	r3, #31
 8002516:	40dd      	lsrs	r5, r3
 8002518:	2820      	cmp	r0, #32
 800251a:	d005      	beq.n	8002528 <__aeabi_dsub+0x3a0>
 800251c:	2340      	movs	r3, #64	@ 0x40
 800251e:	1a1b      	subs	r3, r3, r0
 8002520:	409a      	lsls	r2, r3
 8002522:	1e53      	subs	r3, r2, #1
 8002524:	419a      	sbcs	r2, r3
 8002526:	4315      	orrs	r5, r2
 8002528:	2307      	movs	r3, #7
 800252a:	2700      	movs	r7, #0
 800252c:	402b      	ands	r3, r5
 800252e:	e7d0      	b.n	80024d2 <__aeabi_dsub+0x34a>
 8002530:	08c0      	lsrs	r0, r0, #3
 8002532:	0762      	lsls	r2, r4, #29
 8002534:	4302      	orrs	r2, r0
 8002536:	08e4      	lsrs	r4, r4, #3
 8002538:	e737      	b.n	80023aa <__aeabi_dsub+0x222>
 800253a:	08ea      	lsrs	r2, r5, #3
 800253c:	0763      	lsls	r3, r4, #29
 800253e:	431a      	orrs	r2, r3
 8002540:	4bd3      	ldr	r3, [pc, #844]	@ (8002890 <__aeabi_dsub+0x708>)
 8002542:	08e4      	lsrs	r4, r4, #3
 8002544:	429f      	cmp	r7, r3
 8002546:	d100      	bne.n	800254a <__aeabi_dsub+0x3c2>
 8002548:	e72f      	b.n	80023aa <__aeabi_dsub+0x222>
 800254a:	0324      	lsls	r4, r4, #12
 800254c:	0b25      	lsrs	r5, r4, #12
 800254e:	057c      	lsls	r4, r7, #21
 8002550:	0d64      	lsrs	r4, r4, #21
 8002552:	e6c2      	b.n	80022da <__aeabi_dsub+0x152>
 8002554:	46ca      	mov	sl, r9
 8002556:	0022      	movs	r2, r4
 8002558:	4302      	orrs	r2, r0
 800255a:	d158      	bne.n	800260e <__aeabi_dsub+0x486>
 800255c:	4663      	mov	r3, ip
 800255e:	000e      	movs	r6, r1
 8002560:	9c02      	ldr	r4, [sp, #8]
 8002562:	9303      	str	r3, [sp, #12]
 8002564:	9b03      	ldr	r3, [sp, #12]
 8002566:	4657      	mov	r7, sl
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	e7e7      	b.n	800253c <__aeabi_dsub+0x3b4>
 800256c:	4cc9      	ldr	r4, [pc, #804]	@ (8002894 <__aeabi_dsub+0x70c>)
 800256e:	1aff      	subs	r7, r7, r3
 8002570:	4014      	ands	r4, r2
 8002572:	e692      	b.n	800229a <__aeabi_dsub+0x112>
 8002574:	4dc8      	ldr	r5, [pc, #800]	@ (8002898 <__aeabi_dsub+0x710>)
 8002576:	1c7a      	adds	r2, r7, #1
 8002578:	422a      	tst	r2, r5
 800257a:	d000      	beq.n	800257e <__aeabi_dsub+0x3f6>
 800257c:	e084      	b.n	8002688 <__aeabi_dsub+0x500>
 800257e:	0022      	movs	r2, r4
 8002580:	4302      	orrs	r2, r0
 8002582:	2f00      	cmp	r7, #0
 8002584:	d000      	beq.n	8002588 <__aeabi_dsub+0x400>
 8002586:	e0ef      	b.n	8002768 <__aeabi_dsub+0x5e0>
 8002588:	2a00      	cmp	r2, #0
 800258a:	d100      	bne.n	800258e <__aeabi_dsub+0x406>
 800258c:	e0e5      	b.n	800275a <__aeabi_dsub+0x5d2>
 800258e:	4662      	mov	r2, ip
 8002590:	9902      	ldr	r1, [sp, #8]
 8002592:	430a      	orrs	r2, r1
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x410>
 8002596:	e0c5      	b.n	8002724 <__aeabi_dsub+0x59c>
 8002598:	4663      	mov	r3, ip
 800259a:	18c5      	adds	r5, r0, r3
 800259c:	468c      	mov	ip, r1
 800259e:	4285      	cmp	r5, r0
 80025a0:	4180      	sbcs	r0, r0
 80025a2:	4464      	add	r4, ip
 80025a4:	4240      	negs	r0, r0
 80025a6:	1824      	adds	r4, r4, r0
 80025a8:	0223      	lsls	r3, r4, #8
 80025aa:	d502      	bpl.n	80025b2 <__aeabi_dsub+0x42a>
 80025ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002894 <__aeabi_dsub+0x70c>)
 80025ae:	3701      	adds	r7, #1
 80025b0:	401c      	ands	r4, r3
 80025b2:	46ba      	mov	sl, r7
 80025b4:	9503      	str	r5, [sp, #12]
 80025b6:	e7d5      	b.n	8002564 <__aeabi_dsub+0x3dc>
 80025b8:	4662      	mov	r2, ip
 80025ba:	1a85      	subs	r5, r0, r2
 80025bc:	42a8      	cmp	r0, r5
 80025be:	4192      	sbcs	r2, r2
 80025c0:	4252      	negs	r2, r2
 80025c2:	4691      	mov	r9, r2
 80025c4:	9b02      	ldr	r3, [sp, #8]
 80025c6:	1ae3      	subs	r3, r4, r3
 80025c8:	001a      	movs	r2, r3
 80025ca:	464b      	mov	r3, r9
 80025cc:	1ad2      	subs	r2, r2, r3
 80025ce:	0013      	movs	r3, r2
 80025d0:	4691      	mov	r9, r2
 80025d2:	021a      	lsls	r2, r3, #8
 80025d4:	d46c      	bmi.n	80026b0 <__aeabi_dsub+0x528>
 80025d6:	464a      	mov	r2, r9
 80025d8:	464c      	mov	r4, r9
 80025da:	432a      	orrs	r2, r5
 80025dc:	d000      	beq.n	80025e0 <__aeabi_dsub+0x458>
 80025de:	e63a      	b.n	8002256 <__aeabi_dsub+0xce>
 80025e0:	2600      	movs	r6, #0
 80025e2:	2400      	movs	r4, #0
 80025e4:	2500      	movs	r5, #0
 80025e6:	e678      	b.n	80022da <__aeabi_dsub+0x152>
 80025e8:	9902      	ldr	r1, [sp, #8]
 80025ea:	4653      	mov	r3, sl
 80025ec:	000d      	movs	r5, r1
 80025ee:	3a20      	subs	r2, #32
 80025f0:	40d5      	lsrs	r5, r2
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d006      	beq.n	8002604 <__aeabi_dsub+0x47c>
 80025f6:	2240      	movs	r2, #64	@ 0x40
 80025f8:	1ad2      	subs	r2, r2, r3
 80025fa:	000b      	movs	r3, r1
 80025fc:	4093      	lsls	r3, r2
 80025fe:	4662      	mov	r2, ip
 8002600:	431a      	orrs	r2, r3
 8002602:	4693      	mov	fp, r2
 8002604:	465b      	mov	r3, fp
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	4193      	sbcs	r3, r2
 800260a:	431d      	orrs	r5, r3
 800260c:	e619      	b.n	8002242 <__aeabi_dsub+0xba>
 800260e:	4653      	mov	r3, sl
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d100      	bne.n	8002618 <__aeabi_dsub+0x490>
 8002616:	e0c6      	b.n	80027a6 <__aeabi_dsub+0x61e>
 8002618:	4e9d      	ldr	r6, [pc, #628]	@ (8002890 <__aeabi_dsub+0x708>)
 800261a:	45b2      	cmp	sl, r6
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x498>
 800261e:	e6bd      	b.n	800239c <__aeabi_dsub+0x214>
 8002620:	4688      	mov	r8, r1
 8002622:	000e      	movs	r6, r1
 8002624:	2501      	movs	r5, #1
 8002626:	2a38      	cmp	r2, #56	@ 0x38
 8002628:	dc10      	bgt.n	800264c <__aeabi_dsub+0x4c4>
 800262a:	2a1f      	cmp	r2, #31
 800262c:	dc7f      	bgt.n	800272e <__aeabi_dsub+0x5a6>
 800262e:	2120      	movs	r1, #32
 8002630:	0025      	movs	r5, r4
 8002632:	1a89      	subs	r1, r1, r2
 8002634:	0007      	movs	r7, r0
 8002636:	4088      	lsls	r0, r1
 8002638:	408d      	lsls	r5, r1
 800263a:	40d7      	lsrs	r7, r2
 800263c:	40d4      	lsrs	r4, r2
 800263e:	1e41      	subs	r1, r0, #1
 8002640:	4188      	sbcs	r0, r1
 8002642:	9b02      	ldr	r3, [sp, #8]
 8002644:	433d      	orrs	r5, r7
 8002646:	1b1b      	subs	r3, r3, r4
 8002648:	4305      	orrs	r5, r0
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	4662      	mov	r2, ip
 800264e:	1b55      	subs	r5, r2, r5
 8002650:	45ac      	cmp	ip, r5
 8002652:	4192      	sbcs	r2, r2
 8002654:	9b02      	ldr	r3, [sp, #8]
 8002656:	4252      	negs	r2, r2
 8002658:	464f      	mov	r7, r9
 800265a:	1a9c      	subs	r4, r3, r2
 800265c:	e5f6      	b.n	800224c <__aeabi_dsub+0xc4>
 800265e:	2d00      	cmp	r5, #0
 8002660:	d000      	beq.n	8002664 <__aeabi_dsub+0x4dc>
 8002662:	e0b7      	b.n	80027d4 <__aeabi_dsub+0x64c>
 8002664:	2a00      	cmp	r2, #0
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x4e2>
 8002668:	e0f0      	b.n	800284c <__aeabi_dsub+0x6c4>
 800266a:	2601      	movs	r6, #1
 800266c:	400e      	ands	r6, r1
 800266e:	4663      	mov	r3, ip
 8002670:	9802      	ldr	r0, [sp, #8]
 8002672:	08d9      	lsrs	r1, r3, #3
 8002674:	0742      	lsls	r2, r0, #29
 8002676:	430a      	orrs	r2, r1
 8002678:	08c4      	lsrs	r4, r0, #3
 800267a:	e696      	b.n	80023aa <__aeabi_dsub+0x222>
 800267c:	4c85      	ldr	r4, [pc, #532]	@ (8002894 <__aeabi_dsub+0x70c>)
 800267e:	1aff      	subs	r7, r7, r3
 8002680:	4014      	ands	r4, r2
 8002682:	0762      	lsls	r2, r4, #29
 8002684:	08e4      	lsrs	r4, r4, #3
 8002686:	e760      	b.n	800254a <__aeabi_dsub+0x3c2>
 8002688:	4981      	ldr	r1, [pc, #516]	@ (8002890 <__aeabi_dsub+0x708>)
 800268a:	428a      	cmp	r2, r1
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x508>
 800268e:	e0c9      	b.n	8002824 <__aeabi_dsub+0x69c>
 8002690:	4663      	mov	r3, ip
 8002692:	18c1      	adds	r1, r0, r3
 8002694:	4281      	cmp	r1, r0
 8002696:	4180      	sbcs	r0, r0
 8002698:	9b02      	ldr	r3, [sp, #8]
 800269a:	4240      	negs	r0, r0
 800269c:	18e3      	adds	r3, r4, r3
 800269e:	181b      	adds	r3, r3, r0
 80026a0:	07dd      	lsls	r5, r3, #31
 80026a2:	085c      	lsrs	r4, r3, #1
 80026a4:	2307      	movs	r3, #7
 80026a6:	0849      	lsrs	r1, r1, #1
 80026a8:	430d      	orrs	r5, r1
 80026aa:	0017      	movs	r7, r2
 80026ac:	402b      	ands	r3, r5
 80026ae:	e710      	b.n	80024d2 <__aeabi_dsub+0x34a>
 80026b0:	4663      	mov	r3, ip
 80026b2:	1a1d      	subs	r5, r3, r0
 80026b4:	45ac      	cmp	ip, r5
 80026b6:	4192      	sbcs	r2, r2
 80026b8:	2601      	movs	r6, #1
 80026ba:	9b02      	ldr	r3, [sp, #8]
 80026bc:	4252      	negs	r2, r2
 80026be:	1b1c      	subs	r4, r3, r4
 80026c0:	4688      	mov	r8, r1
 80026c2:	1aa4      	subs	r4, r4, r2
 80026c4:	400e      	ands	r6, r1
 80026c6:	e5c6      	b.n	8002256 <__aeabi_dsub+0xce>
 80026c8:	4663      	mov	r3, ip
 80026ca:	18c5      	adds	r5, r0, r3
 80026cc:	9b02      	ldr	r3, [sp, #8]
 80026ce:	4285      	cmp	r5, r0
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	469c      	mov	ip, r3
 80026d4:	4240      	negs	r0, r0
 80026d6:	4464      	add	r4, ip
 80026d8:	1824      	adds	r4, r4, r0
 80026da:	2701      	movs	r7, #1
 80026dc:	0223      	lsls	r3, r4, #8
 80026de:	d400      	bmi.n	80026e2 <__aeabi_dsub+0x55a>
 80026e0:	e6f5      	b.n	80024ce <__aeabi_dsub+0x346>
 80026e2:	2702      	movs	r7, #2
 80026e4:	e641      	b.n	800236a <__aeabi_dsub+0x1e2>
 80026e6:	4663      	mov	r3, ip
 80026e8:	1ac5      	subs	r5, r0, r3
 80026ea:	42a8      	cmp	r0, r5
 80026ec:	4180      	sbcs	r0, r0
 80026ee:	9b02      	ldr	r3, [sp, #8]
 80026f0:	4240      	negs	r0, r0
 80026f2:	1ae4      	subs	r4, r4, r3
 80026f4:	2701      	movs	r7, #1
 80026f6:	1a24      	subs	r4, r4, r0
 80026f8:	e5a8      	b.n	800224c <__aeabi_dsub+0xc4>
 80026fa:	9d02      	ldr	r5, [sp, #8]
 80026fc:	4652      	mov	r2, sl
 80026fe:	002b      	movs	r3, r5
 8002700:	3a20      	subs	r2, #32
 8002702:	40d3      	lsrs	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	4653      	mov	r3, sl
 8002708:	2b20      	cmp	r3, #32
 800270a:	d006      	beq.n	800271a <__aeabi_dsub+0x592>
 800270c:	2240      	movs	r2, #64	@ 0x40
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	002b      	movs	r3, r5
 8002712:	4093      	lsls	r3, r2
 8002714:	4662      	mov	r2, ip
 8002716:	431a      	orrs	r2, r3
 8002718:	4693      	mov	fp, r2
 800271a:	465d      	mov	r5, fp
 800271c:	1e6b      	subs	r3, r5, #1
 800271e:	419d      	sbcs	r5, r3
 8002720:	430d      	orrs	r5, r1
 8002722:	e615      	b.n	8002350 <__aeabi_dsub+0x1c8>
 8002724:	0762      	lsls	r2, r4, #29
 8002726:	08c0      	lsrs	r0, r0, #3
 8002728:	4302      	orrs	r2, r0
 800272a:	08e4      	lsrs	r4, r4, #3
 800272c:	e70d      	b.n	800254a <__aeabi_dsub+0x3c2>
 800272e:	0011      	movs	r1, r2
 8002730:	0027      	movs	r7, r4
 8002732:	3920      	subs	r1, #32
 8002734:	40cf      	lsrs	r7, r1
 8002736:	2a20      	cmp	r2, #32
 8002738:	d005      	beq.n	8002746 <__aeabi_dsub+0x5be>
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	1a8a      	subs	r2, r1, r2
 800273e:	4094      	lsls	r4, r2
 8002740:	0025      	movs	r5, r4
 8002742:	4305      	orrs	r5, r0
 8002744:	9503      	str	r5, [sp, #12]
 8002746:	9d03      	ldr	r5, [sp, #12]
 8002748:	1e6a      	subs	r2, r5, #1
 800274a:	4195      	sbcs	r5, r2
 800274c:	433d      	orrs	r5, r7
 800274e:	e77d      	b.n	800264c <__aeabi_dsub+0x4c4>
 8002750:	2a00      	cmp	r2, #0
 8002752:	d100      	bne.n	8002756 <__aeabi_dsub+0x5ce>
 8002754:	e744      	b.n	80025e0 <__aeabi_dsub+0x458>
 8002756:	2601      	movs	r6, #1
 8002758:	400e      	ands	r6, r1
 800275a:	4663      	mov	r3, ip
 800275c:	08d9      	lsrs	r1, r3, #3
 800275e:	9b02      	ldr	r3, [sp, #8]
 8002760:	075a      	lsls	r2, r3, #29
 8002762:	430a      	orrs	r2, r1
 8002764:	08dc      	lsrs	r4, r3, #3
 8002766:	e6f0      	b.n	800254a <__aeabi_dsub+0x3c2>
 8002768:	2a00      	cmp	r2, #0
 800276a:	d028      	beq.n	80027be <__aeabi_dsub+0x636>
 800276c:	4662      	mov	r2, ip
 800276e:	9f02      	ldr	r7, [sp, #8]
 8002770:	08c0      	lsrs	r0, r0, #3
 8002772:	433a      	orrs	r2, r7
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x5f0>
 8002776:	e6dc      	b.n	8002532 <__aeabi_dsub+0x3aa>
 8002778:	0762      	lsls	r2, r4, #29
 800277a:	4310      	orrs	r0, r2
 800277c:	2280      	movs	r2, #128	@ 0x80
 800277e:	08e4      	lsrs	r4, r4, #3
 8002780:	0312      	lsls	r2, r2, #12
 8002782:	4214      	tst	r4, r2
 8002784:	d009      	beq.n	800279a <__aeabi_dsub+0x612>
 8002786:	08fd      	lsrs	r5, r7, #3
 8002788:	4215      	tst	r5, r2
 800278a:	d106      	bne.n	800279a <__aeabi_dsub+0x612>
 800278c:	4663      	mov	r3, ip
 800278e:	2601      	movs	r6, #1
 8002790:	002c      	movs	r4, r5
 8002792:	08d8      	lsrs	r0, r3, #3
 8002794:	077b      	lsls	r3, r7, #29
 8002796:	4318      	orrs	r0, r3
 8002798:	400e      	ands	r6, r1
 800279a:	0f42      	lsrs	r2, r0, #29
 800279c:	00c0      	lsls	r0, r0, #3
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0752      	lsls	r2, r2, #29
 80027a2:	4302      	orrs	r2, r0
 80027a4:	e601      	b.n	80023aa <__aeabi_dsub+0x222>
 80027a6:	4663      	mov	r3, ip
 80027a8:	1a1d      	subs	r5, r3, r0
 80027aa:	45ac      	cmp	ip, r5
 80027ac:	4192      	sbcs	r2, r2
 80027ae:	9b02      	ldr	r3, [sp, #8]
 80027b0:	4252      	negs	r2, r2
 80027b2:	1b1c      	subs	r4, r3, r4
 80027b4:	000e      	movs	r6, r1
 80027b6:	4688      	mov	r8, r1
 80027b8:	2701      	movs	r7, #1
 80027ba:	1aa4      	subs	r4, r4, r2
 80027bc:	e546      	b.n	800224c <__aeabi_dsub+0xc4>
 80027be:	4663      	mov	r3, ip
 80027c0:	08d9      	lsrs	r1, r3, #3
 80027c2:	9b02      	ldr	r3, [sp, #8]
 80027c4:	075a      	lsls	r2, r3, #29
 80027c6:	430a      	orrs	r2, r1
 80027c8:	08dc      	lsrs	r4, r3, #3
 80027ca:	e5ee      	b.n	80023aa <__aeabi_dsub+0x222>
 80027cc:	4663      	mov	r3, ip
 80027ce:	9c02      	ldr	r4, [sp, #8]
 80027d0:	9303      	str	r3, [sp, #12]
 80027d2:	e6c7      	b.n	8002564 <__aeabi_dsub+0x3dc>
 80027d4:	08c0      	lsrs	r0, r0, #3
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d100      	bne.n	80027dc <__aeabi_dsub+0x654>
 80027da:	e6aa      	b.n	8002532 <__aeabi_dsub+0x3aa>
 80027dc:	0762      	lsls	r2, r4, #29
 80027de:	4310      	orrs	r0, r2
 80027e0:	2280      	movs	r2, #128	@ 0x80
 80027e2:	08e4      	lsrs	r4, r4, #3
 80027e4:	0312      	lsls	r2, r2, #12
 80027e6:	4214      	tst	r4, r2
 80027e8:	d0d7      	beq.n	800279a <__aeabi_dsub+0x612>
 80027ea:	9f02      	ldr	r7, [sp, #8]
 80027ec:	08fd      	lsrs	r5, r7, #3
 80027ee:	4215      	tst	r5, r2
 80027f0:	d1d3      	bne.n	800279a <__aeabi_dsub+0x612>
 80027f2:	4663      	mov	r3, ip
 80027f4:	2601      	movs	r6, #1
 80027f6:	08d8      	lsrs	r0, r3, #3
 80027f8:	077b      	lsls	r3, r7, #29
 80027fa:	002c      	movs	r4, r5
 80027fc:	4318      	orrs	r0, r3
 80027fe:	400e      	ands	r6, r1
 8002800:	e7cb      	b.n	800279a <__aeabi_dsub+0x612>
 8002802:	000a      	movs	r2, r1
 8002804:	0027      	movs	r7, r4
 8002806:	3a20      	subs	r2, #32
 8002808:	40d7      	lsrs	r7, r2
 800280a:	2920      	cmp	r1, #32
 800280c:	d005      	beq.n	800281a <__aeabi_dsub+0x692>
 800280e:	2240      	movs	r2, #64	@ 0x40
 8002810:	1a52      	subs	r2, r2, r1
 8002812:	4094      	lsls	r4, r2
 8002814:	0025      	movs	r5, r4
 8002816:	4305      	orrs	r5, r0
 8002818:	9503      	str	r5, [sp, #12]
 800281a:	9d03      	ldr	r5, [sp, #12]
 800281c:	1e6a      	subs	r2, r5, #1
 800281e:	4195      	sbcs	r5, r2
 8002820:	432f      	orrs	r7, r5
 8002822:	e610      	b.n	8002446 <__aeabi_dsub+0x2be>
 8002824:	0014      	movs	r4, r2
 8002826:	2500      	movs	r5, #0
 8002828:	2200      	movs	r2, #0
 800282a:	e556      	b.n	80022da <__aeabi_dsub+0x152>
 800282c:	9b02      	ldr	r3, [sp, #8]
 800282e:	4460      	add	r0, ip
 8002830:	4699      	mov	r9, r3
 8002832:	4560      	cmp	r0, ip
 8002834:	4192      	sbcs	r2, r2
 8002836:	444c      	add	r4, r9
 8002838:	4252      	negs	r2, r2
 800283a:	0005      	movs	r5, r0
 800283c:	18a4      	adds	r4, r4, r2
 800283e:	e74c      	b.n	80026da <__aeabi_dsub+0x552>
 8002840:	001a      	movs	r2, r3
 8002842:	001c      	movs	r4, r3
 8002844:	432a      	orrs	r2, r5
 8002846:	d000      	beq.n	800284a <__aeabi_dsub+0x6c2>
 8002848:	e6b3      	b.n	80025b2 <__aeabi_dsub+0x42a>
 800284a:	e6c9      	b.n	80025e0 <__aeabi_dsub+0x458>
 800284c:	2480      	movs	r4, #128	@ 0x80
 800284e:	2600      	movs	r6, #0
 8002850:	0324      	lsls	r4, r4, #12
 8002852:	e5ae      	b.n	80023b2 <__aeabi_dsub+0x22a>
 8002854:	2120      	movs	r1, #32
 8002856:	2500      	movs	r5, #0
 8002858:	1a09      	subs	r1, r1, r0
 800285a:	e517      	b.n	800228c <__aeabi_dsub+0x104>
 800285c:	2200      	movs	r2, #0
 800285e:	2500      	movs	r5, #0
 8002860:	4c0b      	ldr	r4, [pc, #44]	@ (8002890 <__aeabi_dsub+0x708>)
 8002862:	e53a      	b.n	80022da <__aeabi_dsub+0x152>
 8002864:	2d00      	cmp	r5, #0
 8002866:	d100      	bne.n	800286a <__aeabi_dsub+0x6e2>
 8002868:	e5f6      	b.n	8002458 <__aeabi_dsub+0x2d0>
 800286a:	464b      	mov	r3, r9
 800286c:	1bda      	subs	r2, r3, r7
 800286e:	4692      	mov	sl, r2
 8002870:	2f00      	cmp	r7, #0
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x6ee>
 8002874:	e66f      	b.n	8002556 <__aeabi_dsub+0x3ce>
 8002876:	2a38      	cmp	r2, #56	@ 0x38
 8002878:	dc05      	bgt.n	8002886 <__aeabi_dsub+0x6fe>
 800287a:	2680      	movs	r6, #128	@ 0x80
 800287c:	0436      	lsls	r6, r6, #16
 800287e:	4334      	orrs	r4, r6
 8002880:	4688      	mov	r8, r1
 8002882:	000e      	movs	r6, r1
 8002884:	e6d1      	b.n	800262a <__aeabi_dsub+0x4a2>
 8002886:	4688      	mov	r8, r1
 8002888:	000e      	movs	r6, r1
 800288a:	2501      	movs	r5, #1
 800288c:	e6de      	b.n	800264c <__aeabi_dsub+0x4c4>
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	000007ff 	.word	0x000007ff
 8002894:	ff7fffff 	.word	0xff7fffff
 8002898:	000007fe 	.word	0x000007fe
 800289c:	2d00      	cmp	r5, #0
 800289e:	d100      	bne.n	80028a2 <__aeabi_dsub+0x71a>
 80028a0:	e668      	b.n	8002574 <__aeabi_dsub+0x3ec>
 80028a2:	464b      	mov	r3, r9
 80028a4:	1bd9      	subs	r1, r3, r7
 80028a6:	2f00      	cmp	r7, #0
 80028a8:	d101      	bne.n	80028ae <__aeabi_dsub+0x726>
 80028aa:	468a      	mov	sl, r1
 80028ac:	e5a7      	b.n	80023fe <__aeabi_dsub+0x276>
 80028ae:	2701      	movs	r7, #1
 80028b0:	2938      	cmp	r1, #56	@ 0x38
 80028b2:	dd00      	ble.n	80028b6 <__aeabi_dsub+0x72e>
 80028b4:	e5c7      	b.n	8002446 <__aeabi_dsub+0x2be>
 80028b6:	2280      	movs	r2, #128	@ 0x80
 80028b8:	0412      	lsls	r2, r2, #16
 80028ba:	4314      	orrs	r4, r2
 80028bc:	e5af      	b.n	800241e <__aeabi_dsub+0x296>
 80028be:	46c0      	nop			@ (mov r8, r8)

080028c0 <__aeabi_dcmpun>:
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	46c6      	mov	lr, r8
 80028c4:	031e      	lsls	r6, r3, #12
 80028c6:	0b36      	lsrs	r6, r6, #12
 80028c8:	46b0      	mov	r8, r6
 80028ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002900 <__aeabi_dcmpun+0x40>)
 80028cc:	030c      	lsls	r4, r1, #12
 80028ce:	004d      	lsls	r5, r1, #1
 80028d0:	005f      	lsls	r7, r3, #1
 80028d2:	b500      	push	{lr}
 80028d4:	0b24      	lsrs	r4, r4, #12
 80028d6:	0d6d      	lsrs	r5, r5, #21
 80028d8:	0d7f      	lsrs	r7, r7, #21
 80028da:	42b5      	cmp	r5, r6
 80028dc:	d00b      	beq.n	80028f6 <__aeabi_dcmpun+0x36>
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <__aeabi_dcmpun+0x40>)
 80028e0:	2000      	movs	r0, #0
 80028e2:	428f      	cmp	r7, r1
 80028e4:	d104      	bne.n	80028f0 <__aeabi_dcmpun+0x30>
 80028e6:	4646      	mov	r6, r8
 80028e8:	4316      	orrs	r6, r2
 80028ea:	0030      	movs	r0, r6
 80028ec:	1e43      	subs	r3, r0, #1
 80028ee:	4198      	sbcs	r0, r3
 80028f0:	bc80      	pop	{r7}
 80028f2:	46b8      	mov	r8, r7
 80028f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f6:	4304      	orrs	r4, r0
 80028f8:	2001      	movs	r0, #1
 80028fa:	2c00      	cmp	r4, #0
 80028fc:	d1f8      	bne.n	80028f0 <__aeabi_dcmpun+0x30>
 80028fe:	e7ee      	b.n	80028de <__aeabi_dcmpun+0x1e>
 8002900:	000007ff 	.word	0x000007ff

08002904 <__aeabi_d2iz>:
 8002904:	000b      	movs	r3, r1
 8002906:	0002      	movs	r2, r0
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	4d16      	ldr	r5, [pc, #88]	@ (8002964 <__aeabi_d2iz+0x60>)
 800290c:	030c      	lsls	r4, r1, #12
 800290e:	b082      	sub	sp, #8
 8002910:	0049      	lsls	r1, r1, #1
 8002912:	2000      	movs	r0, #0
 8002914:	9200      	str	r2, [sp, #0]
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	0b24      	lsrs	r4, r4, #12
 800291a:	0d49      	lsrs	r1, r1, #21
 800291c:	0fde      	lsrs	r6, r3, #31
 800291e:	42a9      	cmp	r1, r5
 8002920:	dd04      	ble.n	800292c <__aeabi_d2iz+0x28>
 8002922:	4811      	ldr	r0, [pc, #68]	@ (8002968 <__aeabi_d2iz+0x64>)
 8002924:	4281      	cmp	r1, r0
 8002926:	dd03      	ble.n	8002930 <__aeabi_d2iz+0x2c>
 8002928:	4b10      	ldr	r3, [pc, #64]	@ (800296c <__aeabi_d2iz+0x68>)
 800292a:	18f0      	adds	r0, r6, r3
 800292c:	b002      	add	sp, #8
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	2080      	movs	r0, #128	@ 0x80
 8002932:	0340      	lsls	r0, r0, #13
 8002934:	4320      	orrs	r0, r4
 8002936:	4c0e      	ldr	r4, [pc, #56]	@ (8002970 <__aeabi_d2iz+0x6c>)
 8002938:	1a64      	subs	r4, r4, r1
 800293a:	2c1f      	cmp	r4, #31
 800293c:	dd08      	ble.n	8002950 <__aeabi_d2iz+0x4c>
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <__aeabi_d2iz+0x70>)
 8002940:	1a5b      	subs	r3, r3, r1
 8002942:	40d8      	lsrs	r0, r3
 8002944:	0003      	movs	r3, r0
 8002946:	4258      	negs	r0, r3
 8002948:	2e00      	cmp	r6, #0
 800294a:	d1ef      	bne.n	800292c <__aeabi_d2iz+0x28>
 800294c:	0018      	movs	r0, r3
 800294e:	e7ed      	b.n	800292c <__aeabi_d2iz+0x28>
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <__aeabi_d2iz+0x74>)
 8002952:	9a00      	ldr	r2, [sp, #0]
 8002954:	469c      	mov	ip, r3
 8002956:	0003      	movs	r3, r0
 8002958:	4461      	add	r1, ip
 800295a:	408b      	lsls	r3, r1
 800295c:	40e2      	lsrs	r2, r4
 800295e:	4313      	orrs	r3, r2
 8002960:	e7f1      	b.n	8002946 <__aeabi_d2iz+0x42>
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	000003fe 	.word	0x000003fe
 8002968:	0000041d 	.word	0x0000041d
 800296c:	7fffffff 	.word	0x7fffffff
 8002970:	00000433 	.word	0x00000433
 8002974:	00000413 	.word	0x00000413
 8002978:	fffffbed 	.word	0xfffffbed

0800297c <__aeabi_i2d>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	2800      	cmp	r0, #0
 8002980:	d016      	beq.n	80029b0 <__aeabi_i2d+0x34>
 8002982:	17c3      	asrs	r3, r0, #31
 8002984:	18c5      	adds	r5, r0, r3
 8002986:	405d      	eors	r5, r3
 8002988:	0fc4      	lsrs	r4, r0, #31
 800298a:	0028      	movs	r0, r5
 800298c:	f000 f914 	bl	8002bb8 <__clzsi2>
 8002990:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <__aeabi_i2d+0x58>)
 8002992:	1a1b      	subs	r3, r3, r0
 8002994:	055b      	lsls	r3, r3, #21
 8002996:	0d5b      	lsrs	r3, r3, #21
 8002998:	280a      	cmp	r0, #10
 800299a:	dc14      	bgt.n	80029c6 <__aeabi_i2d+0x4a>
 800299c:	0002      	movs	r2, r0
 800299e:	002e      	movs	r6, r5
 80029a0:	3215      	adds	r2, #21
 80029a2:	4096      	lsls	r6, r2
 80029a4:	220b      	movs	r2, #11
 80029a6:	1a12      	subs	r2, r2, r0
 80029a8:	40d5      	lsrs	r5, r2
 80029aa:	032d      	lsls	r5, r5, #12
 80029ac:	0b2d      	lsrs	r5, r5, #12
 80029ae:	e003      	b.n	80029b8 <__aeabi_i2d+0x3c>
 80029b0:	2400      	movs	r4, #0
 80029b2:	2300      	movs	r3, #0
 80029b4:	2500      	movs	r5, #0
 80029b6:	2600      	movs	r6, #0
 80029b8:	051b      	lsls	r3, r3, #20
 80029ba:	432b      	orrs	r3, r5
 80029bc:	07e4      	lsls	r4, r4, #31
 80029be:	4323      	orrs	r3, r4
 80029c0:	0030      	movs	r0, r6
 80029c2:	0019      	movs	r1, r3
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
 80029c6:	380b      	subs	r0, #11
 80029c8:	4085      	lsls	r5, r0
 80029ca:	032d      	lsls	r5, r5, #12
 80029cc:	2600      	movs	r6, #0
 80029ce:	0b2d      	lsrs	r5, r5, #12
 80029d0:	e7f2      	b.n	80029b8 <__aeabi_i2d+0x3c>
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	0000041e 	.word	0x0000041e

080029d8 <__aeabi_ui2d>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	1e04      	subs	r4, r0, #0
 80029dc:	d010      	beq.n	8002a00 <__aeabi_ui2d+0x28>
 80029de:	f000 f8eb 	bl	8002bb8 <__clzsi2>
 80029e2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <__aeabi_ui2d+0x44>)
 80029e4:	1a1b      	subs	r3, r3, r0
 80029e6:	055b      	lsls	r3, r3, #21
 80029e8:	0d5b      	lsrs	r3, r3, #21
 80029ea:	280a      	cmp	r0, #10
 80029ec:	dc0f      	bgt.n	8002a0e <__aeabi_ui2d+0x36>
 80029ee:	220b      	movs	r2, #11
 80029f0:	0021      	movs	r1, r4
 80029f2:	1a12      	subs	r2, r2, r0
 80029f4:	40d1      	lsrs	r1, r2
 80029f6:	3015      	adds	r0, #21
 80029f8:	030a      	lsls	r2, r1, #12
 80029fa:	4084      	lsls	r4, r0
 80029fc:	0b12      	lsrs	r2, r2, #12
 80029fe:	e001      	b.n	8002a04 <__aeabi_ui2d+0x2c>
 8002a00:	2300      	movs	r3, #0
 8002a02:	2200      	movs	r2, #0
 8002a04:	051b      	lsls	r3, r3, #20
 8002a06:	4313      	orrs	r3, r2
 8002a08:	0020      	movs	r0, r4
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	bd10      	pop	{r4, pc}
 8002a0e:	0022      	movs	r2, r4
 8002a10:	380b      	subs	r0, #11
 8002a12:	4082      	lsls	r2, r0
 8002a14:	0312      	lsls	r2, r2, #12
 8002a16:	2400      	movs	r4, #0
 8002a18:	0b12      	lsrs	r2, r2, #12
 8002a1a:	e7f3      	b.n	8002a04 <__aeabi_ui2d+0x2c>
 8002a1c:	0000041e 	.word	0x0000041e

08002a20 <__aeabi_f2d>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	0242      	lsls	r2, r0, #9
 8002a24:	0043      	lsls	r3, r0, #1
 8002a26:	0fc4      	lsrs	r4, r0, #31
 8002a28:	20fe      	movs	r0, #254	@ 0xfe
 8002a2a:	0e1b      	lsrs	r3, r3, #24
 8002a2c:	1c59      	adds	r1, r3, #1
 8002a2e:	0a55      	lsrs	r5, r2, #9
 8002a30:	4208      	tst	r0, r1
 8002a32:	d00c      	beq.n	8002a4e <__aeabi_f2d+0x2e>
 8002a34:	21e0      	movs	r1, #224	@ 0xe0
 8002a36:	0089      	lsls	r1, r1, #2
 8002a38:	468c      	mov	ip, r1
 8002a3a:	076d      	lsls	r5, r5, #29
 8002a3c:	0b12      	lsrs	r2, r2, #12
 8002a3e:	4463      	add	r3, ip
 8002a40:	051b      	lsls	r3, r3, #20
 8002a42:	4313      	orrs	r3, r2
 8002a44:	07e4      	lsls	r4, r4, #31
 8002a46:	4323      	orrs	r3, r4
 8002a48:	0028      	movs	r0, r5
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	bd70      	pop	{r4, r5, r6, pc}
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d114      	bne.n	8002a7c <__aeabi_f2d+0x5c>
 8002a52:	2d00      	cmp	r5, #0
 8002a54:	d01b      	beq.n	8002a8e <__aeabi_f2d+0x6e>
 8002a56:	0028      	movs	r0, r5
 8002a58:	f000 f8ae 	bl	8002bb8 <__clzsi2>
 8002a5c:	280a      	cmp	r0, #10
 8002a5e:	dc1c      	bgt.n	8002a9a <__aeabi_f2d+0x7a>
 8002a60:	230b      	movs	r3, #11
 8002a62:	002a      	movs	r2, r5
 8002a64:	1a1b      	subs	r3, r3, r0
 8002a66:	40da      	lsrs	r2, r3
 8002a68:	0003      	movs	r3, r0
 8002a6a:	3315      	adds	r3, #21
 8002a6c:	409d      	lsls	r5, r3
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <__aeabi_f2d+0x88>)
 8002a70:	0312      	lsls	r2, r2, #12
 8002a72:	1a1b      	subs	r3, r3, r0
 8002a74:	055b      	lsls	r3, r3, #21
 8002a76:	0b12      	lsrs	r2, r2, #12
 8002a78:	0d5b      	lsrs	r3, r3, #21
 8002a7a:	e7e1      	b.n	8002a40 <__aeabi_f2d+0x20>
 8002a7c:	2d00      	cmp	r5, #0
 8002a7e:	d009      	beq.n	8002a94 <__aeabi_f2d+0x74>
 8002a80:	0b13      	lsrs	r3, r2, #12
 8002a82:	2280      	movs	r2, #128	@ 0x80
 8002a84:	0312      	lsls	r2, r2, #12
 8002a86:	431a      	orrs	r2, r3
 8002a88:	076d      	lsls	r5, r5, #29
 8002a8a:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <__aeabi_f2d+0x8c>)
 8002a8c:	e7d8      	b.n	8002a40 <__aeabi_f2d+0x20>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2200      	movs	r2, #0
 8002a92:	e7d5      	b.n	8002a40 <__aeabi_f2d+0x20>
 8002a94:	2200      	movs	r2, #0
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <__aeabi_f2d+0x8c>)
 8002a98:	e7d2      	b.n	8002a40 <__aeabi_f2d+0x20>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	002a      	movs	r2, r5
 8002a9e:	3b0b      	subs	r3, #11
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	2500      	movs	r5, #0
 8002aa4:	e7e3      	b.n	8002a6e <__aeabi_f2d+0x4e>
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	00000389 	.word	0x00000389
 8002aac:	000007ff 	.word	0x000007ff

08002ab0 <__aeabi_d2f>:
 8002ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab2:	004b      	lsls	r3, r1, #1
 8002ab4:	030f      	lsls	r7, r1, #12
 8002ab6:	0d5b      	lsrs	r3, r3, #21
 8002ab8:	4c3b      	ldr	r4, [pc, #236]	@ (8002ba8 <__aeabi_d2f+0xf8>)
 8002aba:	0f45      	lsrs	r5, r0, #29
 8002abc:	b083      	sub	sp, #12
 8002abe:	0a7f      	lsrs	r7, r7, #9
 8002ac0:	1c5e      	adds	r6, r3, #1
 8002ac2:	432f      	orrs	r7, r5
 8002ac4:	9000      	str	r0, [sp, #0]
 8002ac6:	9101      	str	r1, [sp, #4]
 8002ac8:	0fca      	lsrs	r2, r1, #31
 8002aca:	00c5      	lsls	r5, r0, #3
 8002acc:	4226      	tst	r6, r4
 8002ace:	d00b      	beq.n	8002ae8 <__aeabi_d2f+0x38>
 8002ad0:	4936      	ldr	r1, [pc, #216]	@ (8002bac <__aeabi_d2f+0xfc>)
 8002ad2:	185c      	adds	r4, r3, r1
 8002ad4:	2cfe      	cmp	r4, #254	@ 0xfe
 8002ad6:	dd13      	ble.n	8002b00 <__aeabi_d2f+0x50>
 8002ad8:	20ff      	movs	r0, #255	@ 0xff
 8002ada:	2300      	movs	r3, #0
 8002adc:	05c0      	lsls	r0, r0, #23
 8002ade:	4318      	orrs	r0, r3
 8002ae0:	07d2      	lsls	r2, r2, #31
 8002ae2:	4310      	orrs	r0, r2
 8002ae4:	b003      	add	sp, #12
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <__aeabi_d2f+0x42>
 8002aec:	2000      	movs	r0, #0
 8002aee:	2300      	movs	r3, #0
 8002af0:	e7f4      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002af2:	433d      	orrs	r5, r7
 8002af4:	d0f0      	beq.n	8002ad8 <__aeabi_d2f+0x28>
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	03db      	lsls	r3, r3, #15
 8002afa:	20ff      	movs	r0, #255	@ 0xff
 8002afc:	433b      	orrs	r3, r7
 8002afe:	e7ed      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002b00:	2c00      	cmp	r4, #0
 8002b02:	dd14      	ble.n	8002b2e <__aeabi_d2f+0x7e>
 8002b04:	9b00      	ldr	r3, [sp, #0]
 8002b06:	00ff      	lsls	r7, r7, #3
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	4183      	sbcs	r3, r0
 8002b0e:	0f69      	lsrs	r1, r5, #29
 8002b10:	433b      	orrs	r3, r7
 8002b12:	430b      	orrs	r3, r1
 8002b14:	0759      	lsls	r1, r3, #29
 8002b16:	d041      	beq.n	8002b9c <__aeabi_d2f+0xec>
 8002b18:	210f      	movs	r1, #15
 8002b1a:	4019      	ands	r1, r3
 8002b1c:	2904      	cmp	r1, #4
 8002b1e:	d028      	beq.n	8002b72 <__aeabi_d2f+0xc2>
 8002b20:	3304      	adds	r3, #4
 8002b22:	0159      	lsls	r1, r3, #5
 8002b24:	d525      	bpl.n	8002b72 <__aeabi_d2f+0xc2>
 8002b26:	3401      	adds	r4, #1
 8002b28:	2300      	movs	r3, #0
 8002b2a:	b2e0      	uxtb	r0, r4
 8002b2c:	e7d6      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002b2e:	0021      	movs	r1, r4
 8002b30:	3117      	adds	r1, #23
 8002b32:	dbdb      	blt.n	8002aec <__aeabi_d2f+0x3c>
 8002b34:	2180      	movs	r1, #128	@ 0x80
 8002b36:	201e      	movs	r0, #30
 8002b38:	0409      	lsls	r1, r1, #16
 8002b3a:	4339      	orrs	r1, r7
 8002b3c:	1b00      	subs	r0, r0, r4
 8002b3e:	281f      	cmp	r0, #31
 8002b40:	dd1b      	ble.n	8002b7a <__aeabi_d2f+0xca>
 8002b42:	2602      	movs	r6, #2
 8002b44:	4276      	negs	r6, r6
 8002b46:	1b34      	subs	r4, r6, r4
 8002b48:	000e      	movs	r6, r1
 8002b4a:	40e6      	lsrs	r6, r4
 8002b4c:	0034      	movs	r4, r6
 8002b4e:	2820      	cmp	r0, #32
 8002b50:	d004      	beq.n	8002b5c <__aeabi_d2f+0xac>
 8002b52:	4817      	ldr	r0, [pc, #92]	@ (8002bb0 <__aeabi_d2f+0x100>)
 8002b54:	4684      	mov	ip, r0
 8002b56:	4463      	add	r3, ip
 8002b58:	4099      	lsls	r1, r3
 8002b5a:	430d      	orrs	r5, r1
 8002b5c:	002b      	movs	r3, r5
 8002b5e:	1e59      	subs	r1, r3, #1
 8002b60:	418b      	sbcs	r3, r1
 8002b62:	4323      	orrs	r3, r4
 8002b64:	0759      	lsls	r1, r3, #29
 8002b66:	d015      	beq.n	8002b94 <__aeabi_d2f+0xe4>
 8002b68:	210f      	movs	r1, #15
 8002b6a:	2400      	movs	r4, #0
 8002b6c:	4019      	ands	r1, r3
 8002b6e:	2904      	cmp	r1, #4
 8002b70:	d117      	bne.n	8002ba2 <__aeabi_d2f+0xf2>
 8002b72:	019b      	lsls	r3, r3, #6
 8002b74:	0a5b      	lsrs	r3, r3, #9
 8002b76:	b2e0      	uxtb	r0, r4
 8002b78:	e7b0      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002b7a:	4c0e      	ldr	r4, [pc, #56]	@ (8002bb4 <__aeabi_d2f+0x104>)
 8002b7c:	191c      	adds	r4, r3, r4
 8002b7e:	002b      	movs	r3, r5
 8002b80:	40a5      	lsls	r5, r4
 8002b82:	40c3      	lsrs	r3, r0
 8002b84:	40a1      	lsls	r1, r4
 8002b86:	1e68      	subs	r0, r5, #1
 8002b88:	4185      	sbcs	r5, r0
 8002b8a:	4329      	orrs	r1, r5
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	2400      	movs	r4, #0
 8002b90:	0759      	lsls	r1, r3, #29
 8002b92:	d1c1      	bne.n	8002b18 <__aeabi_d2f+0x68>
 8002b94:	019b      	lsls	r3, r3, #6
 8002b96:	2000      	movs	r0, #0
 8002b98:	0a5b      	lsrs	r3, r3, #9
 8002b9a:	e79f      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	b2e0      	uxtb	r0, r4
 8002ba0:	e79c      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	e7e5      	b.n	8002b72 <__aeabi_d2f+0xc2>
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	000007fe 	.word	0x000007fe
 8002bac:	fffffc80 	.word	0xfffffc80
 8002bb0:	fffffca2 	.word	0xfffffca2
 8002bb4:	fffffc82 	.word	0xfffffc82

08002bb8 <__clzsi2>:
 8002bb8:	211c      	movs	r1, #28
 8002bba:	2301      	movs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	4298      	cmp	r0, r3
 8002bc0:	d301      	bcc.n	8002bc6 <__clzsi2+0xe>
 8002bc2:	0c00      	lsrs	r0, r0, #16
 8002bc4:	3910      	subs	r1, #16
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	4298      	cmp	r0, r3
 8002bca:	d301      	bcc.n	8002bd0 <__clzsi2+0x18>
 8002bcc:	0a00      	lsrs	r0, r0, #8
 8002bce:	3908      	subs	r1, #8
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	4298      	cmp	r0, r3
 8002bd4:	d301      	bcc.n	8002bda <__clzsi2+0x22>
 8002bd6:	0900      	lsrs	r0, r0, #4
 8002bd8:	3904      	subs	r1, #4
 8002bda:	a202      	add	r2, pc, #8	@ (adr r2, 8002be4 <__clzsi2+0x2c>)
 8002bdc:	5c10      	ldrb	r0, [r2, r0]
 8002bde:	1840      	adds	r0, r0, r1
 8002be0:	4770      	bx	lr
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	02020304 	.word	0x02020304
 8002be8:	01010101 	.word	0x01010101
	...

08002bf4 <Flash_read_identification_id>:
extern SPI_HandleTypeDef hspi2;



void Flash_read_identification_id()
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
	uint8_t spiBuf[5];

	spiBuf[0] = READ_ID;
 8002bfa:	003b      	movs	r3, r7
 8002bfc:	224b      	movs	r2, #75	@ 0x4b
 8002bfe:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = 0;
 8002c00:	003b      	movs	r3, r7
 8002c02:	2200      	movs	r2, #0
 8002c04:	705a      	strb	r2, [r3, #1]
	spiBuf[2] = 0;
 8002c06:	003b      	movs	r3, r7
 8002c08:	2200      	movs	r2, #0
 8002c0a:	709a      	strb	r2, [r3, #2]
	spiBuf[3] = 0;
 8002c0c:	003b      	movs	r3, r7
 8002c0e:	2200      	movs	r2, #0
 8002c10:	70da      	strb	r2, [r3, #3]
	spiBuf[4] = 0;
 8002c12:	003b      	movs	r3, r7
 8002c14:	2200      	movs	r2, #0
 8002c16:	711a      	strb	r2, [r3, #4]

	//Put CSN low

	flash_csn(0);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f000 f819 	bl	8002c50 <flash_csn>
	//Transmit register address

	HAL_SPI_Transmit(&hspi2, &spiBuf[0], 5, 1000);
 8002c1e:	23fa      	movs	r3, #250	@ 0xfa
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	0039      	movs	r1, r7
 8002c24:	4808      	ldr	r0, [pc, #32]	@ (8002c48 <Flash_read_identification_id+0x54>)
 8002c26:	2205      	movs	r2, #5
 8002c28:	f004 f872 	bl	8006d10 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, &read_flash_Byte[0], 8, 1000);
 8002c2c:	23fa      	movs	r3, #250	@ 0xfa
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4906      	ldr	r1, [pc, #24]	@ (8002c4c <Flash_read_identification_id+0x58>)
 8002c32:	4805      	ldr	r0, [pc, #20]	@ (8002c48 <Flash_read_identification_id+0x54>)
 8002c34:	2208      	movs	r2, #8
 8002c36:	f004 f9cb 	bl	8006fd0 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f000 f808 	bl	8002c50 <flash_csn>
}
 8002c40:	46c0      	nop			@ (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	2000039c 	.word	0x2000039c
 8002c4c:	200001fc 	.word	0x200001fc

08002c50 <flash_csn>:


void flash_csn( uint8_t val){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	0002      	movs	r2, r0
 8002c58:	1dfb      	adds	r3, r7, #7
 8002c5a:	701a      	strb	r2, [r3, #0]
	if ( val == 0 )
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <flash_csn+0x24>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	015b      	lsls	r3, r3, #5
 8002c68:	4808      	ldr	r0, [pc, #32]	@ (8002c8c <flash_csn+0x3c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	f002 fbb2 	bl	80053d6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);

}
 8002c72:	e006      	b.n	8002c82 <flash_csn+0x32>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	015b      	lsls	r3, r3, #5
 8002c78:	4804      	ldr	r0, [pc, #16]	@ (8002c8c <flash_csn+0x3c>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	f002 fbaa 	bl	80053d6 <HAL_GPIO_WritePin>
}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b002      	add	sp, #8
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	48000400 	.word	0x48000400

08002c90 <Write_flash_enable>:
	HAL_SPI_Transmit(&hspi2, &spiBuf[0], 2 , 100);
	//Bring CSN high
	flash_csn(1);
}

void Write_flash_enable(){
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
	uint8_t spiBuf = WREN;
 8002c96:	1dfb      	adds	r3, r7, #7
 8002c98:	2206      	movs	r2, #6
 8002c9a:	701a      	strb	r2, [r3, #0]
	//Put CSN low
	flash_csn(0);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7ff ffd7 	bl	8002c50 <flash_csn>
	//Transmit register address
	HAL_SPI_Transmit(&hspi2, &spiBuf, 1, 1000);
 8002ca2:	23fa      	movs	r3, #250	@ 0xfa
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	1df9      	adds	r1, r7, #7
 8002ca8:	4805      	ldr	r0, [pc, #20]	@ (8002cc0 <Write_flash_enable+0x30>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	f004 f830 	bl	8006d10 <HAL_SPI_Transmit>
	flash_csn(1);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7ff ffcd 	bl	8002c50 <flash_csn>
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b002      	add	sp, #8
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	2000039c 	.word	0x2000039c

08002cc4 <Flash_verificate_status>:


void Flash_verificate_status()
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
	uint8_t spiBuf[1];
	//Put CSN low
	spiBuf[0] = READ_STATUS_REG_1;
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	2205      	movs	r2, #5
 8002cce:	701a      	strb	r2, [r3, #0]
	uint8_t bussy = 1;
 8002cd0:	1dfb      	adds	r3, r7, #7
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
	while (bussy == 1){
 8002cd6:	e019      	b.n	8002d0c <Flash_verificate_status+0x48>
		flash_csn(0);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7ff ffb9 	bl	8002c50 <flash_csn>
		//Transmit register address
		HAL_SPI_Transmit(&hspi2, &spiBuf[0], 1, 1000);
 8002cde:	23fa      	movs	r3, #250	@ 0xfa
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	1d39      	adds	r1, r7, #4
 8002ce4:	480e      	ldr	r0, [pc, #56]	@ (8002d20 <Flash_verificate_status+0x5c>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f004 f812 	bl	8006d10 <HAL_SPI_Transmit>
		//Receive data
		HAL_SPI_Receive(&hspi2, &read_flash_Byte[0], 1, 1000);
 8002cec:	23fa      	movs	r3, #250	@ 0xfa
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	490c      	ldr	r1, [pc, #48]	@ (8002d24 <Flash_verificate_status+0x60>)
 8002cf2:	480b      	ldr	r0, [pc, #44]	@ (8002d20 <Flash_verificate_status+0x5c>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f004 f96b 	bl	8006fd0 <HAL_SPI_Receive>
		//Bring CSN high
		flash_csn(1);
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7ff ffa8 	bl	8002c50 <flash_csn>
		bussy = read_flash_Byte[0] & 0X01;
 8002d00:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <Flash_verificate_status+0x60>)
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	2101      	movs	r1, #1
 8002d08:	400a      	ands	r2, r1
 8002d0a:	701a      	strb	r2, [r3, #0]
	while (bussy == 1){
 8002d0c:	1dfb      	adds	r3, r7, #7
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d0e1      	beq.n	8002cd8 <Flash_verificate_status+0x14>
	}
}
 8002d14:	46c0      	nop			@ (mov r8, r8)
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	2000039c 	.word	0x2000039c
 8002d24:	200001fc 	.word	0x200001fc

08002d28 <Flash_write_page>:



void Flash_write_page(uint8_t address_1, uint8_t address_2, uint8_t address_3, uint8_t *value_to_write, uint8_t length)
{
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	46c6      	mov	lr, r8
 8002d2c:	b500      	push	{lr}
 8002d2e:	b08c      	sub	sp, #48	@ 0x30
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	0006      	movs	r6, r0
 8002d34:	0008      	movs	r0, r1
 8002d36:	0011      	movs	r1, r2
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	231f      	movs	r3, #31
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	1c32      	adds	r2, r6, #0
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	231e      	movs	r3, #30
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	1c02      	adds	r2, r0, #0
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	231d      	movs	r3, #29
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	1c0a      	adds	r2, r1, #0
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	466b      	mov	r3, sp
 8002d54:	4698      	mov	r8, r3
	Flash_verificate_status();
 8002d56:	f7ff ffb5 	bl	8002cc4 <Flash_verificate_status>

	Write_flash_enable();
 8002d5a:	f7ff ff99 	bl	8002c90 <Write_flash_enable>

	char spiBuf[length + 4];
 8002d5e:	2328      	movs	r3, #40	@ 0x28
 8002d60:	2218      	movs	r2, #24
 8002d62:	1898      	adds	r0, r3, r2
 8002d64:	19c3      	adds	r3, r0, r7
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	1e5a      	subs	r2, r3, #1
 8002d6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d6e:	001a      	movs	r2, r3
 8002d70:	60ba      	str	r2, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	60fa      	str	r2, [r7, #12]
 8002d76:	68b8      	ldr	r0, [r7, #8]
 8002d78:	68f9      	ldr	r1, [r7, #12]
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	0f52      	lsrs	r2, r2, #29
 8002d7e:	000e      	movs	r6, r1
 8002d80:	00f6      	lsls	r6, r6, #3
 8002d82:	617e      	str	r6, [r7, #20]
 8002d84:	697e      	ldr	r6, [r7, #20]
 8002d86:	4316      	orrs	r6, r2
 8002d88:	617e      	str	r6, [r7, #20]
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	00d2      	lsls	r2, r2, #3
 8002d8e:	613a      	str	r2, [r7, #16]
 8002d90:	001a      	movs	r2, r3
 8002d92:	603a      	str	r2, [r7, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	6838      	ldr	r0, [r7, #0]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	0f52      	lsrs	r2, r2, #29
 8002da0:	000e      	movs	r6, r1
 8002da2:	00f5      	lsls	r5, r6, #3
 8002da4:	4315      	orrs	r5, r2
 8002da6:	0002      	movs	r2, r0
 8002da8:	00d4      	lsls	r4, r2, #3
 8002daa:	3307      	adds	r3, #7
 8002dac:	08db      	lsrs	r3, r3, #3
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	466a      	mov	r2, sp
 8002db2:	1ad2      	subs	r2, r2, r3
 8002db4:	4695      	mov	sp, r2
 8002db6:	ab02      	add	r3, sp, #8
 8002db8:	3300      	adds	r3, #0
 8002dba:	623b      	str	r3, [r7, #32]

	spiBuf[0] = PAGE_PROGRAM;
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	701a      	strb	r2, [r3, #0]
	// concatenate all the data to be sent
	sprintf( &spiBuf[1], "%c%c%c", address_1, address_2, address_3 );
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	1c58      	adds	r0, r3, #1
 8002dc6:	241f      	movs	r4, #31
 8002dc8:	193b      	adds	r3, r7, r4
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	211e      	movs	r1, #30
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	781c      	ldrb	r4, [r3, #0]
 8002dd2:	231d      	movs	r3, #29
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4913      	ldr	r1, [pc, #76]	@ (8002e28 <Flash_write_page+0x100>)
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	0023      	movs	r3, r4
 8002dde:	f007 f9ef 	bl	800a1c0 <siprintf>
	strncpy( &spiBuf[4], (char *)value_to_write, length );
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	1d18      	adds	r0, r3, #4
 8002de6:	2428      	movs	r4, #40	@ 0x28
 8002de8:	2518      	movs	r5, #24
 8002dea:	1963      	adds	r3, r4, r5
 8002dec:	19db      	adds	r3, r3, r7
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	0019      	movs	r1, r3
 8002df4:	f007 fa82 	bl	800a2fc <strncpy>
	//Put CSN low
	flash_csn(0);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7ff ff29 	bl	8002c50 <flash_csn>
	//Transmit register address and data
	HAL_SPI_Transmit(&hspi2, &spiBuf[0], length+4 , 100);
 8002dfe:	6a39      	ldr	r1, [r7, #32]
 8002e00:	1963      	adds	r3, r4, r5
 8002e02:	19db      	adds	r3, r3, r7
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3304      	adds	r3, #4
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4807      	ldr	r0, [pc, #28]	@ (8002e2c <Flash_write_page+0x104>)
 8002e0e:	2364      	movs	r3, #100	@ 0x64
 8002e10:	f003 ff7e 	bl	8006d10 <HAL_SPI_Transmit>
	//Bring CSN high
	flash_csn(1);
 8002e14:	2001      	movs	r0, #1
 8002e16:	f7ff ff1b 	bl	8002c50 <flash_csn>
 8002e1a:	46c5      	mov	sp, r8
}
 8002e1c:	46c0      	nop			@ (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b00a      	add	sp, #40	@ 0x28
 8002e22:	bc80      	pop	{r7}
 8002e24:	46b8      	mov	r8, r7
 8002e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e28:	0800d028 	.word	0x0800d028
 8002e2c:	2000039c 	.word	0x2000039c

08002e30 <Flash_read_page>:


void Flash_read_page(uint8_t address_1, uint8_t address_2, uint8_t address_3, uint8_t aux_length)
{
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	0005      	movs	r5, r0
 8002e38:	000c      	movs	r4, r1
 8002e3a:	0010      	movs	r0, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	1dfb      	adds	r3, r7, #7
 8002e40:	1c2a      	adds	r2, r5, #0
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	1dbb      	adds	r3, r7, #6
 8002e46:	1c22      	adds	r2, r4, #0
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	1d7b      	adds	r3, r7, #5
 8002e4c:	1c02      	adds	r2, r0, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	1c0a      	adds	r2, r1, #0
 8002e54:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[4];
	Flash_verificate_status();
 8002e56:	f7ff ff35 	bl	8002cc4 <Flash_verificate_status>
	//Put CSN low
	flash_csn(0);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7ff fef8 	bl	8002c50 <flash_csn>
	// concatenate all the data to be sent
	spiBuf[0] = READ_PAGE;
 8002e60:	200c      	movs	r0, #12
 8002e62:	183b      	adds	r3, r7, r0
 8002e64:	2203      	movs	r2, #3
 8002e66:	701a      	strb	r2, [r3, #0]
	sprintf( &spiBuf[1], "%c%c%c", address_1, address_2, address_3 );
 8002e68:	1dfb      	adds	r3, r7, #7
 8002e6a:	781c      	ldrb	r4, [r3, #0]
 8002e6c:	1dbb      	adds	r3, r7, #6
 8002e6e:	781d      	ldrb	r5, [r3, #0]
 8002e70:	1d7b      	adds	r3, r7, #5
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	490f      	ldr	r1, [pc, #60]	@ (8002eb4 <Flash_read_page+0x84>)
 8002e76:	0006      	movs	r6, r0
 8002e78:	183a      	adds	r2, r7, r0
 8002e7a:	1c50      	adds	r0, r2, #1
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	002b      	movs	r3, r5
 8002e80:	0022      	movs	r2, r4
 8002e82:	f007 f99d 	bl	800a1c0 <siprintf>
	//Transmit register address
	HAL_SPI_Transmit(&hspi2, &spiBuf, 4, 1000);
 8002e86:	23fa      	movs	r3, #250	@ 0xfa
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	19b9      	adds	r1, r7, r6
 8002e8c:	480a      	ldr	r0, [pc, #40]	@ (8002eb8 <Flash_read_page+0x88>)
 8002e8e:	2204      	movs	r2, #4
 8002e90:	f003 ff3e 	bl	8006d10 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, &read_flash_Byte[0], aux_length, 1000);
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	23fa      	movs	r3, #250	@ 0xfa
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4907      	ldr	r1, [pc, #28]	@ (8002ebc <Flash_read_page+0x8c>)
 8002ea0:	4805      	ldr	r0, [pc, #20]	@ (8002eb8 <Flash_read_page+0x88>)
 8002ea2:	f004 f895 	bl	8006fd0 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f7ff fed2 	bl	8002c50 <flash_csn>
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b005      	add	sp, #20
 8002eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb4:	0800d028 	.word	0x0800d028
 8002eb8:	2000039c 	.word	0x2000039c
 8002ebc:	200001fc 	.word	0x200001fc

08002ec0 <Flash_page_erase>:

void Flash_page_erase(uint8_t address_1, uint8_t address_2, uint8_t address_3)
{
 8002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	0004      	movs	r4, r0
 8002ec8:	0008      	movs	r0, r1
 8002eca:	0011      	movs	r1, r2
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	1c22      	adds	r2, r4, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	1dbb      	adds	r3, r7, #6
 8002ed4:	1c02      	adds	r2, r0, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	1d7b      	adds	r3, r7, #5
 8002eda:	1c0a      	adds	r2, r1, #0
 8002edc:	701a      	strb	r2, [r3, #0]
	Flash_verificate_status();
 8002ede:	f7ff fef1 	bl	8002cc4 <Flash_verificate_status>
	// Activate WREN
	Write_flash_enable();
 8002ee2:	f7ff fed5 	bl	8002c90 <Write_flash_enable>
	uint8_t spiBuf[4];

	//Put CSN low
	flash_csn(0);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7ff feb2 	bl	8002c50 <flash_csn>
	// concatenate all the data to be sent
	spiBuf[0] = PAGE_ERASE;
 8002eec:	200c      	movs	r0, #12
 8002eee:	183b      	adds	r3, r7, r0
 8002ef0:	2281      	movs	r2, #129	@ 0x81
 8002ef2:	701a      	strb	r2, [r3, #0]
	sprintf( &spiBuf[1], "%c%c%c", address_1, address_2, address_3 );
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	781c      	ldrb	r4, [r3, #0]
 8002ef8:	1dbb      	adds	r3, r7, #6
 8002efa:	781d      	ldrb	r5, [r3, #0]
 8002efc:	1d7b      	adds	r3, r7, #5
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	490b      	ldr	r1, [pc, #44]	@ (8002f30 <Flash_page_erase+0x70>)
 8002f02:	0006      	movs	r6, r0
 8002f04:	183a      	adds	r2, r7, r0
 8002f06:	1c50      	adds	r0, r2, #1
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	002b      	movs	r3, r5
 8002f0c:	0022      	movs	r2, r4
 8002f0e:	f007 f957 	bl	800a1c0 <siprintf>
	//Transmit register address
	HAL_SPI_Transmit(&hspi2, &spiBuf, 4, 1000);
 8002f12:	23fa      	movs	r3, #250	@ 0xfa
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	19b9      	adds	r1, r7, r6
 8002f18:	4806      	ldr	r0, [pc, #24]	@ (8002f34 <Flash_page_erase+0x74>)
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	f003 fef8 	bl	8006d10 <HAL_SPI_Transmit>
	//Bring CSN high
	flash_csn(1);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f7ff fe95 	bl	8002c50 <flash_csn>
}
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b005      	add	sp, #20
 8002f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	0800d028 	.word	0x0800d028
 8002f34:	2000039c 	.word	0x2000039c

08002f38 <decToBcd>:
extern I2C_HandleTypeDef hi2c2;  // Declaración externa del manejador I2C (debe estar definido en tu proyecto)

TIME time;  // Definición de la variable global

// Implementación de conversión decimal a BCD
uint8_t decToBcd(int val) {
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
    return (uint8_t)((val / 10 * 16) + (val % 10));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	210a      	movs	r1, #10
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7fd f98f 	bl	8000268 <__divsi3>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	b2dc      	uxtb	r4, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	210a      	movs	r1, #10
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd fa6c 	bl	8000434 <__aeabi_idivmod>
 8002f5c:	000b      	movs	r3, r1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	18e3      	adds	r3, r4, r3
 8002f62:	b2db      	uxtb	r3, r3
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b003      	add	sp, #12
 8002f6a:	bd90      	pop	{r4, r7, pc}

08002f6c <bcdToDec>:

// Implementación de conversión BCD a decimal
int bcdToDec(uint8_t val) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	0002      	movs	r2, r0
 8002f74:	1dfb      	adds	r3, r7, #7
 8002f76:	701a      	strb	r2, [r3, #0]
    return (int)((val / 16 * 10) + (val % 16));
 8002f78:	1dfb      	adds	r3, r7, #7
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	001a      	movs	r2, r3
 8002f82:	0013      	movs	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	1dfb      	adds	r3, r7, #7
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	220f      	movs	r2, #15
 8002f92:	4013      	ands	r3, r2
 8002f94:	18cb      	adds	r3, r1, r3
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <Set_Time>:

// Función para configurar el tiempo
void Set_Time(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year) {
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af04      	add	r7, sp, #16
 8002fa6:	0005      	movs	r5, r0
 8002fa8:	000c      	movs	r4, r1
 8002faa:	0010      	movs	r0, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	1c2a      	adds	r2, r5, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	1dbb      	adds	r3, r7, #6
 8002fb6:	1c22      	adds	r2, r4, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	1d7b      	adds	r3, r7, #5
 8002fbc:	1c02      	adds	r2, r0, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	1c0a      	adds	r2, r1, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
    uint8_t set_time[7] = {
        decToBcd(sec),
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7ff ffb4 	bl	8002f38 <decToBcd>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	001a      	movs	r2, r3
    uint8_t set_time[7] = {
 8002fd4:	2408      	movs	r4, #8
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	701a      	strb	r2, [r3, #0]
        decToBcd(min),
 8002fda:	1dbb      	adds	r3, r7, #6
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff ffaa 	bl	8002f38 <decToBcd>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	001a      	movs	r2, r3
    uint8_t set_time[7] = {
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	705a      	strb	r2, [r3, #1]
        decToBcd(hour),
 8002fec:	1d7b      	adds	r3, r7, #5
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff ffa1 	bl	8002f38 <decToBcd>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	001a      	movs	r2, r3
    uint8_t set_time[7] = {
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	709a      	strb	r2, [r3, #2]
        decToBcd(dow),
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff ff98 	bl	8002f38 <decToBcd>
 8003008:	0003      	movs	r3, r0
 800300a:	001a      	movs	r2, r3
    uint8_t set_time[7] = {
 800300c:	193b      	adds	r3, r7, r4
 800300e:	70da      	strb	r2, [r3, #3]
        decToBcd(dom),
 8003010:	2320      	movs	r3, #32
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff ff8e 	bl	8002f38 <decToBcd>
 800301c:	0003      	movs	r3, r0
 800301e:	001a      	movs	r2, r3
    uint8_t set_time[7] = {
 8003020:	193b      	adds	r3, r7, r4
 8003022:	711a      	strb	r2, [r3, #4]
        decToBcd(month),
 8003024:	2324      	movs	r3, #36	@ 0x24
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	0018      	movs	r0, r3
 800302c:	f7ff ff84 	bl	8002f38 <decToBcd>
 8003030:	0003      	movs	r3, r0
 8003032:	001a      	movs	r2, r3
    uint8_t set_time[7] = {
 8003034:	193b      	adds	r3, r7, r4
 8003036:	715a      	strb	r2, [r3, #5]
        decToBcd(year)
 8003038:	2328      	movs	r3, #40	@ 0x28
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff ff7a 	bl	8002f38 <decToBcd>
 8003044:	0003      	movs	r3, r0
 8003046:	001a      	movs	r2, r3
    uint8_t set_time[7] = {
 8003048:	193b      	adds	r3, r7, r4
 800304a:	719a      	strb	r2, [r3, #6]
    };
    HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800304c:	4808      	ldr	r0, [pc, #32]	@ (8003070 <Set_Time+0xd0>)
 800304e:	23fa      	movs	r3, #250	@ 0xfa
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	9302      	str	r3, [sp, #8]
 8003054:	2307      	movs	r3, #7
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	193b      	adds	r3, r7, r4
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2301      	movs	r3, #1
 800305e:	2200      	movs	r2, #0
 8003060:	21d0      	movs	r1, #208	@ 0xd0
 8003062:	f002 fa7b 	bl	800555c <HAL_I2C_Mem_Write>
}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b004      	add	sp, #16
 800306c:	bdb0      	pop	{r4, r5, r7, pc}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	20000348 	.word	0x20000348

08003074 <Get_Time>:

// Función para leer el tiempo
void Get_Time(void) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af04      	add	r7, sp, #16
    uint8_t get_time[7];
    HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800307a:	4828      	ldr	r0, [pc, #160]	@ (800311c <Get_Time+0xa8>)
 800307c:	23fa      	movs	r3, #250	@ 0xfa
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	9302      	str	r3, [sp, #8]
 8003082:	2307      	movs	r3, #7
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	003b      	movs	r3, r7
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2301      	movs	r3, #1
 800308c:	2200      	movs	r2, #0
 800308e:	21d0      	movs	r1, #208	@ 0xd0
 8003090:	f002 fb92 	bl	80057b8 <HAL_I2C_Mem_Read>
    time.seconds = bcdToDec(get_time[0]);
 8003094:	003b      	movs	r3, r7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff ff67 	bl	8002f6c <bcdToDec>
 800309e:	0003      	movs	r3, r0
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <Get_Time+0xac>)
 80030a4:	701a      	strb	r2, [r3, #0]
    time.minutes = bcdToDec(get_time[1]);
 80030a6:	003b      	movs	r3, r7
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7ff ff5e 	bl	8002f6c <bcdToDec>
 80030b0:	0003      	movs	r3, r0
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <Get_Time+0xac>)
 80030b6:	705a      	strb	r2, [r3, #1]
    time.hour = bcdToDec(get_time[2]);
 80030b8:	003b      	movs	r3, r7
 80030ba:	789b      	ldrb	r3, [r3, #2]
 80030bc:	0018      	movs	r0, r3
 80030be:	f7ff ff55 	bl	8002f6c <bcdToDec>
 80030c2:	0003      	movs	r3, r0
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <Get_Time+0xac>)
 80030c8:	709a      	strb	r2, [r3, #2]
    time.dayofweek = bcdToDec(get_time[3]);
 80030ca:	003b      	movs	r3, r7
 80030cc:	78db      	ldrb	r3, [r3, #3]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff ff4c 	bl	8002f6c <bcdToDec>
 80030d4:	0003      	movs	r3, r0
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <Get_Time+0xac>)
 80030da:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcdToDec(get_time[4]);
 80030dc:	003b      	movs	r3, r7
 80030de:	791b      	ldrb	r3, [r3, #4]
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7ff ff43 	bl	8002f6c <bcdToDec>
 80030e6:	0003      	movs	r3, r0
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <Get_Time+0xac>)
 80030ec:	711a      	strb	r2, [r3, #4]
    time.month = bcdToDec(get_time[5]);
 80030ee:	003b      	movs	r3, r7
 80030f0:	795b      	ldrb	r3, [r3, #5]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7ff ff3a 	bl	8002f6c <bcdToDec>
 80030f8:	0003      	movs	r3, r0
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <Get_Time+0xac>)
 80030fe:	715a      	strb	r2, [r3, #5]
    time.year = bcdToDec(get_time[6]);
 8003100:	003b      	movs	r3, r7
 8003102:	799b      	ldrb	r3, [r3, #6]
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff ff31 	bl	8002f6c <bcdToDec>
 800310a:	0003      	movs	r3, r0
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <Get_Time+0xac>)
 8003110:	719a      	strb	r2, [r3, #6]
}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	20000348 	.word	0x20000348
 8003120:	200002fc 	.word	0x200002fc

08003124 <Set_Pin_Input>:
uint8_t Presence;
uint8_t Temp_byte1;
uint8_t Temp_byte2;
extern uint8_t size_to_send;

void Set_Pin_Input (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	000a      	movs	r2, r1
 800312e:	1cbb      	adds	r3, r7, #2
 8003130:	801a      	strh	r2, [r3, #0]
	//HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003132:	240c      	movs	r4, #12
 8003134:	193b      	adds	r3, r7, r4
 8003136:	0018      	movs	r0, r3
 8003138:	2314      	movs	r3, #20
 800313a:	001a      	movs	r2, r3
 800313c:	2100      	movs	r1, #0
 800313e:	f007 f8d5 	bl	800a2ec <memset>
	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003142:	1cbb      	adds	r3, r7, #2
 8003144:	881a      	ldrh	r2, [r3, #0]
 8003146:	193b      	adds	r3, r7, r4
 8003148:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314a:	193b      	adds	r3, r7, r4
 800314c:	2200      	movs	r2, #0
 800314e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003150:	193b      	adds	r3, r7, r4
 8003152:	2201      	movs	r2, #1
 8003154:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003156:	193a      	adds	r2, r7, r4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0011      	movs	r1, r2
 800315c:	0018      	movs	r0, r3
 800315e:	f001 ffad 	bl	80050bc <HAL_GPIO_Init>
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b009      	add	sp, #36	@ 0x24
 8003168:	bd90      	pop	{r4, r7, pc}

0800316a <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800316a:	b590      	push	{r4, r7, lr}
 800316c:	b089      	sub	sp, #36	@ 0x24
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	000a      	movs	r2, r1
 8003174:	1cbb      	adds	r3, r7, #2
 8003176:	801a      	strh	r2, [r3, #0]
	//HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	240c      	movs	r4, #12
 800317a:	193b      	adds	r3, r7, r4
 800317c:	0018      	movs	r0, r3
 800317e:	2314      	movs	r3, #20
 8003180:	001a      	movs	r2, r3
 8003182:	2100      	movs	r1, #0
 8003184:	f007 f8b2 	bl	800a2ec <memset>
	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003188:	1cbb      	adds	r3, r7, #2
 800318a:	881a      	ldrh	r2, [r3, #0]
 800318c:	193b      	adds	r3, r7, r4
 800318e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003190:	193b      	adds	r3, r7, r4
 8003192:	2201      	movs	r2, #1
 8003194:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	193b      	adds	r3, r7, r4
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800319c:	193a      	adds	r2, r7, r4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	0011      	movs	r1, r2
 80031a2:	0018      	movs	r0, r3
 80031a4:	f001 ff8a 	bl	80050bc <HAL_GPIO_Init>
}
 80031a8:	46c0      	nop			@ (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b009      	add	sp, #36	@ 0x24
 80031ae:	bd90      	pop	{r4, r7, pc}

080031b0 <delay>:


void delay (uint16_t us)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	0002      	movs	r2, r0
 80031b8:	1dbb      	adds	r3, r7, #6
 80031ba:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <delay+0x30>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2200      	movs	r2, #0
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <delay+0x30>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031cc:	1dbb      	adds	r3, r7, #6
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3f8      	bcc.n	80031c6 <delay+0x16>
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	20000400 	.word	0x20000400

080031e4 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80031ea:	1dfb      	adds	r3, r7, #7
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);   // set the pin as output
 80031f0:	2390      	movs	r3, #144	@ 0x90
 80031f2:	05db      	lsls	r3, r3, #23
 80031f4:	2108      	movs	r1, #8
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff ffb7 	bl	800316a <Set_Pin_Output>
	HAL_GPIO_WritePin (Temperature_sensor_GPIO_Port, Temperature_sensor_Pin, 0);  // pull the pin low
 80031fc:	2390      	movs	r3, #144	@ 0x90
 80031fe:	05db      	lsls	r3, r3, #23
 8003200:	2200      	movs	r2, #0
 8003202:	2108      	movs	r1, #8
 8003204:	0018      	movs	r0, r3
 8003206:	f002 f8e6 	bl	80053d6 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 800320a:	23f0      	movs	r3, #240	@ 0xf0
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	0018      	movs	r0, r3
 8003210:	f7ff ffce 	bl	80031b0 <delay>

	Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);    // set the pin as input
 8003214:	2390      	movs	r3, #144	@ 0x90
 8003216:	05db      	lsls	r3, r3, #23
 8003218:	2108      	movs	r1, #8
 800321a:	0018      	movs	r0, r3
 800321c:	f7ff ff82 	bl	8003124 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8003220:	2050      	movs	r0, #80	@ 0x50
 8003222:	f7ff ffc5 	bl	80031b0 <delay>

	if (!(HAL_GPIO_ReadPin (Temperature_sensor_GPIO_Port, Temperature_sensor_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8003226:	2390      	movs	r3, #144	@ 0x90
 8003228:	05db      	lsls	r3, r3, #23
 800322a:	2108      	movs	r1, #8
 800322c:	0018      	movs	r0, r3
 800322e:	f002 f8b5 	bl	800539c <HAL_GPIO_ReadPin>
 8003232:	1e03      	subs	r3, r0, #0
 8003234:	d103      	bne.n	800323e <DS18B20_Start+0x5a>
 8003236:	1dfb      	adds	r3, r7, #7
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e002      	b.n	8003244 <DS18B20_Start+0x60>
	else Response = 0;
 800323e:	1dfb      	adds	r3, r7, #7
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]

	delay (400); // 480 us delay totally.
 8003244:	23c8      	movs	r3, #200	@ 0xc8
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff ffb1 	bl	80031b0 <delay>

	return Response;
 800324e:	1dfb      	adds	r3, r7, #7
 8003250:	781b      	ldrb	r3, [r3, #0]
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}

0800325a <DS18B20_Write>:
void DS18B20_Write (uint8_t data)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	0002      	movs	r2, r0
 8003262:	1dfb      	adds	r3, r7, #7
 8003264:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);  // set as output
 8003266:	2390      	movs	r3, #144	@ 0x90
 8003268:	05db      	lsls	r3, r3, #23
 800326a:	2108      	movs	r1, #8
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff ff7c 	bl	800316a <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e03a      	b.n	80032ee <DS18B20_Write+0x94>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8003278:	1dfb      	adds	r3, r7, #7
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	411a      	asrs	r2, r3
 8003280:	0013      	movs	r3, r2
 8003282:	2201      	movs	r2, #1
 8003284:	4013      	ands	r3, r2
 8003286:	d019      	beq.n	80032bc <DS18B20_Write+0x62>
		{
			// write 1

			Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);  // set as output
 8003288:	2390      	movs	r3, #144	@ 0x90
 800328a:	05db      	lsls	r3, r3, #23
 800328c:	2108      	movs	r1, #8
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff ff6b 	bl	800316a <Set_Pin_Output>
			HAL_GPIO_WritePin (Temperature_sensor_GPIO_Port, Temperature_sensor_Pin, 0);  // pull the pin LOW
 8003294:	2390      	movs	r3, #144	@ 0x90
 8003296:	05db      	lsls	r3, r3, #23
 8003298:	2200      	movs	r2, #0
 800329a:	2108      	movs	r1, #8
 800329c:	0018      	movs	r0, r3
 800329e:	f002 f89a 	bl	80053d6 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7ff ff84 	bl	80031b0 <delay>

			Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);  // set as input
 80032a8:	2390      	movs	r3, #144	@ 0x90
 80032aa:	05db      	lsls	r3, r3, #23
 80032ac:	2108      	movs	r1, #8
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7ff ff38 	bl	8003124 <Set_Pin_Input>
			delay (60);  // wait for 60 us
 80032b4:	203c      	movs	r0, #60	@ 0x3c
 80032b6:	f7ff ff7b 	bl	80031b0 <delay>
 80032ba:	e015      	b.n	80032e8 <DS18B20_Write+0x8e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);
 80032bc:	2390      	movs	r3, #144	@ 0x90
 80032be:	05db      	lsls	r3, r3, #23
 80032c0:	2108      	movs	r1, #8
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff ff51 	bl	800316a <Set_Pin_Output>
			HAL_GPIO_WritePin (Temperature_sensor_GPIO_Port, Temperature_sensor_Pin, 0);  // pull the pin LOW
 80032c8:	2390      	movs	r3, #144	@ 0x90
 80032ca:	05db      	lsls	r3, r3, #23
 80032cc:	2200      	movs	r2, #0
 80032ce:	2108      	movs	r1, #8
 80032d0:	0018      	movs	r0, r3
 80032d2:	f002 f880 	bl	80053d6 <HAL_GPIO_WritePin>
			delay (60);  // wait for 60 us
 80032d6:	203c      	movs	r0, #60	@ 0x3c
 80032d8:	f7ff ff6a 	bl	80031b0 <delay>

			Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);
 80032dc:	2390      	movs	r3, #144	@ 0x90
 80032de:	05db      	lsls	r3, r3, #23
 80032e0:	2108      	movs	r1, #8
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7ff ff1e 	bl	8003124 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3301      	adds	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b07      	cmp	r3, #7
 80032f2:	ddc1      	ble.n	8003278 <DS18B20_Write+0x1e>
		}
	}
}
 80032f4:	46c0      	nop			@ (mov r8, r8)
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b004      	add	sp, #16
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <convert_temperature>:
float convert_temperature(uint8_t byte_1, uint8_t byte_2 ){
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	0002      	movs	r2, r0
 8003308:	1dfb      	adds	r3, r7, #7
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	1dbb      	adds	r3, r7, #6
 800330e:	1c0a      	adds	r2, r1, #0
 8003310:	701a      	strb	r2, [r3, #0]
	uint16_t tempval = byte_2 << 8 | byte_1;
 8003312:	1dbb      	adds	r3, r7, #6
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	b21a      	sxth	r2, r3
 800331a:	1dfb      	adds	r3, r7, #7
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b21b      	sxth	r3, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	b21a      	sxth	r2, r3
 8003324:	210e      	movs	r1, #14
 8003326:	187b      	adds	r3, r7, r1
 8003328:	801a      	strh	r2, [r3, #0]
	float result_temp = (128.0 / 2048)*tempval;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff fb24 	bl	800297c <__aeabi_i2d>
 8003334:	2200      	movs	r2, #0
 8003336:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <convert_temperature+0x58>)
 8003338:	f7fe fc5e 	bl	8001bf8 <__aeabi_dmul>
 800333c:	0002      	movs	r2, r0
 800333e:	000b      	movs	r3, r1
 8003340:	0010      	movs	r0, r2
 8003342:	0019      	movs	r1, r3
 8003344:	f7ff fbb4 	bl	8002ab0 <__aeabi_d2f>
 8003348:	1c03      	adds	r3, r0, #0
 800334a:	60bb      	str	r3, [r7, #8]

	return  result_temp;
 800334c:	68bb      	ldr	r3, [r7, #8]

}
 800334e:	1c18      	adds	r0, r3, #0
 8003350:	46bd      	mov	sp, r7
 8003352:	b004      	add	sp, #16
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	3fb00000 	.word	0x3fb00000

0800335c <DS18B20_Read>:
uint8_t DS18B20_Read (void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
	Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);
 8003368:	2390      	movs	r3, #144	@ 0x90
 800336a:	05db      	lsls	r3, r3, #23
 800336c:	2108      	movs	r1, #8
 800336e:	0018      	movs	r0, r3
 8003370:	f7ff fed8 	bl	8003124 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8003374:	2300      	movs	r3, #0
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	e032      	b.n	80033e0 <DS18B20_Read+0x84>
	{
		Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);;   // set as output
 800337a:	2390      	movs	r3, #144	@ 0x90
 800337c:	05db      	lsls	r3, r3, #23
 800337e:	2108      	movs	r1, #8
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff fef2 	bl	800316a <Set_Pin_Output>

		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, 0);  // pull the data pin LOW
 8003386:	2390      	movs	r3, #144	@ 0x90
 8003388:	05db      	lsls	r3, r3, #23
 800338a:	2200      	movs	r2, #0
 800338c:	2108      	movs	r1, #8
 800338e:	0018      	movs	r0, r3
 8003390:	f002 f821 	bl	80053d6 <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 8003394:	2002      	movs	r0, #2
 8003396:	f7ff ff0b 	bl	80031b0 <delay>

		Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);  // set as input
 800339a:	2390      	movs	r3, #144	@ 0x90
 800339c:	05db      	lsls	r3, r3, #23
 800339e:	2108      	movs	r1, #8
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7ff febf 	bl	8003124 <Set_Pin_Input>
		delay (5);  // wait for 2 us
 80033a6:	2005      	movs	r0, #5
 80033a8:	f7ff ff02 	bl	80031b0 <delay>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3))  // if the pin is HIGH
 80033ac:	2390      	movs	r3, #144	@ 0x90
 80033ae:	05db      	lsls	r3, r3, #23
 80033b0:	2108      	movs	r1, #8
 80033b2:	0018      	movs	r0, r3
 80033b4:	f001 fff2 	bl	800539c <HAL_GPIO_ReadPin>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d00b      	beq.n	80033d4 <DS18B20_Read+0x78>
		{
			value |= 1<<i;  // read = 1
 80033bc:	2201      	movs	r2, #1
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	409a      	lsls	r2, r3
 80033c2:	0013      	movs	r3, r2
 80033c4:	b25a      	sxtb	r2, r3
 80033c6:	1dfb      	adds	r3, r7, #7
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b25a      	sxtb	r2, r3
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	701a      	strb	r2, [r3, #0]
		}
		delay (60);  // wait for 60 us
 80033d4:	203c      	movs	r0, #60	@ 0x3c
 80033d6:	f7ff feeb 	bl	80031b0 <delay>
	for (int i=0;i<8;i++)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	ddc9      	ble.n	800337a <DS18B20_Read+0x1e>
	}
	return value;
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b002      	add	sp, #8
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <DS18B20_ReadTemperature>:

float DS18B20_ReadTemperature() {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
	Presence = DS18B20_Start();
 80033fa:	f7ff fef3 	bl	80031e4 <DS18B20_Start>
 80033fe:	0003      	movs	r3, r0
 8003400:	001a      	movs	r2, r3
 8003402:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <DS18B20_ReadTemperature+0x84>)
 8003404:	701a      	strb	r2, [r3, #0]
	HAL_Delay (1);
 8003406:	2001      	movs	r0, #1
 8003408:	f001 faa2 	bl	8004950 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 800340c:	20cc      	movs	r0, #204	@ 0xcc
 800340e:	f7ff ff24 	bl	800325a <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 8003412:	2044      	movs	r0, #68	@ 0x44
 8003414:	f7ff ff21 	bl	800325a <DS18B20_Write>
	HAL_Delay (800);
 8003418:	23c8      	movs	r3, #200	@ 0xc8
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	0018      	movs	r0, r3
 800341e:	f001 fa97 	bl	8004950 <HAL_Delay>

	Presence = DS18B20_Start ();
 8003422:	f7ff fedf 	bl	80031e4 <DS18B20_Start>
 8003426:	0003      	movs	r3, r0
 8003428:	001a      	movs	r2, r3
 800342a:	4b13      	ldr	r3, [pc, #76]	@ (8003478 <DS18B20_ReadTemperature+0x84>)
 800342c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800342e:	2001      	movs	r0, #1
 8003430:	f001 fa8e 	bl	8004950 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 8003434:	20cc      	movs	r0, #204	@ 0xcc
 8003436:	f7ff ff10 	bl	800325a <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 800343a:	20be      	movs	r0, #190	@ 0xbe
 800343c:	f7ff ff0d 	bl	800325a <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 8003440:	f7ff ff8c 	bl	800335c <DS18B20_Read>
 8003444:	0003      	movs	r3, r0
 8003446:	001a      	movs	r2, r3
 8003448:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <DS18B20_ReadTemperature+0x88>)
 800344a:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 800344c:	f7ff ff86 	bl	800335c <DS18B20_Read>
 8003450:	0003      	movs	r3, r0
 8003452:	001a      	movs	r2, r3
 8003454:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <DS18B20_ReadTemperature+0x8c>)
 8003456:	701a      	strb	r2, [r3, #0]

	//HAL_UART_Transmit(&huart1,(uint8_t *) "read \r\n", 9, 1000);
	//size_to_send = sprintf( transmit_text, "presence %d el primer %d y el segundo %d \r\n", Presence,Temp_byte1,Temp_byte2);
	//transmit_text[size_to_send] = '\0';
	//HAL_UART_Transmit(&huart1, (uint8_t *)transmit_text, size_to_send, 1000);
	float temp_dec = convert_temperature(Temp_byte1 , Temp_byte2);
 8003458:	4b08      	ldr	r3, [pc, #32]	@ (800347c <DS18B20_ReadTemperature+0x88>)
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <DS18B20_ReadTemperature+0x8c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	0019      	movs	r1, r3
 8003462:	0010      	movs	r0, r2
 8003464:	f7ff ff4c 	bl	8003300 <convert_temperature>
 8003468:	1c03      	adds	r3, r0, #0
 800346a:	607b      	str	r3, [r7, #4]
	//size_to_send = sprintf( transmit_text, "result temperature %.2f\r\n", temp_dec );
	//transmit_text[size_to_send] = '\0';
	//HAL_UART_Transmit(&huart1, (uint8_t *)transmit_text, size_to_send, 1000);
	return temp_dec;
 800346c:	687b      	ldr	r3, [r7, #4]
}
 800346e:	1c18      	adds	r0, r3, #0
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	20000303 	.word	0x20000303
 800347c:	20000304 	.word	0x20000304
 8003480:	20000305 	.word	0x20000305

08003484 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void process_command(char *command);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    // Verifica qué Timer generó la interrupción
    if (htim->Instance == TIM14) {  // TIMx es el número del Timer que estás usando
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1f      	ldr	r2, [pc, #124]	@ (8003510 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d138      	bne.n	8003508 <HAL_TIM_PeriodElapsedCallback+0x84>
    	//Temperature_To_Uart();
    	counter2_5s++;
 8003496:	4b1f      	ldr	r3, [pc, #124]	@ (8003514 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80034a0:	801a      	strh	r2, [r3, #0]
    	counteraux++;
 80034a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	3301      	adds	r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80034ac:	701a      	strb	r2, [r3, #0]

    if ( counter2_5s % 4 == 0 ){
 80034ae:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	2203      	movs	r2, #3
 80034b4:	4013      	ands	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_TIM_PeriodElapsedCallback+0x44>
    	counter10s++;
 80034bc:	4b17      	ldr	r3, [pc, #92]	@ (800351c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	4b15      	ldr	r3, [pc, #84]	@ (800351c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80034c6:	801a      	strh	r2, [r3, #0]

    	}
    if (counter2_5s % 60 == 0) {
 80034c8:	4b12      	ldr	r3, [pc, #72]	@ (8003514 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	213c      	movs	r1, #60	@ 0x3c
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7fc fec6 	bl	8000260 <__aeabi_uidivmod>
 80034d4:	000b      	movs	r3, r1
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_TIM_PeriodElapsedCallback+0x64>
		counter_2_5min++;
 80034dc:	4b10      	ldr	r3, [pc, #64]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80034e6:	801a      	strh	r2, [r3, #0]
	}
    if (counter2_5s % 24 ==0){
 80034e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003514 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	2118      	movs	r1, #24
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7fc feb6 	bl	8000260 <__aeabi_uidivmod>
 80034f4:	000b      	movs	r3, r1
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_TIM_PeriodElapsedCallback+0x84>
    	counter_1min++;
 80034fc:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	4b07      	ldr	r3, [pc, #28]	@ (8003524 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003506:	701a      	strb	r2, [r3, #0]

    }
   }
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40002000 	.word	0x40002000
 8003514:	200005be 	.word	0x200005be
 8003518:	200005c0 	.word	0x200005c0
 800351c:	200005bc 	.word	0x200005bc
 8003520:	200005b8 	.word	0x200005b8
 8003524:	200005ba 	.word	0x200005ba

08003528 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1b      	ldr	r2, [pc, #108]	@ (80035a4 <HAL_UART_RxCpltCallback+0x7c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d130      	bne.n	800359c <HAL_UART_RxCpltCallback+0x74>
    	if (received_char == '\n') {
 800353a:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <HAL_UART_RxCpltCallback+0x80>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b0a      	cmp	r3, #10
 8003540:	d113      	bne.n	800356a <HAL_UART_RxCpltCallback+0x42>
			uart_buffer[uart_index] = '\0';
 8003542:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <HAL_UART_RxCpltCallback+0x84>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	001a      	movs	r2, r3
 8003548:	4b19      	ldr	r3, [pc, #100]	@ (80035b0 <HAL_UART_RxCpltCallback+0x88>)
 800354a:	2100      	movs	r1, #0
 800354c:	5499      	strb	r1, [r3, r2]
			process_command(uart_buffer);
 800354e:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <HAL_UART_RxCpltCallback+0x88>)
 8003550:	0018      	movs	r0, r3
 8003552:	f000 f831 	bl	80035b8 <process_command>
			memset(uart_buffer, 0, BUFFER_SIZE); // Limpiar buffer
 8003556:	4b16      	ldr	r3, [pc, #88]	@ (80035b0 <HAL_UART_RxCpltCallback+0x88>)
 8003558:	2232      	movs	r2, #50	@ 0x32
 800355a:	2100      	movs	r1, #0
 800355c:	0018      	movs	r0, r3
 800355e:	f006 fec5 	bl	800a2ec <memset>
			uart_index = 0;
 8003562:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <HAL_UART_RxCpltCallback+0x84>)
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e012      	b.n	8003590 <HAL_UART_RxCpltCallback+0x68>
        } else if (received_char != '\r') { // Ignorar '\r'
 800356a:	4b0f      	ldr	r3, [pc, #60]	@ (80035a8 <HAL_UART_RxCpltCallback+0x80>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b0d      	cmp	r3, #13
 8003570:	d00e      	beq.n	8003590 <HAL_UART_RxCpltCallback+0x68>
            if (uart_index < BUFFER_SIZE - 1) {
 8003572:	4b0e      	ldr	r3, [pc, #56]	@ (80035ac <HAL_UART_RxCpltCallback+0x84>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b30      	cmp	r3, #48	@ 0x30
 8003578:	d80a      	bhi.n	8003590 <HAL_UART_RxCpltCallback+0x68>
                uart_buffer[uart_index++] = received_char;
 800357a:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <HAL_UART_RxCpltCallback+0x84>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	b2d1      	uxtb	r1, r2
 8003582:	4a0a      	ldr	r2, [pc, #40]	@ (80035ac <HAL_UART_RxCpltCallback+0x84>)
 8003584:	7011      	strb	r1, [r2, #0]
 8003586:	001a      	movs	r2, r3
 8003588:	4b07      	ldr	r3, [pc, #28]	@ (80035a8 <HAL_UART_RxCpltCallback+0x80>)
 800358a:	7819      	ldrb	r1, [r3, #0]
 800358c:	4b08      	ldr	r3, [pc, #32]	@ (80035b0 <HAL_UART_RxCpltCallback+0x88>)
 800358e:	5499      	strb	r1, [r3, r2]
            }
        }
        HAL_UART_Receive_IT(&huart1, &received_char, 1); // Reactivar recepción
 8003590:	4905      	ldr	r1, [pc, #20]	@ (80035a8 <HAL_UART_RxCpltCallback+0x80>)
 8003592:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <HAL_UART_RxCpltCallback+0x8c>)
 8003594:	2201      	movs	r2, #1
 8003596:	0018      	movs	r0, r3
 8003598:	f004 ff5d 	bl	8008456 <HAL_UART_Receive_IT>
    }
}
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40013800 	.word	0x40013800
 80035a8:	2000059f 	.word	0x2000059f
 80035ac:	2000059e 	.word	0x2000059e
 80035b0:	2000056c 	.word	0x2000056c
 80035b4:	20000490 	.word	0x20000490

080035b8 <process_command>:


void process_command(char *command) {
 80035b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ba:	b0a7      	sub	sp, #156	@ 0x9c
 80035bc:	af06      	add	r7, sp, #24
 80035be:	6078      	str	r0, [r7, #4]
    char debug_msg[50];
    char time_str[15];
    int sec, min, hour, dow, dom, month, year;

    // Limpiar el comando (eliminar \r, \n y espacios)
    char *clean_cmd = strtok(command, "\r\n ");
 80035c0:	4ad8      	ldr	r2, [pc, #864]	@ (8003924 <process_command+0x36c>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0011      	movs	r1, r2
 80035c6:	0018      	movs	r0, r3
 80035c8:	f006 feac 	bl	800a324 <strtok>
 80035cc:	0003      	movs	r3, r0
 80035ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (clean_cmd == NULL) {
 80035d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <process_command+0x2c>
        HAL_UART_Transmit(&huart1, (uint8_t *)"ERROR: Comando vacio\n", strlen("ERROR: Comando vacio\r\n"), 100);
 80035d6:	49d4      	ldr	r1, [pc, #848]	@ (8003928 <process_command+0x370>)
 80035d8:	48d4      	ldr	r0, [pc, #848]	@ (800392c <process_command+0x374>)
 80035da:	2364      	movs	r3, #100	@ 0x64
 80035dc:	2216      	movs	r2, #22
 80035de:	f004 fe9b 	bl	8008318 <HAL_UART_Transmit>
        return;
 80035e2:	e209      	b.n	80039f8 <process_command+0x440>
    }

    if (sscanf(clean_cmd, "%9[^$]$%d", param, &value) == 2) {
 80035e4:	2368      	movs	r3, #104	@ 0x68
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	256c      	movs	r5, #108	@ 0x6c
 80035ea:	197a      	adds	r2, r7, r5
 80035ec:	49d0      	ldr	r1, [pc, #832]	@ (8003930 <process_command+0x378>)
 80035ee:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80035f0:	f006 fe06 	bl	800a200 <siscanf>
 80035f4:	0003      	movs	r3, r0
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d000      	beq.n	80035fc <process_command+0x44>
 80035fa:	e137      	b.n	800386c <process_command+0x2b4>
        // Confirmar recepción del comando
        snprintf(debug_msg, sizeof(debug_msg), "CMD: %s=%d\r\n", param, value);
 80035fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035fe:	1979      	adds	r1, r7, r5
 8003600:	4acc      	ldr	r2, [pc, #816]	@ (8003934 <process_command+0x37c>)
 8003602:	2434      	movs	r4, #52	@ 0x34
 8003604:	1938      	adds	r0, r7, r4
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	000b      	movs	r3, r1
 800360a:	2132      	movs	r1, #50	@ 0x32
 800360c:	f006 fda4 	bl	800a158 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)debug_msg, strlen(debug_msg), 100);
 8003610:	193b      	adds	r3, r7, r4
 8003612:	0018      	movs	r0, r3
 8003614:	f7fc fd82 	bl	800011c <strlen>
 8003618:	0003      	movs	r3, r0
 800361a:	b29a      	uxth	r2, r3
 800361c:	1939      	adds	r1, r7, r4
 800361e:	48c3      	ldr	r0, [pc, #780]	@ (800392c <process_command+0x374>)
 8003620:	2364      	movs	r3, #100	@ 0x64
 8003622:	f004 fe79 	bl	8008318 <HAL_UART_Transmit>

        if (strcmp(param, "MIN_RED") == 0) {
 8003626:	4ac4      	ldr	r2, [pc, #784]	@ (8003938 <process_command+0x380>)
 8003628:	197b      	adds	r3, r7, r5
 800362a:	0011      	movs	r1, r2
 800362c:	0018      	movs	r0, r3
 800362e:	f7fc fd6b 	bl	8000108 <strcmp>
 8003632:	1e03      	subs	r3, r0, #0
 8003634:	d126      	bne.n	8003684 <process_command+0xcc>
            min_red = value;
 8003636:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003638:	4bc0      	ldr	r3, [pc, #768]	@ (800393c <process_command+0x384>)
 800363a:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)"OK_MIN_RED\r\n", strlen("OK_MIN_RED\r\n"), 100);
 800363c:	49c0      	ldr	r1, [pc, #768]	@ (8003940 <process_command+0x388>)
 800363e:	48bb      	ldr	r0, [pc, #748]	@ (800392c <process_command+0x374>)
 8003640:	2364      	movs	r3, #100	@ 0x64
 8003642:	220c      	movs	r2, #12
 8003644:	f004 fe68 	bl	8008318 <HAL_UART_Transmit>
            snprintf(debug_msg, sizeof(debug_msg), "SET MIN RED: %d\r\n", min_red);
 8003648:	4bbc      	ldr	r3, [pc, #752]	@ (800393c <process_command+0x384>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4abd      	ldr	r2, [pc, #756]	@ (8003944 <process_command+0x38c>)
 800364e:	1938      	adds	r0, r7, r4
 8003650:	2132      	movs	r1, #50	@ 0x32
 8003652:	f006 fd81 	bl	800a158 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)debug_msg, strlen(debug_msg), 100); // Usar strlen
 8003656:	193b      	adds	r3, r7, r4
 8003658:	0018      	movs	r0, r3
 800365a:	f7fc fd5f 	bl	800011c <strlen>
 800365e:	0003      	movs	r3, r0
 8003660:	b29a      	uxth	r2, r3
 8003662:	1939      	adds	r1, r7, r4
 8003664:	48b1      	ldr	r0, [pc, #708]	@ (800392c <process_command+0x374>)
 8003666:	2364      	movs	r3, #100	@ 0x64
 8003668:	f004 fe56 	bl	8008318 <HAL_UART_Transmit>

            config.min_red = value; // Actualizar estructura
 800366c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800366e:	4bb6      	ldr	r3, [pc, #728]	@ (8003948 <process_command+0x390>)
 8003670:	601a      	str	r2, [r3, #0]
            Flash_write_page(0x00, 0x00, 0x00, (uint8_t*)&config, sizeof(config)); // Guardar en Fla
 8003672:	4bb5      	ldr	r3, [pc, #724]	@ (8003948 <process_command+0x390>)
 8003674:	2218      	movs	r2, #24
 8003676:	9200      	str	r2, [sp, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	2100      	movs	r1, #0
 800367c:	2000      	movs	r0, #0
 800367e:	f7ff fb53 	bl	8002d28 <Flash_write_page>
 8003682:	e0f3      	b.n	800386c <process_command+0x2b4>

        }else if (strcmp(param, "MAX_RED") == 0) {
 8003684:	4ab1      	ldr	r2, [pc, #708]	@ (800394c <process_command+0x394>)
 8003686:	236c      	movs	r3, #108	@ 0x6c
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f7fc fd3b 	bl	8000108 <strcmp>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d127      	bne.n	80036e6 <process_command+0x12e>
            max_red = value;
 8003696:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003698:	4bad      	ldr	r3, [pc, #692]	@ (8003950 <process_command+0x398>)
 800369a:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)"OK_MAX_RED\r\n", strlen("OK_MAX_RED\r\n"), 100);
 800369c:	49ad      	ldr	r1, [pc, #692]	@ (8003954 <process_command+0x39c>)
 800369e:	48a3      	ldr	r0, [pc, #652]	@ (800392c <process_command+0x374>)
 80036a0:	2364      	movs	r3, #100	@ 0x64
 80036a2:	220c      	movs	r2, #12
 80036a4:	f004 fe38 	bl	8008318 <HAL_UART_Transmit>
            snprintf(debug_msg, sizeof(debug_msg), "SET MAX RED: %d\r\n", max_red);
 80036a8:	4ba9      	ldr	r3, [pc, #676]	@ (8003950 <process_command+0x398>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4aaa      	ldr	r2, [pc, #680]	@ (8003958 <process_command+0x3a0>)
 80036ae:	2434      	movs	r4, #52	@ 0x34
 80036b0:	1938      	adds	r0, r7, r4
 80036b2:	2132      	movs	r1, #50	@ 0x32
 80036b4:	f006 fd50 	bl	800a158 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)debug_msg, strlen(debug_msg), 100); // Usar strlen
 80036b8:	193b      	adds	r3, r7, r4
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7fc fd2e 	bl	800011c <strlen>
 80036c0:	0003      	movs	r3, r0
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	1939      	adds	r1, r7, r4
 80036c6:	4899      	ldr	r0, [pc, #612]	@ (800392c <process_command+0x374>)
 80036c8:	2364      	movs	r3, #100	@ 0x64
 80036ca:	f004 fe25 	bl	8008318 <HAL_UART_Transmit>

            config.max_red = value;
 80036ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80036d0:	4b9d      	ldr	r3, [pc, #628]	@ (8003948 <process_command+0x390>)
 80036d2:	605a      	str	r2, [r3, #4]
            Flash_write_page(0x00, 0x00, 0x00, (uint8_t*)&config, sizeof(config));
 80036d4:	4b9c      	ldr	r3, [pc, #624]	@ (8003948 <process_command+0x390>)
 80036d6:	2218      	movs	r2, #24
 80036d8:	9200      	str	r2, [sp, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	2100      	movs	r1, #0
 80036de:	2000      	movs	r0, #0
 80036e0:	f7ff fb22 	bl	8002d28 <Flash_write_page>
 80036e4:	e0c2      	b.n	800386c <process_command+0x2b4>

        }else if (strcmp(param, "MIN_GREEN") == 0) {
 80036e6:	4a9d      	ldr	r2, [pc, #628]	@ (800395c <process_command+0x3a4>)
 80036e8:	236c      	movs	r3, #108	@ 0x6c
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	0011      	movs	r1, r2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7fc fd0a 	bl	8000108 <strcmp>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d127      	bne.n	8003748 <process_command+0x190>
            min_green = value;
 80036f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80036fa:	4b99      	ldr	r3, [pc, #612]	@ (8003960 <process_command+0x3a8>)
 80036fc:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)"OK_MAX_GREEN\r\n", strlen("OK_MAX_GREEN\r\n"), 100);
 80036fe:	4999      	ldr	r1, [pc, #612]	@ (8003964 <process_command+0x3ac>)
 8003700:	488a      	ldr	r0, [pc, #552]	@ (800392c <process_command+0x374>)
 8003702:	2364      	movs	r3, #100	@ 0x64
 8003704:	220e      	movs	r2, #14
 8003706:	f004 fe07 	bl	8008318 <HAL_UART_Transmit>
            snprintf(debug_msg, sizeof(debug_msg), "SET MIN GREEN: %d\r\n", min_green);
 800370a:	4b95      	ldr	r3, [pc, #596]	@ (8003960 <process_command+0x3a8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a96      	ldr	r2, [pc, #600]	@ (8003968 <process_command+0x3b0>)
 8003710:	2434      	movs	r4, #52	@ 0x34
 8003712:	1938      	adds	r0, r7, r4
 8003714:	2132      	movs	r1, #50	@ 0x32
 8003716:	f006 fd1f 	bl	800a158 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)debug_msg, strlen(debug_msg), 100); // Usar strlen
 800371a:	193b      	adds	r3, r7, r4
 800371c:	0018      	movs	r0, r3
 800371e:	f7fc fcfd 	bl	800011c <strlen>
 8003722:	0003      	movs	r3, r0
 8003724:	b29a      	uxth	r2, r3
 8003726:	1939      	adds	r1, r7, r4
 8003728:	4880      	ldr	r0, [pc, #512]	@ (800392c <process_command+0x374>)
 800372a:	2364      	movs	r3, #100	@ 0x64
 800372c:	f004 fdf4 	bl	8008318 <HAL_UART_Transmit>

            config.min_green = value;
 8003730:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003732:	4b85      	ldr	r3, [pc, #532]	@ (8003948 <process_command+0x390>)
 8003734:	609a      	str	r2, [r3, #8]
            Flash_write_page(0x00, 0x00, 0x00, (uint8_t*)&config, sizeof(config));
 8003736:	4b84      	ldr	r3, [pc, #528]	@ (8003948 <process_command+0x390>)
 8003738:	2218      	movs	r2, #24
 800373a:	9200      	str	r2, [sp, #0]
 800373c:	2200      	movs	r2, #0
 800373e:	2100      	movs	r1, #0
 8003740:	2000      	movs	r0, #0
 8003742:	f7ff faf1 	bl	8002d28 <Flash_write_page>
 8003746:	e091      	b.n	800386c <process_command+0x2b4>

        }else if (strcmp(param, "MAX_GREEN") == 0) {
 8003748:	4a88      	ldr	r2, [pc, #544]	@ (800396c <process_command+0x3b4>)
 800374a:	236c      	movs	r3, #108	@ 0x6c
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	0011      	movs	r1, r2
 8003750:	0018      	movs	r0, r3
 8003752:	f7fc fcd9 	bl	8000108 <strcmp>
 8003756:	1e03      	subs	r3, r0, #0
 8003758:	d127      	bne.n	80037aa <process_command+0x1f2>
            max_green = value;
 800375a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800375c:	4b84      	ldr	r3, [pc, #528]	@ (8003970 <process_command+0x3b8>)
 800375e:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)"OK_MAX_GREEN\r\n", strlen("OK_MAX_GREEN\r\n"), 100);
 8003760:	4980      	ldr	r1, [pc, #512]	@ (8003964 <process_command+0x3ac>)
 8003762:	4872      	ldr	r0, [pc, #456]	@ (800392c <process_command+0x374>)
 8003764:	2364      	movs	r3, #100	@ 0x64
 8003766:	220e      	movs	r2, #14
 8003768:	f004 fdd6 	bl	8008318 <HAL_UART_Transmit>
            snprintf(debug_msg, sizeof(debug_msg), "SET MAX GREEN: %d\r\n", max_green);
 800376c:	4b80      	ldr	r3, [pc, #512]	@ (8003970 <process_command+0x3b8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a80      	ldr	r2, [pc, #512]	@ (8003974 <process_command+0x3bc>)
 8003772:	2434      	movs	r4, #52	@ 0x34
 8003774:	1938      	adds	r0, r7, r4
 8003776:	2132      	movs	r1, #50	@ 0x32
 8003778:	f006 fcee 	bl	800a158 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)debug_msg, strlen(debug_msg), 100); // Usar strlen
 800377c:	193b      	adds	r3, r7, r4
 800377e:	0018      	movs	r0, r3
 8003780:	f7fc fccc 	bl	800011c <strlen>
 8003784:	0003      	movs	r3, r0
 8003786:	b29a      	uxth	r2, r3
 8003788:	1939      	adds	r1, r7, r4
 800378a:	4868      	ldr	r0, [pc, #416]	@ (800392c <process_command+0x374>)
 800378c:	2364      	movs	r3, #100	@ 0x64
 800378e:	f004 fdc3 	bl	8008318 <HAL_UART_Transmit>

            config.max_green = value;
 8003792:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003794:	4b6c      	ldr	r3, [pc, #432]	@ (8003948 <process_command+0x390>)
 8003796:	60da      	str	r2, [r3, #12]
            Flash_write_page(0x00, 0x00, 0x00, (uint8_t*)&config, sizeof(config));
 8003798:	4b6b      	ldr	r3, [pc, #428]	@ (8003948 <process_command+0x390>)
 800379a:	2218      	movs	r2, #24
 800379c:	9200      	str	r2, [sp, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	2100      	movs	r1, #0
 80037a2:	2000      	movs	r0, #0
 80037a4:	f7ff fac0 	bl	8002d28 <Flash_write_page>
 80037a8:	e060      	b.n	800386c <process_command+0x2b4>

        }else if (strcmp(param, "MIN_BLUE") == 0) {
 80037aa:	4a73      	ldr	r2, [pc, #460]	@ (8003978 <process_command+0x3c0>)
 80037ac:	236c      	movs	r3, #108	@ 0x6c
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	0011      	movs	r1, r2
 80037b2:	0018      	movs	r0, r3
 80037b4:	f7fc fca8 	bl	8000108 <strcmp>
 80037b8:	1e03      	subs	r3, r0, #0
 80037ba:	d127      	bne.n	800380c <process_command+0x254>
            min_blue = value;
 80037bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80037be:	4b6f      	ldr	r3, [pc, #444]	@ (800397c <process_command+0x3c4>)
 80037c0:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)"OK_MAX_BLUE\r\n", strlen("OK_MAX_BLUE\r\n"), 100);
 80037c2:	496f      	ldr	r1, [pc, #444]	@ (8003980 <process_command+0x3c8>)
 80037c4:	4859      	ldr	r0, [pc, #356]	@ (800392c <process_command+0x374>)
 80037c6:	2364      	movs	r3, #100	@ 0x64
 80037c8:	220d      	movs	r2, #13
 80037ca:	f004 fda5 	bl	8008318 <HAL_UART_Transmit>
            snprintf(debug_msg, sizeof(debug_msg), "SET MIN BLUE: %d\r\n", min_blue);
 80037ce:	4b6b      	ldr	r3, [pc, #428]	@ (800397c <process_command+0x3c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003984 <process_command+0x3cc>)
 80037d4:	2434      	movs	r4, #52	@ 0x34
 80037d6:	1938      	adds	r0, r7, r4
 80037d8:	2132      	movs	r1, #50	@ 0x32
 80037da:	f006 fcbd 	bl	800a158 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)debug_msg, strlen(debug_msg), 100); // Usar strlen
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7fc fc9b 	bl	800011c <strlen>
 80037e6:	0003      	movs	r3, r0
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	1939      	adds	r1, r7, r4
 80037ec:	484f      	ldr	r0, [pc, #316]	@ (800392c <process_command+0x374>)
 80037ee:	2364      	movs	r3, #100	@ 0x64
 80037f0:	f004 fd92 	bl	8008318 <HAL_UART_Transmit>

            config.min_blue = value;
 80037f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80037f6:	4b54      	ldr	r3, [pc, #336]	@ (8003948 <process_command+0x390>)
 80037f8:	611a      	str	r2, [r3, #16]
            Flash_write_page(0x00, 0x00, 0x00, (uint8_t*)&config, sizeof(config));
 80037fa:	4b53      	ldr	r3, [pc, #332]	@ (8003948 <process_command+0x390>)
 80037fc:	2218      	movs	r2, #24
 80037fe:	9200      	str	r2, [sp, #0]
 8003800:	2200      	movs	r2, #0
 8003802:	2100      	movs	r1, #0
 8003804:	2000      	movs	r0, #0
 8003806:	f7ff fa8f 	bl	8002d28 <Flash_write_page>
 800380a:	e02f      	b.n	800386c <process_command+0x2b4>

        }else if (strcmp(param, "MAX_BLUE") == 0) {
 800380c:	4a5e      	ldr	r2, [pc, #376]	@ (8003988 <process_command+0x3d0>)
 800380e:	236c      	movs	r3, #108	@ 0x6c
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	0011      	movs	r1, r2
 8003814:	0018      	movs	r0, r3
 8003816:	f7fc fc77 	bl	8000108 <strcmp>
 800381a:	1e03      	subs	r3, r0, #0
 800381c:	d126      	bne.n	800386c <process_command+0x2b4>
            max_blue = value;
 800381e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003820:	4b5a      	ldr	r3, [pc, #360]	@ (800398c <process_command+0x3d4>)
 8003822:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)"OK_MAX_BLUE\r\n", strlen("OK_MAX_BLUE\r\n"), 100);
 8003824:	4956      	ldr	r1, [pc, #344]	@ (8003980 <process_command+0x3c8>)
 8003826:	4841      	ldr	r0, [pc, #260]	@ (800392c <process_command+0x374>)
 8003828:	2364      	movs	r3, #100	@ 0x64
 800382a:	220d      	movs	r2, #13
 800382c:	f004 fd74 	bl	8008318 <HAL_UART_Transmit>
            snprintf(debug_msg, sizeof(debug_msg), "SET MAX BLUE: %d\r\n", max_blue);
 8003830:	4b56      	ldr	r3, [pc, #344]	@ (800398c <process_command+0x3d4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a56      	ldr	r2, [pc, #344]	@ (8003990 <process_command+0x3d8>)
 8003836:	2434      	movs	r4, #52	@ 0x34
 8003838:	1938      	adds	r0, r7, r4
 800383a:	2132      	movs	r1, #50	@ 0x32
 800383c:	f006 fc8c 	bl	800a158 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)debug_msg, strlen(debug_msg), 100); // Usar strlen
 8003840:	193b      	adds	r3, r7, r4
 8003842:	0018      	movs	r0, r3
 8003844:	f7fc fc6a 	bl	800011c <strlen>
 8003848:	0003      	movs	r3, r0
 800384a:	b29a      	uxth	r2, r3
 800384c:	1939      	adds	r1, r7, r4
 800384e:	4837      	ldr	r0, [pc, #220]	@ (800392c <process_command+0x374>)
 8003850:	2364      	movs	r3, #100	@ 0x64
 8003852:	f004 fd61 	bl	8008318 <HAL_UART_Transmit>

            config.max_blue = value;
 8003856:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003858:	4b3b      	ldr	r3, [pc, #236]	@ (8003948 <process_command+0x390>)
 800385a:	615a      	str	r2, [r3, #20]
            Flash_write_page(0x00, 0x00, 0x00, (uint8_t*)&config, sizeof(config));
 800385c:	4b3a      	ldr	r3, [pc, #232]	@ (8003948 <process_command+0x390>)
 800385e:	2218      	movs	r2, #24
 8003860:	9200      	str	r2, [sp, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	2100      	movs	r1, #0
 8003866:	2000      	movs	r0, #0
 8003868:	f7ff fa5e 	bl	8002d28 <Flash_write_page>

        }
    }if (sscanf(command, "%9[^$]$%14s", param, time_str) == 2) {
 800386c:	2524      	movs	r5, #36	@ 0x24
 800386e:	197b      	adds	r3, r7, r5
 8003870:	246c      	movs	r4, #108	@ 0x6c
 8003872:	193a      	adds	r2, r7, r4
 8003874:	4947      	ldr	r1, [pc, #284]	@ (8003994 <process_command+0x3dc>)
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f006 fcc2 	bl	800a200 <siscanf>
 800387c:	0003      	movs	r3, r0
 800387e:	2b02      	cmp	r3, #2
 8003880:	d000      	beq.n	8003884 <process_command+0x2cc>
 8003882:	e0b3      	b.n	80039ec <process_command+0x434>
        if (strcmp(param, "SET_TIME") == 0) {
 8003884:	4a44      	ldr	r2, [pc, #272]	@ (8003998 <process_command+0x3e0>)
 8003886:	193b      	adds	r3, r7, r4
 8003888:	0011      	movs	r1, r2
 800388a:	0018      	movs	r0, r3
 800388c:	f7fc fc3c 	bl	8000108 <strcmp>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d000      	beq.n	8003896 <process_command+0x2de>
 8003894:	e0b0      	b.n	80039f8 <process_command+0x440>
            // Extraer cada campo de 2 dígitos
            if (sscanf(time_str, "%2d%2d%2d%2d%2d%2d%2d",
 8003896:	231c      	movs	r3, #28
 8003898:	18fc      	adds	r4, r7, r3
 800389a:	2320      	movs	r3, #32
 800389c:	18fa      	adds	r2, r7, r3
 800389e:	493f      	ldr	r1, [pc, #252]	@ (800399c <process_command+0x3e4>)
 80038a0:	1978      	adds	r0, r7, r5
 80038a2:	2308      	movs	r3, #8
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	9304      	str	r3, [sp, #16]
 80038a8:	230c      	movs	r3, #12
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	9303      	str	r3, [sp, #12]
 80038ae:	2310      	movs	r3, #16
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	9302      	str	r3, [sp, #8]
 80038b4:	2314      	movs	r3, #20
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	2318      	movs	r3, #24
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	0023      	movs	r3, r4
 80038c2:	f006 fc9d 	bl	800a200 <siscanf>
 80038c6:	0003      	movs	r3, r0
 80038c8:	2b07      	cmp	r3, #7
 80038ca:	d000      	beq.n	80038ce <process_command+0x316>
 80038cc:	e087      	b.n	80039de <process_command+0x426>
                &sec, &min, &hour, &dow, &dom, &month, &year) == 7) {

                // Validar rangos (ejemplo básico)
                if (sec < 0 || sec > 59 || min < 0 || min > 59 ||
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	db20      	blt.n	8003916 <process_command+0x35e>
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	2b3b      	cmp	r3, #59	@ 0x3b
 80038d8:	dc1d      	bgt.n	8003916 <process_command+0x35e>
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	db1a      	blt.n	8003916 <process_command+0x35e>
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b3b      	cmp	r3, #59	@ 0x3b
 80038e4:	dc17      	bgt.n	8003916 <process_command+0x35e>
                    hour < 0 || hour > 23 || dow < 1 || dow > 7 ||
 80038e6:	69bb      	ldr	r3, [r7, #24]
                if (sec < 0 || sec > 59 || min < 0 || min > 59 ||
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	db14      	blt.n	8003916 <process_command+0x35e>
                    hour < 0 || hour > 23 || dow < 1 || dow > 7 ||
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b17      	cmp	r3, #23
 80038f0:	dc11      	bgt.n	8003916 <process_command+0x35e>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	dd0e      	ble.n	8003916 <process_command+0x35e>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b07      	cmp	r3, #7
 80038fc:	dc0b      	bgt.n	8003916 <process_command+0x35e>
                    dom < 1 || dom > 31 || month < 1 || month > 12) {
 80038fe:	693b      	ldr	r3, [r7, #16]
                    hour < 0 || hour > 23 || dow < 1 || dow > 7 ||
 8003900:	2b00      	cmp	r3, #0
 8003902:	dd08      	ble.n	8003916 <process_command+0x35e>
                    dom < 1 || dom > 31 || month < 1 || month > 12) {
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b1f      	cmp	r3, #31
 8003908:	dc05      	bgt.n	8003916 <process_command+0x35e>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	dd02      	ble.n	8003916 <process_command+0x35e>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b0c      	cmp	r3, #12
 8003914:	dd46      	ble.n	80039a4 <process_command+0x3ec>
                    HAL_UART_Transmit(&huart1, (uint8_t *)"ERROR: Valores fuera de rango\r\n", 30, 100);
 8003916:	4922      	ldr	r1, [pc, #136]	@ (80039a0 <process_command+0x3e8>)
 8003918:	4804      	ldr	r0, [pc, #16]	@ (800392c <process_command+0x374>)
 800391a:	2364      	movs	r3, #100	@ 0x64
 800391c:	221e      	movs	r2, #30
 800391e:	f004 fcfb 	bl	8008318 <HAL_UART_Transmit>
                    return;
 8003922:	e069      	b.n	80039f8 <process_command+0x440>
 8003924:	0800d030 	.word	0x0800d030
 8003928:	0800d034 	.word	0x0800d034
 800392c:	20000490 	.word	0x20000490
 8003930:	0800d04c 	.word	0x0800d04c
 8003934:	0800d058 	.word	0x0800d058
 8003938:	0800d068 	.word	0x0800d068
 800393c:	200005a0 	.word	0x200005a0
 8003940:	0800d070 	.word	0x0800d070
 8003944:	0800d080 	.word	0x0800d080
 8003948:	200005c4 	.word	0x200005c4
 800394c:	0800d094 	.word	0x0800d094
 8003950:	20000000 	.word	0x20000000
 8003954:	0800d09c 	.word	0x0800d09c
 8003958:	0800d0ac 	.word	0x0800d0ac
 800395c:	0800d0c0 	.word	0x0800d0c0
 8003960:	200005a4 	.word	0x200005a4
 8003964:	0800d0cc 	.word	0x0800d0cc
 8003968:	0800d0dc 	.word	0x0800d0dc
 800396c:	0800d0f0 	.word	0x0800d0f0
 8003970:	20000004 	.word	0x20000004
 8003974:	0800d0fc 	.word	0x0800d0fc
 8003978:	0800d110 	.word	0x0800d110
 800397c:	200005a8 	.word	0x200005a8
 8003980:	0800d11c 	.word	0x0800d11c
 8003984:	0800d12c 	.word	0x0800d12c
 8003988:	0800d140 	.word	0x0800d140
 800398c:	20000008 	.word	0x20000008
 8003990:	0800d14c 	.word	0x0800d14c
 8003994:	0800d160 	.word	0x0800d160
 8003998:	0800d16c 	.word	0x0800d16c
 800399c:	0800d178 	.word	0x0800d178
 80039a0:	0800d190 	.word	0x0800d190
                }

                // Configurar el RTC
                Set_Time(sec, min, hour, dow, dom, month, year);
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	b2d8      	uxtb	r0, r3
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	b2dc      	uxtb	r4, r3
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	b2dd      	uxtb	r5, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	b2de      	uxtb	r6, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	b2c9      	uxtb	r1, r1
 80039c0:	9102      	str	r1, [sp, #8]
 80039c2:	9201      	str	r2, [sp, #4]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	0033      	movs	r3, r6
 80039c8:	002a      	movs	r2, r5
 80039ca:	0021      	movs	r1, r4
 80039cc:	f7ff fae8 	bl	8002fa0 <Set_Time>
                HAL_UART_Transmit(&huart1, (uint8_t *)"Hora configurada\r\n", 18, 100);
 80039d0:	490b      	ldr	r1, [pc, #44]	@ (8003a00 <process_command+0x448>)
 80039d2:	480c      	ldr	r0, [pc, #48]	@ (8003a04 <process_command+0x44c>)
 80039d4:	2364      	movs	r3, #100	@ 0x64
 80039d6:	2212      	movs	r2, #18
 80039d8:	f004 fc9e 	bl	8008318 <HAL_UART_Transmit>
 80039dc:	e00c      	b.n	80039f8 <process_command+0x440>
            } else {
                HAL_UART_Transmit(&huart1, (uint8_t *)"ERROR: Formato inválido\r\n", 25, 100);
 80039de:	490a      	ldr	r1, [pc, #40]	@ (8003a08 <process_command+0x450>)
 80039e0:	4808      	ldr	r0, [pc, #32]	@ (8003a04 <process_command+0x44c>)
 80039e2:	2364      	movs	r3, #100	@ 0x64
 80039e4:	2219      	movs	r2, #25
 80039e6:	f004 fc97 	bl	8008318 <HAL_UART_Transmit>
 80039ea:	e005      	b.n	80039f8 <process_command+0x440>
            }
        }
    }else {
        HAL_UART_Transmit(&huart1, (uint8_t *)"ERROR: Formato invalido\n", strlen("ERROR: Formato invalido\n"), 100);
 80039ec:	4907      	ldr	r1, [pc, #28]	@ (8003a0c <process_command+0x454>)
 80039ee:	4805      	ldr	r0, [pc, #20]	@ (8003a04 <process_command+0x44c>)
 80039f0:	2364      	movs	r3, #100	@ 0x64
 80039f2:	2218      	movs	r2, #24
 80039f4:	f004 fc90 	bl	8008318 <HAL_UART_Transmit>
    }
}
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b021      	add	sp, #132	@ 0x84
 80039fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	0800d1b0 	.word	0x0800d1b0
 8003a04:	20000490 	.word	0x20000490
 8003a08:	0800d1c4 	.word	0x0800d1c4
 8003a0c:	0800d1e0 	.word	0x0800d1e0

08003a10 <check_temperature>:


void check_temperature(float temperature) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    // Apagar todos los LEDs primero
    HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_RESET);
 8003a18:	2390      	movs	r3, #144	@ 0x90
 8003a1a:	05db      	lsls	r3, r3, #23
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2101      	movs	r1, #1
 8003a20:	0018      	movs	r0, r3
 8003a22:	f001 fcd8 	bl	80053d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, GPIO_PIN_RESET);
 8003a26:	2390      	movs	r3, #144	@ 0x90
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f001 fcd1 	bl	80053d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, GPIO_PIN_RESET);
 8003a34:	2390      	movs	r3, #144	@ 0x90
 8003a36:	05db      	lsls	r3, r3, #23
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2104      	movs	r1, #4
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f001 fcca 	bl	80053d6 <HAL_GPIO_WritePin>

    // Encender LEDs según los rangos configurados
    if (temperature >= min_red && temperature <= max_red) {
 8003a42:	4b31      	ldr	r3, [pc, #196]	@ (8003b08 <check_temperature+0xf8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0018      	movs	r0, r3
 8003a48:	f7fd f8e2 	bl	8000c10 <__aeabi_i2f>
 8003a4c:	1c03      	adds	r3, r0, #0
 8003a4e:	1c19      	adds	r1, r3, #0
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fc fd63 	bl	800051c <__aeabi_fcmpge>
 8003a56:	1e03      	subs	r3, r0, #0
 8003a58:	d012      	beq.n	8003a80 <check_temperature+0x70>
 8003a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b0c <check_temperature+0xfc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7fd f8d6 	bl	8000c10 <__aeabi_i2f>
 8003a64:	1c03      	adds	r3, r0, #0
 8003a66:	1c19      	adds	r1, r3, #0
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fc fd43 	bl	80004f4 <__aeabi_fcmple>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d006      	beq.n	8003a80 <check_temperature+0x70>
        HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_SET); // Encender rojo
 8003a72:	2390      	movs	r3, #144	@ 0x90
 8003a74:	05db      	lsls	r3, r3, #23
 8003a76:	2201      	movs	r2, #1
 8003a78:	2101      	movs	r1, #1
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f001 fcab 	bl	80053d6 <HAL_GPIO_WritePin>
    }
    if (temperature >= min_green && temperature <= max_green) {
 8003a80:	4b23      	ldr	r3, [pc, #140]	@ (8003b10 <check_temperature+0x100>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7fd f8c3 	bl	8000c10 <__aeabi_i2f>
 8003a8a:	1c03      	adds	r3, r0, #0
 8003a8c:	1c19      	adds	r1, r3, #0
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fc fd44 	bl	800051c <__aeabi_fcmpge>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d012      	beq.n	8003abe <check_temperature+0xae>
 8003a98:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <check_temperature+0x104>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7fd f8b7 	bl	8000c10 <__aeabi_i2f>
 8003aa2:	1c03      	adds	r3, r0, #0
 8003aa4:	1c19      	adds	r1, r3, #0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fc fd24 	bl	80004f4 <__aeabi_fcmple>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d006      	beq.n	8003abe <check_temperature+0xae>
        HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, GPIO_PIN_SET); // Encender verde
 8003ab0:	2390      	movs	r3, #144	@ 0x90
 8003ab2:	05db      	lsls	r3, r3, #23
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f001 fc8c 	bl	80053d6 <HAL_GPIO_WritePin>
    }
    if (temperature >= min_blue && temperature <= max_blue) {
 8003abe:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <check_temperature+0x108>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f7fd f8a4 	bl	8000c10 <__aeabi_i2f>
 8003ac8:	1c03      	adds	r3, r0, #0
 8003aca:	1c19      	adds	r1, r3, #0
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fc fd25 	bl	800051c <__aeabi_fcmpge>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d100      	bne.n	8003ad8 <check_temperature+0xc8>
        HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, GPIO_PIN_SET); // Encender azul
    }
}
 8003ad6:	e013      	b.n	8003b00 <check_temperature+0xf0>
    if (temperature >= min_blue && temperature <= max_blue) {
 8003ad8:	4b10      	ldr	r3, [pc, #64]	@ (8003b1c <check_temperature+0x10c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7fd f897 	bl	8000c10 <__aeabi_i2f>
 8003ae2:	1c03      	adds	r3, r0, #0
 8003ae4:	1c19      	adds	r1, r3, #0
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fc fd04 	bl	80004f4 <__aeabi_fcmple>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d100      	bne.n	8003af2 <check_temperature+0xe2>
}
 8003af0:	e006      	b.n	8003b00 <check_temperature+0xf0>
        HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, GPIO_PIN_SET); // Encender azul
 8003af2:	2390      	movs	r3, #144	@ 0x90
 8003af4:	05db      	lsls	r3, r3, #23
 8003af6:	2201      	movs	r2, #1
 8003af8:	2104      	movs	r1, #4
 8003afa:	0018      	movs	r0, r3
 8003afc:	f001 fc6b 	bl	80053d6 <HAL_GPIO_WritePin>
}
 8003b00:	46c0      	nop			@ (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	200005a0 	.word	0x200005a0
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	200005a4 	.word	0x200005a4
 8003b14:	20000004 	.word	0x20000004
 8003b18:	200005a8 	.word	0x200005a8
 8003b1c:	20000008 	.word	0x20000008

08003b20 <Print_Temperature_To_Uart>:

void Print_Temperature_To_Uart(void){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
	temperature = DS18B20_ReadTemperature();
 8003b24:	f7ff fc66 	bl	80033f4 <DS18B20_ReadTemperature>
 8003b28:	1c02      	adds	r2, r0, #0
 8003b2a:	4b14      	ldr	r3, [pc, #80]	@ (8003b7c <Print_Temperature_To_Uart+0x5c>)
 8003b2c:	601a      	str	r2, [r3, #0]
	check_temperature(temperature);
 8003b2e:	4b13      	ldr	r3, [pc, #76]	@ (8003b7c <Print_Temperature_To_Uart+0x5c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	1c18      	adds	r0, r3, #0
 8003b34:	f7ff ff6c 	bl	8003a10 <check_temperature>
	size_to_send = sprintf( transmit_text, "result temperature %.2f\r\n", temperature);
 8003b38:	4b10      	ldr	r3, [pc, #64]	@ (8003b7c <Print_Temperature_To_Uart+0x5c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	1c18      	adds	r0, r3, #0
 8003b3e:	f7fe ff6f 	bl	8002a20 <__aeabi_f2d>
 8003b42:	0002      	movs	r2, r0
 8003b44:	000b      	movs	r3, r1
 8003b46:	490e      	ldr	r1, [pc, #56]	@ (8003b80 <Print_Temperature_To_Uart+0x60>)
 8003b48:	480e      	ldr	r0, [pc, #56]	@ (8003b84 <Print_Temperature_To_Uart+0x64>)
 8003b4a:	f006 fb39 	bl	800a1c0 <siprintf>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <Print_Temperature_To_Uart+0x68>)
 8003b54:	701a      	strb	r2, [r3, #0]
	transmit_text[size_to_send] = '\0';
 8003b56:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <Print_Temperature_To_Uart+0x68>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	001a      	movs	r2, r3
 8003b5c:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <Print_Temperature_To_Uart+0x64>)
 8003b5e:	2100      	movs	r1, #0
 8003b60:	5499      	strb	r1, [r3, r2]
	HAL_UART_Transmit(&huart1, (uint8_t *)transmit_text, size_to_send, 1000);
 8003b62:	4b09      	ldr	r3, [pc, #36]	@ (8003b88 <Print_Temperature_To_Uart+0x68>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	001a      	movs	r2, r3
 8003b68:	23fa      	movs	r3, #250	@ 0xfa
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4905      	ldr	r1, [pc, #20]	@ (8003b84 <Print_Temperature_To_Uart+0x64>)
 8003b6e:	4807      	ldr	r0, [pc, #28]	@ (8003b8c <Print_Temperature_To_Uart+0x6c>)
 8003b70:	f004 fbd2 	bl	8008318 <HAL_UART_Transmit>
}
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	200005ac 	.word	0x200005ac
 8003b80:	0800d1fc 	.word	0x0800d1fc
 8003b84:	20000528 	.word	0x20000528
 8003b88:	20000568 	.word	0x20000568
 8003b8c:	20000490 	.word	0x20000490

08003b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b96:	f000 fe77 	bl	8004888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b9a:	f000 f91d 	bl	8003dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b9e:	f000 fb0d 	bl	80041bc <MX_GPIO_Init>
  MX_ADC_Init();
 8003ba2:	f000 f981 	bl	8003ea8 <MX_ADC_Init>
  MX_I2C2_Init();
 8003ba6:	f000 f9db 	bl	8003f60 <MX_I2C2_Init>
  MX_SPI2_Init();
 8003baa:	f000 fa19 	bl	8003fe0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003bae:	f000 fad5 	bl	800415c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8003bb2:	f000 fa53 	bl	800405c <MX_TIM1_Init>
  MX_TIM14_Init();
 8003bb6:	f000 faa9 	bl	800410c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8003bba:	4b6e      	ldr	r3, [pc, #440]	@ (8003d74 <main+0x1e4>)
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f003 ff5f 	bl	8007a80 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 8003bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d78 <main+0x1e8>)
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f003 ff9f 	bl	8007b08 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Flash_read_identification_id();
 8003bca:	f7ff f813 	bl	8002bf4 <Flash_read_identification_id>
  (sec, min, hour, dow, dom, month, year)*/
  //Set_Time(00, 00, 01, 4, 6, 3, 25);



   HAL_UART_Receive_IT(&huart1, &received_char, 1); // Iniciar recepción UART
 8003bce:	496b      	ldr	r1, [pc, #428]	@ (8003d7c <main+0x1ec>)
 8003bd0:	4b6b      	ldr	r3, [pc, #428]	@ (8003d80 <main+0x1f0>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f004 fc3e 	bl	8008456 <HAL_UART_Receive_IT>

   Flash_page_erase(0x00, 0x00, 0x00);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	2000      	movs	r0, #0
 8003be0:	f7ff f96e 	bl	8002ec0 <Flash_page_erase>
   // Leer configuración desde Flash
	 Flash_read_page(0x00, 0x00, 0x00, sizeof(config)); // Dirección 0x000000
 8003be4:	2318      	movs	r3, #24
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7ff f920 	bl	8002e30 <Flash_read_page>
	 memcpy(&config, read_flash_Byte, sizeof(config));
 8003bf0:	4964      	ldr	r1, [pc, #400]	@ (8003d84 <main+0x1f4>)
 8003bf2:	4b65      	ldr	r3, [pc, #404]	@ (8003d88 <main+0x1f8>)
 8003bf4:	2218      	movs	r2, #24
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f006 fc7e 	bl	800a4f8 <memcpy>


	 if(config.min_red == 0xFFFFFFFF){ // Asume que 0xFFFFFFFF es el valor por defecto
 8003bfc:	4b62      	ldr	r3, [pc, #392]	@ (8003d88 <main+0x1f8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	d119      	bne.n	8003c38 <main+0xa8>
	     config.min_red = 30; // Valor por defecto
 8003c04:	4b60      	ldr	r3, [pc, #384]	@ (8003d88 <main+0x1f8>)
 8003c06:	221e      	movs	r2, #30
 8003c08:	601a      	str	r2, [r3, #0]
	     config.max_red = 40;
 8003c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d88 <main+0x1f8>)
 8003c0c:	2228      	movs	r2, #40	@ 0x28
 8003c0e:	605a      	str	r2, [r3, #4]
	     config.min_green = 25;
 8003c10:	4b5d      	ldr	r3, [pc, #372]	@ (8003d88 <main+0x1f8>)
 8003c12:	2219      	movs	r2, #25
 8003c14:	609a      	str	r2, [r3, #8]
	     config.max_green = 30;
 8003c16:	4b5c      	ldr	r3, [pc, #368]	@ (8003d88 <main+0x1f8>)
 8003c18:	221e      	movs	r2, #30
 8003c1a:	60da      	str	r2, [r3, #12]
	     config.min_blue = 20;
 8003c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003d88 <main+0x1f8>)
 8003c1e:	2214      	movs	r2, #20
 8003c20:	611a      	str	r2, [r3, #16]
	     config.max_blue = 25;
 8003c22:	4b59      	ldr	r3, [pc, #356]	@ (8003d88 <main+0x1f8>)
 8003c24:	2219      	movs	r2, #25
 8003c26:	615a      	str	r2, [r3, #20]
	     Flash_write_page(0x00, 0x00, 0x00, (uint8_t*)&config, sizeof(config));
 8003c28:	4b57      	ldr	r3, [pc, #348]	@ (8003d88 <main+0x1f8>)
 8003c2a:	2218      	movs	r2, #24
 8003c2c:	9200      	str	r2, [sp, #0]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	2000      	movs	r0, #0
 8003c34:	f7ff f878 	bl	8002d28 <Flash_write_page>
	 }

	 // Asignar valores a las variables globales
	 min_red = config.min_red;
 8003c38:	4b53      	ldr	r3, [pc, #332]	@ (8003d88 <main+0x1f8>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b53      	ldr	r3, [pc, #332]	@ (8003d8c <main+0x1fc>)
 8003c3e:	601a      	str	r2, [r3, #0]
	 max_red = config.max_red;
 8003c40:	4b51      	ldr	r3, [pc, #324]	@ (8003d88 <main+0x1f8>)
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	4b52      	ldr	r3, [pc, #328]	@ (8003d90 <main+0x200>)
 8003c46:	601a      	str	r2, [r3, #0]
	 min_green = config.min_green;
 8003c48:	4b4f      	ldr	r3, [pc, #316]	@ (8003d88 <main+0x1f8>)
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	4b51      	ldr	r3, [pc, #324]	@ (8003d94 <main+0x204>)
 8003c4e:	601a      	str	r2, [r3, #0]
	 max_green = config.max_green;
 8003c50:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <main+0x1f8>)
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	4b50      	ldr	r3, [pc, #320]	@ (8003d98 <main+0x208>)
 8003c56:	601a      	str	r2, [r3, #0]
	 min_blue = config.min_blue;
 8003c58:	4b4b      	ldr	r3, [pc, #300]	@ (8003d88 <main+0x1f8>)
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003d9c <main+0x20c>)
 8003c5e:	601a      	str	r2, [r3, #0]
	 max_blue = config.max_blue;
 8003c60:	4b49      	ldr	r3, [pc, #292]	@ (8003d88 <main+0x1f8>)
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	4b4e      	ldr	r3, [pc, #312]	@ (8003da0 <main+0x210>)
 8003c66:	601a      	str	r2, [r3, #0]

	 temperatura_promedio =0;
 8003c68:	4b4e      	ldr	r3, [pc, #312]	@ (8003da4 <main+0x214>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
	 Print_Temperature_To_Uart();
 8003c6e:	f7ff ff57 	bl	8003b20 <Print_Temperature_To_Uart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	Get_Time();
 8003c72:	f7ff f9ff 	bl	8003074 <Get_Time>
	sprintf(buffer, "%02d:%02d:%02d\r\n", time.hour, time.minutes, time.seconds);
 8003c76:	4b4c      	ldr	r3, [pc, #304]	@ (8003da8 <main+0x218>)
 8003c78:	789b      	ldrb	r3, [r3, #2]
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	4b4a      	ldr	r3, [pc, #296]	@ (8003da8 <main+0x218>)
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	001c      	movs	r4, r3
 8003c82:	4b49      	ldr	r3, [pc, #292]	@ (8003da8 <main+0x218>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	4949      	ldr	r1, [pc, #292]	@ (8003dac <main+0x21c>)
 8003c88:	4849      	ldr	r0, [pc, #292]	@ (8003db0 <main+0x220>)
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	0023      	movs	r3, r4
 8003c8e:	f006 fa97 	bl	800a1c0 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer, strlen(buffer), 100);
 8003c92:	4b47      	ldr	r3, [pc, #284]	@ (8003db0 <main+0x220>)
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fc fa41 	bl	800011c <strlen>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	4944      	ldr	r1, [pc, #272]	@ (8003db0 <main+0x220>)
 8003ca0:	4837      	ldr	r0, [pc, #220]	@ (8003d80 <main+0x1f0>)
 8003ca2:	2364      	movs	r3, #100	@ 0x64
 8003ca4:	f004 fb38 	bl	8008318 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003ca8:	23fa      	movs	r3, #250	@ 0xfa
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	0018      	movs	r0, r3
 8003cae:	f000 fe4f 	bl	8004950 <HAL_Delay>



	if (counter10s >=1) {
 8003cb2:	4b40      	ldr	r3, [pc, #256]	@ (8003db4 <main+0x224>)
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d010      	beq.n	8003cdc <main+0x14c>
		Print_Temperature_To_Uart();
 8003cba:	f7ff ff31 	bl	8003b20 <Print_Temperature_To_Uart>
		counter10s = 0;
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8003db4 <main+0x224>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	801a      	strh	r2, [r3, #0]
		temperatura_promedio = temperatura_promedio + temperature;
 8003cc4:	4b37      	ldr	r3, [pc, #220]	@ (8003da4 <main+0x214>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003db8 <main+0x228>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	1c19      	adds	r1, r3, #0
 8003cce:	1c10      	adds	r0, r2, #0
 8003cd0:	f7fc fc2e 	bl	8000530 <__aeabi_fadd>
 8003cd4:	1c03      	adds	r3, r0, #0
 8003cd6:	1c1a      	adds	r2, r3, #0
 8003cd8:	4b32      	ldr	r3, [pc, #200]	@ (8003da4 <main+0x214>)
 8003cda:	601a      	str	r2, [r3, #0]

	 }
	if (counter_1min >= 1) {
 8003cdc:	4b37      	ldr	r3, [pc, #220]	@ (8003dbc <main+0x22c>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0c6      	beq.n	8003c72 <main+0xe2>

		  temperatura_promedio = temperatura_promedio/6.0;
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8003da4 <main+0x214>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4935      	ldr	r1, [pc, #212]	@ (8003dc0 <main+0x230>)
 8003cea:	1c18      	adds	r0, r3, #0
 8003cec:	f7fc fdaa 	bl	8000844 <__aeabi_fdiv>
 8003cf0:	1c03      	adds	r3, r0, #0
 8003cf2:	1c1a      	adds	r2, r3, #0
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003da4 <main+0x214>)
 8003cf6:	601a      	str	r2, [r3, #0]
		  size_to_send = sprintf( transmit_text, "temperatura promedio guardada en flash: %.1f\r\n", temperatura_promedio);
 8003cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <main+0x214>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	1c18      	adds	r0, r3, #0
 8003cfe:	f7fe fe8f 	bl	8002a20 <__aeabi_f2d>
 8003d02:	0002      	movs	r2, r0
 8003d04:	000b      	movs	r3, r1
 8003d06:	492f      	ldr	r1, [pc, #188]	@ (8003dc4 <main+0x234>)
 8003d08:	482f      	ldr	r0, [pc, #188]	@ (8003dc8 <main+0x238>)
 8003d0a:	f006 fa59 	bl	800a1c0 <siprintf>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b2e      	ldr	r3, [pc, #184]	@ (8003dcc <main+0x23c>)
 8003d14:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t *)transmit_text, size_to_send, 1000);
 8003d16:	4b2d      	ldr	r3, [pc, #180]	@ (8003dcc <main+0x23c>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	23fa      	movs	r3, #250	@ 0xfa
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4929      	ldr	r1, [pc, #164]	@ (8003dc8 <main+0x238>)
 8003d22:	4817      	ldr	r0, [pc, #92]	@ (8003d80 <main+0x1f0>)
 8003d24:	f004 faf8 	bl	8008318 <HAL_UART_Transmit>
		  sprintf(value_to_write, "%.1f", temperatura_promedio);
 8003d28:	4b1e      	ldr	r3, [pc, #120]	@ (8003da4 <main+0x214>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1c18      	adds	r0, r3, #0
 8003d2e:	f7fe fe77 	bl	8002a20 <__aeabi_f2d>
 8003d32:	0002      	movs	r2, r0
 8003d34:	000b      	movs	r3, r1
 8003d36:	4926      	ldr	r1, [pc, #152]	@ (8003dd0 <main+0x240>)
 8003d38:	4826      	ldr	r0, [pc, #152]	@ (8003dd4 <main+0x244>)
 8003d3a:	f006 fa41 	bl	800a1c0 <siprintf>
		  Flash_page_erase(0x00, 0x03, 0x00);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2103      	movs	r1, #3
 8003d42:	2000      	movs	r0, #0
 8003d44:	f7ff f8bc 	bl	8002ec0 <Flash_page_erase>
		  Flash_write_page(0x00,0x03,0x00,(uint8_t *)value_to_write,strlen(value_to_write));
 8003d48:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <main+0x244>)
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7fc f9e6 	bl	800011c <strlen>
 8003d50:	0003      	movs	r3, r0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd4 <main+0x244>)
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	0013      	movs	r3, r2
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2103      	movs	r1, #3
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f7fe ffe2 	bl	8002d28 <Flash_write_page>

		  counter_1min = 0;
 8003d64:	4b15      	ldr	r3, [pc, #84]	@ (8003dbc <main+0x22c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
		  temperatura_promedio = 0;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <main+0x214>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
	Get_Time();
 8003d70:	e77f      	b.n	8003c72 <main+0xe2>
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	20000400 	.word	0x20000400
 8003d78:	20000448 	.word	0x20000448
 8003d7c:	2000059f 	.word	0x2000059f
 8003d80:	20000490 	.word	0x20000490
 8003d84:	200001fc 	.word	0x200001fc
 8003d88:	200005c4 	.word	0x200005c4
 8003d8c:	200005a0 	.word	0x200005a0
 8003d90:	20000000 	.word	0x20000000
 8003d94:	200005a4 	.word	0x200005a4
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	200005a8 	.word	0x200005a8
 8003da0:	20000008 	.word	0x20000008
 8003da4:	200005b0 	.word	0x200005b0
 8003da8:	200002fc 	.word	0x200002fc
 8003dac:	0800d218 	.word	0x0800d218
 8003db0:	20000518 	.word	0x20000518
 8003db4:	200005bc 	.word	0x200005bc
 8003db8:	200005ac 	.word	0x200005ac
 8003dbc:	200005ba 	.word	0x200005ba
 8003dc0:	40c00000 	.word	0x40c00000
 8003dc4:	0800d22c 	.word	0x0800d22c
 8003dc8:	20000528 	.word	0x20000528
 8003dcc:	20000568 	.word	0x20000568
 8003dd0:	0800d25c 	.word	0x0800d25c
 8003dd4:	200005b4 	.word	0x200005b4

08003dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b095      	sub	sp, #84	@ 0x54
 8003ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dde:	2420      	movs	r4, #32
 8003de0:	193b      	adds	r3, r7, r4
 8003de2:	0018      	movs	r0, r3
 8003de4:	2330      	movs	r3, #48	@ 0x30
 8003de6:	001a      	movs	r2, r3
 8003de8:	2100      	movs	r1, #0
 8003dea:	f006 fa7f 	bl	800a2ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dee:	2310      	movs	r3, #16
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	0018      	movs	r0, r3
 8003df4:	2310      	movs	r3, #16
 8003df6:	001a      	movs	r2, r3
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f006 fa77 	bl	800a2ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dfe:	003b      	movs	r3, r7
 8003e00:	0018      	movs	r0, r3
 8003e02:	2310      	movs	r3, #16
 8003e04:	001a      	movs	r2, r3
 8003e06:	2100      	movs	r1, #0
 8003e08:	f006 fa70 	bl	800a2ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003e0c:	0021      	movs	r1, r4
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2212      	movs	r2, #18
 8003e12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	2201      	movs	r2, #1
 8003e18:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	2210      	movs	r2, #16
 8003e24:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2210      	movs	r2, #16
 8003e2a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	2202      	movs	r2, #2
 8003e30:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	2200      	movs	r2, #0
 8003e36:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	22a0      	movs	r2, #160	@ 0xa0
 8003e3c:	0392      	lsls	r2, r2, #14
 8003e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	2200      	movs	r2, #0
 8003e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f002 f97d 	bl	8006148 <HAL_RCC_OscConfig>
 8003e4e:	1e03      	subs	r3, r0, #0
 8003e50:	d001      	beq.n	8003e56 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003e52:	f000 fa59 	bl	8004308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e56:	2110      	movs	r1, #16
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	2202      	movs	r2, #2
 8003e62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e64:	187b      	adds	r3, r7, r1
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	2101      	movs	r1, #1
 8003e74:	0018      	movs	r0, r3
 8003e76:	f002 fc81 	bl	800677c <HAL_RCC_ClockConfig>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d001      	beq.n	8003e82 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003e7e:	f000 fa43 	bl	8004308 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e82:	003b      	movs	r3, r7
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003e88:	003b      	movs	r3, r7
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e8e:	003b      	movs	r3, r7
 8003e90:	0018      	movs	r0, r3
 8003e92:	f002 fdb7 	bl	8006a04 <HAL_RCCEx_PeriphCLKConfig>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d001      	beq.n	8003e9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003e9a:	f000 fa35 	bl	8004308 <Error_Handler>
  }
}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b015      	add	sp, #84	@ 0x54
 8003ea4:	bd90      	pop	{r4, r7, pc}
	...

08003ea8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003eae:	1d3b      	adds	r3, r7, #4
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	230c      	movs	r3, #12
 8003eb4:	001a      	movs	r2, r3
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	f006 fa18 	bl	800a2ec <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003ebc:	4b26      	ldr	r3, [pc, #152]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003ebe:	4a27      	ldr	r2, [pc, #156]	@ (8003f5c <MX_ADC_Init+0xb4>)
 8003ec0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003ec2:	4b25      	ldr	r3, [pc, #148]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003ec8:	4b23      	ldr	r3, [pc, #140]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ece:	4b22      	ldr	r3, [pc, #136]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003ed4:	4b20      	ldr	r3, [pc, #128]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003eda:	4b1f      	ldr	r3, [pc, #124]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003edc:	2204      	movs	r2, #4
 8003ede:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003eec:	4b1a      	ldr	r3, [pc, #104]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003ef2:	4b19      	ldr	r3, [pc, #100]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ef8:	4b17      	ldr	r3, [pc, #92]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003efa:	22c2      	movs	r2, #194	@ 0xc2
 8003efc:	32ff      	adds	r2, #255	@ 0xff
 8003efe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f00:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003f06:	4b14      	ldr	r3, [pc, #80]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003f08:	2224      	movs	r2, #36	@ 0x24
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003f0e:	4b12      	ldr	r3, [pc, #72]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003f14:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003f16:	0018      	movs	r0, r3
 8003f18:	f000 fd3e 	bl	8004998 <HAL_ADC_Init>
 8003f1c:	1e03      	subs	r3, r0, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003f20:	f000 f9f2 	bl	8004308 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003f24:	1d3b      	adds	r3, r7, #4
 8003f26:	2204      	movs	r2, #4
 8003f28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	0152      	lsls	r2, r2, #5
 8003f30:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	2280      	movs	r2, #128	@ 0x80
 8003f36:	0552      	lsls	r2, r2, #21
 8003f38:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f3a:	1d3a      	adds	r2, r7, #4
 8003f3c:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <MX_ADC_Init+0xb0>)
 8003f3e:	0011      	movs	r1, r2
 8003f40:	0018      	movs	r0, r3
 8003f42:	f000 fe69 	bl	8004c18 <HAL_ADC_ConfigChannel>
 8003f46:	1e03      	subs	r3, r0, #0
 8003f48:	d001      	beq.n	8003f4e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003f4a:	f000 f9dd 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b004      	add	sp, #16
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	20000308 	.word	0x20000308
 8003f5c:	40012400 	.word	0x40012400

08003f60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f66:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd8 <MX_I2C2_Init+0x78>)
 8003f68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fdc <MX_I2C2_Init+0x7c>)
 8003f6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003f70:	4b18      	ldr	r3, [pc, #96]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f76:	4b17      	ldr	r3, [pc, #92]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f7c:	4b15      	ldr	r3, [pc, #84]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003f82:	4b14      	ldr	r3, [pc, #80]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003f88:	4b12      	ldr	r3, [pc, #72]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f8e:	4b11      	ldr	r3, [pc, #68]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f94:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f001 fa37 	bl	8005410 <HAL_I2C_Init>
 8003fa2:	1e03      	subs	r3, r0, #0
 8003fa4:	d001      	beq.n	8003faa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003fa6:	f000 f9af 	bl	8004308 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003faa:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003fac:	2100      	movs	r1, #0
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f002 f832 	bl	8006018 <HAL_I2CEx_ConfigAnalogFilter>
 8003fb4:	1e03      	subs	r3, r0, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003fb8:	f000 f9a6 	bl	8004308 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003fbc:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <MX_I2C2_Init+0x74>)
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f002 f875 	bl	80060b0 <HAL_I2CEx_ConfigDigitalFilter>
 8003fc6:	1e03      	subs	r3, r0, #0
 8003fc8:	d001      	beq.n	8003fce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003fca:	f000 f99d 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000348 	.word	0x20000348
 8003fd8:	40005800 	.word	0x40005800
 8003fdc:	10805d88 	.word	0x10805d88

08003fe0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <MX_SPI2_Init+0x74>)
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8004058 <MX_SPI2_Init+0x78>)
 8003fe8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003fea:	4b1a      	ldr	r3, [pc, #104]	@ (8004054 <MX_SPI2_Init+0x74>)
 8003fec:	2282      	movs	r2, #130	@ 0x82
 8003fee:	0052      	lsls	r2, r2, #1
 8003ff0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ff2:	4b18      	ldr	r3, [pc, #96]	@ (8004054 <MX_SPI2_Init+0x74>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ff8:	4b16      	ldr	r3, [pc, #88]	@ (8004054 <MX_SPI2_Init+0x74>)
 8003ffa:	22e0      	movs	r2, #224	@ 0xe0
 8003ffc:	00d2      	lsls	r2, r2, #3
 8003ffe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004000:	4b14      	ldr	r3, [pc, #80]	@ (8004054 <MX_SPI2_Init+0x74>)
 8004002:	2200      	movs	r2, #0
 8004004:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004006:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <MX_SPI2_Init+0x74>)
 8004008:	2200      	movs	r2, #0
 800400a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800400c:	4b11      	ldr	r3, [pc, #68]	@ (8004054 <MX_SPI2_Init+0x74>)
 800400e:	2280      	movs	r2, #128	@ 0x80
 8004010:	0092      	lsls	r2, r2, #2
 8004012:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004014:	4b0f      	ldr	r3, [pc, #60]	@ (8004054 <MX_SPI2_Init+0x74>)
 8004016:	2228      	movs	r2, #40	@ 0x28
 8004018:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800401a:	4b0e      	ldr	r3, [pc, #56]	@ (8004054 <MX_SPI2_Init+0x74>)
 800401c:	2200      	movs	r2, #0
 800401e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004020:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <MX_SPI2_Init+0x74>)
 8004022:	2200      	movs	r2, #0
 8004024:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004026:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <MX_SPI2_Init+0x74>)
 8004028:	2200      	movs	r2, #0
 800402a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800402c:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <MX_SPI2_Init+0x74>)
 800402e:	2207      	movs	r2, #7
 8004030:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004032:	4b08      	ldr	r3, [pc, #32]	@ (8004054 <MX_SPI2_Init+0x74>)
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004038:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <MX_SPI2_Init+0x74>)
 800403a:	2208      	movs	r2, #8
 800403c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800403e:	4b05      	ldr	r3, [pc, #20]	@ (8004054 <MX_SPI2_Init+0x74>)
 8004040:	0018      	movs	r0, r3
 8004042:	f002 fdad 	bl	8006ba0 <HAL_SPI_Init>
 8004046:	1e03      	subs	r3, r0, #0
 8004048:	d001      	beq.n	800404e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800404a:	f000 f95d 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	2000039c 	.word	0x2000039c
 8004058:	40003800 	.word	0x40003800

0800405c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004062:	2308      	movs	r3, #8
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	0018      	movs	r0, r3
 8004068:	2310      	movs	r3, #16
 800406a:	001a      	movs	r2, r3
 800406c:	2100      	movs	r1, #0
 800406e:	f006 f93d 	bl	800a2ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004072:	003b      	movs	r3, r7
 8004074:	0018      	movs	r0, r3
 8004076:	2308      	movs	r3, #8
 8004078:	001a      	movs	r2, r3
 800407a:	2100      	movs	r1, #0
 800407c:	f006 f936 	bl	800a2ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004080:	4b1f      	ldr	r3, [pc, #124]	@ (8004100 <MX_TIM1_Init+0xa4>)
 8004082:	4a20      	ldr	r2, [pc, #128]	@ (8004104 <MX_TIM1_Init+0xa8>)
 8004084:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8004086:	4b1e      	ldr	r3, [pc, #120]	@ (8004100 <MX_TIM1_Init+0xa4>)
 8004088:	222f      	movs	r2, #47	@ 0x2f
 800408a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408c:	4b1c      	ldr	r3, [pc, #112]	@ (8004100 <MX_TIM1_Init+0xa4>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8004092:	4b1b      	ldr	r3, [pc, #108]	@ (8004100 <MX_TIM1_Init+0xa4>)
 8004094:	4a1c      	ldr	r2, [pc, #112]	@ (8004108 <MX_TIM1_Init+0xac>)
 8004096:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004098:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <MX_TIM1_Init+0xa4>)
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800409e:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <MX_TIM1_Init+0xa4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040a4:	4b16      	ldr	r3, [pc, #88]	@ (8004100 <MX_TIM1_Init+0xa4>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040aa:	4b15      	ldr	r3, [pc, #84]	@ (8004100 <MX_TIM1_Init+0xa4>)
 80040ac:	0018      	movs	r0, r3
 80040ae:	f003 fc97 	bl	80079e0 <HAL_TIM_Base_Init>
 80040b2:	1e03      	subs	r3, r0, #0
 80040b4:	d001      	beq.n	80040ba <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80040b6:	f000 f927 	bl	8004308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ba:	2108      	movs	r1, #8
 80040bc:	187b      	adds	r3, r7, r1
 80040be:	2280      	movs	r2, #128	@ 0x80
 80040c0:	0152      	lsls	r2, r2, #5
 80040c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040c4:	187a      	adds	r2, r7, r1
 80040c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004100 <MX_TIM1_Init+0xa4>)
 80040c8:	0011      	movs	r1, r2
 80040ca:	0018      	movs	r0, r3
 80040cc:	f003 fe56 	bl	8007d7c <HAL_TIM_ConfigClockSource>
 80040d0:	1e03      	subs	r3, r0, #0
 80040d2:	d001      	beq.n	80040d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80040d4:	f000 f918 	bl	8004308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d8:	003b      	movs	r3, r7
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040de:	003b      	movs	r3, r7
 80040e0:	2200      	movs	r2, #0
 80040e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040e4:	003a      	movs	r2, r7
 80040e6:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <MX_TIM1_Init+0xa4>)
 80040e8:	0011      	movs	r1, r2
 80040ea:	0018      	movs	r0, r3
 80040ec:	f004 f858 	bl	80081a0 <HAL_TIMEx_MasterConfigSynchronization>
 80040f0:	1e03      	subs	r3, r0, #0
 80040f2:	d001      	beq.n	80040f8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80040f4:	f000 f908 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80040f8:	46c0      	nop			@ (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b006      	add	sp, #24
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000400 	.word	0x20000400
 8004104:	40012c00 	.word	0x40012c00
 8004108:	0000fffe 	.word	0x0000fffe

0800410c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004110:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <MX_TIM14_Init+0x40>)
 8004112:	4a0f      	ldr	r2, [pc, #60]	@ (8004150 <MX_TIM14_Init+0x44>)
 8004114:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47999;
 8004116:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <MX_TIM14_Init+0x40>)
 8004118:	4a0e      	ldr	r2, [pc, #56]	@ (8004154 <MX_TIM14_Init+0x48>)
 800411a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800411c:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <MX_TIM14_Init+0x40>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2499;
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <MX_TIM14_Init+0x40>)
 8004124:	4a0c      	ldr	r2, [pc, #48]	@ (8004158 <MX_TIM14_Init+0x4c>)
 8004126:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004128:	4b08      	ldr	r3, [pc, #32]	@ (800414c <MX_TIM14_Init+0x40>)
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800412e:	4b07      	ldr	r3, [pc, #28]	@ (800414c <MX_TIM14_Init+0x40>)
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004134:	4b05      	ldr	r3, [pc, #20]	@ (800414c <MX_TIM14_Init+0x40>)
 8004136:	0018      	movs	r0, r3
 8004138:	f003 fc52 	bl	80079e0 <HAL_TIM_Base_Init>
 800413c:	1e03      	subs	r3, r0, #0
 800413e:	d001      	beq.n	8004144 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8004140:	f000 f8e2 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	20000448 	.word	0x20000448
 8004150:	40002000 	.word	0x40002000
 8004154:	0000bb7f 	.word	0x0000bb7f
 8004158:	000009c3 	.word	0x000009c3

0800415c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004160:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 8004162:	4a15      	ldr	r2, [pc, #84]	@ (80041b8 <MX_USART1_UART_Init+0x5c>)
 8004164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004166:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 8004168:	22e1      	movs	r2, #225	@ 0xe1
 800416a:	0252      	lsls	r2, r2, #9
 800416c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800416e:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 8004170:	2200      	movs	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004174:	4b0f      	ldr	r3, [pc, #60]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 8004176:	2200      	movs	r2, #0
 8004178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800417a:	4b0e      	ldr	r3, [pc, #56]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 800417c:	2200      	movs	r2, #0
 800417e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004180:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 8004182:	220c      	movs	r2, #12
 8004184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004186:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 8004188:	2200      	movs	r2, #0
 800418a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800418c:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 800418e:	2200      	movs	r2, #0
 8004190:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004192:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 8004194:	2200      	movs	r2, #0
 8004196:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004198:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 800419a:	2200      	movs	r2, #0
 800419c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800419e:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <MX_USART1_UART_Init+0x58>)
 80041a0:	0018      	movs	r0, r3
 80041a2:	f004 f865 	bl	8008270 <HAL_UART_Init>
 80041a6:	1e03      	subs	r3, r0, #0
 80041a8:	d001      	beq.n	80041ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80041aa:	f000 f8ad 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000490 	.word	0x20000490
 80041b8:	40013800 	.word	0x40013800

080041bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b08b      	sub	sp, #44	@ 0x2c
 80041c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c2:	2414      	movs	r4, #20
 80041c4:	193b      	adds	r3, r7, r4
 80041c6:	0018      	movs	r0, r3
 80041c8:	2314      	movs	r3, #20
 80041ca:	001a      	movs	r2, r3
 80041cc:	2100      	movs	r1, #0
 80041ce:	f006 f88d 	bl	800a2ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004300 <MX_GPIO_Init+0x144>)
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004300 <MX_GPIO_Init+0x144>)
 80041d8:	2180      	movs	r1, #128	@ 0x80
 80041da:	0309      	lsls	r1, r1, #12
 80041dc:	430a      	orrs	r2, r1
 80041de:	615a      	str	r2, [r3, #20]
 80041e0:	4b47      	ldr	r3, [pc, #284]	@ (8004300 <MX_GPIO_Init+0x144>)
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	031b      	lsls	r3, r3, #12
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041ee:	4b44      	ldr	r3, [pc, #272]	@ (8004300 <MX_GPIO_Init+0x144>)
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	4b43      	ldr	r3, [pc, #268]	@ (8004300 <MX_GPIO_Init+0x144>)
 80041f4:	2180      	movs	r1, #128	@ 0x80
 80041f6:	03c9      	lsls	r1, r1, #15
 80041f8:	430a      	orrs	r2, r1
 80041fa:	615a      	str	r2, [r3, #20]
 80041fc:	4b40      	ldr	r3, [pc, #256]	@ (8004300 <MX_GPIO_Init+0x144>)
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	2380      	movs	r3, #128	@ 0x80
 8004202:	03db      	lsls	r3, r3, #15
 8004204:	4013      	ands	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800420a:	4b3d      	ldr	r3, [pc, #244]	@ (8004300 <MX_GPIO_Init+0x144>)
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	4b3c      	ldr	r3, [pc, #240]	@ (8004300 <MX_GPIO_Init+0x144>)
 8004210:	2180      	movs	r1, #128	@ 0x80
 8004212:	0289      	lsls	r1, r1, #10
 8004214:	430a      	orrs	r2, r1
 8004216:	615a      	str	r2, [r3, #20]
 8004218:	4b39      	ldr	r3, [pc, #228]	@ (8004300 <MX_GPIO_Init+0x144>)
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	2380      	movs	r3, #128	@ 0x80
 800421e:	029b      	lsls	r3, r3, #10
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004226:	4b36      	ldr	r3, [pc, #216]	@ (8004300 <MX_GPIO_Init+0x144>)
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	4b35      	ldr	r3, [pc, #212]	@ (8004300 <MX_GPIO_Init+0x144>)
 800422c:	2180      	movs	r1, #128	@ 0x80
 800422e:	02c9      	lsls	r1, r1, #11
 8004230:	430a      	orrs	r2, r1
 8004232:	615a      	str	r2, [r3, #20]
 8004234:	4b32      	ldr	r3, [pc, #200]	@ (8004300 <MX_GPIO_Init+0x144>)
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	2380      	movs	r3, #128	@ 0x80
 800423a:	02db      	lsls	r3, r3, #11
 800423c:	4013      	ands	r3, r2
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_R_Pin|RGB_G_Pin|RGB_B_Pin|Temperature_sensor_Pin
 8004242:	2390      	movs	r3, #144	@ 0x90
 8004244:	05db      	lsls	r3, r3, #23
 8004246:	2200      	movs	r2, #0
 8004248:	214f      	movs	r1, #79	@ 0x4f
 800424a:	0018      	movs	r0, r3
 800424c:	f001 f8c3 	bl	80053d6 <HAL_GPIO_WritePin>
                          |Alerta_voltaje_min_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8004250:	2380      	movs	r3, #128	@ 0x80
 8004252:	015b      	lsls	r3, r3, #5
 8004254:	482b      	ldr	r0, [pc, #172]	@ (8004304 <MX_GPIO_Init+0x148>)
 8004256:	2200      	movs	r2, #0
 8004258:	0019      	movs	r1, r3
 800425a:	f001 f8bc 	bl	80053d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_R_Pin RGB_G_Pin RGB_B_Pin Temperature_sensor_Pin
                           Alerta_voltaje_min_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin|Temperature_sensor_Pin
 800425e:	193b      	adds	r3, r7, r4
 8004260:	224f      	movs	r2, #79	@ 0x4f
 8004262:	601a      	str	r2, [r3, #0]
                          |Alerta_voltaje_min_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004264:	193b      	adds	r3, r7, r4
 8004266:	2201      	movs	r2, #1
 8004268:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	193b      	adds	r3, r7, r4
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	193b      	adds	r3, r7, r4
 8004272:	2200      	movs	r2, #0
 8004274:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004276:	193a      	adds	r2, r7, r4
 8004278:	2390      	movs	r3, #144	@ 0x90
 800427a:	05db      	lsls	r3, r3, #23
 800427c:	0011      	movs	r1, r2
 800427e:	0018      	movs	r0, r3
 8004280:	f000 ff1c 	bl	80050bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8004284:	0021      	movs	r1, r4
 8004286:	187b      	adds	r3, r7, r1
 8004288:	2280      	movs	r2, #128	@ 0x80
 800428a:	0152      	lsls	r2, r2, #5
 800428c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800428e:	000c      	movs	r4, r1
 8004290:	193b      	adds	r3, r7, r4
 8004292:	2201      	movs	r2, #1
 8004294:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004296:	193b      	adds	r3, r7, r4
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800429c:	193b      	adds	r3, r7, r4
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80042a2:	193b      	adds	r3, r7, r4
 80042a4:	4a17      	ldr	r2, [pc, #92]	@ (8004304 <MX_GPIO_Init+0x148>)
 80042a6:	0019      	movs	r1, r3
 80042a8:	0010      	movs	r0, r2
 80042aa:	f000 ff07 	bl	80050bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_control_Pin */
  GPIO_InitStruct.Pin = Motor_control_Pin;
 80042ae:	193b      	adds	r3, r7, r4
 80042b0:	2220      	movs	r2, #32
 80042b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	193b      	adds	r3, r7, r4
 80042b6:	2202      	movs	r2, #2
 80042b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	193b      	adds	r3, r7, r4
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	2201      	movs	r2, #1
 80042ca:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(Motor_control_GPIO_Port, &GPIO_InitStruct);
 80042cc:	193b      	adds	r3, r7, r4
 80042ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004304 <MX_GPIO_Init+0x148>)
 80042d0:	0019      	movs	r1, r3
 80042d2:	0010      	movs	r0, r2
 80042d4:	f000 fef2 	bl	80050bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton_1_Pin Boton_2_Pin */
  GPIO_InitStruct.Pin = Boton_1_Pin|Boton_2_Pin;
 80042d8:	0021      	movs	r1, r4
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	22c0      	movs	r2, #192	@ 0xc0
 80042de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042e0:	187b      	adds	r3, r7, r1
 80042e2:	2200      	movs	r2, #0
 80042e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e6:	187b      	adds	r3, r7, r1
 80042e8:	2200      	movs	r2, #0
 80042ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	4a05      	ldr	r2, [pc, #20]	@ (8004304 <MX_GPIO_Init+0x148>)
 80042f0:	0019      	movs	r1, r3
 80042f2:	0010      	movs	r0, r2
 80042f4:	f000 fee2 	bl	80050bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80042f8:	46c0      	nop			@ (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b00b      	add	sp, #44	@ 0x2c
 80042fe:	bd90      	pop	{r4, r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	48000400 	.word	0x48000400

08004308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800430c:	b672      	cpsid	i
}
 800430e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004310:	46c0      	nop			@ (mov r8, r8)
 8004312:	e7fd      	b.n	8004310 <Error_Handler+0x8>

08004314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431a:	4b0f      	ldr	r3, [pc, #60]	@ (8004358 <HAL_MspInit+0x44>)
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <HAL_MspInit+0x44>)
 8004320:	2101      	movs	r1, #1
 8004322:	430a      	orrs	r2, r1
 8004324:	619a      	str	r2, [r3, #24]
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_MspInit+0x44>)
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2201      	movs	r2, #1
 800432c:	4013      	ands	r3, r2
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <HAL_MspInit+0x44>)
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_MspInit+0x44>)
 8004338:	2180      	movs	r1, #128	@ 0x80
 800433a:	0549      	lsls	r1, r1, #21
 800433c:	430a      	orrs	r2, r1
 800433e:	61da      	str	r2, [r3, #28]
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_MspInit+0x44>)
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	2380      	movs	r3, #128	@ 0x80
 8004346:	055b      	lsls	r3, r3, #21
 8004348:	4013      	ands	r3, r2
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b002      	add	sp, #8
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	40021000 	.word	0x40021000

0800435c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b08b      	sub	sp, #44	@ 0x2c
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	2414      	movs	r4, #20
 8004366:	193b      	adds	r3, r7, r4
 8004368:	0018      	movs	r0, r3
 800436a:	2314      	movs	r3, #20
 800436c:	001a      	movs	r2, r3
 800436e:	2100      	movs	r1, #0
 8004370:	f005 ffbc 	bl	800a2ec <memset>
  if(hadc->Instance==ADC1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a19      	ldr	r2, [pc, #100]	@ (80043e0 <HAL_ADC_MspInit+0x84>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d12b      	bne.n	80043d6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800437e:	4b19      	ldr	r3, [pc, #100]	@ (80043e4 <HAL_ADC_MspInit+0x88>)
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	4b18      	ldr	r3, [pc, #96]	@ (80043e4 <HAL_ADC_MspInit+0x88>)
 8004384:	2180      	movs	r1, #128	@ 0x80
 8004386:	0089      	lsls	r1, r1, #2
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]
 800438c:	4b15      	ldr	r3, [pc, #84]	@ (80043e4 <HAL_ADC_MspInit+0x88>)
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <HAL_ADC_MspInit+0x88>)
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	4b11      	ldr	r3, [pc, #68]	@ (80043e4 <HAL_ADC_MspInit+0x88>)
 80043a0:	2180      	movs	r1, #128	@ 0x80
 80043a2:	0289      	lsls	r1, r1, #10
 80043a4:	430a      	orrs	r2, r1
 80043a6:	615a      	str	r2, [r3, #20]
 80043a8:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <HAL_ADC_MspInit+0x88>)
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	2380      	movs	r3, #128	@ 0x80
 80043ae:	029b      	lsls	r3, r3, #10
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = Voltage_measure_Pin;
 80043b6:	193b      	adds	r3, r7, r4
 80043b8:	2210      	movs	r2, #16
 80043ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043bc:	193b      	adds	r3, r7, r4
 80043be:	2203      	movs	r2, #3
 80043c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	193b      	adds	r3, r7, r4
 80043c4:	2200      	movs	r2, #0
 80043c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Voltage_measure_GPIO_Port, &GPIO_InitStruct);
 80043c8:	193a      	adds	r2, r7, r4
 80043ca:	2390      	movs	r3, #144	@ 0x90
 80043cc:	05db      	lsls	r3, r3, #23
 80043ce:	0011      	movs	r1, r2
 80043d0:	0018      	movs	r0, r3
 80043d2:	f000 fe73 	bl	80050bc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b00b      	add	sp, #44	@ 0x2c
 80043dc:	bd90      	pop	{r4, r7, pc}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	40012400 	.word	0x40012400
 80043e4:	40021000 	.word	0x40021000

080043e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b08b      	sub	sp, #44	@ 0x2c
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f0:	2414      	movs	r4, #20
 80043f2:	193b      	adds	r3, r7, r4
 80043f4:	0018      	movs	r0, r3
 80043f6:	2314      	movs	r3, #20
 80043f8:	001a      	movs	r2, r3
 80043fa:	2100      	movs	r1, #0
 80043fc:	f005 ff76 	bl	800a2ec <memset>
  if(hi2c->Instance==I2C2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1c      	ldr	r2, [pc, #112]	@ (8004478 <HAL_I2C_MspInit+0x90>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d132      	bne.n	8004470 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800440a:	4b1c      	ldr	r3, [pc, #112]	@ (800447c <HAL_I2C_MspInit+0x94>)
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	4b1b      	ldr	r3, [pc, #108]	@ (800447c <HAL_I2C_MspInit+0x94>)
 8004410:	2180      	movs	r1, #128	@ 0x80
 8004412:	02c9      	lsls	r1, r1, #11
 8004414:	430a      	orrs	r2, r1
 8004416:	615a      	str	r2, [r3, #20]
 8004418:	4b18      	ldr	r3, [pc, #96]	@ (800447c <HAL_I2C_MspInit+0x94>)
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	2380      	movs	r3, #128	@ 0x80
 800441e:	02db      	lsls	r3, r3, #11
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004426:	193b      	adds	r3, r7, r4
 8004428:	22c0      	movs	r2, #192	@ 0xc0
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800442e:	0021      	movs	r1, r4
 8004430:	187b      	adds	r3, r7, r1
 8004432:	2212      	movs	r2, #18
 8004434:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	187b      	adds	r3, r7, r1
 8004438:	2200      	movs	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800443c:	187b      	adds	r3, r7, r1
 800443e:	2203      	movs	r2, #3
 8004440:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8004442:	187b      	adds	r3, r7, r1
 8004444:	2201      	movs	r2, #1
 8004446:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004448:	187b      	adds	r3, r7, r1
 800444a:	4a0d      	ldr	r2, [pc, #52]	@ (8004480 <HAL_I2C_MspInit+0x98>)
 800444c:	0019      	movs	r1, r3
 800444e:	0010      	movs	r0, r2
 8004450:	f000 fe34 	bl	80050bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004454:	4b09      	ldr	r3, [pc, #36]	@ (800447c <HAL_I2C_MspInit+0x94>)
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	4b08      	ldr	r3, [pc, #32]	@ (800447c <HAL_I2C_MspInit+0x94>)
 800445a:	2180      	movs	r1, #128	@ 0x80
 800445c:	03c9      	lsls	r1, r1, #15
 800445e:	430a      	orrs	r2, r1
 8004460:	61da      	str	r2, [r3, #28]
 8004462:	4b06      	ldr	r3, [pc, #24]	@ (800447c <HAL_I2C_MspInit+0x94>)
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	2380      	movs	r3, #128	@ 0x80
 8004468:	03db      	lsls	r3, r3, #15
 800446a:	4013      	ands	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b00b      	add	sp, #44	@ 0x2c
 8004476:	bd90      	pop	{r4, r7, pc}
 8004478:	40005800 	.word	0x40005800
 800447c:	40021000 	.word	0x40021000
 8004480:	48000400 	.word	0x48000400

08004484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b08b      	sub	sp, #44	@ 0x2c
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	2414      	movs	r4, #20
 800448e:	193b      	adds	r3, r7, r4
 8004490:	0018      	movs	r0, r3
 8004492:	2314      	movs	r3, #20
 8004494:	001a      	movs	r2, r3
 8004496:	2100      	movs	r1, #0
 8004498:	f005 ff28 	bl	800a2ec <memset>
  if(hspi->Instance==SPI2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004514 <HAL_SPI_MspInit+0x90>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d132      	bne.n	800450c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004518 <HAL_SPI_MspInit+0x94>)
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <HAL_SPI_MspInit+0x94>)
 80044ac:	2180      	movs	r1, #128	@ 0x80
 80044ae:	01c9      	lsls	r1, r1, #7
 80044b0:	430a      	orrs	r2, r1
 80044b2:	61da      	str	r2, [r3, #28]
 80044b4:	4b18      	ldr	r3, [pc, #96]	@ (8004518 <HAL_SPI_MspInit+0x94>)
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	2380      	movs	r3, #128	@ 0x80
 80044ba:	01db      	lsls	r3, r3, #7
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c2:	4b15      	ldr	r3, [pc, #84]	@ (8004518 <HAL_SPI_MspInit+0x94>)
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	4b14      	ldr	r3, [pc, #80]	@ (8004518 <HAL_SPI_MspInit+0x94>)
 80044c8:	2180      	movs	r1, #128	@ 0x80
 80044ca:	02c9      	lsls	r1, r1, #11
 80044cc:	430a      	orrs	r2, r1
 80044ce:	615a      	str	r2, [r3, #20]
 80044d0:	4b11      	ldr	r3, [pc, #68]	@ (8004518 <HAL_SPI_MspInit+0x94>)
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	2380      	movs	r3, #128	@ 0x80
 80044d6:	02db      	lsls	r3, r3, #11
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	22e0      	movs	r2, #224	@ 0xe0
 80044e2:	0212      	lsls	r2, r2, #8
 80044e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e6:	0021      	movs	r1, r4
 80044e8:	187b      	adds	r3, r7, r1
 80044ea:	2202      	movs	r2, #2
 80044ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	187b      	adds	r3, r7, r1
 80044f0:	2200      	movs	r2, #0
 80044f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044f4:	187b      	adds	r3, r7, r1
 80044f6:	2203      	movs	r2, #3
 80044f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80044fa:	187b      	adds	r3, r7, r1
 80044fc:	2200      	movs	r2, #0
 80044fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004500:	187b      	adds	r3, r7, r1
 8004502:	4a06      	ldr	r2, [pc, #24]	@ (800451c <HAL_SPI_MspInit+0x98>)
 8004504:	0019      	movs	r1, r3
 8004506:	0010      	movs	r0, r2
 8004508:	f000 fdd8 	bl	80050bc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800450c:	46c0      	nop			@ (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	b00b      	add	sp, #44	@ 0x2c
 8004512:	bd90      	pop	{r4, r7, pc}
 8004514:	40003800 	.word	0x40003800
 8004518:	40021000 	.word	0x40021000
 800451c:	48000400 	.word	0x48000400

08004520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a18      	ldr	r2, [pc, #96]	@ (8004590 <HAL_TIM_Base_MspInit+0x70>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10e      	bne.n	8004550 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004532:	4b18      	ldr	r3, [pc, #96]	@ (8004594 <HAL_TIM_Base_MspInit+0x74>)
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	4b17      	ldr	r3, [pc, #92]	@ (8004594 <HAL_TIM_Base_MspInit+0x74>)
 8004538:	2180      	movs	r1, #128	@ 0x80
 800453a:	0109      	lsls	r1, r1, #4
 800453c:	430a      	orrs	r2, r1
 800453e:	619a      	str	r2, [r3, #24]
 8004540:	4b14      	ldr	r3, [pc, #80]	@ (8004594 <HAL_TIM_Base_MspInit+0x74>)
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	2380      	movs	r3, #128	@ 0x80
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800454e:	e01a      	b.n	8004586 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a10      	ldr	r2, [pc, #64]	@ (8004598 <HAL_TIM_Base_MspInit+0x78>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d115      	bne.n	8004586 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800455a:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <HAL_TIM_Base_MspInit+0x74>)
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <HAL_TIM_Base_MspInit+0x74>)
 8004560:	2180      	movs	r1, #128	@ 0x80
 8004562:	0049      	lsls	r1, r1, #1
 8004564:	430a      	orrs	r2, r1
 8004566:	61da      	str	r2, [r3, #28]
 8004568:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <HAL_TIM_Base_MspInit+0x74>)
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	2380      	movs	r3, #128	@ 0x80
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4013      	ands	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004576:	2200      	movs	r2, #0
 8004578:	2100      	movs	r1, #0
 800457a:	2013      	movs	r0, #19
 800457c:	f000 fcee 	bl	8004f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004580:	2013      	movs	r0, #19
 8004582:	f000 fd00 	bl	8004f86 <HAL_NVIC_EnableIRQ>
}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	46bd      	mov	sp, r7
 800458a:	b004      	add	sp, #16
 800458c:	bd80      	pop	{r7, pc}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	40012c00 	.word	0x40012c00
 8004594:	40021000 	.word	0x40021000
 8004598:	40002000 	.word	0x40002000

0800459c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b08b      	sub	sp, #44	@ 0x2c
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a4:	2414      	movs	r4, #20
 80045a6:	193b      	adds	r3, r7, r4
 80045a8:	0018      	movs	r0, r3
 80045aa:	2314      	movs	r3, #20
 80045ac:	001a      	movs	r2, r3
 80045ae:	2100      	movs	r1, #0
 80045b0:	f005 fe9c 	bl	800a2ec <memset>
  if(huart->Instance==USART1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a21      	ldr	r2, [pc, #132]	@ (8004640 <HAL_UART_MspInit+0xa4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d13b      	bne.n	8004636 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045be:	4b21      	ldr	r3, [pc, #132]	@ (8004644 <HAL_UART_MspInit+0xa8>)
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_UART_MspInit+0xa8>)
 80045c4:	2180      	movs	r1, #128	@ 0x80
 80045c6:	01c9      	lsls	r1, r1, #7
 80045c8:	430a      	orrs	r2, r1
 80045ca:	619a      	str	r2, [r3, #24]
 80045cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004644 <HAL_UART_MspInit+0xa8>)
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	2380      	movs	r3, #128	@ 0x80
 80045d2:	01db      	lsls	r3, r3, #7
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045da:	4b1a      	ldr	r3, [pc, #104]	@ (8004644 <HAL_UART_MspInit+0xa8>)
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	4b19      	ldr	r3, [pc, #100]	@ (8004644 <HAL_UART_MspInit+0xa8>)
 80045e0:	2180      	movs	r1, #128	@ 0x80
 80045e2:	0289      	lsls	r1, r1, #10
 80045e4:	430a      	orrs	r2, r1
 80045e6:	615a      	str	r2, [r3, #20]
 80045e8:	4b16      	ldr	r3, [pc, #88]	@ (8004644 <HAL_UART_MspInit+0xa8>)
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	4013      	ands	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	22c0      	movs	r2, #192	@ 0xc0
 80045fa:	00d2      	lsls	r2, r2, #3
 80045fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	0021      	movs	r1, r4
 8004600:	187b      	adds	r3, r7, r1
 8004602:	2202      	movs	r2, #2
 8004604:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004606:	187b      	adds	r3, r7, r1
 8004608:	2200      	movs	r2, #0
 800460a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800460c:	187b      	adds	r3, r7, r1
 800460e:	2203      	movs	r2, #3
 8004610:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004612:	187b      	adds	r3, r7, r1
 8004614:	2201      	movs	r2, #1
 8004616:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004618:	187a      	adds	r2, r7, r1
 800461a:	2390      	movs	r3, #144	@ 0x90
 800461c:	05db      	lsls	r3, r3, #23
 800461e:	0011      	movs	r1, r2
 8004620:	0018      	movs	r0, r3
 8004622:	f000 fd4b 	bl	80050bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	2100      	movs	r1, #0
 800462a:	201b      	movs	r0, #27
 800462c:	f000 fc96 	bl	8004f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004630:	201b      	movs	r0, #27
 8004632:	f000 fca8 	bl	8004f86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b00b      	add	sp, #44	@ 0x2c
 800463c:	bd90      	pop	{r4, r7, pc}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	40013800 	.word	0x40013800
 8004644:	40021000 	.word	0x40021000

08004648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800464c:	46c0      	nop			@ (mov r8, r8)
 800464e:	e7fd      	b.n	800464c <NMI_Handler+0x4>

08004650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004654:	46c0      	nop			@ (mov r8, r8)
 8004656:	e7fd      	b.n	8004654 <HardFault_Handler+0x4>

08004658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800465c:	46c0      	nop			@ (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004670:	f000 f952 	bl	8004918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004674:	46c0      	nop			@ (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004680:	4b03      	ldr	r3, [pc, #12]	@ (8004690 <TIM14_IRQHandler+0x14>)
 8004682:	0018      	movs	r0, r3
 8004684:	f003 fa8c 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004688:	46c0      	nop			@ (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	20000448 	.word	0x20000448

08004694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004698:	4b03      	ldr	r3, [pc, #12]	@ (80046a8 <USART1_IRQHandler+0x14>)
 800469a:	0018      	movs	r0, r3
 800469c:	f003 ff32 	bl	8008504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80046a0:	46c0      	nop			@ (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	20000490 	.word	0x20000490

080046ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  return 1;
 80046b0:	2301      	movs	r3, #1
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <_kill>:

int _kill(int pid, int sig)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80046c2:	f005 fee1 	bl	800a488 <__errno>
 80046c6:	0003      	movs	r3, r0
 80046c8:	2216      	movs	r2, #22
 80046ca:	601a      	str	r2, [r3, #0]
  return -1;
 80046cc:	2301      	movs	r3, #1
 80046ce:	425b      	negs	r3, r3
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <_exit>:

void _exit (int status)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046e0:	2301      	movs	r3, #1
 80046e2:	425a      	negs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	0011      	movs	r1, r2
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7ff ffe5 	bl	80046b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	e7fd      	b.n	80046ee <_exit+0x16>

080046f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	e00a      	b.n	800471a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004704:	e000      	b.n	8004708 <_read+0x16>
 8004706:	bf00      	nop
 8004708:	0001      	movs	r1, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	60ba      	str	r2, [r7, #8]
 8004710:	b2ca      	uxtb	r2, r1
 8004712:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	3301      	adds	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	429a      	cmp	r2, r3
 8004720:	dbf0      	blt.n	8004704 <_read+0x12>
  }

  return len;
 8004722:	687b      	ldr	r3, [r7, #4]
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b006      	add	sp, #24
 800472a:	bd80      	pop	{r7, pc}

0800472c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e009      	b.n	8004752 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	60ba      	str	r2, [r7, #8]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	0018      	movs	r0, r3
 8004748:	e000      	b.n	800474c <_write+0x20>
 800474a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3301      	adds	r3, #1
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	dbf1      	blt.n	800473e <_write+0x12>
  }
  return len;
 800475a:	687b      	ldr	r3, [r7, #4]
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b006      	add	sp, #24
 8004762:	bd80      	pop	{r7, pc}

08004764 <_close>:

int _close(int file)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800476c:	2301      	movs	r3, #1
 800476e:	425b      	negs	r3, r3
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b002      	add	sp, #8
 8004776:	bd80      	pop	{r7, pc}

08004778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2280      	movs	r2, #128	@ 0x80
 8004786:	0192      	lsls	r2, r2, #6
 8004788:	605a      	str	r2, [r3, #4]
  return 0;
 800478a:	2300      	movs	r3, #0
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	b002      	add	sp, #8
 8004792:	bd80      	pop	{r7, pc}

08004794 <_isatty>:

int _isatty(int file)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800479c:	2301      	movs	r3, #1
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b002      	add	sp, #8
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	0018      	movs	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b004      	add	sp, #16
 80047ba:	bd80      	pop	{r7, pc}

080047bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047c4:	4a14      	ldr	r2, [pc, #80]	@ (8004818 <_sbrk+0x5c>)
 80047c6:	4b15      	ldr	r3, [pc, #84]	@ (800481c <_sbrk+0x60>)
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047d0:	4b13      	ldr	r3, [pc, #76]	@ (8004820 <_sbrk+0x64>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047d8:	4b11      	ldr	r3, [pc, #68]	@ (8004820 <_sbrk+0x64>)
 80047da:	4a12      	ldr	r2, [pc, #72]	@ (8004824 <_sbrk+0x68>)
 80047dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047de:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <_sbrk+0x64>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d207      	bcs.n	80047fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047ec:	f005 fe4c 	bl	800a488 <__errno>
 80047f0:	0003      	movs	r3, r0
 80047f2:	220c      	movs	r2, #12
 80047f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047f6:	2301      	movs	r3, #1
 80047f8:	425b      	negs	r3, r3
 80047fa:	e009      	b.n	8004810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047fc:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <_sbrk+0x64>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004802:	4b07      	ldr	r3, [pc, #28]	@ (8004820 <_sbrk+0x64>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	18d2      	adds	r2, r2, r3
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <_sbrk+0x64>)
 800480c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800480e:	68fb      	ldr	r3, [r7, #12]
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b006      	add	sp, #24
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20002000 	.word	0x20002000
 800481c:	00000400 	.word	0x00000400
 8004820:	200005dc 	.word	0x200005dc
 8004824:	20000730 	.word	0x20000730

08004828 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800482c:	46c0      	nop			@ (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004834:	480d      	ldr	r0, [pc, #52]	@ (800486c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004836:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004838:	f7ff fff6 	bl	8004828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800483c:	480c      	ldr	r0, [pc, #48]	@ (8004870 <LoopForever+0x6>)
  ldr r1, =_edata
 800483e:	490d      	ldr	r1, [pc, #52]	@ (8004874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004840:	4a0d      	ldr	r2, [pc, #52]	@ (8004878 <LoopForever+0xe>)
  movs r3, #0
 8004842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004844:	e002      	b.n	800484c <LoopCopyDataInit>

08004846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800484a:	3304      	adds	r3, #4

0800484c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800484c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800484e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004850:	d3f9      	bcc.n	8004846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004852:	4a0a      	ldr	r2, [pc, #40]	@ (800487c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004854:	4c0a      	ldr	r4, [pc, #40]	@ (8004880 <LoopForever+0x16>)
  movs r3, #0
 8004856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004858:	e001      	b.n	800485e <LoopFillZerobss>

0800485a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800485a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800485c:	3204      	adds	r2, #4

0800485e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800485e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004860:	d3fb      	bcc.n	800485a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004862:	f005 fe17 	bl	800a494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004866:	f7ff f993 	bl	8003b90 <main>

0800486a <LoopForever>:

LoopForever:
    b LoopForever
 800486a:	e7fe      	b.n	800486a <LoopForever>
  ldr   r0, =_estack
 800486c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004874:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004878:	0800d750 	.word	0x0800d750
  ldr r2, =_sbss
 800487c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004880:	20000730 	.word	0x20000730

08004884 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004884:	e7fe      	b.n	8004884 <ADC1_IRQHandler>
	...

08004888 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800488c:	4b07      	ldr	r3, [pc, #28]	@ (80048ac <HAL_Init+0x24>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <HAL_Init+0x24>)
 8004892:	2110      	movs	r1, #16
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004898:	2003      	movs	r0, #3
 800489a:	f000 f809 	bl	80048b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800489e:	f7ff fd39 	bl	8004314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	46c0      	nop			@ (mov r8, r8)
 80048ac:	40022000 	.word	0x40022000

080048b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048b8:	4b14      	ldr	r3, [pc, #80]	@ (800490c <HAL_InitTick+0x5c>)
 80048ba:	681c      	ldr	r4, [r3, #0]
 80048bc:	4b14      	ldr	r3, [pc, #80]	@ (8004910 <HAL_InitTick+0x60>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	0019      	movs	r1, r3
 80048c2:	23fa      	movs	r3, #250	@ 0xfa
 80048c4:	0098      	lsls	r0, r3, #2
 80048c6:	f7fb fc45 	bl	8000154 <__udivsi3>
 80048ca:	0003      	movs	r3, r0
 80048cc:	0019      	movs	r1, r3
 80048ce:	0020      	movs	r0, r4
 80048d0:	f7fb fc40 	bl	8000154 <__udivsi3>
 80048d4:	0003      	movs	r3, r0
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 fb65 	bl	8004fa6 <HAL_SYSTICK_Config>
 80048dc:	1e03      	subs	r3, r0, #0
 80048de:	d001      	beq.n	80048e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e00f      	b.n	8004904 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d80b      	bhi.n	8004902 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	2301      	movs	r3, #1
 80048ee:	425b      	negs	r3, r3
 80048f0:	2200      	movs	r2, #0
 80048f2:	0018      	movs	r0, r3
 80048f4:	f000 fb32 	bl	8004f5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048f8:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <HAL_InitTick+0x64>)
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b003      	add	sp, #12
 800490a:	bd90      	pop	{r4, r7, pc}
 800490c:	2000000c 	.word	0x2000000c
 8004910:	20000014 	.word	0x20000014
 8004914:	20000010 	.word	0x20000010

08004918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800491c:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <HAL_IncTick+0x1c>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	001a      	movs	r2, r3
 8004922:	4b05      	ldr	r3, [pc, #20]	@ (8004938 <HAL_IncTick+0x20>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	18d2      	adds	r2, r2, r3
 8004928:	4b03      	ldr	r3, [pc, #12]	@ (8004938 <HAL_IncTick+0x20>)
 800492a:	601a      	str	r2, [r3, #0]
}
 800492c:	46c0      	nop			@ (mov r8, r8)
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	20000014 	.word	0x20000014
 8004938:	200005e0 	.word	0x200005e0

0800493c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  return uwTick;
 8004940:	4b02      	ldr	r3, [pc, #8]	@ (800494c <HAL_GetTick+0x10>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	200005e0 	.word	0x200005e0

08004950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004958:	f7ff fff0 	bl	800493c <HAL_GetTick>
 800495c:	0003      	movs	r3, r0
 800495e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	d005      	beq.n	8004976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800496a:	4b0a      	ldr	r3, [pc, #40]	@ (8004994 <HAL_Delay+0x44>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	001a      	movs	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	189b      	adds	r3, r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	f7ff ffe0 	bl	800493c <HAL_GetTick>
 800497c:	0002      	movs	r2, r0
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	429a      	cmp	r2, r3
 8004986:	d8f7      	bhi.n	8004978 <HAL_Delay+0x28>
  {
  }
}
 8004988:	46c0      	nop			@ (mov r8, r8)
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	46bd      	mov	sp, r7
 800498e:	b004      	add	sp, #16
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	20000014 	.word	0x20000014

08004998 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049a0:	230f      	movs	r3, #15
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e125      	b.n	8004c02 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2234      	movs	r2, #52	@ 0x34
 80049c8:	2100      	movs	r1, #0
 80049ca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7ff fcc4 	bl	800435c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d8:	2210      	movs	r2, #16
 80049da:	4013      	ands	r3, r2
 80049dc:	d000      	beq.n	80049e0 <HAL_ADC_Init+0x48>
 80049de:	e103      	b.n	8004be8 <HAL_ADC_Init+0x250>
 80049e0:	230f      	movs	r3, #15
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d000      	beq.n	80049ec <HAL_ADC_Init+0x54>
 80049ea:	e0fd      	b.n	8004be8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2204      	movs	r2, #4
 80049f4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80049f6:	d000      	beq.n	80049fa <HAL_ADC_Init+0x62>
 80049f8:	e0f6      	b.n	8004be8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	4a83      	ldr	r2, [pc, #524]	@ (8004c0c <HAL_ADC_Init+0x274>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	2202      	movs	r2, #2
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2203      	movs	r2, #3
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d112      	bne.n	8004a3e <HAL_ADC_Init+0xa6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d009      	beq.n	8004a3a <HAL_ADC_Init+0xa2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	2380      	movs	r3, #128	@ 0x80
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	401a      	ands	r2, r3
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_Init+0xa6>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <HAL_ADC_Init+0xa8>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d116      	bne.n	8004a72 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2218      	movs	r2, #24
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	0899      	lsrs	r1, r3, #2
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4964      	ldr	r1, [pc, #400]	@ (8004c10 <HAL_ADC_Init+0x278>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7e1b      	ldrb	r3, [r3, #24]
 8004a86:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	7e5b      	ldrb	r3, [r3, #25]
 8004a8c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7e9b      	ldrb	r3, [r3, #26]
 8004a94:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004a96:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d002      	beq.n	8004aa6 <HAL_ADC_Init+0x10e>
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	015b      	lsls	r3, r3, #5
 8004aa4:	e000      	b.n	8004aa8 <HAL_ADC_Init+0x110>
 8004aa6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004aa8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004aae:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d101      	bne.n	8004abc <HAL_ADC_Init+0x124>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	e000      	b.n	8004abe <HAL_ADC_Init+0x126>
 8004abc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004abe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2124      	movs	r1, #36	@ 0x24
 8004ac4:	5c5b      	ldrb	r3, [r3, r1]
 8004ac6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004ac8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	7edb      	ldrb	r3, [r3, #27]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d115      	bne.n	8004b04 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	7e9b      	ldrb	r3, [r3, #26]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2280      	movs	r2, #128	@ 0x80
 8004ae4:	0252      	lsls	r2, r2, #9
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	e00b      	b.n	8004b04 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af0:	2220      	movs	r2, #32
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afc:	2201      	movs	r2, #1
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	23c2      	movs	r3, #194	@ 0xc2
 8004b0a:	33ff      	adds	r3, #255	@ 0xff
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d007      	beq.n	8004b20 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68d9      	ldr	r1, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	055b      	lsls	r3, r3, #21
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d01b      	beq.n	8004b74 <HAL_ADC_Init+0x1dc>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d017      	beq.n	8004b74 <HAL_ADC_Init+0x1dc>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d013      	beq.n	8004b74 <HAL_ADC_Init+0x1dc>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d00f      	beq.n	8004b74 <HAL_ADC_Init+0x1dc>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d00b      	beq.n	8004b74 <HAL_ADC_Init+0x1dc>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	2b05      	cmp	r3, #5
 8004b62:	d007      	beq.n	8004b74 <HAL_ADC_Init+0x1dc>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d003      	beq.n	8004b74 <HAL_ADC_Init+0x1dc>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	2b07      	cmp	r3, #7
 8004b72:	d112      	bne.n	8004b9a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2107      	movs	r1, #7
 8004b80:	438a      	bics	r2, r1
 8004b82:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6959      	ldr	r1, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	2207      	movs	r2, #7
 8004b90:	401a      	ands	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c14 <HAL_ADC_Init+0x27c>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	2201      	movs	r2, #1
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004bc0:	e01c      	b.n	8004bfc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	2212      	movs	r2, #18
 8004bc8:	4393      	bics	r3, r2
 8004bca:	2210      	movs	r2, #16
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004bde:	230f      	movs	r3, #15
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004be6:	e009      	b.n	8004bfc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bec:	2210      	movs	r2, #16
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004bf4:	230f      	movs	r3, #15
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004bfc:	230f      	movs	r3, #15
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	781b      	ldrb	r3, [r3, #0]
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b004      	add	sp, #16
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	fffffefd 	.word	0xfffffefd
 8004c10:	fffe0219 	.word	0xfffe0219
 8004c14:	833fffe7 	.word	0x833fffe7

08004c18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c22:	230f      	movs	r3, #15
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	055b      	lsls	r3, r3, #21
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d011      	beq.n	8004c5e <HAL_ADC_ConfigChannel+0x46>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d00d      	beq.n	8004c5e <HAL_ADC_ConfigChannel+0x46>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d009      	beq.n	8004c5e <HAL_ADC_ConfigChannel+0x46>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d005      	beq.n	8004c5e <HAL_ADC_ConfigChannel+0x46>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d001      	beq.n	8004c5e <HAL_ADC_ConfigChannel+0x46>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2234      	movs	r2, #52	@ 0x34
 8004c62:	5c9b      	ldrb	r3, [r3, r2]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x54>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0bb      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x1cc>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2234      	movs	r2, #52	@ 0x34
 8004c70:	2101      	movs	r1, #1
 8004c72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d000      	beq.n	8004c82 <HAL_ADC_ConfigChannel+0x6a>
 8004c80:	e09f      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4a59      	ldr	r2, [pc, #356]	@ (8004dec <HAL_ADC_ConfigChannel+0x1d4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d100      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x76>
 8004c8c:	e077      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	055b      	lsls	r3, r3, #21
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d037      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x108>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d033      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x108>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d02f      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x108>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d02b      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x108>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d027      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x108>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d023      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x108>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d01f      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x108>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	2b07      	cmp	r3, #7
 8004ce6:	d01b      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2107      	movs	r1, #7
 8004cf4:	400b      	ands	r3, r1
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d012      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2107      	movs	r1, #7
 8004d06:	438a      	bics	r2, r1
 8004d08:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6959      	ldr	r1, [r3, #20]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2207      	movs	r2, #7
 8004d16:	401a      	ands	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d003      	beq.n	8004d30 <HAL_ADC_ConfigChannel+0x118>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b11      	cmp	r3, #17
 8004d2e:	d152      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004d30:	4b2f      	ldr	r3, [pc, #188]	@ (8004df0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d102      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x12a>
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	e001      	b.n	8004d46 <HAL_ADC_ConfigChannel+0x12e>
 8004d42:	2380      	movs	r3, #128	@ 0x80
 8004d44:	03db      	lsls	r3, r3, #15
 8004d46:	4a2a      	ldr	r2, [pc, #168]	@ (8004df0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d140      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d54:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <HAL_ADC_ConfigChannel+0x1dc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4927      	ldr	r1, [pc, #156]	@ (8004df8 <HAL_ADC_ConfigChannel+0x1e0>)
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7fb f9fa 	bl	8000154 <__udivsi3>
 8004d60:	0003      	movs	r3, r0
 8004d62:	001a      	movs	r2, r3
 8004d64:	0013      	movs	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	189b      	adds	r3, r3, r2
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d6e:	e002      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f9      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x158>
 8004d7c:	e02b      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2101      	movs	r1, #1
 8004d8a:	4099      	lsls	r1, r3
 8004d8c:	000b      	movs	r3, r1
 8004d8e:	43d9      	mvns	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	400a      	ands	r2, r1
 8004d96:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d003      	beq.n	8004da8 <HAL_ADC_ConfigChannel+0x190>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b11      	cmp	r3, #17
 8004da6:	d116      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004da8:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004daa:	6819      	ldr	r1, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d101      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x1a0>
 8004db4:	4a11      	ldr	r2, [pc, #68]	@ (8004dfc <HAL_ADC_ConfigChannel+0x1e4>)
 8004db6:	e000      	b.n	8004dba <HAL_ADC_ConfigChannel+0x1a2>
 8004db8:	4a11      	ldr	r2, [pc, #68]	@ (8004e00 <HAL_ADC_ConfigChannel+0x1e8>)
 8004dba:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004dbc:	400a      	ands	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e009      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004dce:	230f      	movs	r3, #15
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2234      	movs	r2, #52	@ 0x34
 8004dda:	2100      	movs	r1, #0
 8004ddc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004dde:	230f      	movs	r3, #15
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	781b      	ldrb	r3, [r3, #0]
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b004      	add	sp, #16
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	00001001 	.word	0x00001001
 8004df0:	40012708 	.word	0x40012708
 8004df4:	2000000c 	.word	0x2000000c
 8004df8:	000f4240 	.word	0x000f4240
 8004dfc:	ff7fffff 	.word	0xff7fffff
 8004e00:	ffbfffff 	.word	0xffbfffff

08004e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	1dfb      	adds	r3, r7, #7
 8004e0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e16:	d809      	bhi.n	8004e2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e18:	1dfb      	adds	r3, r7, #7
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	231f      	movs	r3, #31
 8004e20:	401a      	ands	r2, r3
 8004e22:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <__NVIC_EnableIRQ+0x30>)
 8004e24:	2101      	movs	r1, #1
 8004e26:	4091      	lsls	r1, r2
 8004e28:	000a      	movs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
  }
}
 8004e2c:	46c0      	nop			@ (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b002      	add	sp, #8
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	e000e100 	.word	0xe000e100

08004e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	0002      	movs	r2, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	1dfb      	adds	r3, r7, #7
 8004e44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e46:	1dfb      	adds	r3, r7, #7
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e4c:	d828      	bhi.n	8004ea0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004f0c <__NVIC_SetPriority+0xd4>)
 8004e50:	1dfb      	adds	r3, r7, #7
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	089b      	lsrs	r3, r3, #2
 8004e58:	33c0      	adds	r3, #192	@ 0xc0
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	589b      	ldr	r3, [r3, r2]
 8004e5e:	1dfa      	adds	r2, r7, #7
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	0011      	movs	r1, r2
 8004e64:	2203      	movs	r2, #3
 8004e66:	400a      	ands	r2, r1
 8004e68:	00d2      	lsls	r2, r2, #3
 8004e6a:	21ff      	movs	r1, #255	@ 0xff
 8004e6c:	4091      	lsls	r1, r2
 8004e6e:	000a      	movs	r2, r1
 8004e70:	43d2      	mvns	r2, r2
 8004e72:	401a      	ands	r2, r3
 8004e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	019b      	lsls	r3, r3, #6
 8004e7a:	22ff      	movs	r2, #255	@ 0xff
 8004e7c:	401a      	ands	r2, r3
 8004e7e:	1dfb      	adds	r3, r7, #7
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	0018      	movs	r0, r3
 8004e84:	2303      	movs	r3, #3
 8004e86:	4003      	ands	r3, r0
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e8c:	481f      	ldr	r0, [pc, #124]	@ (8004f0c <__NVIC_SetPriority+0xd4>)
 8004e8e:	1dfb      	adds	r3, r7, #7
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b25b      	sxtb	r3, r3
 8004e94:	089b      	lsrs	r3, r3, #2
 8004e96:	430a      	orrs	r2, r1
 8004e98:	33c0      	adds	r3, #192	@ 0xc0
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e9e:	e031      	b.n	8004f04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f10 <__NVIC_SetPriority+0xd8>)
 8004ea2:	1dfb      	adds	r3, r7, #7
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	230f      	movs	r3, #15
 8004eaa:	400b      	ands	r3, r1
 8004eac:	3b08      	subs	r3, #8
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	3306      	adds	r3, #6
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	18d3      	adds	r3, r2, r3
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	1dfa      	adds	r2, r7, #7
 8004ebc:	7812      	ldrb	r2, [r2, #0]
 8004ebe:	0011      	movs	r1, r2
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	00d2      	lsls	r2, r2, #3
 8004ec6:	21ff      	movs	r1, #255	@ 0xff
 8004ec8:	4091      	lsls	r1, r2
 8004eca:	000a      	movs	r2, r1
 8004ecc:	43d2      	mvns	r2, r2
 8004ece:	401a      	ands	r2, r3
 8004ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	019b      	lsls	r3, r3, #6
 8004ed6:	22ff      	movs	r2, #255	@ 0xff
 8004ed8:	401a      	ands	r2, r3
 8004eda:	1dfb      	adds	r3, r7, #7
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	4003      	ands	r3, r0
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ee8:	4809      	ldr	r0, [pc, #36]	@ (8004f10 <__NVIC_SetPriority+0xd8>)
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	001c      	movs	r4, r3
 8004ef0:	230f      	movs	r3, #15
 8004ef2:	4023      	ands	r3, r4
 8004ef4:	3b08      	subs	r3, #8
 8004ef6:	089b      	lsrs	r3, r3, #2
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	3306      	adds	r3, #6
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	18c3      	adds	r3, r0, r3
 8004f00:	3304      	adds	r3, #4
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	46c0      	nop			@ (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b003      	add	sp, #12
 8004f0a:	bd90      	pop	{r4, r7, pc}
 8004f0c:	e000e100 	.word	0xe000e100
 8004f10:	e000ed00 	.word	0xe000ed00

08004f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	1e5a      	subs	r2, r3, #1
 8004f20:	2380      	movs	r3, #128	@ 0x80
 8004f22:	045b      	lsls	r3, r3, #17
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d301      	bcc.n	8004f2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e010      	b.n	8004f4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f58 <SysTick_Config+0x44>)
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	3a01      	subs	r2, #1
 8004f32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f34:	2301      	movs	r3, #1
 8004f36:	425b      	negs	r3, r3
 8004f38:	2103      	movs	r1, #3
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f7ff ff7c 	bl	8004e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <SysTick_Config+0x44>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f46:	4b04      	ldr	r3, [pc, #16]	@ (8004f58 <SysTick_Config+0x44>)
 8004f48:	2207      	movs	r2, #7
 8004f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b002      	add	sp, #8
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	e000e010 	.word	0xe000e010

08004f5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	210f      	movs	r1, #15
 8004f68:	187b      	adds	r3, r7, r1
 8004f6a:	1c02      	adds	r2, r0, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	b25b      	sxtb	r3, r3
 8004f76:	0011      	movs	r1, r2
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f7ff ff5d 	bl	8004e38 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b004      	add	sp, #16
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	0002      	movs	r2, r0
 8004f8e:	1dfb      	adds	r3, r7, #7
 8004f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	b25b      	sxtb	r3, r3
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff ff33 	bl	8004e04 <__NVIC_EnableIRQ>
}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b002      	add	sp, #8
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7ff ffaf 	bl	8004f14 <SysTick_Config>
 8004fb6:	0003      	movs	r3, r0
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2221      	movs	r2, #33	@ 0x21
 8004fcc:	5c9b      	ldrb	r3, [r3, r2]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d008      	beq.n	8004fe6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	2100      	movs	r1, #0
 8004fe0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e020      	b.n	8005028 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	210e      	movs	r1, #14
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	438a      	bics	r2, r1
 8005004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500e:	2101      	movs	r1, #1
 8005010:	4091      	lsls	r1, r2
 8005012:	000a      	movs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2221      	movs	r2, #33	@ 0x21
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	2100      	movs	r1, #0
 8005024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b002      	add	sp, #8
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	210f      	movs	r1, #15
 800503a:	187b      	adds	r3, r7, r1
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2221      	movs	r2, #33	@ 0x21
 8005044:	5c9b      	ldrb	r3, [r3, r2]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d006      	beq.n	800505a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2204      	movs	r2, #4
 8005050:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8005052:	187b      	adds	r3, r7, r1
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e028      	b.n	80050ac <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	210e      	movs	r1, #14
 8005066:	438a      	bics	r2, r1
 8005068:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2101      	movs	r1, #1
 8005076:	438a      	bics	r2, r1
 8005078:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005082:	2101      	movs	r1, #1
 8005084:	4091      	lsls	r1, r2
 8005086:	000a      	movs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2221      	movs	r2, #33	@ 0x21
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	2100      	movs	r1, #0
 8005098:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	0010      	movs	r0, r2
 80050aa:	4798      	blx	r3
    }
  }
  return status;
 80050ac:	230f      	movs	r3, #15
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	781b      	ldrb	r3, [r3, #0]
}
 80050b2:	0018      	movs	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b004      	add	sp, #16
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ca:	e14f      	b.n	800536c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2101      	movs	r1, #1
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4091      	lsls	r1, r2
 80050d6:	000a      	movs	r2, r1
 80050d8:	4013      	ands	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d100      	bne.n	80050e4 <HAL_GPIO_Init+0x28>
 80050e2:	e140      	b.n	8005366 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2203      	movs	r2, #3
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d005      	beq.n	80050fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2203      	movs	r2, #3
 80050f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d130      	bne.n	800515e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	2203      	movs	r2, #3
 8005108:	409a      	lsls	r2, r3
 800510a:	0013      	movs	r3, r2
 800510c:	43da      	mvns	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	409a      	lsls	r2, r3
 800511e:	0013      	movs	r3, r2
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005132:	2201      	movs	r2, #1
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	409a      	lsls	r2, r3
 8005138:	0013      	movs	r3, r2
 800513a:	43da      	mvns	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4013      	ands	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	091b      	lsrs	r3, r3, #4
 8005148:	2201      	movs	r2, #1
 800514a:	401a      	ands	r2, r3
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	409a      	lsls	r2, r3
 8005150:	0013      	movs	r3, r2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2203      	movs	r2, #3
 8005164:	4013      	ands	r3, r2
 8005166:	2b03      	cmp	r3, #3
 8005168:	d017      	beq.n	800519a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	2203      	movs	r2, #3
 8005176:	409a      	lsls	r2, r3
 8005178:	0013      	movs	r3, r2
 800517a:	43da      	mvns	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	0013      	movs	r3, r2
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2203      	movs	r2, #3
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d123      	bne.n	80051ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	08da      	lsrs	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3208      	adds	r2, #8
 80051ae:	0092      	lsls	r2, r2, #2
 80051b0:	58d3      	ldr	r3, [r2, r3]
 80051b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2207      	movs	r2, #7
 80051b8:	4013      	ands	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	220f      	movs	r2, #15
 80051be:	409a      	lsls	r2, r3
 80051c0:	0013      	movs	r3, r2
 80051c2:	43da      	mvns	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4013      	ands	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2107      	movs	r1, #7
 80051d2:	400b      	ands	r3, r1
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	409a      	lsls	r2, r3
 80051d8:	0013      	movs	r3, r2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	08da      	lsrs	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3208      	adds	r2, #8
 80051e8:	0092      	lsls	r2, r2, #2
 80051ea:	6939      	ldr	r1, [r7, #16]
 80051ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	2203      	movs	r2, #3
 80051fa:	409a      	lsls	r2, r3
 80051fc:	0013      	movs	r3, r2
 80051fe:	43da      	mvns	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4013      	ands	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2203      	movs	r2, #3
 800520c:	401a      	ands	r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	409a      	lsls	r2, r3
 8005214:	0013      	movs	r3, r2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	23c0      	movs	r3, #192	@ 0xc0
 8005228:	029b      	lsls	r3, r3, #10
 800522a:	4013      	ands	r3, r2
 800522c:	d100      	bne.n	8005230 <HAL_GPIO_Init+0x174>
 800522e:	e09a      	b.n	8005366 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005230:	4b54      	ldr	r3, [pc, #336]	@ (8005384 <HAL_GPIO_Init+0x2c8>)
 8005232:	699a      	ldr	r2, [r3, #24]
 8005234:	4b53      	ldr	r3, [pc, #332]	@ (8005384 <HAL_GPIO_Init+0x2c8>)
 8005236:	2101      	movs	r1, #1
 8005238:	430a      	orrs	r2, r1
 800523a:	619a      	str	r2, [r3, #24]
 800523c:	4b51      	ldr	r3, [pc, #324]	@ (8005384 <HAL_GPIO_Init+0x2c8>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2201      	movs	r2, #1
 8005242:	4013      	ands	r3, r2
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005248:	4a4f      	ldr	r2, [pc, #316]	@ (8005388 <HAL_GPIO_Init+0x2cc>)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	089b      	lsrs	r3, r3, #2
 800524e:	3302      	adds	r3, #2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	589b      	ldr	r3, [r3, r2]
 8005254:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2203      	movs	r2, #3
 800525a:	4013      	ands	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	220f      	movs	r2, #15
 8005260:	409a      	lsls	r2, r3
 8005262:	0013      	movs	r3, r2
 8005264:	43da      	mvns	r2, r3
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4013      	ands	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	2390      	movs	r3, #144	@ 0x90
 8005270:	05db      	lsls	r3, r3, #23
 8005272:	429a      	cmp	r2, r3
 8005274:	d013      	beq.n	800529e <HAL_GPIO_Init+0x1e2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a44      	ldr	r2, [pc, #272]	@ (800538c <HAL_GPIO_Init+0x2d0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00d      	beq.n	800529a <HAL_GPIO_Init+0x1de>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a43      	ldr	r2, [pc, #268]	@ (8005390 <HAL_GPIO_Init+0x2d4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <HAL_GPIO_Init+0x1da>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a42      	ldr	r2, [pc, #264]	@ (8005394 <HAL_GPIO_Init+0x2d8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d101      	bne.n	8005292 <HAL_GPIO_Init+0x1d6>
 800528e:	2303      	movs	r3, #3
 8005290:	e006      	b.n	80052a0 <HAL_GPIO_Init+0x1e4>
 8005292:	2305      	movs	r3, #5
 8005294:	e004      	b.n	80052a0 <HAL_GPIO_Init+0x1e4>
 8005296:	2302      	movs	r3, #2
 8005298:	e002      	b.n	80052a0 <HAL_GPIO_Init+0x1e4>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_GPIO_Init+0x1e4>
 800529e:	2300      	movs	r3, #0
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	2103      	movs	r1, #3
 80052a4:	400a      	ands	r2, r1
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	4093      	lsls	r3, r2
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052b0:	4935      	ldr	r1, [pc, #212]	@ (8005388 <HAL_GPIO_Init+0x2cc>)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	089b      	lsrs	r3, r3, #2
 80052b6:	3302      	adds	r3, #2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052be:	4b36      	ldr	r3, [pc, #216]	@ (8005398 <HAL_GPIO_Init+0x2dc>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	43da      	mvns	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4013      	ands	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	2380      	movs	r3, #128	@ 0x80
 80052d4:	035b      	lsls	r3, r3, #13
 80052d6:	4013      	ands	r3, r2
 80052d8:	d003      	beq.n	80052e2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005398 <HAL_GPIO_Init+0x2dc>)
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80052e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005398 <HAL_GPIO_Init+0x2dc>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	43da      	mvns	r2, r3
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4013      	ands	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	039b      	lsls	r3, r3, #14
 8005300:	4013      	ands	r3, r2
 8005302:	d003      	beq.n	800530c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800530c:	4b22      	ldr	r3, [pc, #136]	@ (8005398 <HAL_GPIO_Init+0x2dc>)
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005312:	4b21      	ldr	r3, [pc, #132]	@ (8005398 <HAL_GPIO_Init+0x2dc>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	43da      	mvns	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4013      	ands	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	2380      	movs	r3, #128	@ 0x80
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	4013      	ands	r3, r2
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005336:	4b18      	ldr	r3, [pc, #96]	@ (8005398 <HAL_GPIO_Init+0x2dc>)
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800533c:	4b16      	ldr	r3, [pc, #88]	@ (8005398 <HAL_GPIO_Init+0x2dc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	43da      	mvns	r2, r3
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4013      	ands	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	2380      	movs	r3, #128	@ 0x80
 8005352:	025b      	lsls	r3, r3, #9
 8005354:	4013      	ands	r3, r2
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005360:	4b0d      	ldr	r3, [pc, #52]	@ (8005398 <HAL_GPIO_Init+0x2dc>)
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	3301      	adds	r3, #1
 800536a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	40da      	lsrs	r2, r3
 8005374:	1e13      	subs	r3, r2, #0
 8005376:	d000      	beq.n	800537a <HAL_GPIO_Init+0x2be>
 8005378:	e6a8      	b.n	80050cc <HAL_GPIO_Init+0x10>
  } 
}
 800537a:	46c0      	nop			@ (mov r8, r8)
 800537c:	46c0      	nop			@ (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	b006      	add	sp, #24
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40021000 	.word	0x40021000
 8005388:	40010000 	.word	0x40010000
 800538c:	48000400 	.word	0x48000400
 8005390:	48000800 	.word	0x48000800
 8005394:	48000c00 	.word	0x48000c00
 8005398:	40010400 	.word	0x40010400

0800539c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	000a      	movs	r2, r1
 80053a6:	1cbb      	adds	r3, r7, #2
 80053a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	1cba      	adds	r2, r7, #2
 80053b0:	8812      	ldrh	r2, [r2, #0]
 80053b2:	4013      	ands	r3, r2
 80053b4:	d004      	beq.n	80053c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80053b6:	230f      	movs	r3, #15
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	2201      	movs	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e003      	b.n	80053c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053c0:	230f      	movs	r3, #15
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80053c8:	230f      	movs	r3, #15
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	781b      	ldrb	r3, [r3, #0]
  }
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b004      	add	sp, #16
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	0008      	movs	r0, r1
 80053e0:	0011      	movs	r1, r2
 80053e2:	1cbb      	adds	r3, r7, #2
 80053e4:	1c02      	adds	r2, r0, #0
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	1c7b      	adds	r3, r7, #1
 80053ea:	1c0a      	adds	r2, r1, #0
 80053ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ee:	1c7b      	adds	r3, r7, #1
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053f6:	1cbb      	adds	r3, r7, #2
 80053f8:	881a      	ldrh	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053fe:	e003      	b.n	8005408 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005400:	1cbb      	adds	r3, r7, #2
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005408:	46c0      	nop			@ (mov r8, r8)
 800540a:	46bd      	mov	sp, r7
 800540c:	b002      	add	sp, #8
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e08f      	b.n	8005542 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2241      	movs	r2, #65	@ 0x41
 8005426:	5c9b      	ldrb	r3, [r3, r2]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d107      	bne.n	800543e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2240      	movs	r2, #64	@ 0x40
 8005432:	2100      	movs	r1, #0
 8005434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	0018      	movs	r0, r3
 800543a:	f7fe ffd5 	bl	80043e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2241      	movs	r2, #65	@ 0x41
 8005442:	2124      	movs	r1, #36	@ 0x24
 8005444:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2101      	movs	r1, #1
 8005452:	438a      	bics	r2, r1
 8005454:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	493b      	ldr	r1, [pc, #236]	@ (800554c <HAL_I2C_Init+0x13c>)
 8005460:	400a      	ands	r2, r1
 8005462:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4938      	ldr	r1, [pc, #224]	@ (8005550 <HAL_I2C_Init+0x140>)
 8005470:	400a      	ands	r2, r1
 8005472:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d108      	bne.n	800548e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2180      	movs	r1, #128	@ 0x80
 8005486:	0209      	lsls	r1, r1, #8
 8005488:	430a      	orrs	r2, r1
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	e007      	b.n	800549e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2184      	movs	r1, #132	@ 0x84
 8005498:	0209      	lsls	r1, r1, #8
 800549a:	430a      	orrs	r2, r1
 800549c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d109      	bne.n	80054ba <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2180      	movs	r1, #128	@ 0x80
 80054b2:	0109      	lsls	r1, r1, #4
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	e007      	b.n	80054ca <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4923      	ldr	r1, [pc, #140]	@ (8005554 <HAL_I2C_Init+0x144>)
 80054c6:	400a      	ands	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4920      	ldr	r1, [pc, #128]	@ (8005558 <HAL_I2C_Init+0x148>)
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	491a      	ldr	r1, [pc, #104]	@ (8005550 <HAL_I2C_Init+0x140>)
 80054e6:	400a      	ands	r2, r1
 80054e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2101      	movs	r1, #1
 8005520:	430a      	orrs	r2, r1
 8005522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2241      	movs	r2, #65	@ 0x41
 800552e:	2120      	movs	r1, #32
 8005530:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2242      	movs	r2, #66	@ 0x42
 800553c:	2100      	movs	r1, #0
 800553e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b002      	add	sp, #8
 8005548:	bd80      	pop	{r7, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	f0ffffff 	.word	0xf0ffffff
 8005550:	ffff7fff 	.word	0xffff7fff
 8005554:	fffff7ff 	.word	0xfffff7ff
 8005558:	02008000 	.word	0x02008000

0800555c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b089      	sub	sp, #36	@ 0x24
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	000c      	movs	r4, r1
 8005566:	0010      	movs	r0, r2
 8005568:	0019      	movs	r1, r3
 800556a:	230a      	movs	r3, #10
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	1c22      	adds	r2, r4, #0
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	2308      	movs	r3, #8
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	1c02      	adds	r2, r0, #0
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	1dbb      	adds	r3, r7, #6
 800557c:	1c0a      	adds	r2, r1, #0
 800557e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2241      	movs	r2, #65	@ 0x41
 8005584:	5c9b      	ldrb	r3, [r3, r2]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b20      	cmp	r3, #32
 800558a:	d000      	beq.n	800558e <HAL_I2C_Mem_Write+0x32>
 800558c:	e10c      	b.n	80057a8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800558e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <HAL_I2C_Mem_Write+0x42>
 8005594:	232c      	movs	r3, #44	@ 0x2c
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d105      	bne.n	80055aa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2280      	movs	r2, #128	@ 0x80
 80055a2:	0092      	lsls	r2, r2, #2
 80055a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e0ff      	b.n	80057aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2240      	movs	r2, #64	@ 0x40
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_I2C_Mem_Write+0x5c>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e0f8      	b.n	80057aa <HAL_I2C_Mem_Write+0x24e>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2240      	movs	r2, #64	@ 0x40
 80055bc:	2101      	movs	r1, #1
 80055be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055c0:	f7ff f9bc 	bl	800493c <HAL_GetTick>
 80055c4:	0003      	movs	r3, r0
 80055c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	0219      	lsls	r1, r3, #8
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	2319      	movs	r3, #25
 80055d4:	2201      	movs	r2, #1
 80055d6:	f000 fb0b 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 80055da:	1e03      	subs	r3, r0, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e0e3      	b.n	80057aa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2241      	movs	r2, #65	@ 0x41
 80055e6:	2121      	movs	r1, #33	@ 0x21
 80055e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2242      	movs	r2, #66	@ 0x42
 80055ee:	2140      	movs	r1, #64	@ 0x40
 80055f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	222c      	movs	r2, #44	@ 0x2c
 8005602:	18ba      	adds	r2, r7, r2
 8005604:	8812      	ldrh	r2, [r2, #0]
 8005606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800560e:	1dbb      	adds	r3, r7, #6
 8005610:	881c      	ldrh	r4, [r3, #0]
 8005612:	2308      	movs	r3, #8
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	881a      	ldrh	r2, [r3, #0]
 8005618:	230a      	movs	r3, #10
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	8819      	ldrh	r1, [r3, #0]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	0023      	movs	r3, r4
 800562a:	f000 f9f9 	bl	8005a20 <I2C_RequestMemoryWrite>
 800562e:	1e03      	subs	r3, r0, #0
 8005630:	d005      	beq.n	800563e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2240      	movs	r2, #64	@ 0x40
 8005636:	2100      	movs	r1, #0
 8005638:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e0b5      	b.n	80057aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	2bff      	cmp	r3, #255	@ 0xff
 8005646:	d911      	bls.n	800566c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	22ff      	movs	r2, #255	@ 0xff
 800564c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005652:	b2da      	uxtb	r2, r3
 8005654:	2380      	movs	r3, #128	@ 0x80
 8005656:	045c      	lsls	r4, r3, #17
 8005658:	230a      	movs	r3, #10
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	8819      	ldrh	r1, [r3, #0]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	2300      	movs	r3, #0
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	0023      	movs	r3, r4
 8005666:	f000 fc9d 	bl	8005fa4 <I2C_TransferConfig>
 800566a:	e012      	b.n	8005692 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567a:	b2da      	uxtb	r2, r3
 800567c:	2380      	movs	r3, #128	@ 0x80
 800567e:	049c      	lsls	r4, r3, #18
 8005680:	230a      	movs	r3, #10
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	8819      	ldrh	r1, [r3, #0]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	2300      	movs	r3, #0
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	0023      	movs	r3, r4
 800568e:	f000 fc89 	bl	8005fa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	0018      	movs	r0, r3
 800569a:	f000 fb01 	bl	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout>
 800569e:	1e03      	subs	r3, r0, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e081      	b.n	80057aa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056aa:	781a      	ldrb	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d03a      	beq.n	8005756 <HAL_I2C_Mem_Write+0x1fa>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d136      	bne.n	8005756 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	0013      	movs	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	2180      	movs	r1, #128	@ 0x80
 80056f6:	f000 fa7b 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 80056fa:	1e03      	subs	r3, r0, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e053      	b.n	80057aa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	2bff      	cmp	r3, #255	@ 0xff
 800570a:	d911      	bls.n	8005730 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	22ff      	movs	r2, #255	@ 0xff
 8005710:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005716:	b2da      	uxtb	r2, r3
 8005718:	2380      	movs	r3, #128	@ 0x80
 800571a:	045c      	lsls	r4, r3, #17
 800571c:	230a      	movs	r3, #10
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	8819      	ldrh	r1, [r3, #0]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	2300      	movs	r3, #0
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	0023      	movs	r3, r4
 800572a:	f000 fc3b 	bl	8005fa4 <I2C_TransferConfig>
 800572e:	e012      	b.n	8005756 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573e:	b2da      	uxtb	r2, r3
 8005740:	2380      	movs	r3, #128	@ 0x80
 8005742:	049c      	lsls	r4, r3, #18
 8005744:	230a      	movs	r3, #10
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	8819      	ldrh	r1, [r3, #0]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	2300      	movs	r3, #0
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	0023      	movs	r3, r4
 8005752:	f000 fc27 	bl	8005fa4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d198      	bne.n	8005692 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	0018      	movs	r0, r3
 8005768:	f000 fae0 	bl	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout>
 800576c:	1e03      	subs	r3, r0, #0
 800576e:	d001      	beq.n	8005774 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e01a      	b.n	80057aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2220      	movs	r2, #32
 800577a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	490b      	ldr	r1, [pc, #44]	@ (80057b4 <HAL_I2C_Mem_Write+0x258>)
 8005788:	400a      	ands	r2, r1
 800578a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2241      	movs	r2, #65	@ 0x41
 8005790:	2120      	movs	r1, #32
 8005792:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2242      	movs	r2, #66	@ 0x42
 8005798:	2100      	movs	r1, #0
 800579a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2240      	movs	r2, #64	@ 0x40
 80057a0:	2100      	movs	r1, #0
 80057a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e000      	b.n	80057aa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
  }
}
 80057aa:	0018      	movs	r0, r3
 80057ac:	46bd      	mov	sp, r7
 80057ae:	b007      	add	sp, #28
 80057b0:	bd90      	pop	{r4, r7, pc}
 80057b2:	46c0      	nop			@ (mov r8, r8)
 80057b4:	fe00e800 	.word	0xfe00e800

080057b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b089      	sub	sp, #36	@ 0x24
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	000c      	movs	r4, r1
 80057c2:	0010      	movs	r0, r2
 80057c4:	0019      	movs	r1, r3
 80057c6:	230a      	movs	r3, #10
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	1c22      	adds	r2, r4, #0
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	2308      	movs	r3, #8
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	1c02      	adds	r2, r0, #0
 80057d4:	801a      	strh	r2, [r3, #0]
 80057d6:	1dbb      	adds	r3, r7, #6
 80057d8:	1c0a      	adds	r2, r1, #0
 80057da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2241      	movs	r2, #65	@ 0x41
 80057e0:	5c9b      	ldrb	r3, [r3, r2]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d000      	beq.n	80057ea <HAL_I2C_Mem_Read+0x32>
 80057e8:	e110      	b.n	8005a0c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <HAL_I2C_Mem_Read+0x42>
 80057f0:	232c      	movs	r3, #44	@ 0x2c
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d105      	bne.n	8005806 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2280      	movs	r2, #128	@ 0x80
 80057fe:	0092      	lsls	r2, r2, #2
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e103      	b.n	8005a0e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2240      	movs	r2, #64	@ 0x40
 800580a:	5c9b      	ldrb	r3, [r3, r2]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_I2C_Mem_Read+0x5c>
 8005810:	2302      	movs	r3, #2
 8005812:	e0fc      	b.n	8005a0e <HAL_I2C_Mem_Read+0x256>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2240      	movs	r2, #64	@ 0x40
 8005818:	2101      	movs	r1, #1
 800581a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800581c:	f7ff f88e 	bl	800493c <HAL_GetTick>
 8005820:	0003      	movs	r3, r0
 8005822:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005824:	2380      	movs	r3, #128	@ 0x80
 8005826:	0219      	lsls	r1, r3, #8
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2319      	movs	r3, #25
 8005830:	2201      	movs	r2, #1
 8005832:	f000 f9dd 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005836:	1e03      	subs	r3, r0, #0
 8005838:	d001      	beq.n	800583e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e0e7      	b.n	8005a0e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2241      	movs	r2, #65	@ 0x41
 8005842:	2122      	movs	r1, #34	@ 0x22
 8005844:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2242      	movs	r2, #66	@ 0x42
 800584a:	2140      	movs	r1, #64	@ 0x40
 800584c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005858:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	222c      	movs	r2, #44	@ 0x2c
 800585e:	18ba      	adds	r2, r7, r2
 8005860:	8812      	ldrh	r2, [r2, #0]
 8005862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800586a:	1dbb      	adds	r3, r7, #6
 800586c:	881c      	ldrh	r4, [r3, #0]
 800586e:	2308      	movs	r3, #8
 8005870:	18fb      	adds	r3, r7, r3
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	230a      	movs	r3, #10
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	8819      	ldrh	r1, [r3, #0]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	0023      	movs	r3, r4
 8005886:	f000 f92f 	bl	8005ae8 <I2C_RequestMemoryRead>
 800588a:	1e03      	subs	r3, r0, #0
 800588c:	d005      	beq.n	800589a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2240      	movs	r2, #64	@ 0x40
 8005892:	2100      	movs	r1, #0
 8005894:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e0b9      	b.n	8005a0e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2bff      	cmp	r3, #255	@ 0xff
 80058a2:	d911      	bls.n	80058c8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	2380      	movs	r3, #128	@ 0x80
 80058b2:	045c      	lsls	r4, r3, #17
 80058b4:	230a      	movs	r3, #10
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	8819      	ldrh	r1, [r3, #0]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	4b56      	ldr	r3, [pc, #344]	@ (8005a18 <HAL_I2C_Mem_Read+0x260>)
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	0023      	movs	r3, r4
 80058c2:	f000 fb6f 	bl	8005fa4 <I2C_TransferConfig>
 80058c6:	e012      	b.n	80058ee <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	2380      	movs	r3, #128	@ 0x80
 80058da:	049c      	lsls	r4, r3, #18
 80058dc:	230a      	movs	r3, #10
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	8819      	ldrh	r1, [r3, #0]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	4b4c      	ldr	r3, [pc, #304]	@ (8005a18 <HAL_I2C_Mem_Read+0x260>)
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	0023      	movs	r3, r4
 80058ea:	f000 fb5b 	bl	8005fa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80058ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	0013      	movs	r3, r2
 80058f8:	2200      	movs	r2, #0
 80058fa:	2104      	movs	r1, #4
 80058fc:	f000 f978 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005900:	1e03      	subs	r3, r0, #0
 8005902:	d001      	beq.n	8005908 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e082      	b.n	8005a0e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d03a      	beq.n	80059ba <HAL_I2C_Mem_Read+0x202>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	d136      	bne.n	80059ba <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800594c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	0013      	movs	r3, r2
 8005956:	2200      	movs	r2, #0
 8005958:	2180      	movs	r1, #128	@ 0x80
 800595a:	f000 f949 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 800595e:	1e03      	subs	r3, r0, #0
 8005960:	d001      	beq.n	8005966 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e053      	b.n	8005a0e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	2bff      	cmp	r3, #255	@ 0xff
 800596e:	d911      	bls.n	8005994 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597a:	b2da      	uxtb	r2, r3
 800597c:	2380      	movs	r3, #128	@ 0x80
 800597e:	045c      	lsls	r4, r3, #17
 8005980:	230a      	movs	r3, #10
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	8819      	ldrh	r1, [r3, #0]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	2300      	movs	r3, #0
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	0023      	movs	r3, r4
 800598e:	f000 fb09 	bl	8005fa4 <I2C_TransferConfig>
 8005992:	e012      	b.n	80059ba <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	2380      	movs	r3, #128	@ 0x80
 80059a6:	049c      	lsls	r4, r3, #18
 80059a8:	230a      	movs	r3, #10
 80059aa:	18fb      	adds	r3, r7, r3
 80059ac:	8819      	ldrh	r1, [r3, #0]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	2300      	movs	r3, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	0023      	movs	r3, r4
 80059b6:	f000 faf5 	bl	8005fa4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d194      	bne.n	80058ee <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	0018      	movs	r0, r3
 80059cc:	f000 f9ae 	bl	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80059d0:	1e03      	subs	r3, r0, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e01a      	b.n	8005a0e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2220      	movs	r2, #32
 80059de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	490c      	ldr	r1, [pc, #48]	@ (8005a1c <HAL_I2C_Mem_Read+0x264>)
 80059ec:	400a      	ands	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2241      	movs	r2, #65	@ 0x41
 80059f4:	2120      	movs	r1, #32
 80059f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2242      	movs	r2, #66	@ 0x42
 80059fc:	2100      	movs	r1, #0
 80059fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2240      	movs	r2, #64	@ 0x40
 8005a04:	2100      	movs	r1, #0
 8005a06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b007      	add	sp, #28
 8005a14:	bd90      	pop	{r4, r7, pc}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	80002400 	.word	0x80002400
 8005a1c:	fe00e800 	.word	0xfe00e800

08005a20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005a20:	b5b0      	push	{r4, r5, r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	000c      	movs	r4, r1
 8005a2a:	0010      	movs	r0, r2
 8005a2c:	0019      	movs	r1, r3
 8005a2e:	250a      	movs	r5, #10
 8005a30:	197b      	adds	r3, r7, r5
 8005a32:	1c22      	adds	r2, r4, #0
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	2308      	movs	r3, #8
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	1c02      	adds	r2, r0, #0
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	1dbb      	adds	r3, r7, #6
 8005a40:	1c0a      	adds	r2, r1, #0
 8005a42:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a44:	1dbb      	adds	r3, r7, #6
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	045c      	lsls	r4, r3, #17
 8005a4e:	197b      	adds	r3, r7, r5
 8005a50:	8819      	ldrh	r1, [r3, #0]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	4b23      	ldr	r3, [pc, #140]	@ (8005ae4 <I2C_RequestMemoryWrite+0xc4>)
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	0023      	movs	r3, r4
 8005a5a:	f000 faa3 	bl	8005fa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a60:	6a39      	ldr	r1, [r7, #32]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	0018      	movs	r0, r3
 8005a66:	f000 f91b 	bl	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a6a:	1e03      	subs	r3, r0, #0
 8005a6c:	d001      	beq.n	8005a72 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e033      	b.n	8005ada <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a72:	1dbb      	adds	r3, r7, #6
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d107      	bne.n	8005a8a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a88:	e019      	b.n	8005abe <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a9e:	6a39      	ldr	r1, [r7, #32]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f000 f8fc 	bl	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005aa8:	1e03      	subs	r3, r0, #0
 8005aaa:	d001      	beq.n	8005ab0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e014      	b.n	8005ada <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005abe:	6a3a      	ldr	r2, [r7, #32]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	0013      	movs	r3, r2
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2180      	movs	r1, #128	@ 0x80
 8005acc:	f000 f890 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005ad0:	1e03      	subs	r3, r0, #0
 8005ad2:	d001      	beq.n	8005ad8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b004      	add	sp, #16
 8005ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ae2:	46c0      	nop			@ (mov r8, r8)
 8005ae4:	80002000 	.word	0x80002000

08005ae8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ae8:	b5b0      	push	{r4, r5, r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	000c      	movs	r4, r1
 8005af2:	0010      	movs	r0, r2
 8005af4:	0019      	movs	r1, r3
 8005af6:	250a      	movs	r5, #10
 8005af8:	197b      	adds	r3, r7, r5
 8005afa:	1c22      	adds	r2, r4, #0
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	2308      	movs	r3, #8
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	1c02      	adds	r2, r0, #0
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	1dbb      	adds	r3, r7, #6
 8005b08:	1c0a      	adds	r2, r1, #0
 8005b0a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b0c:	1dbb      	adds	r3, r7, #6
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	197b      	adds	r3, r7, r5
 8005b14:	8819      	ldrh	r1, [r3, #0]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	4b23      	ldr	r3, [pc, #140]	@ (8005ba8 <I2C_RequestMemoryRead+0xc0>)
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f000 fa41 	bl	8005fa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b24:	6a39      	ldr	r1, [r7, #32]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f000 f8b9 	bl	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b2e:	1e03      	subs	r3, r0, #0
 8005b30:	d001      	beq.n	8005b36 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e033      	b.n	8005b9e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b36:	1dbb      	adds	r3, r7, #6
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d107      	bne.n	8005b4e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3e:	2308      	movs	r3, #8
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b4c:	e019      	b.n	8005b82 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b4e:	2308      	movs	r3, #8
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b62:	6a39      	ldr	r1, [r7, #32]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	0018      	movs	r0, r3
 8005b68:	f000 f89a 	bl	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b6c:	1e03      	subs	r3, r0, #0
 8005b6e:	d001      	beq.n	8005b74 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e014      	b.n	8005b9e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b74:	2308      	movs	r3, #8
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b82:	6a3a      	ldr	r2, [r7, #32]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	0013      	movs	r3, r2
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2140      	movs	r1, #64	@ 0x40
 8005b90:	f000 f82e 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005b94:	1e03      	subs	r3, r0, #0
 8005b96:	d001      	beq.n	8005b9c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b004      	add	sp, #16
 8005ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	80002000 	.word	0x80002000

08005bac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d103      	bne.n	8005bca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d007      	beq.n	8005be8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2101      	movs	r1, #1
 8005be4:	430a      	orrs	r2, r1
 8005be6:	619a      	str	r2, [r3, #24]
  }
}
 8005be8:	46c0      	nop			@ (mov r8, r8)
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b002      	add	sp, #8
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	1dfb      	adds	r3, r7, #7
 8005bfe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c00:	e03a      	b.n	8005c78 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f8d3 	bl	8005db4 <I2C_IsErrorOccurred>
 8005c0e:	1e03      	subs	r3, r0, #0
 8005c10:	d001      	beq.n	8005c16 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e040      	b.n	8005c98 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	d02d      	beq.n	8005c78 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1c:	f7fe fe8e 	bl	800493c <HAL_GetTick>
 8005c20:	0002      	movs	r2, r0
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d302      	bcc.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d122      	bne.n	8005c78 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	425a      	negs	r2, r3
 8005c42:	4153      	adcs	r3, r2
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	001a      	movs	r2, r3
 8005c48:	1dfb      	adds	r3, r7, #7
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d113      	bne.n	8005c78 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c54:	2220      	movs	r2, #32
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2241      	movs	r2, #65	@ 0x41
 8005c60:	2120      	movs	r1, #32
 8005c62:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2242      	movs	r2, #66	@ 0x42
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2240      	movs	r2, #64	@ 0x40
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e00f      	b.n	8005c98 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	4013      	ands	r3, r2
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	425a      	negs	r2, r3
 8005c88:	4153      	adcs	r3, r2
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	001a      	movs	r2, r3
 8005c8e:	1dfb      	adds	r3, r7, #7
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d0b5      	beq.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b004      	add	sp, #16
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cac:	e032      	b.n	8005d14 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 f87d 	bl	8005db4 <I2C_IsErrorOccurred>
 8005cba:	1e03      	subs	r3, r0, #0
 8005cbc:	d001      	beq.n	8005cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e030      	b.n	8005d24 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	d025      	beq.n	8005d14 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc8:	f7fe fe38 	bl	800493c <HAL_GetTick>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11a      	bne.n	8005d14 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d013      	beq.n	8005d14 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2241      	movs	r2, #65	@ 0x41
 8005cfc:	2120      	movs	r1, #32
 8005cfe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2242      	movs	r2, #66	@ 0x42
 8005d04:	2100      	movs	r1, #0
 8005d06:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2240      	movs	r2, #64	@ 0x40
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e007      	b.n	8005d24 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d1c5      	bne.n	8005cae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b004      	add	sp, #16
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d38:	e02f      	b.n	8005d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 f837 	bl	8005db4 <I2C_IsErrorOccurred>
 8005d46:	1e03      	subs	r3, r0, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e02d      	b.n	8005daa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fe fdf5 	bl	800493c <HAL_GetTick>
 8005d52:	0002      	movs	r2, r0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d11a      	bne.n	8005d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d013      	beq.n	8005d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d76:	2220      	movs	r2, #32
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2241      	movs	r2, #65	@ 0x41
 8005d82:	2120      	movs	r1, #32
 8005d84:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2242      	movs	r2, #66	@ 0x42
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2240      	movs	r2, #64	@ 0x40
 8005d92:	2100      	movs	r1, #0
 8005d94:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e007      	b.n	8005daa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2220      	movs	r2, #32
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d1c8      	bne.n	8005d3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	0018      	movs	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b004      	add	sp, #16
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc0:	2327      	movs	r3, #39	@ 0x27
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2210      	movs	r2, #16
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d100      	bne.n	8005de2 <I2C_IsErrorOccurred+0x2e>
 8005de0:	e079      	b.n	8005ed6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2210      	movs	r2, #16
 8005de8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005dea:	e057      	b.n	8005e9c <I2C_IsErrorOccurred+0xe8>
 8005dec:	2227      	movs	r2, #39	@ 0x27
 8005dee:	18bb      	adds	r3, r7, r2
 8005df0:	18ba      	adds	r2, r7, r2
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	d04f      	beq.n	8005e9c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dfc:	f7fe fd9e 	bl	800493c <HAL_GetTick>
 8005e00:	0002      	movs	r2, r0
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d302      	bcc.n	8005e12 <I2C_IsErrorOccurred+0x5e>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d144      	bne.n	8005e9c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	2380      	movs	r3, #128	@ 0x80
 8005e1a:	01db      	lsls	r3, r3, #7
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e20:	2013      	movs	r0, #19
 8005e22:	183b      	adds	r3, r7, r0
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	2142      	movs	r1, #66	@ 0x42
 8005e28:	5c52      	ldrb	r2, [r2, r1]
 8005e2a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	2380      	movs	r3, #128	@ 0x80
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	401a      	ands	r2, r3
 8005e38:	2380      	movs	r3, #128	@ 0x80
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d126      	bne.n	8005e8e <I2C_IsErrorOccurred+0xda>
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	2380      	movs	r3, #128	@ 0x80
 8005e44:	01db      	lsls	r3, r3, #7
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d021      	beq.n	8005e8e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005e4a:	183b      	adds	r3, r7, r0
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d01d      	beq.n	8005e8e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2180      	movs	r1, #128	@ 0x80
 8005e5e:	01c9      	lsls	r1, r1, #7
 8005e60:	430a      	orrs	r2, r1
 8005e62:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e64:	f7fe fd6a 	bl	800493c <HAL_GetTick>
 8005e68:	0003      	movs	r3, r0
 8005e6a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e6c:	e00f      	b.n	8005e8e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e6e:	f7fe fd65 	bl	800493c <HAL_GetTick>
 8005e72:	0002      	movs	r2, r0
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b19      	cmp	r3, #25
 8005e7a:	d908      	bls.n	8005e8e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	4313      	orrs	r3, r2
 8005e82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e84:	2327      	movs	r3, #39	@ 0x27
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	2201      	movs	r2, #1
 8005e8a:	701a      	strb	r2, [r3, #0]

              break;
 8005e8c:	e006      	b.n	8005e9c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	2220      	movs	r2, #32
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d1e8      	bne.n	8005e6e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d004      	beq.n	8005eb4 <I2C_IsErrorOccurred+0x100>
 8005eaa:	2327      	movs	r3, #39	@ 0x27
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d09b      	beq.n	8005dec <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005eb4:	2327      	movs	r3, #39	@ 0x27
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d103      	bne.n	8005ec6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	2204      	movs	r2, #4
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ece:	2327      	movs	r3, #39	@ 0x27
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	2380      	movs	r3, #128	@ 0x80
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d00c      	beq.n	8005f02 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2201      	movs	r2, #1
 8005eec:	4313      	orrs	r3, r2
 8005eee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2280      	movs	r2, #128	@ 0x80
 8005ef6:	0052      	lsls	r2, r2, #1
 8005ef8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005efa:	2327      	movs	r3, #39	@ 0x27
 8005efc:	18fb      	adds	r3, r7, r3
 8005efe:	2201      	movs	r2, #1
 8005f00:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	2380      	movs	r3, #128	@ 0x80
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d00c      	beq.n	8005f26 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2208      	movs	r2, #8
 8005f10:	4313      	orrs	r3, r2
 8005f12:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2280      	movs	r2, #128	@ 0x80
 8005f1a:	00d2      	lsls	r2, r2, #3
 8005f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f1e:	2327      	movs	r3, #39	@ 0x27
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	2380      	movs	r3, #128	@ 0x80
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d00c      	beq.n	8005f4a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	2202      	movs	r2, #2
 8005f34:	4313      	orrs	r3, r2
 8005f36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2280      	movs	r2, #128	@ 0x80
 8005f3e:	0092      	lsls	r2, r2, #2
 8005f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f42:	2327      	movs	r3, #39	@ 0x27
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005f4a:	2327      	movs	r3, #39	@ 0x27
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01d      	beq.n	8005f90 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	0018      	movs	r0, r3
 8005f58:	f7ff fe28 	bl	8005bac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	490e      	ldr	r1, [pc, #56]	@ (8005fa0 <I2C_IsErrorOccurred+0x1ec>)
 8005f68:	400a      	ands	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2241      	movs	r2, #65	@ 0x41
 8005f7c:	2120      	movs	r1, #32
 8005f7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2242      	movs	r2, #66	@ 0x42
 8005f84:	2100      	movs	r1, #0
 8005f86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2240      	movs	r2, #64	@ 0x40
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005f90:	2327      	movs	r3, #39	@ 0x27
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	781b      	ldrb	r3, [r3, #0]
}
 8005f96:	0018      	movs	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	b00a      	add	sp, #40	@ 0x28
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	fe00e800 	.word	0xfe00e800

08005fa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	0008      	movs	r0, r1
 8005fae:	0011      	movs	r1, r2
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	240a      	movs	r4, #10
 8005fb4:	193b      	adds	r3, r7, r4
 8005fb6:	1c02      	adds	r2, r0, #0
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	2009      	movs	r0, #9
 8005fbc:	183b      	adds	r3, r7, r0
 8005fbe:	1c0a      	adds	r2, r1, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fc2:	193b      	adds	r3, r7, r4
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	059b      	lsls	r3, r3, #22
 8005fc8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fca:	183b      	adds	r3, r7, r0
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	0419      	lsls	r1, r3, #16
 8005fd0:	23ff      	movs	r3, #255	@ 0xff
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fd6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fee:	0d51      	lsrs	r1, r2, #21
 8005ff0:	2280      	movs	r2, #128	@ 0x80
 8005ff2:	00d2      	lsls	r2, r2, #3
 8005ff4:	400a      	ands	r2, r1
 8005ff6:	4907      	ldr	r1, [pc, #28]	@ (8006014 <I2C_TransferConfig+0x70>)
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	43d2      	mvns	r2, r2
 8005ffc:	401a      	ands	r2, r3
 8005ffe:	0011      	movs	r1, r2
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	46bd      	mov	sp, r7
 800600e:	b007      	add	sp, #28
 8006010:	bd90      	pop	{r4, r7, pc}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	03ff63ff 	.word	0x03ff63ff

08006018 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2241      	movs	r2, #65	@ 0x41
 8006026:	5c9b      	ldrb	r3, [r3, r2]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b20      	cmp	r3, #32
 800602c:	d138      	bne.n	80060a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2240      	movs	r2, #64	@ 0x40
 8006032:	5c9b      	ldrb	r3, [r3, r2]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006038:	2302      	movs	r3, #2
 800603a:	e032      	b.n	80060a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2240      	movs	r2, #64	@ 0x40
 8006040:	2101      	movs	r1, #1
 8006042:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2241      	movs	r2, #65	@ 0x41
 8006048:	2124      	movs	r1, #36	@ 0x24
 800604a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2101      	movs	r1, #1
 8006058:	438a      	bics	r2, r1
 800605a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4911      	ldr	r1, [pc, #68]	@ (80060ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006068:	400a      	ands	r2, r1
 800606a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6819      	ldr	r1, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2101      	movs	r1, #1
 8006088:	430a      	orrs	r2, r1
 800608a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2241      	movs	r2, #65	@ 0x41
 8006090:	2120      	movs	r1, #32
 8006092:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2240      	movs	r2, #64	@ 0x40
 8006098:	2100      	movs	r1, #0
 800609a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	0018      	movs	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b002      	add	sp, #8
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	46c0      	nop			@ (mov r8, r8)
 80060ac:	ffffefff 	.word	0xffffefff

080060b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2241      	movs	r2, #65	@ 0x41
 80060be:	5c9b      	ldrb	r3, [r3, r2]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d139      	bne.n	800613a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2240      	movs	r2, #64	@ 0x40
 80060ca:	5c9b      	ldrb	r3, [r3, r2]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e033      	b.n	800613c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2240      	movs	r2, #64	@ 0x40
 80060d8:	2101      	movs	r1, #1
 80060da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2241      	movs	r2, #65	@ 0x41
 80060e0:	2124      	movs	r1, #36	@ 0x24
 80060e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2101      	movs	r1, #1
 80060f0:	438a      	bics	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4a11      	ldr	r2, [pc, #68]	@ (8006144 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006100:	4013      	ands	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2101      	movs	r1, #1
 8006122:	430a      	orrs	r2, r1
 8006124:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2241      	movs	r2, #65	@ 0x41
 800612a:	2120      	movs	r1, #32
 800612c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2240      	movs	r2, #64	@ 0x40
 8006132:	2100      	movs	r1, #0
 8006134:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	e000      	b.n	800613c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800613a:	2302      	movs	r3, #2
  }
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b004      	add	sp, #16
 8006142:	bd80      	pop	{r7, pc}
 8006144:	fffff0ff 	.word	0xfffff0ff

08006148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e301      	b.n	800675e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2201      	movs	r2, #1
 8006160:	4013      	ands	r3, r2
 8006162:	d100      	bne.n	8006166 <HAL_RCC_OscConfig+0x1e>
 8006164:	e08d      	b.n	8006282 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006166:	4bc3      	ldr	r3, [pc, #780]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	220c      	movs	r2, #12
 800616c:	4013      	ands	r3, r2
 800616e:	2b04      	cmp	r3, #4
 8006170:	d00e      	beq.n	8006190 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006172:	4bc0      	ldr	r3, [pc, #768]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	220c      	movs	r2, #12
 8006178:	4013      	ands	r3, r2
 800617a:	2b08      	cmp	r3, #8
 800617c:	d116      	bne.n	80061ac <HAL_RCC_OscConfig+0x64>
 800617e:	4bbd      	ldr	r3, [pc, #756]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	2380      	movs	r3, #128	@ 0x80
 8006184:	025b      	lsls	r3, r3, #9
 8006186:	401a      	ands	r2, r3
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	025b      	lsls	r3, r3, #9
 800618c:	429a      	cmp	r2, r3
 800618e:	d10d      	bne.n	80061ac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006190:	4bb8      	ldr	r3, [pc, #736]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	2380      	movs	r3, #128	@ 0x80
 8006196:	029b      	lsls	r3, r3, #10
 8006198:	4013      	ands	r3, r2
 800619a:	d100      	bne.n	800619e <HAL_RCC_OscConfig+0x56>
 800619c:	e070      	b.n	8006280 <HAL_RCC_OscConfig+0x138>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d000      	beq.n	80061a8 <HAL_RCC_OscConfig+0x60>
 80061a6:	e06b      	b.n	8006280 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e2d8      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d107      	bne.n	80061c4 <HAL_RCC_OscConfig+0x7c>
 80061b4:	4baf      	ldr	r3, [pc, #700]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4bae      	ldr	r3, [pc, #696]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80061ba:	2180      	movs	r1, #128	@ 0x80
 80061bc:	0249      	lsls	r1, r1, #9
 80061be:	430a      	orrs	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e02f      	b.n	8006224 <HAL_RCC_OscConfig+0xdc>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10c      	bne.n	80061e6 <HAL_RCC_OscConfig+0x9e>
 80061cc:	4ba9      	ldr	r3, [pc, #676]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4ba8      	ldr	r3, [pc, #672]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80061d2:	49a9      	ldr	r1, [pc, #676]	@ (8006478 <HAL_RCC_OscConfig+0x330>)
 80061d4:	400a      	ands	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	4ba6      	ldr	r3, [pc, #664]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	4ba5      	ldr	r3, [pc, #660]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80061de:	49a7      	ldr	r1, [pc, #668]	@ (800647c <HAL_RCC_OscConfig+0x334>)
 80061e0:	400a      	ands	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e01e      	b.n	8006224 <HAL_RCC_OscConfig+0xdc>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	d10e      	bne.n	800620c <HAL_RCC_OscConfig+0xc4>
 80061ee:	4ba1      	ldr	r3, [pc, #644]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4ba0      	ldr	r3, [pc, #640]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80061f4:	2180      	movs	r1, #128	@ 0x80
 80061f6:	02c9      	lsls	r1, r1, #11
 80061f8:	430a      	orrs	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	4b9d      	ldr	r3, [pc, #628]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	4b9c      	ldr	r3, [pc, #624]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006202:	2180      	movs	r1, #128	@ 0x80
 8006204:	0249      	lsls	r1, r1, #9
 8006206:	430a      	orrs	r2, r1
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e00b      	b.n	8006224 <HAL_RCC_OscConfig+0xdc>
 800620c:	4b99      	ldr	r3, [pc, #612]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	4b98      	ldr	r3, [pc, #608]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006212:	4999      	ldr	r1, [pc, #612]	@ (8006478 <HAL_RCC_OscConfig+0x330>)
 8006214:	400a      	ands	r2, r1
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	4b96      	ldr	r3, [pc, #600]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4b95      	ldr	r3, [pc, #596]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800621e:	4997      	ldr	r1, [pc, #604]	@ (800647c <HAL_RCC_OscConfig+0x334>)
 8006220:	400a      	ands	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d014      	beq.n	8006256 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622c:	f7fe fb86 	bl	800493c <HAL_GetTick>
 8006230:	0003      	movs	r3, r0
 8006232:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006236:	f7fe fb81 	bl	800493c <HAL_GetTick>
 800623a:	0002      	movs	r2, r0
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b64      	cmp	r3, #100	@ 0x64
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e28a      	b.n	800675e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006248:	4b8a      	ldr	r3, [pc, #552]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	2380      	movs	r3, #128	@ 0x80
 800624e:	029b      	lsls	r3, r3, #10
 8006250:	4013      	ands	r3, r2
 8006252:	d0f0      	beq.n	8006236 <HAL_RCC_OscConfig+0xee>
 8006254:	e015      	b.n	8006282 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006256:	f7fe fb71 	bl	800493c <HAL_GetTick>
 800625a:	0003      	movs	r3, r0
 800625c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006260:	f7fe fb6c 	bl	800493c <HAL_GetTick>
 8006264:	0002      	movs	r2, r0
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b64      	cmp	r3, #100	@ 0x64
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e275      	b.n	800675e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006272:	4b80      	ldr	r3, [pc, #512]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	2380      	movs	r3, #128	@ 0x80
 8006278:	029b      	lsls	r3, r3, #10
 800627a:	4013      	ands	r3, r2
 800627c:	d1f0      	bne.n	8006260 <HAL_RCC_OscConfig+0x118>
 800627e:	e000      	b.n	8006282 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006280:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2202      	movs	r2, #2
 8006288:	4013      	ands	r3, r2
 800628a:	d100      	bne.n	800628e <HAL_RCC_OscConfig+0x146>
 800628c:	e069      	b.n	8006362 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800628e:	4b79      	ldr	r3, [pc, #484]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	220c      	movs	r2, #12
 8006294:	4013      	ands	r3, r2
 8006296:	d00b      	beq.n	80062b0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006298:	4b76      	ldr	r3, [pc, #472]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	220c      	movs	r2, #12
 800629e:	4013      	ands	r3, r2
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d11c      	bne.n	80062de <HAL_RCC_OscConfig+0x196>
 80062a4:	4b73      	ldr	r3, [pc, #460]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	2380      	movs	r3, #128	@ 0x80
 80062aa:	025b      	lsls	r3, r3, #9
 80062ac:	4013      	ands	r3, r2
 80062ae:	d116      	bne.n	80062de <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062b0:	4b70      	ldr	r3, [pc, #448]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2202      	movs	r2, #2
 80062b6:	4013      	ands	r3, r2
 80062b8:	d005      	beq.n	80062c6 <HAL_RCC_OscConfig+0x17e>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d001      	beq.n	80062c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e24b      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c6:	4b6b      	ldr	r3, [pc, #428]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	22f8      	movs	r2, #248	@ 0xf8
 80062cc:	4393      	bics	r3, r2
 80062ce:	0019      	movs	r1, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	00da      	lsls	r2, r3, #3
 80062d6:	4b67      	ldr	r3, [pc, #412]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80062d8:	430a      	orrs	r2, r1
 80062da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062dc:	e041      	b.n	8006362 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d024      	beq.n	8006330 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062e6:	4b63      	ldr	r3, [pc, #396]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b62      	ldr	r3, [pc, #392]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80062ec:	2101      	movs	r1, #1
 80062ee:	430a      	orrs	r2, r1
 80062f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f2:	f7fe fb23 	bl	800493c <HAL_GetTick>
 80062f6:	0003      	movs	r3, r0
 80062f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062fc:	f7fe fb1e 	bl	800493c <HAL_GetTick>
 8006300:	0002      	movs	r2, r0
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e227      	b.n	800675e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630e:	4b59      	ldr	r3, [pc, #356]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2202      	movs	r2, #2
 8006314:	4013      	ands	r3, r2
 8006316:	d0f1      	beq.n	80062fc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006318:	4b56      	ldr	r3, [pc, #344]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	22f8      	movs	r2, #248	@ 0xf8
 800631e:	4393      	bics	r3, r2
 8006320:	0019      	movs	r1, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	00da      	lsls	r2, r3, #3
 8006328:	4b52      	ldr	r3, [pc, #328]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800632a:	430a      	orrs	r2, r1
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e018      	b.n	8006362 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006330:	4b50      	ldr	r3, [pc, #320]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b4f      	ldr	r3, [pc, #316]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006336:	2101      	movs	r1, #1
 8006338:	438a      	bics	r2, r1
 800633a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633c:	f7fe fafe 	bl	800493c <HAL_GetTick>
 8006340:	0003      	movs	r3, r0
 8006342:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006344:	e008      	b.n	8006358 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006346:	f7fe faf9 	bl	800493c <HAL_GetTick>
 800634a:	0002      	movs	r2, r0
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e202      	b.n	800675e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006358:	4b46      	ldr	r3, [pc, #280]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2202      	movs	r2, #2
 800635e:	4013      	ands	r3, r2
 8006360:	d1f1      	bne.n	8006346 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2208      	movs	r2, #8
 8006368:	4013      	ands	r3, r2
 800636a:	d036      	beq.n	80063da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d019      	beq.n	80063a8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006374:	4b3f      	ldr	r3, [pc, #252]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006376:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006378:	4b3e      	ldr	r3, [pc, #248]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800637a:	2101      	movs	r1, #1
 800637c:	430a      	orrs	r2, r1
 800637e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006380:	f7fe fadc 	bl	800493c <HAL_GetTick>
 8006384:	0003      	movs	r3, r0
 8006386:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800638a:	f7fe fad7 	bl	800493c <HAL_GetTick>
 800638e:	0002      	movs	r2, r0
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e1e0      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800639c:	4b35      	ldr	r3, [pc, #212]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	2202      	movs	r2, #2
 80063a2:	4013      	ands	r3, r2
 80063a4:	d0f1      	beq.n	800638a <HAL_RCC_OscConfig+0x242>
 80063a6:	e018      	b.n	80063da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a8:	4b32      	ldr	r3, [pc, #200]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80063aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063ac:	4b31      	ldr	r3, [pc, #196]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80063ae:	2101      	movs	r1, #1
 80063b0:	438a      	bics	r2, r1
 80063b2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b4:	f7fe fac2 	bl	800493c <HAL_GetTick>
 80063b8:	0003      	movs	r3, r0
 80063ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063be:	f7fe fabd 	bl	800493c <HAL_GetTick>
 80063c2:	0002      	movs	r2, r0
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e1c6      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d0:	4b28      	ldr	r3, [pc, #160]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	2202      	movs	r2, #2
 80063d6:	4013      	ands	r3, r2
 80063d8:	d1f1      	bne.n	80063be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2204      	movs	r2, #4
 80063e0:	4013      	ands	r3, r2
 80063e2:	d100      	bne.n	80063e6 <HAL_RCC_OscConfig+0x29e>
 80063e4:	e0b4      	b.n	8006550 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e6:	201f      	movs	r0, #31
 80063e8:	183b      	adds	r3, r7, r0
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ee:	4b21      	ldr	r3, [pc, #132]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80063f0:	69da      	ldr	r2, [r3, #28]
 80063f2:	2380      	movs	r3, #128	@ 0x80
 80063f4:	055b      	lsls	r3, r3, #21
 80063f6:	4013      	ands	r3, r2
 80063f8:	d110      	bne.n	800641c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 80063fc:	69da      	ldr	r2, [r3, #28]
 80063fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006400:	2180      	movs	r1, #128	@ 0x80
 8006402:	0549      	lsls	r1, r1, #21
 8006404:	430a      	orrs	r2, r1
 8006406:	61da      	str	r2, [r3, #28]
 8006408:	4b1a      	ldr	r3, [pc, #104]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	2380      	movs	r3, #128	@ 0x80
 800640e:	055b      	lsls	r3, r3, #21
 8006410:	4013      	ands	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006416:	183b      	adds	r3, r7, r0
 8006418:	2201      	movs	r2, #1
 800641a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800641c:	4b18      	ldr	r3, [pc, #96]	@ (8006480 <HAL_RCC_OscConfig+0x338>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	2380      	movs	r3, #128	@ 0x80
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	4013      	ands	r3, r2
 8006426:	d11a      	bne.n	800645e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006428:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <HAL_RCC_OscConfig+0x338>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4b14      	ldr	r3, [pc, #80]	@ (8006480 <HAL_RCC_OscConfig+0x338>)
 800642e:	2180      	movs	r1, #128	@ 0x80
 8006430:	0049      	lsls	r1, r1, #1
 8006432:	430a      	orrs	r2, r1
 8006434:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006436:	f7fe fa81 	bl	800493c <HAL_GetTick>
 800643a:	0003      	movs	r3, r0
 800643c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006440:	f7fe fa7c 	bl	800493c <HAL_GetTick>
 8006444:	0002      	movs	r2, r0
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	@ 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e185      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006452:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <HAL_RCC_OscConfig+0x338>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	4013      	ands	r3, r2
 800645c:	d0f0      	beq.n	8006440 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d10e      	bne.n	8006484 <HAL_RCC_OscConfig+0x33c>
 8006466:	4b03      	ldr	r3, [pc, #12]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 8006468:	6a1a      	ldr	r2, [r3, #32]
 800646a:	4b02      	ldr	r3, [pc, #8]	@ (8006474 <HAL_RCC_OscConfig+0x32c>)
 800646c:	2101      	movs	r1, #1
 800646e:	430a      	orrs	r2, r1
 8006470:	621a      	str	r2, [r3, #32]
 8006472:	e035      	b.n	80064e0 <HAL_RCC_OscConfig+0x398>
 8006474:	40021000 	.word	0x40021000
 8006478:	fffeffff 	.word	0xfffeffff
 800647c:	fffbffff 	.word	0xfffbffff
 8006480:	40007000 	.word	0x40007000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10c      	bne.n	80064a6 <HAL_RCC_OscConfig+0x35e>
 800648c:	4bb6      	ldr	r3, [pc, #728]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	4bb5      	ldr	r3, [pc, #724]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006492:	2101      	movs	r1, #1
 8006494:	438a      	bics	r2, r1
 8006496:	621a      	str	r2, [r3, #32]
 8006498:	4bb3      	ldr	r3, [pc, #716]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 800649a:	6a1a      	ldr	r2, [r3, #32]
 800649c:	4bb2      	ldr	r3, [pc, #712]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 800649e:	2104      	movs	r1, #4
 80064a0:	438a      	bics	r2, r1
 80064a2:	621a      	str	r2, [r3, #32]
 80064a4:	e01c      	b.n	80064e0 <HAL_RCC_OscConfig+0x398>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCC_OscConfig+0x380>
 80064ae:	4bae      	ldr	r3, [pc, #696]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80064b0:	6a1a      	ldr	r2, [r3, #32]
 80064b2:	4bad      	ldr	r3, [pc, #692]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80064b4:	2104      	movs	r1, #4
 80064b6:	430a      	orrs	r2, r1
 80064b8:	621a      	str	r2, [r3, #32]
 80064ba:	4bab      	ldr	r3, [pc, #684]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	4baa      	ldr	r3, [pc, #680]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80064c0:	2101      	movs	r1, #1
 80064c2:	430a      	orrs	r2, r1
 80064c4:	621a      	str	r2, [r3, #32]
 80064c6:	e00b      	b.n	80064e0 <HAL_RCC_OscConfig+0x398>
 80064c8:	4ba7      	ldr	r3, [pc, #668]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	4ba6      	ldr	r3, [pc, #664]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80064ce:	2101      	movs	r1, #1
 80064d0:	438a      	bics	r2, r1
 80064d2:	621a      	str	r2, [r3, #32]
 80064d4:	4ba4      	ldr	r3, [pc, #656]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80064d6:	6a1a      	ldr	r2, [r3, #32]
 80064d8:	4ba3      	ldr	r3, [pc, #652]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80064da:	2104      	movs	r1, #4
 80064dc:	438a      	bics	r2, r1
 80064de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d014      	beq.n	8006512 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e8:	f7fe fa28 	bl	800493c <HAL_GetTick>
 80064ec:	0003      	movs	r3, r0
 80064ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f0:	e009      	b.n	8006506 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f2:	f7fe fa23 	bl	800493c <HAL_GetTick>
 80064f6:	0002      	movs	r2, r0
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	4a9b      	ldr	r2, [pc, #620]	@ (800676c <HAL_RCC_OscConfig+0x624>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e12b      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006506:	4b98      	ldr	r3, [pc, #608]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	2202      	movs	r2, #2
 800650c:	4013      	ands	r3, r2
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x3aa>
 8006510:	e013      	b.n	800653a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006512:	f7fe fa13 	bl	800493c <HAL_GetTick>
 8006516:	0003      	movs	r3, r0
 8006518:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800651a:	e009      	b.n	8006530 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800651c:	f7fe fa0e 	bl	800493c <HAL_GetTick>
 8006520:	0002      	movs	r2, r0
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	4a91      	ldr	r2, [pc, #580]	@ (800676c <HAL_RCC_OscConfig+0x624>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e116      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006530:	4b8d      	ldr	r3, [pc, #564]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	2202      	movs	r2, #2
 8006536:	4013      	ands	r3, r2
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800653a:	231f      	movs	r3, #31
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d105      	bne.n	8006550 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006544:	4b88      	ldr	r3, [pc, #544]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	4b87      	ldr	r3, [pc, #540]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 800654a:	4989      	ldr	r1, [pc, #548]	@ (8006770 <HAL_RCC_OscConfig+0x628>)
 800654c:	400a      	ands	r2, r1
 800654e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2210      	movs	r2, #16
 8006556:	4013      	ands	r3, r2
 8006558:	d063      	beq.n	8006622 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d12a      	bne.n	80065b8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006562:	4b81      	ldr	r3, [pc, #516]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006566:	4b80      	ldr	r3, [pc, #512]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006568:	2104      	movs	r1, #4
 800656a:	430a      	orrs	r2, r1
 800656c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800656e:	4b7e      	ldr	r3, [pc, #504]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006572:	4b7d      	ldr	r3, [pc, #500]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006574:	2101      	movs	r1, #1
 8006576:	430a      	orrs	r2, r1
 8006578:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800657a:	f7fe f9df 	bl	800493c <HAL_GetTick>
 800657e:	0003      	movs	r3, r0
 8006580:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006584:	f7fe f9da 	bl	800493c <HAL_GetTick>
 8006588:	0002      	movs	r2, r0
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e0e3      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006596:	4b74      	ldr	r3, [pc, #464]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659a:	2202      	movs	r2, #2
 800659c:	4013      	ands	r3, r2
 800659e:	d0f1      	beq.n	8006584 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80065a0:	4b71      	ldr	r3, [pc, #452]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a4:	22f8      	movs	r2, #248	@ 0xf8
 80065a6:	4393      	bics	r3, r2
 80065a8:	0019      	movs	r1, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	00da      	lsls	r2, r3, #3
 80065b0:	4b6d      	ldr	r3, [pc, #436]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065b2:	430a      	orrs	r2, r1
 80065b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80065b6:	e034      	b.n	8006622 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	3305      	adds	r3, #5
 80065be:	d111      	bne.n	80065e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80065c0:	4b69      	ldr	r3, [pc, #420]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065c4:	4b68      	ldr	r3, [pc, #416]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065c6:	2104      	movs	r1, #4
 80065c8:	438a      	bics	r2, r1
 80065ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80065cc:	4b66      	ldr	r3, [pc, #408]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d0:	22f8      	movs	r2, #248	@ 0xf8
 80065d2:	4393      	bics	r3, r2
 80065d4:	0019      	movs	r1, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	00da      	lsls	r2, r3, #3
 80065dc:	4b62      	ldr	r3, [pc, #392]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065de:	430a      	orrs	r2, r1
 80065e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80065e2:	e01e      	b.n	8006622 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80065e4:	4b60      	ldr	r3, [pc, #384]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065e8:	4b5f      	ldr	r3, [pc, #380]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065ea:	2104      	movs	r1, #4
 80065ec:	430a      	orrs	r2, r1
 80065ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80065f0:	4b5d      	ldr	r3, [pc, #372]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80065f6:	2101      	movs	r1, #1
 80065f8:	438a      	bics	r2, r1
 80065fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065fc:	f7fe f99e 	bl	800493c <HAL_GetTick>
 8006600:	0003      	movs	r3, r0
 8006602:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006606:	f7fe f999 	bl	800493c <HAL_GetTick>
 800660a:	0002      	movs	r2, r0
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e0a2      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006618:	4b53      	ldr	r3, [pc, #332]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 800661a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661c:	2202      	movs	r2, #2
 800661e:	4013      	ands	r3, r2
 8006620:	d1f1      	bne.n	8006606 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d100      	bne.n	800662c <HAL_RCC_OscConfig+0x4e4>
 800662a:	e097      	b.n	800675c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800662c:	4b4e      	ldr	r3, [pc, #312]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	220c      	movs	r2, #12
 8006632:	4013      	ands	r3, r2
 8006634:	2b08      	cmp	r3, #8
 8006636:	d100      	bne.n	800663a <HAL_RCC_OscConfig+0x4f2>
 8006638:	e06b      	b.n	8006712 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d14c      	bne.n	80066dc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006642:	4b49      	ldr	r3, [pc, #292]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b48      	ldr	r3, [pc, #288]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006648:	494a      	ldr	r1, [pc, #296]	@ (8006774 <HAL_RCC_OscConfig+0x62c>)
 800664a:	400a      	ands	r2, r1
 800664c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664e:	f7fe f975 	bl	800493c <HAL_GetTick>
 8006652:	0003      	movs	r3, r0
 8006654:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006658:	f7fe f970 	bl	800493c <HAL_GetTick>
 800665c:	0002      	movs	r2, r0
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e079      	b.n	800675e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800666a:	4b3f      	ldr	r3, [pc, #252]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	2380      	movs	r3, #128	@ 0x80
 8006670:	049b      	lsls	r3, r3, #18
 8006672:	4013      	ands	r3, r2
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006676:	4b3c      	ldr	r3, [pc, #240]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	220f      	movs	r2, #15
 800667c:	4393      	bics	r3, r2
 800667e:	0019      	movs	r1, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006684:	4b38      	ldr	r3, [pc, #224]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006686:	430a      	orrs	r2, r1
 8006688:	62da      	str	r2, [r3, #44]	@ 0x2c
 800668a:	4b37      	ldr	r3, [pc, #220]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4a3a      	ldr	r2, [pc, #232]	@ (8006778 <HAL_RCC_OscConfig+0x630>)
 8006690:	4013      	ands	r3, r2
 8006692:	0019      	movs	r1, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669c:	431a      	orrs	r2, r3
 800669e:	4b32      	ldr	r3, [pc, #200]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a4:	4b30      	ldr	r3, [pc, #192]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80066aa:	2180      	movs	r1, #128	@ 0x80
 80066ac:	0449      	lsls	r1, r1, #17
 80066ae:	430a      	orrs	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b2:	f7fe f943 	bl	800493c <HAL_GetTick>
 80066b6:	0003      	movs	r3, r0
 80066b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066bc:	f7fe f93e 	bl	800493c <HAL_GetTick>
 80066c0:	0002      	movs	r2, r0
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e047      	b.n	800675e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066ce:	4b26      	ldr	r3, [pc, #152]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	2380      	movs	r3, #128	@ 0x80
 80066d4:	049b      	lsls	r3, r3, #18
 80066d6:	4013      	ands	r3, r2
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0x574>
 80066da:	e03f      	b.n	800675c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066dc:	4b22      	ldr	r3, [pc, #136]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b21      	ldr	r3, [pc, #132]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80066e2:	4924      	ldr	r1, [pc, #144]	@ (8006774 <HAL_RCC_OscConfig+0x62c>)
 80066e4:	400a      	ands	r2, r1
 80066e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e8:	f7fe f928 	bl	800493c <HAL_GetTick>
 80066ec:	0003      	movs	r3, r0
 80066ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f2:	f7fe f923 	bl	800493c <HAL_GetTick>
 80066f6:	0002      	movs	r2, r0
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e02c      	b.n	800675e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006704:	4b18      	ldr	r3, [pc, #96]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	2380      	movs	r3, #128	@ 0x80
 800670a:	049b      	lsls	r3, r3, #18
 800670c:	4013      	ands	r3, r2
 800670e:	d1f0      	bne.n	80066f2 <HAL_RCC_OscConfig+0x5aa>
 8006710:	e024      	b.n	800675c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e01f      	b.n	800675e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800671e:	4b12      	ldr	r3, [pc, #72]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006724:	4b10      	ldr	r3, [pc, #64]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	2380      	movs	r3, #128	@ 0x80
 800672e:	025b      	lsls	r3, r3, #9
 8006730:	401a      	ands	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	429a      	cmp	r2, r3
 8006738:	d10e      	bne.n	8006758 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	220f      	movs	r2, #15
 800673e:	401a      	ands	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006744:	429a      	cmp	r2, r3
 8006746:	d107      	bne.n	8006758 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	23f0      	movs	r3, #240	@ 0xf0
 800674c:	039b      	lsls	r3, r3, #14
 800674e:	401a      	ands	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d001      	beq.n	800675c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	b008      	add	sp, #32
 8006764:	bd80      	pop	{r7, pc}
 8006766:	46c0      	nop			@ (mov r8, r8)
 8006768:	40021000 	.word	0x40021000
 800676c:	00001388 	.word	0x00001388
 8006770:	efffffff 	.word	0xefffffff
 8006774:	feffffff 	.word	0xfeffffff
 8006778:	ffc2ffff 	.word	0xffc2ffff

0800677c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0b3      	b.n	80068f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006790:	4b5b      	ldr	r3, [pc, #364]	@ (8006900 <HAL_RCC_ClockConfig+0x184>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2201      	movs	r2, #1
 8006796:	4013      	ands	r3, r2
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d911      	bls.n	80067c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679e:	4b58      	ldr	r3, [pc, #352]	@ (8006900 <HAL_RCC_ClockConfig+0x184>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2201      	movs	r2, #1
 80067a4:	4393      	bics	r3, r2
 80067a6:	0019      	movs	r1, r3
 80067a8:	4b55      	ldr	r3, [pc, #340]	@ (8006900 <HAL_RCC_ClockConfig+0x184>)
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b0:	4b53      	ldr	r3, [pc, #332]	@ (8006900 <HAL_RCC_ClockConfig+0x184>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2201      	movs	r2, #1
 80067b6:	4013      	ands	r3, r2
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d001      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e09a      	b.n	80068f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2202      	movs	r2, #2
 80067c8:	4013      	ands	r3, r2
 80067ca:	d015      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2204      	movs	r2, #4
 80067d2:	4013      	ands	r3, r2
 80067d4:	d006      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80067d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	4b4a      	ldr	r3, [pc, #296]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 80067dc:	21e0      	movs	r1, #224	@ 0xe0
 80067de:	00c9      	lsls	r1, r1, #3
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e4:	4b47      	ldr	r3, [pc, #284]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	22f0      	movs	r2, #240	@ 0xf0
 80067ea:	4393      	bics	r3, r2
 80067ec:	0019      	movs	r1, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	4b44      	ldr	r3, [pc, #272]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 80067f4:	430a      	orrs	r2, r1
 80067f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2201      	movs	r2, #1
 80067fe:	4013      	ands	r3, r2
 8006800:	d040      	beq.n	8006884 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d107      	bne.n	800681a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800680a:	4b3e      	ldr	r3, [pc, #248]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	2380      	movs	r3, #128	@ 0x80
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	4013      	ands	r3, r2
 8006814:	d114      	bne.n	8006840 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e06e      	b.n	80068f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b02      	cmp	r3, #2
 8006820:	d107      	bne.n	8006832 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006822:	4b38      	ldr	r3, [pc, #224]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	2380      	movs	r3, #128	@ 0x80
 8006828:	049b      	lsls	r3, r3, #18
 800682a:	4013      	ands	r3, r2
 800682c:	d108      	bne.n	8006840 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e062      	b.n	80068f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006832:	4b34      	ldr	r3, [pc, #208]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2202      	movs	r2, #2
 8006838:	4013      	ands	r3, r2
 800683a:	d101      	bne.n	8006840 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e05b      	b.n	80068f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006840:	4b30      	ldr	r3, [pc, #192]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2203      	movs	r2, #3
 8006846:	4393      	bics	r3, r2
 8006848:	0019      	movs	r1, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	4b2d      	ldr	r3, [pc, #180]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 8006850:	430a      	orrs	r2, r1
 8006852:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006854:	f7fe f872 	bl	800493c <HAL_GetTick>
 8006858:	0003      	movs	r3, r0
 800685a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685c:	e009      	b.n	8006872 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800685e:	f7fe f86d 	bl	800493c <HAL_GetTick>
 8006862:	0002      	movs	r2, r0
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	4a27      	ldr	r2, [pc, #156]	@ (8006908 <HAL_RCC_ClockConfig+0x18c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e042      	b.n	80068f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006872:	4b24      	ldr	r3, [pc, #144]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	220c      	movs	r2, #12
 8006878:	401a      	ands	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	429a      	cmp	r2, r3
 8006882:	d1ec      	bne.n	800685e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006884:	4b1e      	ldr	r3, [pc, #120]	@ (8006900 <HAL_RCC_ClockConfig+0x184>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2201      	movs	r2, #1
 800688a:	4013      	ands	r3, r2
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	d211      	bcs.n	80068b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006892:	4b1b      	ldr	r3, [pc, #108]	@ (8006900 <HAL_RCC_ClockConfig+0x184>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2201      	movs	r2, #1
 8006898:	4393      	bics	r3, r2
 800689a:	0019      	movs	r1, r3
 800689c:	4b18      	ldr	r3, [pc, #96]	@ (8006900 <HAL_RCC_ClockConfig+0x184>)
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a4:	4b16      	ldr	r3, [pc, #88]	@ (8006900 <HAL_RCC_ClockConfig+0x184>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2201      	movs	r2, #1
 80068aa:	4013      	ands	r3, r2
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d001      	beq.n	80068b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e020      	b.n	80068f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2204      	movs	r2, #4
 80068bc:	4013      	ands	r3, r2
 80068be:	d009      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80068c0:	4b10      	ldr	r3, [pc, #64]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4a11      	ldr	r2, [pc, #68]	@ (800690c <HAL_RCC_ClockConfig+0x190>)
 80068c6:	4013      	ands	r3, r2
 80068c8:	0019      	movs	r1, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 80068d0:	430a      	orrs	r2, r1
 80068d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80068d4:	f000 f820 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 80068d8:	0001      	movs	r1, r0
 80068da:	4b0a      	ldr	r3, [pc, #40]	@ (8006904 <HAL_RCC_ClockConfig+0x188>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	091b      	lsrs	r3, r3, #4
 80068e0:	220f      	movs	r2, #15
 80068e2:	4013      	ands	r3, r2
 80068e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006910 <HAL_RCC_ClockConfig+0x194>)
 80068e6:	5cd3      	ldrb	r3, [r2, r3]
 80068e8:	000a      	movs	r2, r1
 80068ea:	40da      	lsrs	r2, r3
 80068ec:	4b09      	ldr	r3, [pc, #36]	@ (8006914 <HAL_RCC_ClockConfig+0x198>)
 80068ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80068f0:	2003      	movs	r0, #3
 80068f2:	f7fd ffdd 	bl	80048b0 <HAL_InitTick>
  
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b004      	add	sp, #16
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40022000 	.word	0x40022000
 8006904:	40021000 	.word	0x40021000
 8006908:	00001388 	.word	0x00001388
 800690c:	fffff8ff 	.word	0xfffff8ff
 8006910:	0800d32c 	.word	0x0800d32c
 8006914:	2000000c 	.word	0x2000000c

08006918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	2300      	movs	r3, #0
 800692c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006932:	4b20      	ldr	r3, [pc, #128]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	220c      	movs	r2, #12
 800693c:	4013      	ands	r3, r2
 800693e:	2b04      	cmp	r3, #4
 8006940:	d002      	beq.n	8006948 <HAL_RCC_GetSysClockFreq+0x30>
 8006942:	2b08      	cmp	r3, #8
 8006944:	d003      	beq.n	800694e <HAL_RCC_GetSysClockFreq+0x36>
 8006946:	e02c      	b.n	80069a2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006948:	4b1b      	ldr	r3, [pc, #108]	@ (80069b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800694a:	613b      	str	r3, [r7, #16]
      break;
 800694c:	e02c      	b.n	80069a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	0c9b      	lsrs	r3, r3, #18
 8006952:	220f      	movs	r2, #15
 8006954:	4013      	ands	r3, r2
 8006956:	4a19      	ldr	r2, [pc, #100]	@ (80069bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8006958:	5cd3      	ldrb	r3, [r2, r3]
 800695a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800695c:	4b15      	ldr	r3, [pc, #84]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800695e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006960:	220f      	movs	r2, #15
 8006962:	4013      	ands	r3, r2
 8006964:	4a16      	ldr	r2, [pc, #88]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006966:	5cd3      	ldrb	r3, [r2, r3]
 8006968:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	2380      	movs	r3, #128	@ 0x80
 800696e:	025b      	lsls	r3, r3, #9
 8006970:	4013      	ands	r3, r2
 8006972:	d009      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006974:	68b9      	ldr	r1, [r7, #8]
 8006976:	4810      	ldr	r0, [pc, #64]	@ (80069b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006978:	f7f9 fbec 	bl	8000154 <__udivsi3>
 800697c:	0003      	movs	r3, r0
 800697e:	001a      	movs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4353      	muls	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	e009      	b.n	800699c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	000a      	movs	r2, r1
 800698c:	0152      	lsls	r2, r2, #5
 800698e:	1a52      	subs	r2, r2, r1
 8006990:	0193      	lsls	r3, r2, #6
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	185b      	adds	r3, r3, r1
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	613b      	str	r3, [r7, #16]
      break;
 80069a0:	e002      	b.n	80069a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069a2:	4b05      	ldr	r3, [pc, #20]	@ (80069b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80069a4:	613b      	str	r3, [r7, #16]
      break;
 80069a6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80069a8:	693b      	ldr	r3, [r7, #16]
}
 80069aa:	0018      	movs	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b006      	add	sp, #24
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	40021000 	.word	0x40021000
 80069b8:	007a1200 	.word	0x007a1200
 80069bc:	0800d344 	.word	0x0800d344
 80069c0:	0800d354 	.word	0x0800d354

080069c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069c8:	4b02      	ldr	r3, [pc, #8]	@ (80069d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80069ca:	681b      	ldr	r3, [r3, #0]
}
 80069cc:	0018      	movs	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	46c0      	nop			@ (mov r8, r8)
 80069d4:	2000000c 	.word	0x2000000c

080069d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80069dc:	f7ff fff2 	bl	80069c4 <HAL_RCC_GetHCLKFreq>
 80069e0:	0001      	movs	r1, r0
 80069e2:	4b06      	ldr	r3, [pc, #24]	@ (80069fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	0a1b      	lsrs	r3, r3, #8
 80069e8:	2207      	movs	r2, #7
 80069ea:	4013      	ands	r3, r2
 80069ec:	4a04      	ldr	r2, [pc, #16]	@ (8006a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069ee:	5cd3      	ldrb	r3, [r2, r3]
 80069f0:	40d9      	lsrs	r1, r3
 80069f2:	000b      	movs	r3, r1
}    
 80069f4:	0018      	movs	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	46c0      	nop			@ (mov r8, r8)
 80069fc:	40021000 	.word	0x40021000
 8006a00:	0800d33c 	.word	0x0800d33c

08006a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	2380      	movs	r3, #128	@ 0x80
 8006a1a:	025b      	lsls	r3, r3, #9
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	d100      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006a20:	e08e      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006a22:	2017      	movs	r0, #23
 8006a24:	183b      	adds	r3, r7, r0
 8006a26:	2200      	movs	r2, #0
 8006a28:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a2a:	4b57      	ldr	r3, [pc, #348]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006a2c:	69da      	ldr	r2, [r3, #28]
 8006a2e:	2380      	movs	r3, #128	@ 0x80
 8006a30:	055b      	lsls	r3, r3, #21
 8006a32:	4013      	ands	r3, r2
 8006a34:	d110      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a36:	4b54      	ldr	r3, [pc, #336]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006a38:	69da      	ldr	r2, [r3, #28]
 8006a3a:	4b53      	ldr	r3, [pc, #332]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006a3c:	2180      	movs	r1, #128	@ 0x80
 8006a3e:	0549      	lsls	r1, r1, #21
 8006a40:	430a      	orrs	r2, r1
 8006a42:	61da      	str	r2, [r3, #28]
 8006a44:	4b50      	ldr	r3, [pc, #320]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	2380      	movs	r3, #128	@ 0x80
 8006a4a:	055b      	lsls	r3, r3, #21
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60bb      	str	r3, [r7, #8]
 8006a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a52:	183b      	adds	r3, r7, r0
 8006a54:	2201      	movs	r2, #1
 8006a56:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a58:	4b4c      	ldr	r3, [pc, #304]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	2380      	movs	r3, #128	@ 0x80
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4013      	ands	r3, r2
 8006a62:	d11a      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a64:	4b49      	ldr	r3, [pc, #292]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b48      	ldr	r3, [pc, #288]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006a6a:	2180      	movs	r1, #128	@ 0x80
 8006a6c:	0049      	lsls	r1, r1, #1
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a72:	f7fd ff63 	bl	800493c <HAL_GetTick>
 8006a76:	0003      	movs	r3, r0
 8006a78:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7a:	e008      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a7c:	f7fd ff5e 	bl	800493c <HAL_GetTick>
 8006a80:	0002      	movs	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b64      	cmp	r3, #100	@ 0x64
 8006a88:	d901      	bls.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e077      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	2380      	movs	r3, #128	@ 0x80
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	4013      	ands	r3, r2
 8006a98:	d0f0      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006a9c:	6a1a      	ldr	r2, [r3, #32]
 8006a9e:	23c0      	movs	r3, #192	@ 0xc0
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d034      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	23c0      	movs	r3, #192	@ 0xc0
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d02c      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006abc:	4b32      	ldr	r3, [pc, #200]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	4a33      	ldr	r2, [pc, #204]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ac6:	4b30      	ldr	r3, [pc, #192]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006ac8:	6a1a      	ldr	r2, [r3, #32]
 8006aca:	4b2f      	ldr	r3, [pc, #188]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006acc:	2180      	movs	r1, #128	@ 0x80
 8006ace:	0249      	lsls	r1, r1, #9
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006ad6:	6a1a      	ldr	r2, [r3, #32]
 8006ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006ada:	492e      	ldr	r1, [pc, #184]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006adc:	400a      	ands	r2, r1
 8006ade:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ae0:	4b29      	ldr	r3, [pc, #164]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4013      	ands	r3, r2
 8006aec:	d013      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aee:	f7fd ff25 	bl	800493c <HAL_GetTick>
 8006af2:	0003      	movs	r3, r0
 8006af4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af6:	e009      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af8:	f7fd ff20 	bl	800493c <HAL_GetTick>
 8006afc:	0002      	movs	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	4a25      	ldr	r2, [pc, #148]	@ (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e038      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	2202      	movs	r2, #2
 8006b12:	4013      	ands	r3, r2
 8006b14:	d0f0      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b16:	4b1c      	ldr	r3, [pc, #112]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	0019      	movs	r1, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	4b18      	ldr	r3, [pc, #96]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b26:	430a      	orrs	r2, r1
 8006b28:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b2a:	2317      	movs	r3, #23
 8006b2c:	18fb      	adds	r3, r7, r3
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d105      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b34:	4b14      	ldr	r3, [pc, #80]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	4b13      	ldr	r3, [pc, #76]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b3a:	4918      	ldr	r1, [pc, #96]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006b3c:	400a      	ands	r2, r1
 8006b3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	4013      	ands	r3, r2
 8006b48:	d009      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4e:	2203      	movs	r2, #3
 8006b50:	4393      	bics	r3, r2
 8006b52:	0019      	movs	r1, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	4b0b      	ldr	r3, [pc, #44]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2220      	movs	r2, #32
 8006b64:	4013      	ands	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b68:	4b07      	ldr	r3, [pc, #28]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6c:	2210      	movs	r2, #16
 8006b6e:	4393      	bics	r3, r2
 8006b70:	0019      	movs	r1, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	4b04      	ldr	r3, [pc, #16]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	0018      	movs	r0, r3
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b006      	add	sp, #24
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	46c0      	nop			@ (mov r8, r8)
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40007000 	.word	0x40007000
 8006b90:	fffffcff 	.word	0xfffffcff
 8006b94:	fffeffff 	.word	0xfffeffff
 8006b98:	00001388 	.word	0x00001388
 8006b9c:	efffffff 	.word	0xefffffff

08006ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e0a8      	b.n	8006d04 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	2382      	movs	r3, #130	@ 0x82
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d009      	beq.n	8006bda <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	61da      	str	r2, [r3, #28]
 8006bcc:	e005      	b.n	8006bda <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	225d      	movs	r2, #93	@ 0x5d
 8006be4:	5c9b      	ldrb	r3, [r3, r2]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d107      	bne.n	8006bfc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	225c      	movs	r2, #92	@ 0x5c
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f7fd fc44 	bl	8004484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	225d      	movs	r2, #93	@ 0x5d
 8006c00:	2102      	movs	r1, #2
 8006c02:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2140      	movs	r1, #64	@ 0x40
 8006c10:	438a      	bics	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	23e0      	movs	r3, #224	@ 0xe0
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d902      	bls.n	8006c26 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e002      	b.n	8006c2c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c26:	2380      	movs	r3, #128	@ 0x80
 8006c28:	015b      	lsls	r3, r3, #5
 8006c2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	23f0      	movs	r3, #240	@ 0xf0
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d008      	beq.n	8006c4a <HAL_SPI_Init+0xaa>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	23e0      	movs	r3, #224	@ 0xe0
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d002      	beq.n	8006c4a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	2382      	movs	r3, #130	@ 0x82
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	401a      	ands	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6899      	ldr	r1, [r3, #8]
 8006c58:	2384      	movs	r3, #132	@ 0x84
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	400b      	ands	r3, r1
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2102      	movs	r1, #2
 8006c66:	400b      	ands	r3, r1
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	2101      	movs	r1, #1
 8006c70:	400b      	ands	r3, r1
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6999      	ldr	r1, [r3, #24]
 8006c78:	2380      	movs	r3, #128	@ 0x80
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	2138      	movs	r1, #56	@ 0x38
 8006c86:	400b      	ands	r3, r1
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	2180      	movs	r1, #128	@ 0x80
 8006c90:	400b      	ands	r3, r1
 8006c92:	431a      	orrs	r2, r3
 8006c94:	0011      	movs	r1, r2
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c9a:	2380      	movs	r3, #128	@ 0x80
 8006c9c:	019b      	lsls	r3, r3, #6
 8006c9e:	401a      	ands	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	0c1b      	lsrs	r3, r3, #16
 8006cae:	2204      	movs	r2, #4
 8006cb0:	401a      	ands	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	2110      	movs	r1, #16
 8006cb8:	400b      	ands	r3, r1
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc0:	2108      	movs	r1, #8
 8006cc2:	400b      	ands	r3, r1
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68d9      	ldr	r1, [r3, #12]
 8006cca:	23f0      	movs	r3, #240	@ 0xf0
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	400b      	ands	r3, r1
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	0011      	movs	r1, r2
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	2380      	movs	r3, #128	@ 0x80
 8006cd8:	015b      	lsls	r3, r3, #5
 8006cda:	401a      	ands	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69da      	ldr	r2, [r3, #28]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4907      	ldr	r1, [pc, #28]	@ (8006d0c <HAL_SPI_Init+0x16c>)
 8006cf0:	400a      	ands	r2, r1
 8006cf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	225d      	movs	r2, #93	@ 0x5d
 8006cfe:	2101      	movs	r1, #1
 8006d00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	0018      	movs	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b004      	add	sp, #16
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	fffff7ff 	.word	0xfffff7ff

08006d10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	1dbb      	adds	r3, r7, #6
 8006d1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d20:	231f      	movs	r3, #31
 8006d22:	18fb      	adds	r3, r7, r3
 8006d24:	2200      	movs	r2, #0
 8006d26:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	225c      	movs	r2, #92	@ 0x5c
 8006d2c:	5c9b      	ldrb	r3, [r3, r2]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_SPI_Transmit+0x26>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e147      	b.n	8006fc6 <HAL_SPI_Transmit+0x2b6>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	225c      	movs	r2, #92	@ 0x5c
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d3e:	f7fd fdfd 	bl	800493c <HAL_GetTick>
 8006d42:	0003      	movs	r3, r0
 8006d44:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006d46:	2316      	movs	r3, #22
 8006d48:	18fb      	adds	r3, r7, r3
 8006d4a:	1dba      	adds	r2, r7, #6
 8006d4c:	8812      	ldrh	r2, [r2, #0]
 8006d4e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	225d      	movs	r2, #93	@ 0x5d
 8006d54:	5c9b      	ldrb	r3, [r3, r2]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d004      	beq.n	8006d66 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006d5c:	231f      	movs	r3, #31
 8006d5e:	18fb      	adds	r3, r7, r3
 8006d60:	2202      	movs	r2, #2
 8006d62:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d64:	e128      	b.n	8006fb8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_SPI_Transmit+0x64>
 8006d6c:	1dbb      	adds	r3, r7, #6
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006d74:	231f      	movs	r3, #31
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d7c:	e11c      	b.n	8006fb8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	225d      	movs	r2, #93	@ 0x5d
 8006d82:	2103      	movs	r1, #3
 8006d84:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1dba      	adds	r2, r7, #6
 8006d96:	8812      	ldrh	r2, [r2, #0]
 8006d98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1dba      	adds	r2, r7, #6
 8006d9e:	8812      	ldrh	r2, [r2, #0]
 8006da0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2244      	movs	r2, #68	@ 0x44
 8006dac:	2100      	movs	r1, #0
 8006dae:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2246      	movs	r2, #70	@ 0x46
 8006db4:	2100      	movs	r1, #0
 8006db6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	2380      	movs	r3, #128	@ 0x80
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d110      	bne.n	8006df2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2140      	movs	r1, #64	@ 0x40
 8006ddc:	438a      	bics	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2180      	movs	r1, #128	@ 0x80
 8006dec:	01c9      	lsls	r1, r1, #7
 8006dee:	430a      	orrs	r2, r1
 8006df0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2240      	movs	r2, #64	@ 0x40
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d007      	beq.n	8006e10 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2140      	movs	r1, #64	@ 0x40
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	23e0      	movs	r3, #224	@ 0xe0
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d952      	bls.n	8006ec2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <HAL_SPI_Transmit+0x11e>
 8006e24:	2316      	movs	r3, #22
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d143      	bne.n	8006eb6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e32:	881a      	ldrh	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3e:	1c9a      	adds	r2, r3, #2
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e52:	e030      	b.n	8006eb6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d112      	bne.n	8006e88 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	881a      	ldrh	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	1c9a      	adds	r2, r3, #2
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e86:	e016      	b.n	8006eb6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e88:	f7fd fd58 	bl	800493c <HAL_GetTick>
 8006e8c:	0002      	movs	r2, r0
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d802      	bhi.n	8006e9e <HAL_SPI_Transmit+0x18e>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	d102      	bne.n	8006ea4 <HAL_SPI_Transmit+0x194>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d108      	bne.n	8006eb6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006ea4:	231f      	movs	r3, #31
 8006ea6:	18fb      	adds	r3, r7, r3
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	225d      	movs	r2, #93	@ 0x5d
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	5499      	strb	r1, [r3, r2]
          goto error;
 8006eb4:	e080      	b.n	8006fb8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1c9      	bne.n	8006e54 <HAL_SPI_Transmit+0x144>
 8006ec0:	e053      	b.n	8006f6a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <HAL_SPI_Transmit+0x1c4>
 8006eca:	2316      	movs	r3, #22
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d145      	bne.n	8006f60 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	7812      	ldrb	r2, [r2, #0]
 8006ee0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006efa:	e031      	b.n	8006f60 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2202      	movs	r2, #2
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d113      	bne.n	8006f32 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	330c      	adds	r3, #12
 8006f14:	7812      	ldrb	r2, [r2, #0]
 8006f16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f30:	e016      	b.n	8006f60 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f32:	f7fd fd03 	bl	800493c <HAL_GetTick>
 8006f36:	0002      	movs	r2, r0
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d802      	bhi.n	8006f48 <HAL_SPI_Transmit+0x238>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	3301      	adds	r3, #1
 8006f46:	d102      	bne.n	8006f4e <HAL_SPI_Transmit+0x23e>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d108      	bne.n	8006f60 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006f4e:	231f      	movs	r3, #31
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	2203      	movs	r2, #3
 8006f54:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	225d      	movs	r2, #93	@ 0x5d
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	5499      	strb	r1, [r3, r2]
          goto error;
 8006f5e:	e02b      	b.n	8006fb8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1c8      	bne.n	8006efc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	0018      	movs	r0, r3
 8006f72:	f000 fcef 	bl	8007954 <SPI_EndRxTxTransaction>
 8006f76:	1e03      	subs	r3, r0, #0
 8006f78:	d002      	beq.n	8006f80 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006fa6:	231f      	movs	r3, #31
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	2201      	movs	r2, #1
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	e003      	b.n	8006fb8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	225d      	movs	r2, #93	@ 0x5d
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	225c      	movs	r2, #92	@ 0x5c
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006fc0:	231f      	movs	r3, #31
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	781b      	ldrb	r3, [r3, #0]
}
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b008      	add	sp, #32
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd0:	b590      	push	{r4, r7, lr}
 8006fd2:	b089      	sub	sp, #36	@ 0x24
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	1dbb      	adds	r3, r7, #6
 8006fde:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fe0:	2117      	movs	r1, #23
 8006fe2:	187b      	adds	r3, r7, r1
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	225d      	movs	r2, #93	@ 0x5d
 8006fec:	5c9b      	ldrb	r3, [r3, r2]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d003      	beq.n	8006ffc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8006ff4:	187b      	adds	r3, r7, r1
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ffa:	e12b      	b.n	8007254 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	2382      	movs	r3, #130	@ 0x82
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	429a      	cmp	r2, r3
 8007006:	d113      	bne.n	8007030 <HAL_SPI_Receive+0x60>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10f      	bne.n	8007030 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	225d      	movs	r2, #93	@ 0x5d
 8007014:	2104      	movs	r1, #4
 8007016:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007018:	1dbb      	adds	r3, r7, #6
 800701a:	881c      	ldrh	r4, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	0023      	movs	r3, r4
 8007028:	f000 f924 	bl	8007274 <HAL_SPI_TransmitReceive>
 800702c:	0003      	movs	r3, r0
 800702e:	e118      	b.n	8007262 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	225c      	movs	r2, #92	@ 0x5c
 8007034:	5c9b      	ldrb	r3, [r3, r2]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_SPI_Receive+0x6e>
 800703a:	2302      	movs	r3, #2
 800703c:	e111      	b.n	8007262 <HAL_SPI_Receive+0x292>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	225c      	movs	r2, #92	@ 0x5c
 8007042:	2101      	movs	r1, #1
 8007044:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007046:	f7fd fc79 	bl	800493c <HAL_GetTick>
 800704a:	0003      	movs	r3, r0
 800704c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_SPI_Receive+0x8c>
 8007054:	1dbb      	adds	r3, r7, #6
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800705c:	2317      	movs	r3, #23
 800705e:	18fb      	adds	r3, r7, r3
 8007060:	2201      	movs	r2, #1
 8007062:	701a      	strb	r2, [r3, #0]
    goto error;
 8007064:	e0f6      	b.n	8007254 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	225d      	movs	r2, #93	@ 0x5d
 800706a:	2104      	movs	r1, #4
 800706c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	1dba      	adds	r2, r7, #6
 800707e:	2144      	movs	r1, #68	@ 0x44
 8007080:	8812      	ldrh	r2, [r2, #0]
 8007082:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	1dba      	adds	r2, r7, #6
 8007088:	2146      	movs	r1, #70	@ 0x46
 800708a:	8812      	ldrh	r2, [r2, #0]
 800708c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	23e0      	movs	r3, #224	@ 0xe0
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d908      	bls.n	80070ca <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	496a      	ldr	r1, [pc, #424]	@ (800726c <HAL_SPI_Receive+0x29c>)
 80070c4:	400a      	ands	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
 80070c8:	e008      	b.n	80070dc <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2180      	movs	r1, #128	@ 0x80
 80070d6:	0149      	lsls	r1, r1, #5
 80070d8:	430a      	orrs	r2, r1
 80070da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	2380      	movs	r3, #128	@ 0x80
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d10f      	bne.n	8007108 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2140      	movs	r1, #64	@ 0x40
 80070f4:	438a      	bics	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	495b      	ldr	r1, [pc, #364]	@ (8007270 <HAL_SPI_Receive+0x2a0>)
 8007104:	400a      	ands	r2, r1
 8007106:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2240      	movs	r2, #64	@ 0x40
 8007110:	4013      	ands	r3, r2
 8007112:	2b40      	cmp	r3, #64	@ 0x40
 8007114:	d007      	beq.n	8007126 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2140      	movs	r1, #64	@ 0x40
 8007122:	430a      	orrs	r2, r1
 8007124:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	23e0      	movs	r3, #224	@ 0xe0
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	429a      	cmp	r2, r3
 8007130:	d900      	bls.n	8007134 <HAL_SPI_Receive+0x164>
 8007132:	e071      	b.n	8007218 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007134:	e035      	b.n	80071a2 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2201      	movs	r2, #1
 800713e:	4013      	ands	r3, r2
 8007140:	2b01      	cmp	r3, #1
 8007142:	d117      	bne.n	8007174 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	330c      	adds	r3, #12
 800714a:	001a      	movs	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007150:	7812      	ldrb	r2, [r2, #0]
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2246      	movs	r2, #70	@ 0x46
 8007164:	5a9b      	ldrh	r3, [r3, r2]
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b299      	uxth	r1, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2246      	movs	r2, #70	@ 0x46
 8007170:	5299      	strh	r1, [r3, r2]
 8007172:	e016      	b.n	80071a2 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007174:	f7fd fbe2 	bl	800493c <HAL_GetTick>
 8007178:	0002      	movs	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d802      	bhi.n	800718a <HAL_SPI_Receive+0x1ba>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	3301      	adds	r3, #1
 8007188:	d102      	bne.n	8007190 <HAL_SPI_Receive+0x1c0>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d108      	bne.n	80071a2 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8007190:	2317      	movs	r3, #23
 8007192:	18fb      	adds	r3, r7, r3
 8007194:	2203      	movs	r2, #3
 8007196:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	225d      	movs	r2, #93	@ 0x5d
 800719c:	2101      	movs	r1, #1
 800719e:	5499      	strb	r1, [r3, r2]
          goto error;
 80071a0:	e058      	b.n	8007254 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2246      	movs	r2, #70	@ 0x46
 80071a6:	5a9b      	ldrh	r3, [r3, r2]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1c3      	bne.n	8007136 <HAL_SPI_Receive+0x166>
 80071ae:	e039      	b.n	8007224 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2201      	movs	r2, #1
 80071b8:	4013      	ands	r3, r2
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d115      	bne.n	80071ea <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c8:	b292      	uxth	r2, r2
 80071ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d0:	1c9a      	adds	r2, r3, #2
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2246      	movs	r2, #70	@ 0x46
 80071da:	5a9b      	ldrh	r3, [r3, r2]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b299      	uxth	r1, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2246      	movs	r2, #70	@ 0x46
 80071e6:	5299      	strh	r1, [r3, r2]
 80071e8:	e016      	b.n	8007218 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ea:	f7fd fba7 	bl	800493c <HAL_GetTick>
 80071ee:	0002      	movs	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d802      	bhi.n	8007200 <HAL_SPI_Receive+0x230>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	3301      	adds	r3, #1
 80071fe:	d102      	bne.n	8007206 <HAL_SPI_Receive+0x236>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d108      	bne.n	8007218 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007206:	2317      	movs	r3, #23
 8007208:	18fb      	adds	r3, r7, r3
 800720a:	2203      	movs	r2, #3
 800720c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	225d      	movs	r2, #93	@ 0x5d
 8007212:	2101      	movs	r1, #1
 8007214:	5499      	strb	r1, [r3, r2]
          goto error;
 8007216:	e01d      	b.n	8007254 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2246      	movs	r2, #70	@ 0x46
 800721c:	5a9b      	ldrh	r3, [r3, r2]
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1c5      	bne.n	80071b0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	0018      	movs	r0, r3
 800722c:	f000 fb34 	bl	8007898 <SPI_EndRxTransaction>
 8007230:	1e03      	subs	r3, r0, #0
 8007232:	d002      	beq.n	800723a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2220      	movs	r2, #32
 8007238:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8007242:	2317      	movs	r3, #23
 8007244:	18fb      	adds	r3, r7, r3
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e003      	b.n	8007254 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	225d      	movs	r2, #93	@ 0x5d
 8007250:	2101      	movs	r1, #1
 8007252:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	225c      	movs	r2, #92	@ 0x5c
 8007258:	2100      	movs	r1, #0
 800725a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800725c:	2317      	movs	r3, #23
 800725e:	18fb      	adds	r3, r7, r3
 8007260:	781b      	ldrb	r3, [r3, #0]
}
 8007262:	0018      	movs	r0, r3
 8007264:	46bd      	mov	sp, r7
 8007266:	b007      	add	sp, #28
 8007268:	bd90      	pop	{r4, r7, pc}
 800726a:	46c0      	nop			@ (mov r8, r8)
 800726c:	ffffefff 	.word	0xffffefff
 8007270:	ffffbfff 	.word	0xffffbfff

08007274 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	@ 0x28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	001a      	movs	r2, r3
 8007282:	1cbb      	adds	r3, r7, #2
 8007284:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007286:	2301      	movs	r3, #1
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800728a:	2323      	movs	r3, #35	@ 0x23
 800728c:	18fb      	adds	r3, r7, r3
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	225c      	movs	r2, #92	@ 0x5c
 8007296:	5c9b      	ldrb	r3, [r3, r2]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_SPI_TransmitReceive+0x2c>
 800729c:	2302      	movs	r3, #2
 800729e:	e1c4      	b.n	800762a <HAL_SPI_TransmitReceive+0x3b6>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	225c      	movs	r2, #92	@ 0x5c
 80072a4:	2101      	movs	r1, #1
 80072a6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072a8:	f7fd fb48 	bl	800493c <HAL_GetTick>
 80072ac:	0003      	movs	r3, r0
 80072ae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072b0:	201b      	movs	r0, #27
 80072b2:	183b      	adds	r3, r7, r0
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	215d      	movs	r1, #93	@ 0x5d
 80072b8:	5c52      	ldrb	r2, [r2, r1]
 80072ba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80072c2:	2312      	movs	r3, #18
 80072c4:	18fb      	adds	r3, r7, r3
 80072c6:	1cba      	adds	r2, r7, #2
 80072c8:	8812      	ldrh	r2, [r2, #0]
 80072ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072cc:	183b      	adds	r3, r7, r0
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d011      	beq.n	80072f8 <HAL_SPI_TransmitReceive+0x84>
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	2382      	movs	r3, #130	@ 0x82
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	429a      	cmp	r2, r3
 80072dc:	d107      	bne.n	80072ee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <HAL_SPI_TransmitReceive+0x7a>
 80072e6:	183b      	adds	r3, r7, r0
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d004      	beq.n	80072f8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80072ee:	2323      	movs	r3, #35	@ 0x23
 80072f0:	18fb      	adds	r3, r7, r3
 80072f2:	2202      	movs	r2, #2
 80072f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80072f6:	e191      	b.n	800761c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <HAL_SPI_TransmitReceive+0x98>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_SPI_TransmitReceive+0x98>
 8007304:	1cbb      	adds	r3, r7, #2
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800730c:	2323      	movs	r3, #35	@ 0x23
 800730e:	18fb      	adds	r3, r7, r3
 8007310:	2201      	movs	r2, #1
 8007312:	701a      	strb	r2, [r3, #0]
    goto error;
 8007314:	e182      	b.n	800761c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	225d      	movs	r2, #93	@ 0x5d
 800731a:	5c9b      	ldrb	r3, [r3, r2]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b04      	cmp	r3, #4
 8007320:	d003      	beq.n	800732a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	225d      	movs	r2, #93	@ 0x5d
 8007326:	2105      	movs	r1, #5
 8007328:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	1cba      	adds	r2, r7, #2
 800733a:	2146      	movs	r1, #70	@ 0x46
 800733c:	8812      	ldrh	r2, [r2, #0]
 800733e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	1cba      	adds	r2, r7, #2
 8007344:	2144      	movs	r1, #68	@ 0x44
 8007346:	8812      	ldrh	r2, [r2, #0]
 8007348:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	1cba      	adds	r2, r7, #2
 8007354:	8812      	ldrh	r2, [r2, #0]
 8007356:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	1cba      	adds	r2, r7, #2
 800735c:	8812      	ldrh	r2, [r2, #0]
 800735e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	23e0      	movs	r3, #224	@ 0xe0
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	429a      	cmp	r2, r3
 8007376:	d908      	bls.n	800738a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	49ac      	ldr	r1, [pc, #688]	@ (8007634 <HAL_SPI_TransmitReceive+0x3c0>)
 8007384:	400a      	ands	r2, r1
 8007386:	605a      	str	r2, [r3, #4]
 8007388:	e008      	b.n	800739c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2180      	movs	r1, #128	@ 0x80
 8007396:	0149      	lsls	r1, r1, #5
 8007398:	430a      	orrs	r2, r1
 800739a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2240      	movs	r2, #64	@ 0x40
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b40      	cmp	r3, #64	@ 0x40
 80073a8:	d007      	beq.n	80073ba <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2140      	movs	r1, #64	@ 0x40
 80073b6:	430a      	orrs	r2, r1
 80073b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	23e0      	movs	r3, #224	@ 0xe0
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d800      	bhi.n	80073c8 <HAL_SPI_TransmitReceive+0x154>
 80073c6:	e083      	b.n	80074d0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <HAL_SPI_TransmitReceive+0x168>
 80073d0:	2312      	movs	r3, #18
 80073d2:	18fb      	adds	r3, r7, r3
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d000      	beq.n	80073dc <HAL_SPI_TransmitReceive+0x168>
 80073da:	e06d      	b.n	80074b8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e0:	881a      	ldrh	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	1c9a      	adds	r2, r3, #2
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007400:	e05a      	b.n	80074b8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2202      	movs	r2, #2
 800740a:	4013      	ands	r3, r2
 800740c:	2b02      	cmp	r3, #2
 800740e:	d11b      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x1d4>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d016      	beq.n	8007448 <HAL_SPI_TransmitReceive+0x1d4>
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	2b01      	cmp	r3, #1
 800741e:	d113      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007424:	881a      	ldrh	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007430:	1c9a      	adds	r2, r3, #2
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2201      	movs	r2, #1
 8007450:	4013      	ands	r3, r2
 8007452:	2b01      	cmp	r3, #1
 8007454:	d11c      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x21c>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2246      	movs	r2, #70	@ 0x46
 800745a:	5a9b      	ldrh	r3, [r3, r2]
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d016      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	b292      	uxth	r2, r2
 800746e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007474:	1c9a      	adds	r2, r3, #2
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2246      	movs	r2, #70	@ 0x46
 800747e:	5a9b      	ldrh	r3, [r3, r2]
 8007480:	b29b      	uxth	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	b299      	uxth	r1, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2246      	movs	r2, #70	@ 0x46
 800748a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800748c:	2301      	movs	r3, #1
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007490:	f7fd fa54 	bl	800493c <HAL_GetTick>
 8007494:	0002      	movs	r2, r0
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800749c:	429a      	cmp	r2, r3
 800749e:	d80b      	bhi.n	80074b8 <HAL_SPI_TransmitReceive+0x244>
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	3301      	adds	r3, #1
 80074a4:	d008      	beq.n	80074b8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80074a6:	2323      	movs	r3, #35	@ 0x23
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	2203      	movs	r2, #3
 80074ac:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	225d      	movs	r2, #93	@ 0x5d
 80074b2:	2101      	movs	r1, #1
 80074b4:	5499      	strb	r1, [r3, r2]
        goto error;
 80074b6:	e0b1      	b.n	800761c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d19f      	bne.n	8007402 <HAL_SPI_TransmitReceive+0x18e>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2246      	movs	r2, #70	@ 0x46
 80074c6:	5a9b      	ldrh	r3, [r3, r2]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d199      	bne.n	8007402 <HAL_SPI_TransmitReceive+0x18e>
 80074ce:	e089      	b.n	80075e4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_SPI_TransmitReceive+0x270>
 80074d8:	2312      	movs	r3, #18
 80074da:	18fb      	adds	r3, r7, r3
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d000      	beq.n	80074e4 <HAL_SPI_TransmitReceive+0x270>
 80074e2:	e074      	b.n	80075ce <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800750a:	e060      	b.n	80075ce <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2202      	movs	r2, #2
 8007514:	4013      	ands	r3, r2
 8007516:	2b02      	cmp	r3, #2
 8007518:	d11c      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x2e0>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d017      	beq.n	8007554 <HAL_SPI_TransmitReceive+0x2e0>
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	2b01      	cmp	r3, #1
 8007528:	d114      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	330c      	adds	r3, #12
 8007534:	7812      	ldrb	r2, [r2, #0]
 8007536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	2201      	movs	r2, #1
 800755c:	4013      	ands	r3, r2
 800755e:	2b01      	cmp	r3, #1
 8007560:	d11e      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x32c>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2246      	movs	r2, #70	@ 0x46
 8007566:	5a9b      	ldrh	r3, [r3, r2]
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d018      	beq.n	80075a0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	330c      	adds	r3, #12
 8007574:	001a      	movs	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	7812      	ldrb	r2, [r2, #0]
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2246      	movs	r2, #70	@ 0x46
 800758e:	5a9b      	ldrh	r3, [r3, r2]
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b299      	uxth	r1, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2246      	movs	r2, #70	@ 0x46
 800759a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800759c:	2301      	movs	r3, #1
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075a0:	f7fd f9cc 	bl	800493c <HAL_GetTick>
 80075a4:	0002      	movs	r2, r0
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d802      	bhi.n	80075b6 <HAL_SPI_TransmitReceive+0x342>
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	3301      	adds	r3, #1
 80075b4:	d102      	bne.n	80075bc <HAL_SPI_TransmitReceive+0x348>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d108      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80075bc:	2323      	movs	r3, #35	@ 0x23
 80075be:	18fb      	adds	r3, r7, r3
 80075c0:	2203      	movs	r2, #3
 80075c2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	225d      	movs	r2, #93	@ 0x5d
 80075c8:	2101      	movs	r1, #1
 80075ca:	5499      	strb	r1, [r3, r2]
        goto error;
 80075cc:	e026      	b.n	800761c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d199      	bne.n	800750c <HAL_SPI_TransmitReceive+0x298>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2246      	movs	r2, #70	@ 0x46
 80075dc:	5a9b      	ldrh	r3, [r3, r2]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d193      	bne.n	800750c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	0018      	movs	r0, r3
 80075ec:	f000 f9b2 	bl	8007954 <SPI_EndRxTxTransaction>
 80075f0:	1e03      	subs	r3, r0, #0
 80075f2:	d006      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80075f4:	2323      	movs	r3, #35	@ 0x23
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	2201      	movs	r2, #1
 80075fa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800760a:	2323      	movs	r3, #35	@ 0x23
 800760c:	18fb      	adds	r3, r7, r3
 800760e:	2201      	movs	r2, #1
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e003      	b.n	800761c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	225d      	movs	r2, #93	@ 0x5d
 8007618:	2101      	movs	r1, #1
 800761a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	225c      	movs	r2, #92	@ 0x5c
 8007620:	2100      	movs	r1, #0
 8007622:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007624:	2323      	movs	r3, #35	@ 0x23
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	781b      	ldrb	r3, [r3, #0]
}
 800762a:	0018      	movs	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	b00a      	add	sp, #40	@ 0x28
 8007630:	bd80      	pop	{r7, pc}
 8007632:	46c0      	nop			@ (mov r8, r8)
 8007634:	ffffefff 	.word	0xffffefff

08007638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	1dfb      	adds	r3, r7, #7
 8007646:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007648:	f7fd f978 	bl	800493c <HAL_GetTick>
 800764c:	0002      	movs	r2, r0
 800764e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	18d3      	adds	r3, r2, r3
 8007656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007658:	f7fd f970 	bl	800493c <HAL_GetTick>
 800765c:	0003      	movs	r3, r0
 800765e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007660:	4b3a      	ldr	r3, [pc, #232]	@ (800774c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	015b      	lsls	r3, r3, #5
 8007666:	0d1b      	lsrs	r3, r3, #20
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	4353      	muls	r3, r2
 800766c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800766e:	e058      	b.n	8007722 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	3301      	adds	r3, #1
 8007674:	d055      	beq.n	8007722 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007676:	f7fd f961 	bl	800493c <HAL_GetTick>
 800767a:	0002      	movs	r2, r0
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	429a      	cmp	r2, r3
 8007684:	d902      	bls.n	800768c <SPI_WaitFlagStateUntilTimeout+0x54>
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d142      	bne.n	8007712 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	21e0      	movs	r1, #224	@ 0xe0
 8007698:	438a      	bics	r2, r1
 800769a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	2382      	movs	r3, #130	@ 0x82
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d113      	bne.n	80076d0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	2380      	movs	r3, #128	@ 0x80
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d005      	beq.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	2380      	movs	r3, #128	@ 0x80
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	429a      	cmp	r2, r3
 80076be:	d107      	bne.n	80076d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2140      	movs	r1, #64	@ 0x40
 80076cc:	438a      	bics	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076d4:	2380      	movs	r3, #128	@ 0x80
 80076d6:	019b      	lsls	r3, r3, #6
 80076d8:	429a      	cmp	r2, r3
 80076da:	d110      	bne.n	80076fe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	491a      	ldr	r1, [pc, #104]	@ (8007750 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80076e8:	400a      	ands	r2, r1
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2180      	movs	r1, #128	@ 0x80
 80076f8:	0189      	lsls	r1, r1, #6
 80076fa:	430a      	orrs	r2, r1
 80076fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	225d      	movs	r2, #93	@ 0x5d
 8007702:	2101      	movs	r1, #1
 8007704:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	225c      	movs	r2, #92	@ 0x5c
 800770a:	2100      	movs	r1, #0
 800770c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e017      	b.n	8007742 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3b01      	subs	r3, #1
 8007720:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	4013      	ands	r3, r2
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	425a      	negs	r2, r3
 8007732:	4153      	adcs	r3, r2
 8007734:	b2db      	uxtb	r3, r3
 8007736:	001a      	movs	r2, r3
 8007738:	1dfb      	adds	r3, r7, #7
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d197      	bne.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	0018      	movs	r0, r3
 8007744:	46bd      	mov	sp, r7
 8007746:	b008      	add	sp, #32
 8007748:	bd80      	pop	{r7, pc}
 800774a:	46c0      	nop			@ (mov r8, r8)
 800774c:	2000000c 	.word	0x2000000c
 8007750:	ffffdfff 	.word	0xffffdfff

08007754 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	@ 0x28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007762:	2317      	movs	r3, #23
 8007764:	18fb      	adds	r3, r7, r3
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800776a:	f7fd f8e7 	bl	800493c <HAL_GetTick>
 800776e:	0002      	movs	r2, r0
 8007770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	18d3      	adds	r3, r2, r3
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800777a:	f7fd f8df 	bl	800493c <HAL_GetTick>
 800777e:	0003      	movs	r3, r0
 8007780:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	330c      	adds	r3, #12
 8007788:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800778a:	4b41      	ldr	r3, [pc, #260]	@ (8007890 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	0013      	movs	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	189b      	adds	r3, r3, r2
 8007794:	00da      	lsls	r2, r3, #3
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	0d1b      	lsrs	r3, r3, #20
 800779a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800779c:	4353      	muls	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80077a0:	e068      	b.n	8007874 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	23c0      	movs	r3, #192	@ 0xc0
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d10a      	bne.n	80077c2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d107      	bne.n	80077c2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	2117      	movs	r1, #23
 80077ba:	187b      	adds	r3, r7, r1
 80077bc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80077be:	187b      	adds	r3, r7, r1
 80077c0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	d055      	beq.n	8007874 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077c8:	f7fd f8b8 	bl	800493c <HAL_GetTick>
 80077cc:	0002      	movs	r2, r0
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d902      	bls.n	80077de <SPI_WaitFifoStateUntilTimeout+0x8a>
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d142      	bne.n	8007864 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	21e0      	movs	r1, #224	@ 0xe0
 80077ea:	438a      	bics	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	2382      	movs	r3, #130	@ 0x82
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d113      	bne.n	8007822 <SPI_WaitFifoStateUntilTimeout+0xce>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	2380      	movs	r3, #128	@ 0x80
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	429a      	cmp	r2, r3
 8007804:	d005      	beq.n	8007812 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	2380      	movs	r3, #128	@ 0x80
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	429a      	cmp	r2, r3
 8007810:	d107      	bne.n	8007822 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2140      	movs	r1, #64	@ 0x40
 800781e:	438a      	bics	r2, r1
 8007820:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007826:	2380      	movs	r3, #128	@ 0x80
 8007828:	019b      	lsls	r3, r3, #6
 800782a:	429a      	cmp	r2, r3
 800782c:	d110      	bne.n	8007850 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4916      	ldr	r1, [pc, #88]	@ (8007894 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800783a:	400a      	ands	r2, r1
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2180      	movs	r1, #128	@ 0x80
 800784a:	0189      	lsls	r1, r1, #6
 800784c:	430a      	orrs	r2, r1
 800784e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	225d      	movs	r2, #93	@ 0x5d
 8007854:	2101      	movs	r1, #1
 8007856:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	225c      	movs	r2, #92	@ 0x5c
 800785c:	2100      	movs	r1, #0
 800785e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e010      	b.n	8007886 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	3b01      	subs	r3, #1
 8007872:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	4013      	ands	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d18e      	bne.n	80077a2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	0018      	movs	r0, r3
 8007888:	46bd      	mov	sp, r7
 800788a:	b00a      	add	sp, #40	@ 0x28
 800788c:	bd80      	pop	{r7, pc}
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	2000000c 	.word	0x2000000c
 8007894:	ffffdfff 	.word	0xffffdfff

08007898 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	2382      	movs	r3, #130	@ 0x82
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d113      	bne.n	80078d8 <SPI_EndRxTransaction+0x40>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	2380      	movs	r3, #128	@ 0x80
 80078b6:	021b      	lsls	r3, r3, #8
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d005      	beq.n	80078c8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	2380      	movs	r3, #128	@ 0x80
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d107      	bne.n	80078d8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2140      	movs	r1, #64	@ 0x40
 80078d4:	438a      	bics	r2, r1
 80078d6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	0013      	movs	r3, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	2180      	movs	r1, #128	@ 0x80
 80078e6:	f7ff fea7 	bl	8007638 <SPI_WaitFlagStateUntilTimeout>
 80078ea:	1e03      	subs	r3, r0, #0
 80078ec:	d007      	beq.n	80078fe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078f2:	2220      	movs	r2, #32
 80078f4:	431a      	orrs	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e026      	b.n	800794c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	2382      	movs	r3, #130	@ 0x82
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	429a      	cmp	r2, r3
 8007908:	d11f      	bne.n	800794a <SPI_EndRxTransaction+0xb2>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	2380      	movs	r3, #128	@ 0x80
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	429a      	cmp	r2, r3
 8007914:	d005      	beq.n	8007922 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	2380      	movs	r3, #128	@ 0x80
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	429a      	cmp	r2, r3
 8007920:	d113      	bne.n	800794a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	23c0      	movs	r3, #192	@ 0xc0
 8007926:	00d9      	lsls	r1, r3, #3
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	0013      	movs	r3, r2
 8007930:	2200      	movs	r2, #0
 8007932:	f7ff ff0f 	bl	8007754 <SPI_WaitFifoStateUntilTimeout>
 8007936:	1e03      	subs	r3, r0, #0
 8007938:	d007      	beq.n	800794a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800793e:	2220      	movs	r2, #32
 8007940:	431a      	orrs	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e000      	b.n	800794c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	0018      	movs	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	b004      	add	sp, #16
 8007952:	bd80      	pop	{r7, pc}

08007954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af02      	add	r7, sp, #8
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	23c0      	movs	r3, #192	@ 0xc0
 8007964:	0159      	lsls	r1, r3, #5
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	0013      	movs	r3, r2
 800796e:	2200      	movs	r2, #0
 8007970:	f7ff fef0 	bl	8007754 <SPI_WaitFifoStateUntilTimeout>
 8007974:	1e03      	subs	r3, r0, #0
 8007976:	d007      	beq.n	8007988 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800797c:	2220      	movs	r2, #32
 800797e:	431a      	orrs	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e027      	b.n	80079d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	0013      	movs	r3, r2
 8007992:	2200      	movs	r2, #0
 8007994:	2180      	movs	r1, #128	@ 0x80
 8007996:	f7ff fe4f 	bl	8007638 <SPI_WaitFlagStateUntilTimeout>
 800799a:	1e03      	subs	r3, r0, #0
 800799c:	d007      	beq.n	80079ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079a2:	2220      	movs	r2, #32
 80079a4:	431a      	orrs	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e014      	b.n	80079d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	23c0      	movs	r3, #192	@ 0xc0
 80079b2:	00d9      	lsls	r1, r3, #3
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	0013      	movs	r3, r2
 80079bc:	2200      	movs	r2, #0
 80079be:	f7ff fec9 	bl	8007754 <SPI_WaitFifoStateUntilTimeout>
 80079c2:	1e03      	subs	r3, r0, #0
 80079c4:	d007      	beq.n	80079d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079ca:	2220      	movs	r2, #32
 80079cc:	431a      	orrs	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e000      	b.n	80079d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	0018      	movs	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	b004      	add	sp, #16
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e042      	b.n	8007a78 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	223d      	movs	r2, #61	@ 0x3d
 80079f6:	5c9b      	ldrb	r3, [r3, r2]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d107      	bne.n	8007a0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	223c      	movs	r2, #60	@ 0x3c
 8007a02:	2100      	movs	r1, #0
 8007a04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f7fc fd89 	bl	8004520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	223d      	movs	r2, #61	@ 0x3d
 8007a12:	2102      	movs	r1, #2
 8007a14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	0019      	movs	r1, r3
 8007a20:	0010      	movs	r0, r2
 8007a22:	f000 fa9f 	bl	8007f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2246      	movs	r2, #70	@ 0x46
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	223e      	movs	r2, #62	@ 0x3e
 8007a32:	2101      	movs	r1, #1
 8007a34:	5499      	strb	r1, [r3, r2]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	223f      	movs	r2, #63	@ 0x3f
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	5499      	strb	r1, [r3, r2]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2240      	movs	r2, #64	@ 0x40
 8007a42:	2101      	movs	r1, #1
 8007a44:	5499      	strb	r1, [r3, r2]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2241      	movs	r2, #65	@ 0x41
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2242      	movs	r2, #66	@ 0x42
 8007a52:	2101      	movs	r1, #1
 8007a54:	5499      	strb	r1, [r3, r2]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2243      	movs	r2, #67	@ 0x43
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	5499      	strb	r1, [r3, r2]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2244      	movs	r2, #68	@ 0x44
 8007a62:	2101      	movs	r1, #1
 8007a64:	5499      	strb	r1, [r3, r2]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2245      	movs	r2, #69	@ 0x45
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	223d      	movs	r2, #61	@ 0x3d
 8007a72:	2101      	movs	r1, #1
 8007a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	0018      	movs	r0, r3
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b002      	add	sp, #8
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	223d      	movs	r2, #61	@ 0x3d
 8007a8c:	5c9b      	ldrb	r3, [r3, r2]
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d001      	beq.n	8007a98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e02d      	b.n	8007af4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	223d      	movs	r2, #61	@ 0x3d
 8007a9c:	2102      	movs	r1, #2
 8007a9e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a15      	ldr	r2, [pc, #84]	@ (8007afc <HAL_TIM_Base_Start+0x7c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d009      	beq.n	8007abe <HAL_TIM_Base_Start+0x3e>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a14      	ldr	r2, [pc, #80]	@ (8007b00 <HAL_TIM_Base_Start+0x80>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d004      	beq.n	8007abe <HAL_TIM_Base_Start+0x3e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a12      	ldr	r2, [pc, #72]	@ (8007b04 <HAL_TIM_Base_Start+0x84>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d111      	bne.n	8007ae2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	2207      	movs	r2, #7
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b06      	cmp	r3, #6
 8007ace:	d010      	beq.n	8007af2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2101      	movs	r1, #1
 8007adc:	430a      	orrs	r2, r1
 8007ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae0:	e007      	b.n	8007af2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2101      	movs	r1, #1
 8007aee:	430a      	orrs	r2, r1
 8007af0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	0018      	movs	r0, r3
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b004      	add	sp, #16
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40012c00 	.word	0x40012c00
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40014000 	.word	0x40014000

08007b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	223d      	movs	r2, #61	@ 0x3d
 8007b14:	5c9b      	ldrb	r3, [r3, r2]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d001      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e035      	b.n	8007b8c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	223d      	movs	r2, #61	@ 0x3d
 8007b24:	2102      	movs	r1, #2
 8007b26:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2101      	movs	r1, #1
 8007b34:	430a      	orrs	r2, r1
 8007b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a15      	ldr	r2, [pc, #84]	@ (8007b94 <HAL_TIM_Base_Start_IT+0x8c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d009      	beq.n	8007b56 <HAL_TIM_Base_Start_IT+0x4e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a14      	ldr	r2, [pc, #80]	@ (8007b98 <HAL_TIM_Base_Start_IT+0x90>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d004      	beq.n	8007b56 <HAL_TIM_Base_Start_IT+0x4e>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a12      	ldr	r2, [pc, #72]	@ (8007b9c <HAL_TIM_Base_Start_IT+0x94>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d111      	bne.n	8007b7a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2207      	movs	r2, #7
 8007b5e:	4013      	ands	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b06      	cmp	r3, #6
 8007b66:	d010      	beq.n	8007b8a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2101      	movs	r1, #1
 8007b74:	430a      	orrs	r2, r1
 8007b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b78:	e007      	b.n	8007b8a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2101      	movs	r1, #1
 8007b86:	430a      	orrs	r2, r1
 8007b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b004      	add	sp, #16
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40014000 	.word	0x40014000

08007ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d021      	beq.n	8007c04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	d01d      	beq.n	8007c04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2203      	movs	r2, #3
 8007bce:	4252      	negs	r2, r2
 8007bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	2203      	movs	r2, #3
 8007be0:	4013      	ands	r3, r2
 8007be2:	d004      	beq.n	8007bee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	0018      	movs	r0, r3
 8007be8:	f000 f9a4 	bl	8007f34 <HAL_TIM_IC_CaptureCallback>
 8007bec:	e007      	b.n	8007bfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f000 f997 	bl	8007f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	f000 f9a3 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2204      	movs	r2, #4
 8007c08:	4013      	ands	r3, r2
 8007c0a:	d022      	beq.n	8007c52 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2204      	movs	r2, #4
 8007c10:	4013      	ands	r3, r2
 8007c12:	d01e      	beq.n	8007c52 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2205      	movs	r2, #5
 8007c1a:	4252      	negs	r2, r2
 8007c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2202      	movs	r2, #2
 8007c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	23c0      	movs	r3, #192	@ 0xc0
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4013      	ands	r3, r2
 8007c30:	d004      	beq.n	8007c3c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	0018      	movs	r0, r3
 8007c36:	f000 f97d 	bl	8007f34 <HAL_TIM_IC_CaptureCallback>
 8007c3a:	e007      	b.n	8007c4c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f000 f970 	bl	8007f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	0018      	movs	r0, r3
 8007c48:	f000 f97c 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2208      	movs	r2, #8
 8007c56:	4013      	ands	r3, r2
 8007c58:	d021      	beq.n	8007c9e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2208      	movs	r2, #8
 8007c5e:	4013      	ands	r3, r2
 8007c60:	d01d      	beq.n	8007c9e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2209      	movs	r2, #9
 8007c68:	4252      	negs	r2, r2
 8007c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2204      	movs	r2, #4
 8007c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	2203      	movs	r2, #3
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	d004      	beq.n	8007c88 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	0018      	movs	r0, r3
 8007c82:	f000 f957 	bl	8007f34 <HAL_TIM_IC_CaptureCallback>
 8007c86:	e007      	b.n	8007c98 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	f000 f94a 	bl	8007f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	0018      	movs	r0, r3
 8007c94:	f000 f956 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2210      	movs	r2, #16
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	d022      	beq.n	8007cec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2210      	movs	r2, #16
 8007caa:	4013      	ands	r3, r2
 8007cac:	d01e      	beq.n	8007cec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2211      	movs	r2, #17
 8007cb4:	4252      	negs	r2, r2
 8007cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2208      	movs	r2, #8
 8007cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	23c0      	movs	r3, #192	@ 0xc0
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4013      	ands	r3, r2
 8007cca:	d004      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	0018      	movs	r0, r3
 8007cd0:	f000 f930 	bl	8007f34 <HAL_TIM_IC_CaptureCallback>
 8007cd4:	e007      	b.n	8007ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f000 f923 	bl	8007f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f000 f92f 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	d00c      	beq.n	8007d0e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	d008      	beq.n	8007d0e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2202      	movs	r2, #2
 8007d02:	4252      	negs	r2, r2
 8007d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f7fb fbbb 	bl	8003484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2280      	movs	r2, #128	@ 0x80
 8007d12:	4013      	ands	r3, r2
 8007d14:	d00c      	beq.n	8007d30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2280      	movs	r2, #128	@ 0x80
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	d008      	beq.n	8007d30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2281      	movs	r2, #129	@ 0x81
 8007d24:	4252      	negs	r2, r2
 8007d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f000 fa98 	bl	8008260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2240      	movs	r2, #64	@ 0x40
 8007d34:	4013      	ands	r3, r2
 8007d36:	d00c      	beq.n	8007d52 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2240      	movs	r2, #64	@ 0x40
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d008      	beq.n	8007d52 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2241      	movs	r2, #65	@ 0x41
 8007d46:	4252      	negs	r2, r2
 8007d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f000 f901 	bl	8007f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2220      	movs	r2, #32
 8007d56:	4013      	ands	r3, r2
 8007d58:	d00c      	beq.n	8007d74 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	4013      	ands	r3, r2
 8007d60:	d008      	beq.n	8007d74 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2221      	movs	r2, #33	@ 0x21
 8007d68:	4252      	negs	r2, r2
 8007d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f000 fa6e 	bl	8008250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d74:	46c0      	nop			@ (mov r8, r8)
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b004      	add	sp, #16
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d86:	230f      	movs	r3, #15
 8007d88:	18fb      	adds	r3, r7, r3
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	223c      	movs	r2, #60	@ 0x3c
 8007d92:	5c9b      	ldrb	r3, [r3, r2]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_TIM_ConfigClockSource+0x20>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e0bc      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x19a>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	223c      	movs	r2, #60	@ 0x3c
 8007da0:	2101      	movs	r1, #1
 8007da2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	223d      	movs	r2, #61	@ 0x3d
 8007da8:	2102      	movs	r1, #2
 8007daa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2277      	movs	r2, #119	@ 0x77
 8007db8:	4393      	bics	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4a58      	ldr	r2, [pc, #352]	@ (8007f20 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2280      	movs	r2, #128	@ 0x80
 8007dd2:	0192      	lsls	r2, r2, #6
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d040      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0xde>
 8007dd8:	2280      	movs	r2, #128	@ 0x80
 8007dda:	0192      	lsls	r2, r2, #6
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d900      	bls.n	8007de2 <HAL_TIM_ConfigClockSource+0x66>
 8007de0:	e088      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x178>
 8007de2:	2280      	movs	r2, #128	@ 0x80
 8007de4:	0152      	lsls	r2, r2, #5
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d100      	bne.n	8007dec <HAL_TIM_ConfigClockSource+0x70>
 8007dea:	e088      	b.n	8007efe <HAL_TIM_ConfigClockSource+0x182>
 8007dec:	2280      	movs	r2, #128	@ 0x80
 8007dee:	0152      	lsls	r2, r2, #5
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d900      	bls.n	8007df6 <HAL_TIM_ConfigClockSource+0x7a>
 8007df4:	e07e      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x178>
 8007df6:	2b70      	cmp	r3, #112	@ 0x70
 8007df8:	d018      	beq.n	8007e2c <HAL_TIM_ConfigClockSource+0xb0>
 8007dfa:	d900      	bls.n	8007dfe <HAL_TIM_ConfigClockSource+0x82>
 8007dfc:	e07a      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x178>
 8007dfe:	2b60      	cmp	r3, #96	@ 0x60
 8007e00:	d04f      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x126>
 8007e02:	d900      	bls.n	8007e06 <HAL_TIM_ConfigClockSource+0x8a>
 8007e04:	e076      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x178>
 8007e06:	2b50      	cmp	r3, #80	@ 0x50
 8007e08:	d03b      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0x106>
 8007e0a:	d900      	bls.n	8007e0e <HAL_TIM_ConfigClockSource+0x92>
 8007e0c:	e072      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x178>
 8007e0e:	2b40      	cmp	r3, #64	@ 0x40
 8007e10:	d057      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0x146>
 8007e12:	d900      	bls.n	8007e16 <HAL_TIM_ConfigClockSource+0x9a>
 8007e14:	e06e      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x178>
 8007e16:	2b30      	cmp	r3, #48	@ 0x30
 8007e18:	d063      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x166>
 8007e1a:	d86b      	bhi.n	8007ef4 <HAL_TIM_ConfigClockSource+0x178>
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d060      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x166>
 8007e20:	d868      	bhi.n	8007ef4 <HAL_TIM_ConfigClockSource+0x178>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d05d      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x166>
 8007e26:	2b10      	cmp	r3, #16
 8007e28:	d05b      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x166>
 8007e2a:	e063      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e3c:	f000 f990 	bl	8008160 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2277      	movs	r2, #119	@ 0x77
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	609a      	str	r2, [r3, #8]
      break;
 8007e58:	e052      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e6a:	f000 f979 	bl	8008160 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2180      	movs	r1, #128	@ 0x80
 8007e7a:	01c9      	lsls	r1, r1, #7
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	609a      	str	r2, [r3, #8]
      break;
 8007e80:	e03e      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8e:	001a      	movs	r2, r3
 8007e90:	f000 f8ec 	bl	800806c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2150      	movs	r1, #80	@ 0x50
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f000 f946 	bl	800812c <TIM_ITRx_SetConfig>
      break;
 8007ea0:	e02e      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eae:	001a      	movs	r2, r3
 8007eb0:	f000 f90a 	bl	80080c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2160      	movs	r1, #96	@ 0x60
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f000 f936 	bl	800812c <TIM_ITRx_SetConfig>
      break;
 8007ec0:	e01e      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ece:	001a      	movs	r2, r3
 8007ed0:	f000 f8cc 	bl	800806c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2140      	movs	r1, #64	@ 0x40
 8007eda:	0018      	movs	r0, r3
 8007edc:	f000 f926 	bl	800812c <TIM_ITRx_SetConfig>
      break;
 8007ee0:	e00e      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	0019      	movs	r1, r3
 8007eec:	0010      	movs	r0, r2
 8007eee:	f000 f91d 	bl	800812c <TIM_ITRx_SetConfig>
      break;
 8007ef2:	e005      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007ef4:	230f      	movs	r3, #15
 8007ef6:	18fb      	adds	r3, r7, r3
 8007ef8:	2201      	movs	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]
      break;
 8007efc:	e000      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007efe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	223d      	movs	r2, #61	@ 0x3d
 8007f04:	2101      	movs	r1, #1
 8007f06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	223c      	movs	r2, #60	@ 0x3c
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	5499      	strb	r1, [r3, r2]

  return status;
 8007f10:	230f      	movs	r3, #15
 8007f12:	18fb      	adds	r3, r7, r3
 8007f14:	781b      	ldrb	r3, [r3, #0]
}
 8007f16:	0018      	movs	r0, r3
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	b004      	add	sp, #16
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	46c0      	nop			@ (mov r8, r8)
 8007f20:	ffff00ff 	.word	0xffff00ff

08007f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f2c:	46c0      	nop			@ (mov r8, r8)
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b002      	add	sp, #8
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f3c:	46c0      	nop			@ (mov r8, r8)
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b002      	add	sp, #8
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f4c:	46c0      	nop			@ (mov r8, r8)
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	b002      	add	sp, #8
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f5c:	46c0      	nop			@ (mov r8, r8)
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	b002      	add	sp, #8
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a36      	ldr	r2, [pc, #216]	@ (8008050 <TIM_Base_SetConfig+0xec>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <TIM_Base_SetConfig+0x20>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a35      	ldr	r2, [pc, #212]	@ (8008054 <TIM_Base_SetConfig+0xf0>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d108      	bne.n	8007f96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2270      	movs	r2, #112	@ 0x70
 8007f88:	4393      	bics	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a2d      	ldr	r2, [pc, #180]	@ (8008050 <TIM_Base_SetConfig+0xec>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d013      	beq.n	8007fc6 <TIM_Base_SetConfig+0x62>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8008054 <TIM_Base_SetConfig+0xf0>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d00f      	beq.n	8007fc6 <TIM_Base_SetConfig+0x62>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8008058 <TIM_Base_SetConfig+0xf4>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00b      	beq.n	8007fc6 <TIM_Base_SetConfig+0x62>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800805c <TIM_Base_SetConfig+0xf8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d007      	beq.n	8007fc6 <TIM_Base_SetConfig+0x62>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a29      	ldr	r2, [pc, #164]	@ (8008060 <TIM_Base_SetConfig+0xfc>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d003      	beq.n	8007fc6 <TIM_Base_SetConfig+0x62>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a28      	ldr	r2, [pc, #160]	@ (8008064 <TIM_Base_SetConfig+0x100>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d108      	bne.n	8007fd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4a27      	ldr	r2, [pc, #156]	@ (8008068 <TIM_Base_SetConfig+0x104>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2280      	movs	r2, #128	@ 0x80
 8007fdc:	4393      	bics	r3, r2
 8007fde:	001a      	movs	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a13      	ldr	r2, [pc, #76]	@ (8008050 <TIM_Base_SetConfig+0xec>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00b      	beq.n	800801e <TIM_Base_SetConfig+0xba>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a14      	ldr	r2, [pc, #80]	@ (800805c <TIM_Base_SetConfig+0xf8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d007      	beq.n	800801e <TIM_Base_SetConfig+0xba>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a13      	ldr	r2, [pc, #76]	@ (8008060 <TIM_Base_SetConfig+0xfc>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d003      	beq.n	800801e <TIM_Base_SetConfig+0xba>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a12      	ldr	r2, [pc, #72]	@ (8008064 <TIM_Base_SetConfig+0x100>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d103      	bne.n	8008026 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	691a      	ldr	r2, [r3, #16]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2201      	movs	r2, #1
 8008032:	4013      	ands	r3, r2
 8008034:	2b01      	cmp	r3, #1
 8008036:	d106      	bne.n	8008046 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	2201      	movs	r2, #1
 800803e:	4393      	bics	r3, r2
 8008040:	001a      	movs	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	611a      	str	r2, [r3, #16]
  }
}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	46bd      	mov	sp, r7
 800804a:	b004      	add	sp, #16
 800804c:	bd80      	pop	{r7, pc}
 800804e:	46c0      	nop			@ (mov r8, r8)
 8008050:	40012c00 	.word	0x40012c00
 8008054:	40000400 	.word	0x40000400
 8008058:	40002000 	.word	0x40002000
 800805c:	40014000 	.word	0x40014000
 8008060:	40014400 	.word	0x40014400
 8008064:	40014800 	.word	0x40014800
 8008068:	fffffcff 	.word	0xfffffcff

0800806c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	2201      	movs	r2, #1
 8008084:	4393      	bics	r3, r2
 8008086:	001a      	movs	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	22f0      	movs	r2, #240	@ 0xf0
 8008096:	4393      	bics	r3, r2
 8008098:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	220a      	movs	r2, #10
 80080a8:	4393      	bics	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	621a      	str	r2, [r3, #32]
}
 80080c0:	46c0      	nop			@ (mov r8, r8)
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b006      	add	sp, #24
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	2210      	movs	r2, #16
 80080e0:	4393      	bics	r3, r2
 80080e2:	001a      	movs	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008128 <TIM_TI2_ConfigInputStage+0x60>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	031b      	lsls	r3, r3, #12
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	22a0      	movs	r2, #160	@ 0xa0
 8008104:	4393      	bics	r3, r2
 8008106:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	4313      	orrs	r3, r2
 8008110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	621a      	str	r2, [r3, #32]
}
 800811e:	46c0      	nop			@ (mov r8, r8)
 8008120:	46bd      	mov	sp, r7
 8008122:	b006      	add	sp, #24
 8008124:	bd80      	pop	{r7, pc}
 8008126:	46c0      	nop			@ (mov r8, r8)
 8008128:	ffff0fff 	.word	0xffff0fff

0800812c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2270      	movs	r2, #112	@ 0x70
 8008140:	4393      	bics	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4313      	orrs	r3, r2
 800814a:	2207      	movs	r2, #7
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	609a      	str	r2, [r3, #8]
}
 8008156:	46c0      	nop			@ (mov r8, r8)
 8008158:	46bd      	mov	sp, r7
 800815a:	b004      	add	sp, #16
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	4a09      	ldr	r2, [pc, #36]	@ (800819c <TIM_ETR_SetConfig+0x3c>)
 8008178:	4013      	ands	r3, r2
 800817a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	431a      	orrs	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4313      	orrs	r3, r2
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	609a      	str	r2, [r3, #8]
}
 8008194:	46c0      	nop			@ (mov r8, r8)
 8008196:	46bd      	mov	sp, r7
 8008198:	b006      	add	sp, #24
 800819a:	bd80      	pop	{r7, pc}
 800819c:	ffff00ff 	.word	0xffff00ff

080081a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	223c      	movs	r2, #60	@ 0x3c
 80081ae:	5c9b      	ldrb	r3, [r3, r2]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e041      	b.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	223c      	movs	r2, #60	@ 0x3c
 80081bc:	2101      	movs	r1, #1
 80081be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	223d      	movs	r2, #61	@ 0x3d
 80081c4:	2102      	movs	r1, #2
 80081c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2270      	movs	r2, #112	@ 0x70
 80081dc:	4393      	bics	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a13      	ldr	r2, [pc, #76]	@ (8008244 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d009      	beq.n	8008210 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a11      	ldr	r2, [pc, #68]	@ (8008248 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d004      	beq.n	8008210 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a10      	ldr	r2, [pc, #64]	@ (800824c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10c      	bne.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2280      	movs	r2, #128	@ 0x80
 8008214:	4393      	bics	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	4313      	orrs	r3, r2
 8008220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	223d      	movs	r2, #61	@ 0x3d
 800822e:	2101      	movs	r1, #1
 8008230:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	223c      	movs	r2, #60	@ 0x3c
 8008236:	2100      	movs	r1, #0
 8008238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	0018      	movs	r0, r3
 800823e:	46bd      	mov	sp, r7
 8008240:	b004      	add	sp, #16
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40012c00 	.word	0x40012c00
 8008248:	40000400 	.word	0x40000400
 800824c:	40014000 	.word	0x40014000

08008250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008258:	46c0      	nop			@ (mov r8, r8)
 800825a:	46bd      	mov	sp, r7
 800825c:	b002      	add	sp, #8
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008268:	46c0      	nop			@ (mov r8, r8)
 800826a:	46bd      	mov	sp, r7
 800826c:	b002      	add	sp, #8
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e044      	b.n	800830c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d107      	bne.n	800829a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2278      	movs	r2, #120	@ 0x78
 800828e:	2100      	movs	r1, #0
 8008290:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	0018      	movs	r0, r3
 8008296:	f7fc f981 	bl	800459c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2224      	movs	r2, #36	@ 0x24
 800829e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2101      	movs	r1, #1
 80082ac:	438a      	bics	r2, r1
 80082ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d003      	beq.n	80082c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	0018      	movs	r0, r3
 80082bc:	f000 fd46 	bl	8008d4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	0018      	movs	r0, r3
 80082c4:	f000 fc02 	bl	8008acc <UART_SetConfig>
 80082c8:	0003      	movs	r3, r0
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e01c      	b.n	800830c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	490d      	ldr	r1, [pc, #52]	@ (8008314 <HAL_UART_Init+0xa4>)
 80082de:	400a      	ands	r2, r1
 80082e0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2108      	movs	r1, #8
 80082ee:	438a      	bics	r2, r1
 80082f0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2101      	movs	r1, #1
 80082fe:	430a      	orrs	r2, r1
 8008300:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	0018      	movs	r0, r3
 8008306:	f000 fdd5 	bl	8008eb4 <UART_CheckIdleState>
 800830a:	0003      	movs	r3, r0
}
 800830c:	0018      	movs	r0, r3
 800830e:	46bd      	mov	sp, r7
 8008310:	b002      	add	sp, #8
 8008312:	bd80      	pop	{r7, pc}
 8008314:	fffff7ff 	.word	0xfffff7ff

08008318 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	@ 0x28
 800831c:	af02      	add	r7, sp, #8
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	1dbb      	adds	r3, r7, #6
 8008326:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800832c:	2b20      	cmp	r3, #32
 800832e:	d000      	beq.n	8008332 <HAL_UART_Transmit+0x1a>
 8008330:	e08c      	b.n	800844c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_UART_Transmit+0x28>
 8008338:	1dbb      	adds	r3, r7, #6
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e084      	b.n	800844e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	2380      	movs	r3, #128	@ 0x80
 800834a:	015b      	lsls	r3, r3, #5
 800834c:	429a      	cmp	r2, r3
 800834e:	d109      	bne.n	8008364 <HAL_UART_Transmit+0x4c>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d105      	bne.n	8008364 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2201      	movs	r2, #1
 800835c:	4013      	ands	r3, r2
 800835e:	d001      	beq.n	8008364 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e074      	b.n	800844e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2284      	movs	r2, #132	@ 0x84
 8008368:	2100      	movs	r1, #0
 800836a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2221      	movs	r2, #33	@ 0x21
 8008370:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008372:	f7fc fae3 	bl	800493c <HAL_GetTick>
 8008376:	0003      	movs	r3, r0
 8008378:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1dba      	adds	r2, r7, #6
 800837e:	2150      	movs	r1, #80	@ 0x50
 8008380:	8812      	ldrh	r2, [r2, #0]
 8008382:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	1dba      	adds	r2, r7, #6
 8008388:	2152      	movs	r1, #82	@ 0x52
 800838a:	8812      	ldrh	r2, [r2, #0]
 800838c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	689a      	ldr	r2, [r3, #8]
 8008392:	2380      	movs	r3, #128	@ 0x80
 8008394:	015b      	lsls	r3, r3, #5
 8008396:	429a      	cmp	r2, r3
 8008398:	d108      	bne.n	80083ac <HAL_UART_Transmit+0x94>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d104      	bne.n	80083ac <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	61bb      	str	r3, [r7, #24]
 80083aa:	e003      	b.n	80083b4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083b4:	e02f      	b.n	8008416 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	0013      	movs	r3, r2
 80083c0:	2200      	movs	r2, #0
 80083c2:	2180      	movs	r1, #128	@ 0x80
 80083c4:	f000 fe1e 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 80083c8:	1e03      	subs	r3, r0, #0
 80083ca:	d004      	beq.n	80083d6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e03b      	b.n	800844e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10b      	bne.n	80083f4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	881a      	ldrh	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	05d2      	lsls	r2, r2, #23
 80083e6:	0dd2      	lsrs	r2, r2, #23
 80083e8:	b292      	uxth	r2, r2
 80083ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	3302      	adds	r3, #2
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	e007      	b.n	8008404 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	781a      	ldrb	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	3301      	adds	r3, #1
 8008402:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2252      	movs	r2, #82	@ 0x52
 8008408:	5a9b      	ldrh	r3, [r3, r2]
 800840a:	b29b      	uxth	r3, r3
 800840c:	3b01      	subs	r3, #1
 800840e:	b299      	uxth	r1, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2252      	movs	r2, #82	@ 0x52
 8008414:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2252      	movs	r2, #82	@ 0x52
 800841a:	5a9b      	ldrh	r3, [r3, r2]
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1c9      	bne.n	80083b6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	0013      	movs	r3, r2
 800842c:	2200      	movs	r2, #0
 800842e:	2140      	movs	r1, #64	@ 0x40
 8008430:	f000 fde8 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 8008434:	1e03      	subs	r3, r0, #0
 8008436:	d004      	beq.n	8008442 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2220      	movs	r2, #32
 800843c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e005      	b.n	800844e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	e000      	b.n	800844e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800844c:	2302      	movs	r3, #2
  }
}
 800844e:	0018      	movs	r0, r3
 8008450:	46bd      	mov	sp, r7
 8008452:	b008      	add	sp, #32
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b088      	sub	sp, #32
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	1dbb      	adds	r3, r7, #6
 8008462:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2280      	movs	r2, #128	@ 0x80
 8008468:	589b      	ldr	r3, [r3, r2]
 800846a:	2b20      	cmp	r3, #32
 800846c:	d145      	bne.n	80084fa <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_UART_Receive_IT+0x26>
 8008474:	1dbb      	adds	r3, r7, #6
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e03d      	b.n	80084fc <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	2380      	movs	r3, #128	@ 0x80
 8008486:	015b      	lsls	r3, r3, #5
 8008488:	429a      	cmp	r2, r3
 800848a:	d109      	bne.n	80084a0 <HAL_UART_Receive_IT+0x4a>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d105      	bne.n	80084a0 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2201      	movs	r2, #1
 8008498:	4013      	ands	r3, r2
 800849a:	d001      	beq.n	80084a0 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e02d      	b.n	80084fc <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	2380      	movs	r3, #128	@ 0x80
 80084ae:	041b      	lsls	r3, r3, #16
 80084b0:	4013      	ands	r3, r2
 80084b2:	d019      	beq.n	80084e8 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084b4:	f3ef 8310 	mrs	r3, PRIMASK
 80084b8:	613b      	str	r3, [r7, #16]
  return(result);
 80084ba:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084bc:	61fb      	str	r3, [r7, #28]
 80084be:	2301      	movs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f383 8810 	msr	PRIMASK, r3
}
 80084c8:	46c0      	nop			@ (mov r8, r8)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2180      	movs	r1, #128	@ 0x80
 80084d6:	04c9      	lsls	r1, r1, #19
 80084d8:	430a      	orrs	r2, r1
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	f383 8810 	msr	PRIMASK, r3
}
 80084e6:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084e8:	1dbb      	adds	r3, r7, #6
 80084ea:	881a      	ldrh	r2, [r3, #0]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	0018      	movs	r0, r3
 80084f2:	f000 fdf7 	bl	80090e4 <UART_Start_Receive_IT>
 80084f6:	0003      	movs	r3, r0
 80084f8:	e000      	b.n	80084fc <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80084fa:	2302      	movs	r3, #2
  }
}
 80084fc:	0018      	movs	r0, r3
 80084fe:	46bd      	mov	sp, r7
 8008500:	b008      	add	sp, #32
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008504:	b590      	push	{r4, r7, lr}
 8008506:	b0ab      	sub	sp, #172	@ 0xac
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	22a4      	movs	r2, #164	@ 0xa4
 8008514:	18b9      	adds	r1, r7, r2
 8008516:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	20a0      	movs	r0, #160	@ 0xa0
 8008520:	1839      	adds	r1, r7, r0
 8008522:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	219c      	movs	r1, #156	@ 0x9c
 800852c:	1879      	adds	r1, r7, r1
 800852e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008530:	0011      	movs	r1, r2
 8008532:	18bb      	adds	r3, r7, r2
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a99      	ldr	r2, [pc, #612]	@ (800879c <HAL_UART_IRQHandler+0x298>)
 8008538:	4013      	ands	r3, r2
 800853a:	2298      	movs	r2, #152	@ 0x98
 800853c:	18bc      	adds	r4, r7, r2
 800853e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008540:	18bb      	adds	r3, r7, r2
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d114      	bne.n	8008572 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008548:	187b      	adds	r3, r7, r1
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2220      	movs	r2, #32
 800854e:	4013      	ands	r3, r2
 8008550:	d00f      	beq.n	8008572 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008552:	183b      	adds	r3, r7, r0
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2220      	movs	r2, #32
 8008558:	4013      	ands	r3, r2
 800855a:	d00a      	beq.n	8008572 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008560:	2b00      	cmp	r3, #0
 8008562:	d100      	bne.n	8008566 <HAL_UART_IRQHandler+0x62>
 8008564:	e286      	b.n	8008a74 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	0010      	movs	r0, r2
 800856e:	4798      	blx	r3
      }
      return;
 8008570:	e280      	b.n	8008a74 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008572:	2398      	movs	r3, #152	@ 0x98
 8008574:	18fb      	adds	r3, r7, r3
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d100      	bne.n	800857e <HAL_UART_IRQHandler+0x7a>
 800857c:	e114      	b.n	80087a8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800857e:	239c      	movs	r3, #156	@ 0x9c
 8008580:	18fb      	adds	r3, r7, r3
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2201      	movs	r2, #1
 8008586:	4013      	ands	r3, r2
 8008588:	d106      	bne.n	8008598 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800858a:	23a0      	movs	r3, #160	@ 0xa0
 800858c:	18fb      	adds	r3, r7, r3
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a83      	ldr	r2, [pc, #524]	@ (80087a0 <HAL_UART_IRQHandler+0x29c>)
 8008592:	4013      	ands	r3, r2
 8008594:	d100      	bne.n	8008598 <HAL_UART_IRQHandler+0x94>
 8008596:	e107      	b.n	80087a8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008598:	23a4      	movs	r3, #164	@ 0xa4
 800859a:	18fb      	adds	r3, r7, r3
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2201      	movs	r2, #1
 80085a0:	4013      	ands	r3, r2
 80085a2:	d012      	beq.n	80085ca <HAL_UART_IRQHandler+0xc6>
 80085a4:	23a0      	movs	r3, #160	@ 0xa0
 80085a6:	18fb      	adds	r3, r7, r3
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	2380      	movs	r3, #128	@ 0x80
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	4013      	ands	r3, r2
 80085b0:	d00b      	beq.n	80085ca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2201      	movs	r2, #1
 80085b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2284      	movs	r2, #132	@ 0x84
 80085be:	589b      	ldr	r3, [r3, r2]
 80085c0:	2201      	movs	r2, #1
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2184      	movs	r1, #132	@ 0x84
 80085c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085ca:	23a4      	movs	r3, #164	@ 0xa4
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2202      	movs	r2, #2
 80085d2:	4013      	ands	r3, r2
 80085d4:	d011      	beq.n	80085fa <HAL_UART_IRQHandler+0xf6>
 80085d6:	239c      	movs	r3, #156	@ 0x9c
 80085d8:	18fb      	adds	r3, r7, r3
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2201      	movs	r2, #1
 80085de:	4013      	ands	r3, r2
 80085e0:	d00b      	beq.n	80085fa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2202      	movs	r2, #2
 80085e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2284      	movs	r2, #132	@ 0x84
 80085ee:	589b      	ldr	r3, [r3, r2]
 80085f0:	2204      	movs	r2, #4
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2184      	movs	r1, #132	@ 0x84
 80085f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085fa:	23a4      	movs	r3, #164	@ 0xa4
 80085fc:	18fb      	adds	r3, r7, r3
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2204      	movs	r2, #4
 8008602:	4013      	ands	r3, r2
 8008604:	d011      	beq.n	800862a <HAL_UART_IRQHandler+0x126>
 8008606:	239c      	movs	r3, #156	@ 0x9c
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2201      	movs	r2, #1
 800860e:	4013      	ands	r3, r2
 8008610:	d00b      	beq.n	800862a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2204      	movs	r2, #4
 8008618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2284      	movs	r2, #132	@ 0x84
 800861e:	589b      	ldr	r3, [r3, r2]
 8008620:	2202      	movs	r2, #2
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2184      	movs	r1, #132	@ 0x84
 8008628:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800862a:	23a4      	movs	r3, #164	@ 0xa4
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2208      	movs	r2, #8
 8008632:	4013      	ands	r3, r2
 8008634:	d017      	beq.n	8008666 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008636:	23a0      	movs	r3, #160	@ 0xa0
 8008638:	18fb      	adds	r3, r7, r3
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2220      	movs	r2, #32
 800863e:	4013      	ands	r3, r2
 8008640:	d105      	bne.n	800864e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008642:	239c      	movs	r3, #156	@ 0x9c
 8008644:	18fb      	adds	r3, r7, r3
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2201      	movs	r2, #1
 800864a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800864c:	d00b      	beq.n	8008666 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2208      	movs	r2, #8
 8008654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2284      	movs	r2, #132	@ 0x84
 800865a:	589b      	ldr	r3, [r3, r2]
 800865c:	2208      	movs	r2, #8
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2184      	movs	r1, #132	@ 0x84
 8008664:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008666:	23a4      	movs	r3, #164	@ 0xa4
 8008668:	18fb      	adds	r3, r7, r3
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	2380      	movs	r3, #128	@ 0x80
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	4013      	ands	r3, r2
 8008672:	d013      	beq.n	800869c <HAL_UART_IRQHandler+0x198>
 8008674:	23a0      	movs	r3, #160	@ 0xa0
 8008676:	18fb      	adds	r3, r7, r3
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	2380      	movs	r3, #128	@ 0x80
 800867c:	04db      	lsls	r3, r3, #19
 800867e:	4013      	ands	r3, r2
 8008680:	d00c      	beq.n	800869c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2280      	movs	r2, #128	@ 0x80
 8008688:	0112      	lsls	r2, r2, #4
 800868a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2284      	movs	r2, #132	@ 0x84
 8008690:	589b      	ldr	r3, [r3, r2]
 8008692:	2220      	movs	r2, #32
 8008694:	431a      	orrs	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2184      	movs	r1, #132	@ 0x84
 800869a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2284      	movs	r2, #132	@ 0x84
 80086a0:	589b      	ldr	r3, [r3, r2]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d100      	bne.n	80086a8 <HAL_UART_IRQHandler+0x1a4>
 80086a6:	e1e7      	b.n	8008a78 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086a8:	23a4      	movs	r3, #164	@ 0xa4
 80086aa:	18fb      	adds	r3, r7, r3
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2220      	movs	r2, #32
 80086b0:	4013      	ands	r3, r2
 80086b2:	d00e      	beq.n	80086d2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086b4:	23a0      	movs	r3, #160	@ 0xa0
 80086b6:	18fb      	adds	r3, r7, r3
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2220      	movs	r2, #32
 80086bc:	4013      	ands	r3, r2
 80086be:	d008      	beq.n	80086d2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d004      	beq.n	80086d2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	0010      	movs	r0, r2
 80086d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2284      	movs	r2, #132	@ 0x84
 80086d6:	589b      	ldr	r3, [r3, r2]
 80086d8:	2194      	movs	r1, #148	@ 0x94
 80086da:	187a      	adds	r2, r7, r1
 80086dc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	2240      	movs	r2, #64	@ 0x40
 80086e6:	4013      	ands	r3, r2
 80086e8:	2b40      	cmp	r3, #64	@ 0x40
 80086ea:	d004      	beq.n	80086f6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086ec:	187b      	adds	r3, r7, r1
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2228      	movs	r2, #40	@ 0x28
 80086f2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086f4:	d047      	beq.n	8008786 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	0018      	movs	r0, r3
 80086fa:	f000 fda9 	bl	8009250 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	2240      	movs	r2, #64	@ 0x40
 8008706:	4013      	ands	r3, r2
 8008708:	2b40      	cmp	r3, #64	@ 0x40
 800870a:	d137      	bne.n	800877c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800870c:	f3ef 8310 	mrs	r3, PRIMASK
 8008710:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008714:	2090      	movs	r0, #144	@ 0x90
 8008716:	183a      	adds	r2, r7, r0
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	2301      	movs	r3, #1
 800871c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800871e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008720:	f383 8810 	msr	PRIMASK, r3
}
 8008724:	46c0      	nop			@ (mov r8, r8)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2140      	movs	r1, #64	@ 0x40
 8008732:	438a      	bics	r2, r1
 8008734:	609a      	str	r2, [r3, #8]
 8008736:	183b      	adds	r3, r7, r0
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800873c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800873e:	f383 8810 	msr	PRIMASK, r3
}
 8008742:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008748:	2b00      	cmp	r3, #0
 800874a:	d012      	beq.n	8008772 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008750:	4a14      	ldr	r2, [pc, #80]	@ (80087a4 <HAL_UART_IRQHandler+0x2a0>)
 8008752:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008758:	0018      	movs	r0, r3
 800875a:	f7fc fc69 	bl	8005030 <HAL_DMA_Abort_IT>
 800875e:	1e03      	subs	r3, r0, #0
 8008760:	d01a      	beq.n	8008798 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800876c:	0018      	movs	r0, r3
 800876e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008770:	e012      	b.n	8008798 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	0018      	movs	r0, r3
 8008776:	f000 f995 	bl	8008aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877a:	e00d      	b.n	8008798 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	0018      	movs	r0, r3
 8008780:	f000 f990 	bl	8008aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008784:	e008      	b.n	8008798 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	0018      	movs	r0, r3
 800878a:	f000 f98b 	bl	8008aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2284      	movs	r2, #132	@ 0x84
 8008792:	2100      	movs	r1, #0
 8008794:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008796:	e16f      	b.n	8008a78 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	46c0      	nop			@ (mov r8, r8)
    return;
 800879a:	e16d      	b.n	8008a78 <HAL_UART_IRQHandler+0x574>
 800879c:	0000080f 	.word	0x0000080f
 80087a0:	04000120 	.word	0x04000120
 80087a4:	08009319 	.word	0x08009319

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d000      	beq.n	80087b2 <HAL_UART_IRQHandler+0x2ae>
 80087b0:	e139      	b.n	8008a26 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087b2:	23a4      	movs	r3, #164	@ 0xa4
 80087b4:	18fb      	adds	r3, r7, r3
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2210      	movs	r2, #16
 80087ba:	4013      	ands	r3, r2
 80087bc:	d100      	bne.n	80087c0 <HAL_UART_IRQHandler+0x2bc>
 80087be:	e132      	b.n	8008a26 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087c0:	23a0      	movs	r3, #160	@ 0xa0
 80087c2:	18fb      	adds	r3, r7, r3
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2210      	movs	r2, #16
 80087c8:	4013      	ands	r3, r2
 80087ca:	d100      	bne.n	80087ce <HAL_UART_IRQHandler+0x2ca>
 80087cc:	e12b      	b.n	8008a26 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2210      	movs	r2, #16
 80087d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	2240      	movs	r2, #64	@ 0x40
 80087de:	4013      	ands	r3, r2
 80087e0:	2b40      	cmp	r3, #64	@ 0x40
 80087e2:	d000      	beq.n	80087e6 <HAL_UART_IRQHandler+0x2e2>
 80087e4:	e09f      	b.n	8008926 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	217e      	movs	r1, #126	@ 0x7e
 80087f0:	187b      	adds	r3, r7, r1
 80087f2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80087f4:	187b      	adds	r3, r7, r1
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d100      	bne.n	80087fe <HAL_UART_IRQHandler+0x2fa>
 80087fc:	e13e      	b.n	8008a7c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2258      	movs	r2, #88	@ 0x58
 8008802:	5a9b      	ldrh	r3, [r3, r2]
 8008804:	187a      	adds	r2, r7, r1
 8008806:	8812      	ldrh	r2, [r2, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d300      	bcc.n	800880e <HAL_UART_IRQHandler+0x30a>
 800880c:	e136      	b.n	8008a7c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	187a      	adds	r2, r7, r1
 8008812:	215a      	movs	r1, #90	@ 0x5a
 8008814:	8812      	ldrh	r2, [r2, #0]
 8008816:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	2b20      	cmp	r3, #32
 8008820:	d06f      	beq.n	8008902 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008822:	f3ef 8310 	mrs	r3, PRIMASK
 8008826:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800882a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800882c:	2301      	movs	r3, #1
 800882e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008832:	f383 8810 	msr	PRIMASK, r3
}
 8008836:	46c0      	nop			@ (mov r8, r8)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4992      	ldr	r1, [pc, #584]	@ (8008a8c <HAL_UART_IRQHandler+0x588>)
 8008844:	400a      	ands	r2, r1
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800884a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884e:	f383 8810 	msr	PRIMASK, r3
}
 8008852:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008854:	f3ef 8310 	mrs	r3, PRIMASK
 8008858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800885a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885c:	677b      	str	r3, [r7, #116]	@ 0x74
 800885e:	2301      	movs	r3, #1
 8008860:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008864:	f383 8810 	msr	PRIMASK, r3
}
 8008868:	46c0      	nop			@ (mov r8, r8)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2101      	movs	r1, #1
 8008876:	438a      	bics	r2, r1
 8008878:	609a      	str	r2, [r3, #8]
 800887a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800887c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800887e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008880:	f383 8810 	msr	PRIMASK, r3
}
 8008884:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008886:	f3ef 8310 	mrs	r3, PRIMASK
 800888a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800888c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800888e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008890:	2301      	movs	r3, #1
 8008892:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008896:	f383 8810 	msr	PRIMASK, r3
}
 800889a:	46c0      	nop			@ (mov r8, r8)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2140      	movs	r1, #64	@ 0x40
 80088a8:	438a      	bics	r2, r1
 80088aa:	609a      	str	r2, [r3, #8]
 80088ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088ae:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088b2:	f383 8810 	msr	PRIMASK, r3
}
 80088b6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2280      	movs	r2, #128	@ 0x80
 80088bc:	2120      	movs	r1, #32
 80088be:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088c6:	f3ef 8310 	mrs	r3, PRIMASK
 80088ca:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80088cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088d0:	2301      	movs	r3, #1
 80088d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088d6:	f383 8810 	msr	PRIMASK, r3
}
 80088da:	46c0      	nop			@ (mov r8, r8)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2110      	movs	r1, #16
 80088e8:	438a      	bics	r2, r1
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088f2:	f383 8810 	msr	PRIMASK, r3
}
 80088f6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088fc:	0018      	movs	r0, r3
 80088fe:	f7fc fb5f 	bl	8004fc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2202      	movs	r2, #2
 8008906:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2258      	movs	r2, #88	@ 0x58
 800890c:	5a9a      	ldrh	r2, [r3, r2]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	215a      	movs	r1, #90	@ 0x5a
 8008912:	5a5b      	ldrh	r3, [r3, r1]
 8008914:	b29b      	uxth	r3, r3
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	0011      	movs	r1, r2
 800891e:	0018      	movs	r0, r3
 8008920:	f000 f8c8 	bl	8008ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008924:	e0aa      	b.n	8008a7c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2258      	movs	r2, #88	@ 0x58
 800892a:	5a99      	ldrh	r1, [r3, r2]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	225a      	movs	r2, #90	@ 0x5a
 8008930:	5a9b      	ldrh	r3, [r3, r2]
 8008932:	b29a      	uxth	r2, r3
 8008934:	208e      	movs	r0, #142	@ 0x8e
 8008936:	183b      	adds	r3, r7, r0
 8008938:	1a8a      	subs	r2, r1, r2
 800893a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	225a      	movs	r2, #90	@ 0x5a
 8008940:	5a9b      	ldrh	r3, [r3, r2]
 8008942:	b29b      	uxth	r3, r3
 8008944:	2b00      	cmp	r3, #0
 8008946:	d100      	bne.n	800894a <HAL_UART_IRQHandler+0x446>
 8008948:	e09a      	b.n	8008a80 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800894a:	183b      	adds	r3, r7, r0
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d100      	bne.n	8008954 <HAL_UART_IRQHandler+0x450>
 8008952:	e095      	b.n	8008a80 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008954:	f3ef 8310 	mrs	r3, PRIMASK
 8008958:	60fb      	str	r3, [r7, #12]
  return(result);
 800895a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800895c:	2488      	movs	r4, #136	@ 0x88
 800895e:	193a      	adds	r2, r7, r4
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	2301      	movs	r3, #1
 8008964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f383 8810 	msr	PRIMASK, r3
}
 800896c:	46c0      	nop			@ (mov r8, r8)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4945      	ldr	r1, [pc, #276]	@ (8008a90 <HAL_UART_IRQHandler+0x58c>)
 800897a:	400a      	ands	r2, r1
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	193b      	adds	r3, r7, r4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f383 8810 	msr	PRIMASK, r3
}
 800898a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800898c:	f3ef 8310 	mrs	r3, PRIMASK
 8008990:	61bb      	str	r3, [r7, #24]
  return(result);
 8008992:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008994:	2484      	movs	r4, #132	@ 0x84
 8008996:	193a      	adds	r2, r7, r4
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	2301      	movs	r3, #1
 800899c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	f383 8810 	msr	PRIMASK, r3
}
 80089a4:	46c0      	nop			@ (mov r8, r8)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2101      	movs	r1, #1
 80089b2:	438a      	bics	r2, r1
 80089b4:	609a      	str	r2, [r3, #8]
 80089b6:	193b      	adds	r3, r7, r4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	f383 8810 	msr	PRIMASK, r3
}
 80089c2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2280      	movs	r2, #128	@ 0x80
 80089c8:	2120      	movs	r1, #32
 80089ca:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089d8:	f3ef 8310 	mrs	r3, PRIMASK
 80089dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80089de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e0:	2480      	movs	r4, #128	@ 0x80
 80089e2:	193a      	adds	r2, r7, r4
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	2301      	movs	r3, #1
 80089e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	f383 8810 	msr	PRIMASK, r3
}
 80089f0:	46c0      	nop			@ (mov r8, r8)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2110      	movs	r1, #16
 80089fe:	438a      	bics	r2, r1
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	193b      	adds	r3, r7, r4
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0a:	f383 8810 	msr	PRIMASK, r3
}
 8008a0e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a16:	183b      	adds	r3, r7, r0
 8008a18:	881a      	ldrh	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	0011      	movs	r1, r2
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f000 f848 	bl	8008ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a24:	e02c      	b.n	8008a80 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a26:	23a4      	movs	r3, #164	@ 0xa4
 8008a28:	18fb      	adds	r3, r7, r3
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2280      	movs	r2, #128	@ 0x80
 8008a2e:	4013      	ands	r3, r2
 8008a30:	d00f      	beq.n	8008a52 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a32:	23a0      	movs	r3, #160	@ 0xa0
 8008a34:	18fb      	adds	r3, r7, r3
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2280      	movs	r2, #128	@ 0x80
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	d009      	beq.n	8008a52 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01e      	beq.n	8008a84 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	0010      	movs	r0, r2
 8008a4e:	4798      	blx	r3
    }
    return;
 8008a50:	e018      	b.n	8008a84 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a52:	23a4      	movs	r3, #164	@ 0xa4
 8008a54:	18fb      	adds	r3, r7, r3
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2240      	movs	r2, #64	@ 0x40
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	d013      	beq.n	8008a86 <HAL_UART_IRQHandler+0x582>
 8008a5e:	23a0      	movs	r3, #160	@ 0xa0
 8008a60:	18fb      	adds	r3, r7, r3
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2240      	movs	r2, #64	@ 0x40
 8008a66:	4013      	ands	r3, r2
 8008a68:	d00d      	beq.n	8008a86 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f000 fc6a 	bl	8009346 <UART_EndTransmit_IT>
    return;
 8008a72:	e008      	b.n	8008a86 <HAL_UART_IRQHandler+0x582>
      return;
 8008a74:	46c0      	nop			@ (mov r8, r8)
 8008a76:	e006      	b.n	8008a86 <HAL_UART_IRQHandler+0x582>
    return;
 8008a78:	46c0      	nop			@ (mov r8, r8)
 8008a7a:	e004      	b.n	8008a86 <HAL_UART_IRQHandler+0x582>
      return;
 8008a7c:	46c0      	nop			@ (mov r8, r8)
 8008a7e:	e002      	b.n	8008a86 <HAL_UART_IRQHandler+0x582>
      return;
 8008a80:	46c0      	nop			@ (mov r8, r8)
 8008a82:	e000      	b.n	8008a86 <HAL_UART_IRQHandler+0x582>
    return;
 8008a84:	46c0      	nop			@ (mov r8, r8)
  }

}
 8008a86:	46bd      	mov	sp, r7
 8008a88:	b02b      	add	sp, #172	@ 0xac
 8008a8a:	bd90      	pop	{r4, r7, pc}
 8008a8c:	fffffeff 	.word	0xfffffeff
 8008a90:	fffffedf 	.word	0xfffffedf

08008a94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a9c:	46c0      	nop			@ (mov r8, r8)
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b002      	add	sp, #8
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008aac:	46c0      	nop			@ (mov r8, r8)
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	b002      	add	sp, #8
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	000a      	movs	r2, r1
 8008abe:	1cbb      	adds	r3, r7, #2
 8008ac0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ac2:	46c0      	nop			@ (mov r8, r8)
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	b002      	add	sp, #8
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ad4:	231e      	movs	r3, #30
 8008ad6:	18fb      	adds	r3, r7, r3
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a8d      	ldr	r2, [pc, #564]	@ (8008d30 <UART_SetConfig+0x264>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	0019      	movs	r1, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	4a88      	ldr	r2, [pc, #544]	@ (8008d34 <UART_SetConfig+0x268>)
 8008b12:	4013      	ands	r3, r2
 8008b14:	0019      	movs	r1, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	4a7f      	ldr	r2, [pc, #508]	@ (8008d38 <UART_SetConfig+0x26c>)
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	0019      	movs	r1, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a7b      	ldr	r2, [pc, #492]	@ (8008d3c <UART_SetConfig+0x270>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d127      	bne.n	8008ba2 <UART_SetConfig+0xd6>
 8008b52:	4b7b      	ldr	r3, [pc, #492]	@ (8008d40 <UART_SetConfig+0x274>)
 8008b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b56:	2203      	movs	r2, #3
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d00d      	beq.n	8008b7a <UART_SetConfig+0xae>
 8008b5e:	d81b      	bhi.n	8008b98 <UART_SetConfig+0xcc>
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d014      	beq.n	8008b8e <UART_SetConfig+0xc2>
 8008b64:	d818      	bhi.n	8008b98 <UART_SetConfig+0xcc>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <UART_SetConfig+0xa4>
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d00a      	beq.n	8008b84 <UART_SetConfig+0xb8>
 8008b6e:	e013      	b.n	8008b98 <UART_SetConfig+0xcc>
 8008b70:	231f      	movs	r3, #31
 8008b72:	18fb      	adds	r3, r7, r3
 8008b74:	2200      	movs	r2, #0
 8008b76:	701a      	strb	r2, [r3, #0]
 8008b78:	e021      	b.n	8008bbe <UART_SetConfig+0xf2>
 8008b7a:	231f      	movs	r3, #31
 8008b7c:	18fb      	adds	r3, r7, r3
 8008b7e:	2202      	movs	r2, #2
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	e01c      	b.n	8008bbe <UART_SetConfig+0xf2>
 8008b84:	231f      	movs	r3, #31
 8008b86:	18fb      	adds	r3, r7, r3
 8008b88:	2204      	movs	r2, #4
 8008b8a:	701a      	strb	r2, [r3, #0]
 8008b8c:	e017      	b.n	8008bbe <UART_SetConfig+0xf2>
 8008b8e:	231f      	movs	r3, #31
 8008b90:	18fb      	adds	r3, r7, r3
 8008b92:	2208      	movs	r2, #8
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	e012      	b.n	8008bbe <UART_SetConfig+0xf2>
 8008b98:	231f      	movs	r3, #31
 8008b9a:	18fb      	adds	r3, r7, r3
 8008b9c:	2210      	movs	r2, #16
 8008b9e:	701a      	strb	r2, [r3, #0]
 8008ba0:	e00d      	b.n	8008bbe <UART_SetConfig+0xf2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a67      	ldr	r2, [pc, #412]	@ (8008d44 <UART_SetConfig+0x278>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d104      	bne.n	8008bb6 <UART_SetConfig+0xea>
 8008bac:	231f      	movs	r3, #31
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	701a      	strb	r2, [r3, #0]
 8008bb4:	e003      	b.n	8008bbe <UART_SetConfig+0xf2>
 8008bb6:	231f      	movs	r3, #31
 8008bb8:	18fb      	adds	r3, r7, r3
 8008bba:	2210      	movs	r2, #16
 8008bbc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69da      	ldr	r2, [r3, #28]
 8008bc2:	2380      	movs	r3, #128	@ 0x80
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d15c      	bne.n	8008c84 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8008bca:	231f      	movs	r3, #31
 8008bcc:	18fb      	adds	r3, r7, r3
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d015      	beq.n	8008c00 <UART_SetConfig+0x134>
 8008bd4:	dc18      	bgt.n	8008c08 <UART_SetConfig+0x13c>
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d00d      	beq.n	8008bf6 <UART_SetConfig+0x12a>
 8008bda:	dc15      	bgt.n	8008c08 <UART_SetConfig+0x13c>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <UART_SetConfig+0x11a>
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d005      	beq.n	8008bf0 <UART_SetConfig+0x124>
 8008be4:	e010      	b.n	8008c08 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008be6:	f7fd fef7 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 8008bea:	0003      	movs	r3, r0
 8008bec:	61bb      	str	r3, [r7, #24]
        break;
 8008bee:	e012      	b.n	8008c16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf0:	4b55      	ldr	r3, [pc, #340]	@ (8008d48 <UART_SetConfig+0x27c>)
 8008bf2:	61bb      	str	r3, [r7, #24]
        break;
 8008bf4:	e00f      	b.n	8008c16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bf6:	f7fd fe8f 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 8008bfa:	0003      	movs	r3, r0
 8008bfc:	61bb      	str	r3, [r7, #24]
        break;
 8008bfe:	e00a      	b.n	8008c16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c00:	2380      	movs	r3, #128	@ 0x80
 8008c02:	021b      	lsls	r3, r3, #8
 8008c04:	61bb      	str	r3, [r7, #24]
        break;
 8008c06:	e006      	b.n	8008c16 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c0c:	231e      	movs	r3, #30
 8008c0e:	18fb      	adds	r3, r7, r3
 8008c10:	2201      	movs	r2, #1
 8008c12:	701a      	strb	r2, [r3, #0]
        break;
 8008c14:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d100      	bne.n	8008c1e <UART_SetConfig+0x152>
 8008c1c:	e07a      	b.n	8008d14 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	005a      	lsls	r2, r3, #1
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	18d2      	adds	r2, r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	0019      	movs	r1, r3
 8008c30:	0010      	movs	r0, r2
 8008c32:	f7f7 fa8f 	bl	8000154 <__udivsi3>
 8008c36:	0003      	movs	r3, r0
 8008c38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b0f      	cmp	r3, #15
 8008c3e:	d91c      	bls.n	8008c7a <UART_SetConfig+0x1ae>
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	2380      	movs	r3, #128	@ 0x80
 8008c44:	025b      	lsls	r3, r3, #9
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d217      	bcs.n	8008c7a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	200e      	movs	r0, #14
 8008c50:	183b      	adds	r3, r7, r0
 8008c52:	210f      	movs	r1, #15
 8008c54:	438a      	bics	r2, r1
 8008c56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2207      	movs	r2, #7
 8008c60:	4013      	ands	r3, r2
 8008c62:	b299      	uxth	r1, r3
 8008c64:	183b      	adds	r3, r7, r0
 8008c66:	183a      	adds	r2, r7, r0
 8008c68:	8812      	ldrh	r2, [r2, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	183a      	adds	r2, r7, r0
 8008c74:	8812      	ldrh	r2, [r2, #0]
 8008c76:	60da      	str	r2, [r3, #12]
 8008c78:	e04c      	b.n	8008d14 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008c7a:	231e      	movs	r3, #30
 8008c7c:	18fb      	adds	r3, r7, r3
 8008c7e:	2201      	movs	r2, #1
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	e047      	b.n	8008d14 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c84:	231f      	movs	r3, #31
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b08      	cmp	r3, #8
 8008c8c:	d015      	beq.n	8008cba <UART_SetConfig+0x1ee>
 8008c8e:	dc18      	bgt.n	8008cc2 <UART_SetConfig+0x1f6>
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d00d      	beq.n	8008cb0 <UART_SetConfig+0x1e4>
 8008c94:	dc15      	bgt.n	8008cc2 <UART_SetConfig+0x1f6>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <UART_SetConfig+0x1d4>
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d005      	beq.n	8008caa <UART_SetConfig+0x1de>
 8008c9e:	e010      	b.n	8008cc2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca0:	f7fd fe9a 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 8008ca4:	0003      	movs	r3, r0
 8008ca6:	61bb      	str	r3, [r7, #24]
        break;
 8008ca8:	e012      	b.n	8008cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008caa:	4b27      	ldr	r3, [pc, #156]	@ (8008d48 <UART_SetConfig+0x27c>)
 8008cac:	61bb      	str	r3, [r7, #24]
        break;
 8008cae:	e00f      	b.n	8008cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cb0:	f7fd fe32 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 8008cb4:	0003      	movs	r3, r0
 8008cb6:	61bb      	str	r3, [r7, #24]
        break;
 8008cb8:	e00a      	b.n	8008cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cba:	2380      	movs	r3, #128	@ 0x80
 8008cbc:	021b      	lsls	r3, r3, #8
 8008cbe:	61bb      	str	r3, [r7, #24]
        break;
 8008cc0:	e006      	b.n	8008cd0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008cc6:	231e      	movs	r3, #30
 8008cc8:	18fb      	adds	r3, r7, r3
 8008cca:	2201      	movs	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]
        break;
 8008cce:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01e      	beq.n	8008d14 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	085a      	lsrs	r2, r3, #1
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	18d2      	adds	r2, r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	0019      	movs	r1, r3
 8008ce6:	0010      	movs	r0, r2
 8008ce8:	f7f7 fa34 	bl	8000154 <__udivsi3>
 8008cec:	0003      	movs	r3, r0
 8008cee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b0f      	cmp	r3, #15
 8008cf4:	d90a      	bls.n	8008d0c <UART_SetConfig+0x240>
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	2380      	movs	r3, #128	@ 0x80
 8008cfa:	025b      	lsls	r3, r3, #9
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d205      	bcs.n	8008d0c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60da      	str	r2, [r3, #12]
 8008d0a:	e003      	b.n	8008d14 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008d0c:	231e      	movs	r3, #30
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	2201      	movs	r2, #1
 8008d12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008d20:	231e      	movs	r3, #30
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	781b      	ldrb	r3, [r3, #0]
}
 8008d26:	0018      	movs	r0, r3
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	b008      	add	sp, #32
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	46c0      	nop			@ (mov r8, r8)
 8008d30:	ffff69f3 	.word	0xffff69f3
 8008d34:	ffffcfff 	.word	0xffffcfff
 8008d38:	fffff4ff 	.word	0xfffff4ff
 8008d3c:	40013800 	.word	0x40013800
 8008d40:	40021000 	.word	0x40021000
 8008d44:	40004400 	.word	0x40004400
 8008d48:	007a1200 	.word	0x007a1200

08008d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d58:	2208      	movs	r2, #8
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	d00b      	beq.n	8008d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4a4a      	ldr	r2, [pc, #296]	@ (8008e90 <UART_AdvFeatureConfig+0x144>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	0019      	movs	r1, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	d00b      	beq.n	8008d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	4a43      	ldr	r2, [pc, #268]	@ (8008e94 <UART_AdvFeatureConfig+0x148>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	0019      	movs	r1, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	430a      	orrs	r2, r1
 8008d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	4013      	ands	r3, r2
 8008da0:	d00b      	beq.n	8008dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	4a3b      	ldr	r2, [pc, #236]	@ (8008e98 <UART_AdvFeatureConfig+0x14c>)
 8008daa:	4013      	ands	r3, r2
 8008dac:	0019      	movs	r1, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	d00b      	beq.n	8008ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	4a34      	ldr	r2, [pc, #208]	@ (8008e9c <UART_AdvFeatureConfig+0x150>)
 8008dcc:	4013      	ands	r3, r2
 8008dce:	0019      	movs	r1, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de0:	2210      	movs	r2, #16
 8008de2:	4013      	ands	r3, r2
 8008de4:	d00b      	beq.n	8008dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	4a2c      	ldr	r2, [pc, #176]	@ (8008ea0 <UART_AdvFeatureConfig+0x154>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	0019      	movs	r1, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e02:	2220      	movs	r2, #32
 8008e04:	4013      	ands	r3, r2
 8008e06:	d00b      	beq.n	8008e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	4a25      	ldr	r2, [pc, #148]	@ (8008ea4 <UART_AdvFeatureConfig+0x158>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	0019      	movs	r1, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e24:	2240      	movs	r2, #64	@ 0x40
 8008e26:	4013      	ands	r3, r2
 8008e28:	d01d      	beq.n	8008e66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea8 <UART_AdvFeatureConfig+0x15c>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	0019      	movs	r1, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e46:	2380      	movs	r3, #128	@ 0x80
 8008e48:	035b      	lsls	r3, r3, #13
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d10b      	bne.n	8008e66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	4a15      	ldr	r2, [pc, #84]	@ (8008eac <UART_AdvFeatureConfig+0x160>)
 8008e56:	4013      	ands	r3, r2
 8008e58:	0019      	movs	r1, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6a:	2280      	movs	r2, #128	@ 0x80
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	d00b      	beq.n	8008e88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4a0e      	ldr	r2, [pc, #56]	@ (8008eb0 <UART_AdvFeatureConfig+0x164>)
 8008e78:	4013      	ands	r3, r2
 8008e7a:	0019      	movs	r1, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	605a      	str	r2, [r3, #4]
  }
}
 8008e88:	46c0      	nop			@ (mov r8, r8)
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	b002      	add	sp, #8
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	ffff7fff 	.word	0xffff7fff
 8008e94:	fffdffff 	.word	0xfffdffff
 8008e98:	fffeffff 	.word	0xfffeffff
 8008e9c:	fffbffff 	.word	0xfffbffff
 8008ea0:	ffffefff 	.word	0xffffefff
 8008ea4:	ffffdfff 	.word	0xffffdfff
 8008ea8:	ffefffff 	.word	0xffefffff
 8008eac:	ff9fffff 	.word	0xff9fffff
 8008eb0:	fff7ffff 	.word	0xfff7ffff

08008eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b092      	sub	sp, #72	@ 0x48
 8008eb8:	af02      	add	r7, sp, #8
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2284      	movs	r2, #132	@ 0x84
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ec4:	f7fb fd3a 	bl	800493c <HAL_GetTick>
 8008ec8:	0003      	movs	r3, r0
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2208      	movs	r2, #8
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d12c      	bne.n	8008f34 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008edc:	2280      	movs	r2, #128	@ 0x80
 8008ede:	0391      	lsls	r1, r2, #14
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4a46      	ldr	r2, [pc, #280]	@ (8008ffc <UART_CheckIdleState+0x148>)
 8008ee4:	9200      	str	r2, [sp, #0]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f000 f88c 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 8008eec:	1e03      	subs	r3, r0, #0
 8008eee:	d021      	beq.n	8008f34 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008efa:	2301      	movs	r3, #1
 8008efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f00:	f383 8810 	msr	PRIMASK, r3
}
 8008f04:	46c0      	nop			@ (mov r8, r8)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2180      	movs	r1, #128	@ 0x80
 8008f12:	438a      	bics	r2, r1
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1c:	f383 8810 	msr	PRIMASK, r3
}
 8008f20:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2278      	movs	r2, #120	@ 0x78
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e05f      	b.n	8008ff4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2204      	movs	r2, #4
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d146      	bne.n	8008fd0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f44:	2280      	movs	r2, #128	@ 0x80
 8008f46:	03d1      	lsls	r1, r2, #15
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8008ffc <UART_CheckIdleState+0x148>)
 8008f4c:	9200      	str	r2, [sp, #0]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f000 f858 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 8008f54:	1e03      	subs	r3, r0, #0
 8008f56:	d03b      	beq.n	8008fd0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f58:	f3ef 8310 	mrs	r3, PRIMASK
 8008f5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f62:	2301      	movs	r3, #1
 8008f64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f383 8810 	msr	PRIMASK, r3
}
 8008f6c:	46c0      	nop			@ (mov r8, r8)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4921      	ldr	r1, [pc, #132]	@ (8009000 <UART_CheckIdleState+0x14c>)
 8008f7a:	400a      	ands	r2, r1
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f383 8810 	msr	PRIMASK, r3
}
 8008f88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f90:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f94:	2301      	movs	r3, #1
 8008f96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	f383 8810 	msr	PRIMASK, r3
}
 8008f9e:	46c0      	nop			@ (mov r8, r8)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689a      	ldr	r2, [r3, #8]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2101      	movs	r1, #1
 8008fac:	438a      	bics	r2, r1
 8008fae:	609a      	str	r2, [r3, #8]
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	f383 8810 	msr	PRIMASK, r3
}
 8008fba:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2280      	movs	r2, #128	@ 0x80
 8008fc0:	2120      	movs	r1, #32
 8008fc2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2278      	movs	r2, #120	@ 0x78
 8008fc8:	2100      	movs	r1, #0
 8008fca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e011      	b.n	8008ff4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2280      	movs	r2, #128	@ 0x80
 8008fda:	2120      	movs	r1, #32
 8008fdc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2278      	movs	r2, #120	@ 0x78
 8008fee:	2100      	movs	r1, #0
 8008ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b010      	add	sp, #64	@ 0x40
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	01ffffff 	.word	0x01ffffff
 8009000:	fffffedf 	.word	0xfffffedf

08009004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	1dfb      	adds	r3, r7, #7
 8009012:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009014:	e051      	b.n	80090ba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	3301      	adds	r3, #1
 800901a:	d04e      	beq.n	80090ba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800901c:	f7fb fc8e 	bl	800493c <HAL_GetTick>
 8009020:	0002      	movs	r2, r0
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	429a      	cmp	r2, r3
 800902a:	d302      	bcc.n	8009032 <UART_WaitOnFlagUntilTimeout+0x2e>
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e051      	b.n	80090da <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2204      	movs	r2, #4
 800903e:	4013      	ands	r3, r2
 8009040:	d03b      	beq.n	80090ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b80      	cmp	r3, #128	@ 0x80
 8009046:	d038      	beq.n	80090ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b40      	cmp	r3, #64	@ 0x40
 800904c:	d035      	beq.n	80090ba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	2208      	movs	r2, #8
 8009056:	4013      	ands	r3, r2
 8009058:	2b08      	cmp	r3, #8
 800905a:	d111      	bne.n	8009080 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2208      	movs	r2, #8
 8009062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	0018      	movs	r0, r3
 8009068:	f000 f8f2 	bl	8009250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2284      	movs	r2, #132	@ 0x84
 8009070:	2108      	movs	r1, #8
 8009072:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2278      	movs	r2, #120	@ 0x78
 8009078:	2100      	movs	r1, #0
 800907a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e02c      	b.n	80090da <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	69da      	ldr	r2, [r3, #28]
 8009086:	2380      	movs	r3, #128	@ 0x80
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	401a      	ands	r2, r3
 800908c:	2380      	movs	r3, #128	@ 0x80
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	429a      	cmp	r2, r3
 8009092:	d112      	bne.n	80090ba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2280      	movs	r2, #128	@ 0x80
 800909a:	0112      	lsls	r2, r2, #4
 800909c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	0018      	movs	r0, r3
 80090a2:	f000 f8d5 	bl	8009250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2284      	movs	r2, #132	@ 0x84
 80090aa:	2120      	movs	r1, #32
 80090ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2278      	movs	r2, #120	@ 0x78
 80090b2:	2100      	movs	r1, #0
 80090b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e00f      	b.n	80090da <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	4013      	ands	r3, r2
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	425a      	negs	r2, r3
 80090ca:	4153      	adcs	r3, r2
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	001a      	movs	r2, r3
 80090d0:	1dfb      	adds	r3, r7, #7
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d09e      	beq.n	8009016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	0018      	movs	r0, r3
 80090dc:	46bd      	mov	sp, r7
 80090de:	b004      	add	sp, #16
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b090      	sub	sp, #64	@ 0x40
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	1dbb      	adds	r3, r7, #6
 80090f0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	1dba      	adds	r2, r7, #6
 80090fc:	2158      	movs	r1, #88	@ 0x58
 80090fe:	8812      	ldrh	r2, [r2, #0]
 8009100:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1dba      	adds	r2, r7, #6
 8009106:	215a      	movs	r1, #90	@ 0x5a
 8009108:	8812      	ldrh	r2, [r2, #0]
 800910a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	689a      	ldr	r2, [r3, #8]
 8009116:	2380      	movs	r3, #128	@ 0x80
 8009118:	015b      	lsls	r3, r3, #5
 800911a:	429a      	cmp	r2, r3
 800911c:	d10d      	bne.n	800913a <UART_Start_Receive_IT+0x56>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <UART_Start_Receive_IT+0x4c>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	225c      	movs	r2, #92	@ 0x5c
 800912a:	4946      	ldr	r1, [pc, #280]	@ (8009244 <UART_Start_Receive_IT+0x160>)
 800912c:	5299      	strh	r1, [r3, r2]
 800912e:	e01a      	b.n	8009166 <UART_Start_Receive_IT+0x82>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	225c      	movs	r2, #92	@ 0x5c
 8009134:	21ff      	movs	r1, #255	@ 0xff
 8009136:	5299      	strh	r1, [r3, r2]
 8009138:	e015      	b.n	8009166 <UART_Start_Receive_IT+0x82>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10d      	bne.n	800915e <UART_Start_Receive_IT+0x7a>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d104      	bne.n	8009154 <UART_Start_Receive_IT+0x70>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	225c      	movs	r2, #92	@ 0x5c
 800914e:	21ff      	movs	r1, #255	@ 0xff
 8009150:	5299      	strh	r1, [r3, r2]
 8009152:	e008      	b.n	8009166 <UART_Start_Receive_IT+0x82>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	225c      	movs	r2, #92	@ 0x5c
 8009158:	217f      	movs	r1, #127	@ 0x7f
 800915a:	5299      	strh	r1, [r3, r2]
 800915c:	e003      	b.n	8009166 <UART_Start_Receive_IT+0x82>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	225c      	movs	r2, #92	@ 0x5c
 8009162:	2100      	movs	r1, #0
 8009164:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2284      	movs	r2, #132	@ 0x84
 800916a:	2100      	movs	r1, #0
 800916c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2280      	movs	r2, #128	@ 0x80
 8009172:	2122      	movs	r1, #34	@ 0x22
 8009174:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009176:	f3ef 8310 	mrs	r3, PRIMASK
 800917a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800917c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009180:	2301      	movs	r3, #1
 8009182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009186:	f383 8810 	msr	PRIMASK, r3
}
 800918a:	46c0      	nop			@ (mov r8, r8)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2101      	movs	r1, #1
 8009198:	430a      	orrs	r2, r1
 800919a:	609a      	str	r2, [r3, #8]
 800919c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800919e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	f383 8810 	msr	PRIMASK, r3
}
 80091a6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	2380      	movs	r3, #128	@ 0x80
 80091ae:	015b      	lsls	r3, r3, #5
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d107      	bne.n	80091c4 <UART_Start_Receive_IT+0xe0>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d103      	bne.n	80091c4 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4a22      	ldr	r2, [pc, #136]	@ (8009248 <UART_Start_Receive_IT+0x164>)
 80091c0:	669a      	str	r2, [r3, #104]	@ 0x68
 80091c2:	e002      	b.n	80091ca <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4a21      	ldr	r2, [pc, #132]	@ (800924c <UART_Start_Receive_IT+0x168>)
 80091c8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d019      	beq.n	8009206 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091d2:	f3ef 8310 	mrs	r3, PRIMASK
 80091d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80091d8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80091da:	637b      	str	r3, [r7, #52]	@ 0x34
 80091dc:	2301      	movs	r3, #1
 80091de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	f383 8810 	msr	PRIMASK, r3
}
 80091e6:	46c0      	nop			@ (mov r8, r8)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2190      	movs	r1, #144	@ 0x90
 80091f4:	0049      	lsls	r1, r1, #1
 80091f6:	430a      	orrs	r2, r1
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	f383 8810 	msr	PRIMASK, r3
}
 8009204:	e018      	b.n	8009238 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009206:	f3ef 8310 	mrs	r3, PRIMASK
 800920a:	613b      	str	r3, [r7, #16]
  return(result);
 800920c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800920e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009210:	2301      	movs	r3, #1
 8009212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f383 8810 	msr	PRIMASK, r3
}
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2120      	movs	r1, #32
 8009228:	430a      	orrs	r2, r1
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	f383 8810 	msr	PRIMASK, r3
}
 8009236:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	0018      	movs	r0, r3
 800923c:	46bd      	mov	sp, r7
 800923e:	b010      	add	sp, #64	@ 0x40
 8009240:	bd80      	pop	{r7, pc}
 8009242:	46c0      	nop			@ (mov r8, r8)
 8009244:	000001ff 	.word	0x000001ff
 8009248:	08009555 	.word	0x08009555
 800924c:	0800939d 	.word	0x0800939d

08009250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08e      	sub	sp, #56	@ 0x38
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009258:	f3ef 8310 	mrs	r3, PRIMASK
 800925c:	617b      	str	r3, [r7, #20]
  return(result);
 800925e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009260:	637b      	str	r3, [r7, #52]	@ 0x34
 8009262:	2301      	movs	r3, #1
 8009264:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	f383 8810 	msr	PRIMASK, r3
}
 800926c:	46c0      	nop			@ (mov r8, r8)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4926      	ldr	r1, [pc, #152]	@ (8009314 <UART_EndRxTransfer+0xc4>)
 800927a:	400a      	ands	r2, r1
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009280:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	f383 8810 	msr	PRIMASK, r3
}
 8009288:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800928a:	f3ef 8310 	mrs	r3, PRIMASK
 800928e:	623b      	str	r3, [r7, #32]
  return(result);
 8009290:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009292:	633b      	str	r3, [r7, #48]	@ 0x30
 8009294:	2301      	movs	r3, #1
 8009296:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929a:	f383 8810 	msr	PRIMASK, r3
}
 800929e:	46c0      	nop			@ (mov r8, r8)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2101      	movs	r1, #1
 80092ac:	438a      	bics	r2, r1
 80092ae:	609a      	str	r2, [r3, #8]
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	f383 8810 	msr	PRIMASK, r3
}
 80092ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d118      	bne.n	80092f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c4:	f3ef 8310 	mrs	r3, PRIMASK
 80092c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80092ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092ce:	2301      	movs	r3, #1
 80092d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f383 8810 	msr	PRIMASK, r3
}
 80092d8:	46c0      	nop			@ (mov r8, r8)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2110      	movs	r1, #16
 80092e6:	438a      	bics	r2, r1
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f383 8810 	msr	PRIMASK, r3
}
 80092f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2280      	movs	r2, #128	@ 0x80
 80092fa:	2120      	movs	r1, #32
 80092fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800930a:	46c0      	nop			@ (mov r8, r8)
 800930c:	46bd      	mov	sp, r7
 800930e:	b00e      	add	sp, #56	@ 0x38
 8009310:	bd80      	pop	{r7, pc}
 8009312:	46c0      	nop			@ (mov r8, r8)
 8009314:	fffffedf 	.word	0xfffffedf

08009318 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	225a      	movs	r2, #90	@ 0x5a
 800932a:	2100      	movs	r1, #0
 800932c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2252      	movs	r2, #82	@ 0x52
 8009332:	2100      	movs	r1, #0
 8009334:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	0018      	movs	r0, r3
 800933a:	f7ff fbb3 	bl	8008aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800933e:	46c0      	nop			@ (mov r8, r8)
 8009340:	46bd      	mov	sp, r7
 8009342:	b004      	add	sp, #16
 8009344:	bd80      	pop	{r7, pc}

08009346 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b086      	sub	sp, #24
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800934e:	f3ef 8310 	mrs	r3, PRIMASK
 8009352:	60bb      	str	r3, [r7, #8]
  return(result);
 8009354:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	2301      	movs	r3, #1
 800935a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f383 8810 	msr	PRIMASK, r3
}
 8009362:	46c0      	nop			@ (mov r8, r8)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2140      	movs	r1, #64	@ 0x40
 8009370:	438a      	bics	r2, r1
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	f383 8810 	msr	PRIMASK, r3
}
 800937e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2220      	movs	r2, #32
 8009384:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	0018      	movs	r0, r3
 8009390:	f7ff fb80 	bl	8008a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009394:	46c0      	nop			@ (mov r8, r8)
 8009396:	46bd      	mov	sp, r7
 8009398:	b006      	add	sp, #24
 800939a:	bd80      	pop	{r7, pc}

0800939c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b094      	sub	sp, #80	@ 0x50
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80093a4:	204e      	movs	r0, #78	@ 0x4e
 80093a6:	183b      	adds	r3, r7, r0
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	215c      	movs	r1, #92	@ 0x5c
 80093ac:	5a52      	ldrh	r2, [r2, r1]
 80093ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2280      	movs	r2, #128	@ 0x80
 80093b4:	589b      	ldr	r3, [r3, r2]
 80093b6:	2b22      	cmp	r3, #34	@ 0x22
 80093b8:	d000      	beq.n	80093bc <UART_RxISR_8BIT+0x20>
 80093ba:	e0ba      	b.n	8009532 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	214c      	movs	r1, #76	@ 0x4c
 80093c2:	187b      	adds	r3, r7, r1
 80093c4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80093c6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093c8:	187b      	adds	r3, r7, r1
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	183b      	adds	r3, r7, r0
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b2d9      	uxtb	r1, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d8:	400a      	ands	r2, r1
 80093da:	b2d2      	uxtb	r2, r2
 80093dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	225a      	movs	r2, #90	@ 0x5a
 80093ec:	5a9b      	ldrh	r3, [r3, r2]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	3b01      	subs	r3, #1
 80093f2:	b299      	uxth	r1, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	225a      	movs	r2, #90	@ 0x5a
 80093f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	225a      	movs	r2, #90	@ 0x5a
 80093fe:	5a9b      	ldrh	r3, [r3, r2]
 8009400:	b29b      	uxth	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d000      	beq.n	8009408 <UART_RxISR_8BIT+0x6c>
 8009406:	e09c      	b.n	8009542 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009408:	f3ef 8310 	mrs	r3, PRIMASK
 800940c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009412:	2301      	movs	r3, #1
 8009414:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	f383 8810 	msr	PRIMASK, r3
}
 800941c:	46c0      	nop			@ (mov r8, r8)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4948      	ldr	r1, [pc, #288]	@ (800954c <UART_RxISR_8BIT+0x1b0>)
 800942a:	400a      	ands	r2, r1
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009434:	f383 8810 	msr	PRIMASK, r3
}
 8009438:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800943a:	f3ef 8310 	mrs	r3, PRIMASK
 800943e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009442:	647b      	str	r3, [r7, #68]	@ 0x44
 8009444:	2301      	movs	r3, #1
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800944a:	f383 8810 	msr	PRIMASK, r3
}
 800944e:	46c0      	nop			@ (mov r8, r8)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2101      	movs	r1, #1
 800945c:	438a      	bics	r2, r1
 800945e:	609a      	str	r2, [r3, #8]
 8009460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009462:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009466:	f383 8810 	msr	PRIMASK, r3
}
 800946a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2280      	movs	r2, #128	@ 0x80
 8009470:	2120      	movs	r1, #32
 8009472:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	2380      	movs	r3, #128	@ 0x80
 8009488:	041b      	lsls	r3, r3, #16
 800948a:	4013      	ands	r3, r2
 800948c:	d018      	beq.n	80094c0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800948e:	f3ef 8310 	mrs	r3, PRIMASK
 8009492:	61bb      	str	r3, [r7, #24]
  return(result);
 8009494:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009496:	643b      	str	r3, [r7, #64]	@ 0x40
 8009498:	2301      	movs	r3, #1
 800949a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	f383 8810 	msr	PRIMASK, r3
}
 80094a2:	46c0      	nop			@ (mov r8, r8)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4928      	ldr	r1, [pc, #160]	@ (8009550 <UART_RxISR_8BIT+0x1b4>)
 80094b0:	400a      	ands	r2, r1
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	f383 8810 	msr	PRIMASK, r3
}
 80094be:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d12f      	bne.n	8009528 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ce:	f3ef 8310 	mrs	r3, PRIMASK
 80094d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80094d4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094d8:	2301      	movs	r3, #1
 80094da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f383 8810 	msr	PRIMASK, r3
}
 80094e2:	46c0      	nop			@ (mov r8, r8)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2110      	movs	r1, #16
 80094f0:	438a      	bics	r2, r1
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f383 8810 	msr	PRIMASK, r3
}
 80094fe:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	2210      	movs	r2, #16
 8009508:	4013      	ands	r3, r2
 800950a:	2b10      	cmp	r3, #16
 800950c:	d103      	bne.n	8009516 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2210      	movs	r2, #16
 8009514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2258      	movs	r2, #88	@ 0x58
 800951a:	5a9a      	ldrh	r2, [r3, r2]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	0011      	movs	r1, r2
 8009520:	0018      	movs	r0, r3
 8009522:	f7ff fac7 	bl	8008ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009526:	e00c      	b.n	8009542 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	0018      	movs	r0, r3
 800952c:	f7f9 fffc 	bl	8003528 <HAL_UART_RxCpltCallback>
}
 8009530:	e007      	b.n	8009542 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2108      	movs	r1, #8
 800953e:	430a      	orrs	r2, r1
 8009540:	619a      	str	r2, [r3, #24]
}
 8009542:	46c0      	nop			@ (mov r8, r8)
 8009544:	46bd      	mov	sp, r7
 8009546:	b014      	add	sp, #80	@ 0x50
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	fffffedf 	.word	0xfffffedf
 8009550:	fbffffff 	.word	0xfbffffff

08009554 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b094      	sub	sp, #80	@ 0x50
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800955c:	204e      	movs	r0, #78	@ 0x4e
 800955e:	183b      	adds	r3, r7, r0
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	215c      	movs	r1, #92	@ 0x5c
 8009564:	5a52      	ldrh	r2, [r2, r1]
 8009566:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2280      	movs	r2, #128	@ 0x80
 800956c:	589b      	ldr	r3, [r3, r2]
 800956e:	2b22      	cmp	r3, #34	@ 0x22
 8009570:	d000      	beq.n	8009574 <UART_RxISR_16BIT+0x20>
 8009572:	e0ba      	b.n	80096ea <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	214c      	movs	r1, #76	@ 0x4c
 800957a:	187b      	adds	r3, r7, r1
 800957c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800957e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009584:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8009586:	187b      	adds	r3, r7, r1
 8009588:	183a      	adds	r2, r7, r0
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	8812      	ldrh	r2, [r2, #0]
 800958e:	4013      	ands	r3, r2
 8009590:	b29a      	uxth	r2, r3
 8009592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009594:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800959a:	1c9a      	adds	r2, r3, #2
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	225a      	movs	r2, #90	@ 0x5a
 80095a4:	5a9b      	ldrh	r3, [r3, r2]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	3b01      	subs	r3, #1
 80095aa:	b299      	uxth	r1, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	225a      	movs	r2, #90	@ 0x5a
 80095b0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	225a      	movs	r2, #90	@ 0x5a
 80095b6:	5a9b      	ldrh	r3, [r3, r2]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d000      	beq.n	80095c0 <UART_RxISR_16BIT+0x6c>
 80095be:	e09c      	b.n	80096fa <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095c0:	f3ef 8310 	mrs	r3, PRIMASK
 80095c4:	623b      	str	r3, [r7, #32]
  return(result);
 80095c6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ca:	2301      	movs	r3, #1
 80095cc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d0:	f383 8810 	msr	PRIMASK, r3
}
 80095d4:	46c0      	nop			@ (mov r8, r8)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4948      	ldr	r1, [pc, #288]	@ (8009704 <UART_RxISR_16BIT+0x1b0>)
 80095e2:	400a      	ands	r2, r1
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	f383 8810 	msr	PRIMASK, r3
}
 80095f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095f2:	f3ef 8310 	mrs	r3, PRIMASK
 80095f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80095f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80095fc:	2301      	movs	r3, #1
 80095fe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	f383 8810 	msr	PRIMASK, r3
}
 8009606:	46c0      	nop			@ (mov r8, r8)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2101      	movs	r1, #1
 8009614:	438a      	bics	r2, r1
 8009616:	609a      	str	r2, [r3, #8]
 8009618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800961a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800961e:	f383 8810 	msr	PRIMASK, r3
}
 8009622:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2280      	movs	r2, #128	@ 0x80
 8009628:	2120      	movs	r1, #32
 800962a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	2380      	movs	r3, #128	@ 0x80
 8009640:	041b      	lsls	r3, r3, #16
 8009642:	4013      	ands	r3, r2
 8009644:	d018      	beq.n	8009678 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009646:	f3ef 8310 	mrs	r3, PRIMASK
 800964a:	617b      	str	r3, [r7, #20]
  return(result);
 800964c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009650:	2301      	movs	r3, #1
 8009652:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	f383 8810 	msr	PRIMASK, r3
}
 800965a:	46c0      	nop			@ (mov r8, r8)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4928      	ldr	r1, [pc, #160]	@ (8009708 <UART_RxISR_16BIT+0x1b4>)
 8009668:	400a      	ands	r2, r1
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800966e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	f383 8810 	msr	PRIMASK, r3
}
 8009676:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800967c:	2b01      	cmp	r3, #1
 800967e:	d12f      	bne.n	80096e0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009686:	f3ef 8310 	mrs	r3, PRIMASK
 800968a:	60bb      	str	r3, [r7, #8]
  return(result);
 800968c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800968e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009690:	2301      	movs	r3, #1
 8009692:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f383 8810 	msr	PRIMASK, r3
}
 800969a:	46c0      	nop			@ (mov r8, r8)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2110      	movs	r1, #16
 80096a8:	438a      	bics	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f383 8810 	msr	PRIMASK, r3
}
 80096b6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	2210      	movs	r2, #16
 80096c0:	4013      	ands	r3, r2
 80096c2:	2b10      	cmp	r3, #16
 80096c4:	d103      	bne.n	80096ce <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2210      	movs	r2, #16
 80096cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2258      	movs	r2, #88	@ 0x58
 80096d2:	5a9a      	ldrh	r2, [r3, r2]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	0011      	movs	r1, r2
 80096d8:	0018      	movs	r0, r3
 80096da:	f7ff f9eb 	bl	8008ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096de:	e00c      	b.n	80096fa <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	0018      	movs	r0, r3
 80096e4:	f7f9 ff20 	bl	8003528 <HAL_UART_RxCpltCallback>
}
 80096e8:	e007      	b.n	80096fa <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	699a      	ldr	r2, [r3, #24]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2108      	movs	r1, #8
 80096f6:	430a      	orrs	r2, r1
 80096f8:	619a      	str	r2, [r3, #24]
}
 80096fa:	46c0      	nop			@ (mov r8, r8)
 80096fc:	46bd      	mov	sp, r7
 80096fe:	b014      	add	sp, #80	@ 0x50
 8009700:	bd80      	pop	{r7, pc}
 8009702:	46c0      	nop			@ (mov r8, r8)
 8009704:	fffffedf 	.word	0xfffffedf
 8009708:	fbffffff 	.word	0xfbffffff

0800970c <__cvt>:
 800970c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800970e:	001f      	movs	r7, r3
 8009710:	2300      	movs	r3, #0
 8009712:	0016      	movs	r6, r2
 8009714:	b08b      	sub	sp, #44	@ 0x2c
 8009716:	429f      	cmp	r7, r3
 8009718:	da04      	bge.n	8009724 <__cvt+0x18>
 800971a:	2180      	movs	r1, #128	@ 0x80
 800971c:	0609      	lsls	r1, r1, #24
 800971e:	187b      	adds	r3, r7, r1
 8009720:	001f      	movs	r7, r3
 8009722:	232d      	movs	r3, #45	@ 0x2d
 8009724:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009726:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009728:	7013      	strb	r3, [r2, #0]
 800972a:	2320      	movs	r3, #32
 800972c:	2203      	movs	r2, #3
 800972e:	439d      	bics	r5, r3
 8009730:	2d46      	cmp	r5, #70	@ 0x46
 8009732:	d007      	beq.n	8009744 <__cvt+0x38>
 8009734:	002b      	movs	r3, r5
 8009736:	3b45      	subs	r3, #69	@ 0x45
 8009738:	4259      	negs	r1, r3
 800973a:	414b      	adcs	r3, r1
 800973c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800973e:	3a01      	subs	r2, #1
 8009740:	18cb      	adds	r3, r1, r3
 8009742:	9310      	str	r3, [sp, #64]	@ 0x40
 8009744:	ab09      	add	r3, sp, #36	@ 0x24
 8009746:	9304      	str	r3, [sp, #16]
 8009748:	ab08      	add	r3, sp, #32
 800974a:	9303      	str	r3, [sp, #12]
 800974c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800974e:	9200      	str	r2, [sp, #0]
 8009750:	9302      	str	r3, [sp, #8]
 8009752:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009754:	0032      	movs	r2, r6
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	003b      	movs	r3, r7
 800975a:	f000 ff83 	bl	800a664 <_dtoa_r>
 800975e:	0004      	movs	r4, r0
 8009760:	2d47      	cmp	r5, #71	@ 0x47
 8009762:	d11b      	bne.n	800979c <__cvt+0x90>
 8009764:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009766:	07db      	lsls	r3, r3, #31
 8009768:	d511      	bpl.n	800978e <__cvt+0x82>
 800976a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800976c:	18c3      	adds	r3, r0, r3
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	2200      	movs	r2, #0
 8009772:	2300      	movs	r3, #0
 8009774:	0030      	movs	r0, r6
 8009776:	0039      	movs	r1, r7
 8009778:	f7f6 fe72 	bl	8000460 <__aeabi_dcmpeq>
 800977c:	2800      	cmp	r0, #0
 800977e:	d001      	beq.n	8009784 <__cvt+0x78>
 8009780:	9b07      	ldr	r3, [sp, #28]
 8009782:	9309      	str	r3, [sp, #36]	@ 0x24
 8009784:	2230      	movs	r2, #48	@ 0x30
 8009786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009788:	9907      	ldr	r1, [sp, #28]
 800978a:	428b      	cmp	r3, r1
 800978c:	d320      	bcc.n	80097d0 <__cvt+0xc4>
 800978e:	0020      	movs	r0, r4
 8009790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009792:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009794:	1b1b      	subs	r3, r3, r4
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	b00b      	add	sp, #44	@ 0x2c
 800979a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800979e:	18c3      	adds	r3, r0, r3
 80097a0:	9307      	str	r3, [sp, #28]
 80097a2:	2d46      	cmp	r5, #70	@ 0x46
 80097a4:	d1e4      	bne.n	8009770 <__cvt+0x64>
 80097a6:	7803      	ldrb	r3, [r0, #0]
 80097a8:	2b30      	cmp	r3, #48	@ 0x30
 80097aa:	d10c      	bne.n	80097c6 <__cvt+0xba>
 80097ac:	2200      	movs	r2, #0
 80097ae:	2300      	movs	r3, #0
 80097b0:	0030      	movs	r0, r6
 80097b2:	0039      	movs	r1, r7
 80097b4:	f7f6 fe54 	bl	8000460 <__aeabi_dcmpeq>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d104      	bne.n	80097c6 <__cvt+0xba>
 80097bc:	2301      	movs	r3, #1
 80097be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80097c0:	1a9b      	subs	r3, r3, r2
 80097c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097c8:	9a07      	ldr	r2, [sp, #28]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	18d3      	adds	r3, r2, r3
 80097ce:	e7ce      	b.n	800976e <__cvt+0x62>
 80097d0:	1c59      	adds	r1, r3, #1
 80097d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80097d4:	701a      	strb	r2, [r3, #0]
 80097d6:	e7d6      	b.n	8009786 <__cvt+0x7a>

080097d8 <__exponent>:
 80097d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097da:	232b      	movs	r3, #43	@ 0x2b
 80097dc:	0005      	movs	r5, r0
 80097de:	000c      	movs	r4, r1
 80097e0:	b085      	sub	sp, #20
 80097e2:	7002      	strb	r2, [r0, #0]
 80097e4:	2900      	cmp	r1, #0
 80097e6:	da01      	bge.n	80097ec <__exponent+0x14>
 80097e8:	424c      	negs	r4, r1
 80097ea:	3302      	adds	r3, #2
 80097ec:	706b      	strb	r3, [r5, #1]
 80097ee:	2c09      	cmp	r4, #9
 80097f0:	dd2c      	ble.n	800984c <__exponent+0x74>
 80097f2:	ab02      	add	r3, sp, #8
 80097f4:	1dde      	adds	r6, r3, #7
 80097f6:	0020      	movs	r0, r4
 80097f8:	210a      	movs	r1, #10
 80097fa:	f7f6 fe1b 	bl	8000434 <__aeabi_idivmod>
 80097fe:	0037      	movs	r7, r6
 8009800:	3130      	adds	r1, #48	@ 0x30
 8009802:	3e01      	subs	r6, #1
 8009804:	0020      	movs	r0, r4
 8009806:	7031      	strb	r1, [r6, #0]
 8009808:	210a      	movs	r1, #10
 800980a:	9401      	str	r4, [sp, #4]
 800980c:	f7f6 fd2c 	bl	8000268 <__divsi3>
 8009810:	9b01      	ldr	r3, [sp, #4]
 8009812:	0004      	movs	r4, r0
 8009814:	2b63      	cmp	r3, #99	@ 0x63
 8009816:	dcee      	bgt.n	80097f6 <__exponent+0x1e>
 8009818:	1eba      	subs	r2, r7, #2
 800981a:	1ca8      	adds	r0, r5, #2
 800981c:	0001      	movs	r1, r0
 800981e:	0013      	movs	r3, r2
 8009820:	3430      	adds	r4, #48	@ 0x30
 8009822:	7014      	strb	r4, [r2, #0]
 8009824:	ac02      	add	r4, sp, #8
 8009826:	3407      	adds	r4, #7
 8009828:	429c      	cmp	r4, r3
 800982a:	d80a      	bhi.n	8009842 <__exponent+0x6a>
 800982c:	2300      	movs	r3, #0
 800982e:	42a2      	cmp	r2, r4
 8009830:	d803      	bhi.n	800983a <__exponent+0x62>
 8009832:	3309      	adds	r3, #9
 8009834:	aa02      	add	r2, sp, #8
 8009836:	189b      	adds	r3, r3, r2
 8009838:	1bdb      	subs	r3, r3, r7
 800983a:	18c0      	adds	r0, r0, r3
 800983c:	1b40      	subs	r0, r0, r5
 800983e:	b005      	add	sp, #20
 8009840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009842:	781c      	ldrb	r4, [r3, #0]
 8009844:	3301      	adds	r3, #1
 8009846:	700c      	strb	r4, [r1, #0]
 8009848:	3101      	adds	r1, #1
 800984a:	e7eb      	b.n	8009824 <__exponent+0x4c>
 800984c:	2330      	movs	r3, #48	@ 0x30
 800984e:	18e4      	adds	r4, r4, r3
 8009850:	70ab      	strb	r3, [r5, #2]
 8009852:	1d28      	adds	r0, r5, #4
 8009854:	70ec      	strb	r4, [r5, #3]
 8009856:	e7f1      	b.n	800983c <__exponent+0x64>

08009858 <_printf_float>:
 8009858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800985a:	b097      	sub	sp, #92	@ 0x5c
 800985c:	000d      	movs	r5, r1
 800985e:	920a      	str	r2, [sp, #40]	@ 0x28
 8009860:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8009862:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009864:	9009      	str	r0, [sp, #36]	@ 0x24
 8009866:	f000 fdbd 	bl	800a3e4 <_localeconv_r>
 800986a:	6803      	ldr	r3, [r0, #0]
 800986c:	0018      	movs	r0, r3
 800986e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009870:	f7f6 fc54 	bl	800011c <strlen>
 8009874:	2300      	movs	r3, #0
 8009876:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009878:	9314      	str	r3, [sp, #80]	@ 0x50
 800987a:	7e2b      	ldrb	r3, [r5, #24]
 800987c:	2207      	movs	r2, #7
 800987e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	930e      	str	r3, [sp, #56]	@ 0x38
 8009884:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	05c9      	lsls	r1, r1, #23
 800988a:	d545      	bpl.n	8009918 <_printf_float+0xc0>
 800988c:	189b      	adds	r3, r3, r2
 800988e:	4393      	bics	r3, r2
 8009890:	001a      	movs	r2, r3
 8009892:	3208      	adds	r2, #8
 8009894:	6022      	str	r2, [r4, #0]
 8009896:	2201      	movs	r2, #1
 8009898:	681e      	ldr	r6, [r3, #0]
 800989a:	685f      	ldr	r7, [r3, #4]
 800989c:	007b      	lsls	r3, r7, #1
 800989e:	085b      	lsrs	r3, r3, #1
 80098a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80098a2:	9610      	str	r6, [sp, #64]	@ 0x40
 80098a4:	64ae      	str	r6, [r5, #72]	@ 0x48
 80098a6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80098a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80098aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80098ac:	4ba7      	ldr	r3, [pc, #668]	@ (8009b4c <_printf_float+0x2f4>)
 80098ae:	4252      	negs	r2, r2
 80098b0:	f7f9 f806 	bl	80028c0 <__aeabi_dcmpun>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d131      	bne.n	800991c <_printf_float+0xc4>
 80098b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80098ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80098bc:	2201      	movs	r2, #1
 80098be:	4ba3      	ldr	r3, [pc, #652]	@ (8009b4c <_printf_float+0x2f4>)
 80098c0:	4252      	negs	r2, r2
 80098c2:	f7f6 fddd 	bl	8000480 <__aeabi_dcmple>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d128      	bne.n	800991c <_printf_float+0xc4>
 80098ca:	2200      	movs	r2, #0
 80098cc:	2300      	movs	r3, #0
 80098ce:	0030      	movs	r0, r6
 80098d0:	0039      	movs	r1, r7
 80098d2:	f7f6 fdcb 	bl	800046c <__aeabi_dcmplt>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d003      	beq.n	80098e2 <_printf_float+0x8a>
 80098da:	002b      	movs	r3, r5
 80098dc:	222d      	movs	r2, #45	@ 0x2d
 80098de:	3343      	adds	r3, #67	@ 0x43
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098e4:	4f9a      	ldr	r7, [pc, #616]	@ (8009b50 <_printf_float+0x2f8>)
 80098e6:	2b47      	cmp	r3, #71	@ 0x47
 80098e8:	d900      	bls.n	80098ec <_printf_float+0x94>
 80098ea:	4f9a      	ldr	r7, [pc, #616]	@ (8009b54 <_printf_float+0x2fc>)
 80098ec:	2303      	movs	r3, #3
 80098ee:	2400      	movs	r4, #0
 80098f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098f2:	612b      	str	r3, [r5, #16]
 80098f4:	3301      	adds	r3, #1
 80098f6:	439a      	bics	r2, r3
 80098f8:	602a      	str	r2, [r5, #0]
 80098fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098fc:	0029      	movs	r1, r5
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009904:	aa15      	add	r2, sp, #84	@ 0x54
 8009906:	f000 f9e5 	bl	8009cd4 <_printf_common>
 800990a:	3001      	adds	r0, #1
 800990c:	d000      	beq.n	8009910 <_printf_float+0xb8>
 800990e:	e09f      	b.n	8009a50 <_printf_float+0x1f8>
 8009910:	2001      	movs	r0, #1
 8009912:	4240      	negs	r0, r0
 8009914:	b017      	add	sp, #92	@ 0x5c
 8009916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009918:	3307      	adds	r3, #7
 800991a:	e7b8      	b.n	800988e <_printf_float+0x36>
 800991c:	0032      	movs	r2, r6
 800991e:	003b      	movs	r3, r7
 8009920:	0030      	movs	r0, r6
 8009922:	0039      	movs	r1, r7
 8009924:	f7f8 ffcc 	bl	80028c0 <__aeabi_dcmpun>
 8009928:	2800      	cmp	r0, #0
 800992a:	d00b      	beq.n	8009944 <_printf_float+0xec>
 800992c:	2f00      	cmp	r7, #0
 800992e:	da03      	bge.n	8009938 <_printf_float+0xe0>
 8009930:	002b      	movs	r3, r5
 8009932:	222d      	movs	r2, #45	@ 0x2d
 8009934:	3343      	adds	r3, #67	@ 0x43
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800993a:	4f87      	ldr	r7, [pc, #540]	@ (8009b58 <_printf_float+0x300>)
 800993c:	2b47      	cmp	r3, #71	@ 0x47
 800993e:	d9d5      	bls.n	80098ec <_printf_float+0x94>
 8009940:	4f86      	ldr	r7, [pc, #536]	@ (8009b5c <_printf_float+0x304>)
 8009942:	e7d3      	b.n	80098ec <_printf_float+0x94>
 8009944:	2220      	movs	r2, #32
 8009946:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8009948:	686b      	ldr	r3, [r5, #4]
 800994a:	4394      	bics	r4, r2
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	d146      	bne.n	80099de <_printf_float+0x186>
 8009950:	3307      	adds	r3, #7
 8009952:	606b      	str	r3, [r5, #4]
 8009954:	2380      	movs	r3, #128	@ 0x80
 8009956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	4313      	orrs	r3, r2
 800995c:	2200      	movs	r2, #0
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	9206      	str	r2, [sp, #24]
 8009962:	aa14      	add	r2, sp, #80	@ 0x50
 8009964:	9205      	str	r2, [sp, #20]
 8009966:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009968:	a90a      	add	r1, sp, #40	@ 0x28
 800996a:	9204      	str	r2, [sp, #16]
 800996c:	aa13      	add	r2, sp, #76	@ 0x4c
 800996e:	9203      	str	r2, [sp, #12]
 8009970:	2223      	movs	r2, #35	@ 0x23
 8009972:	1852      	adds	r2, r2, r1
 8009974:	9202      	str	r2, [sp, #8]
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	686b      	ldr	r3, [r5, #4]
 800997a:	0032      	movs	r2, r6
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009980:	003b      	movs	r3, r7
 8009982:	f7ff fec3 	bl	800970c <__cvt>
 8009986:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009988:	0007      	movs	r7, r0
 800998a:	2c47      	cmp	r4, #71	@ 0x47
 800998c:	d12d      	bne.n	80099ea <_printf_float+0x192>
 800998e:	1cd3      	adds	r3, r2, #3
 8009990:	db02      	blt.n	8009998 <_printf_float+0x140>
 8009992:	686b      	ldr	r3, [r5, #4]
 8009994:	429a      	cmp	r2, r3
 8009996:	dd48      	ble.n	8009a2a <_printf_float+0x1d2>
 8009998:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800999a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800999c:	3b02      	subs	r3, #2
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80099a2:	0028      	movs	r0, r5
 80099a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80099a6:	3901      	subs	r1, #1
 80099a8:	3050      	adds	r0, #80	@ 0x50
 80099aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80099ac:	f7ff ff14 	bl	80097d8 <__exponent>
 80099b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80099b2:	0004      	movs	r4, r0
 80099b4:	1813      	adds	r3, r2, r0
 80099b6:	612b      	str	r3, [r5, #16]
 80099b8:	2a01      	cmp	r2, #1
 80099ba:	dc02      	bgt.n	80099c2 <_printf_float+0x16a>
 80099bc:	682a      	ldr	r2, [r5, #0]
 80099be:	07d2      	lsls	r2, r2, #31
 80099c0:	d501      	bpl.n	80099c6 <_printf_float+0x16e>
 80099c2:	3301      	adds	r3, #1
 80099c4:	612b      	str	r3, [r5, #16]
 80099c6:	2323      	movs	r3, #35	@ 0x23
 80099c8:	aa0a      	add	r2, sp, #40	@ 0x28
 80099ca:	189b      	adds	r3, r3, r2
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d100      	bne.n	80099d4 <_printf_float+0x17c>
 80099d2:	e792      	b.n	80098fa <_printf_float+0xa2>
 80099d4:	002b      	movs	r3, r5
 80099d6:	222d      	movs	r2, #45	@ 0x2d
 80099d8:	3343      	adds	r3, #67	@ 0x43
 80099da:	701a      	strb	r2, [r3, #0]
 80099dc:	e78d      	b.n	80098fa <_printf_float+0xa2>
 80099de:	2c47      	cmp	r4, #71	@ 0x47
 80099e0:	d1b8      	bne.n	8009954 <_printf_float+0xfc>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1b6      	bne.n	8009954 <_printf_float+0xfc>
 80099e6:	3301      	adds	r3, #1
 80099e8:	e7b3      	b.n	8009952 <_printf_float+0xfa>
 80099ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099ec:	0011      	movs	r1, r2
 80099ee:	2b65      	cmp	r3, #101	@ 0x65
 80099f0:	d9d7      	bls.n	80099a2 <_printf_float+0x14a>
 80099f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099f4:	2b66      	cmp	r3, #102	@ 0x66
 80099f6:	d11a      	bne.n	8009a2e <_printf_float+0x1d6>
 80099f8:	686b      	ldr	r3, [r5, #4]
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	dd09      	ble.n	8009a12 <_printf_float+0x1ba>
 80099fe:	612a      	str	r2, [r5, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d102      	bne.n	8009a0a <_printf_float+0x1b2>
 8009a04:	6829      	ldr	r1, [r5, #0]
 8009a06:	07c9      	lsls	r1, r1, #31
 8009a08:	d50b      	bpl.n	8009a22 <_printf_float+0x1ca>
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	189b      	adds	r3, r3, r2
 8009a0e:	612b      	str	r3, [r5, #16]
 8009a10:	e007      	b.n	8009a22 <_printf_float+0x1ca>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d103      	bne.n	8009a1e <_printf_float+0x1c6>
 8009a16:	2201      	movs	r2, #1
 8009a18:	6829      	ldr	r1, [r5, #0]
 8009a1a:	4211      	tst	r1, r2
 8009a1c:	d000      	beq.n	8009a20 <_printf_float+0x1c8>
 8009a1e:	1c9a      	adds	r2, r3, #2
 8009a20:	612a      	str	r2, [r5, #16]
 8009a22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a24:	2400      	movs	r4, #0
 8009a26:	65ab      	str	r3, [r5, #88]	@ 0x58
 8009a28:	e7cd      	b.n	80099c6 <_printf_float+0x16e>
 8009a2a:	2367      	movs	r3, #103	@ 0x67
 8009a2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a2e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009a30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a32:	4299      	cmp	r1, r3
 8009a34:	db06      	blt.n	8009a44 <_printf_float+0x1ec>
 8009a36:	682b      	ldr	r3, [r5, #0]
 8009a38:	6129      	str	r1, [r5, #16]
 8009a3a:	07db      	lsls	r3, r3, #31
 8009a3c:	d5f1      	bpl.n	8009a22 <_printf_float+0x1ca>
 8009a3e:	3101      	adds	r1, #1
 8009a40:	6129      	str	r1, [r5, #16]
 8009a42:	e7ee      	b.n	8009a22 <_printf_float+0x1ca>
 8009a44:	2201      	movs	r2, #1
 8009a46:	2900      	cmp	r1, #0
 8009a48:	dce0      	bgt.n	8009a0c <_printf_float+0x1b4>
 8009a4a:	1892      	adds	r2, r2, r2
 8009a4c:	1a52      	subs	r2, r2, r1
 8009a4e:	e7dd      	b.n	8009a0c <_printf_float+0x1b4>
 8009a50:	682a      	ldr	r2, [r5, #0]
 8009a52:	0553      	lsls	r3, r2, #21
 8009a54:	d408      	bmi.n	8009a68 <_printf_float+0x210>
 8009a56:	692b      	ldr	r3, [r5, #16]
 8009a58:	003a      	movs	r2, r7
 8009a5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a5e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009a60:	47a0      	blx	r4
 8009a62:	3001      	adds	r0, #1
 8009a64:	d129      	bne.n	8009aba <_printf_float+0x262>
 8009a66:	e753      	b.n	8009910 <_printf_float+0xb8>
 8009a68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a6a:	2b65      	cmp	r3, #101	@ 0x65
 8009a6c:	d800      	bhi.n	8009a70 <_printf_float+0x218>
 8009a6e:	e0da      	b.n	8009c26 <_printf_float+0x3ce>
 8009a70:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009a72:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009a74:	2200      	movs	r2, #0
 8009a76:	2300      	movs	r3, #0
 8009a78:	f7f6 fcf2 	bl	8000460 <__aeabi_dcmpeq>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d033      	beq.n	8009ae8 <_printf_float+0x290>
 8009a80:	2301      	movs	r3, #1
 8009a82:	4a37      	ldr	r2, [pc, #220]	@ (8009b60 <_printf_float+0x308>)
 8009a84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009a8a:	47a0      	blx	r4
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d100      	bne.n	8009a92 <_printf_float+0x23a>
 8009a90:	e73e      	b.n	8009910 <_printf_float+0xb8>
 8009a92:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009a94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a96:	42b3      	cmp	r3, r6
 8009a98:	db02      	blt.n	8009aa0 <_printf_float+0x248>
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	07db      	lsls	r3, r3, #31
 8009a9e:	d50c      	bpl.n	8009aba <_printf_float+0x262>
 8009aa0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009aa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aa4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009aa6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009aa8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009aaa:	47a0      	blx	r4
 8009aac:	2400      	movs	r4, #0
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d100      	bne.n	8009ab4 <_printf_float+0x25c>
 8009ab2:	e72d      	b.n	8009910 <_printf_float+0xb8>
 8009ab4:	1e73      	subs	r3, r6, #1
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	dc0a      	bgt.n	8009ad0 <_printf_float+0x278>
 8009aba:	682b      	ldr	r3, [r5, #0]
 8009abc:	079b      	lsls	r3, r3, #30
 8009abe:	d500      	bpl.n	8009ac2 <_printf_float+0x26a>
 8009ac0:	e105      	b.n	8009cce <_printf_float+0x476>
 8009ac2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009ac4:	68e8      	ldr	r0, [r5, #12]
 8009ac6:	4298      	cmp	r0, r3
 8009ac8:	db00      	blt.n	8009acc <_printf_float+0x274>
 8009aca:	e723      	b.n	8009914 <_printf_float+0xbc>
 8009acc:	0018      	movs	r0, r3
 8009ace:	e721      	b.n	8009914 <_printf_float+0xbc>
 8009ad0:	002a      	movs	r2, r5
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ad8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009ada:	321a      	adds	r2, #26
 8009adc:	47b8      	blx	r7
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d100      	bne.n	8009ae4 <_printf_float+0x28c>
 8009ae2:	e715      	b.n	8009910 <_printf_float+0xb8>
 8009ae4:	3401      	adds	r4, #1
 8009ae6:	e7e5      	b.n	8009ab4 <_printf_float+0x25c>
 8009ae8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dc3a      	bgt.n	8009b64 <_printf_float+0x30c>
 8009aee:	2301      	movs	r3, #1
 8009af0:	4a1b      	ldr	r2, [pc, #108]	@ (8009b60 <_printf_float+0x308>)
 8009af2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009af4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009af6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009af8:	47a0      	blx	r4
 8009afa:	3001      	adds	r0, #1
 8009afc:	d100      	bne.n	8009b00 <_printf_float+0x2a8>
 8009afe:	e707      	b.n	8009910 <_printf_float+0xb8>
 8009b00:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009b02:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b04:	4333      	orrs	r3, r6
 8009b06:	d102      	bne.n	8009b0e <_printf_float+0x2b6>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	07db      	lsls	r3, r3, #31
 8009b0c:	d5d5      	bpl.n	8009aba <_printf_float+0x262>
 8009b0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b16:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009b18:	47a0      	blx	r4
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d100      	bne.n	8009b22 <_printf_float+0x2ca>
 8009b20:	e6f6      	b.n	8009910 <_printf_float+0xb8>
 8009b22:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b28:	425b      	negs	r3, r3
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	dc01      	bgt.n	8009b32 <_printf_float+0x2da>
 8009b2e:	0033      	movs	r3, r6
 8009b30:	e792      	b.n	8009a58 <_printf_float+0x200>
 8009b32:	002a      	movs	r2, r5
 8009b34:	2301      	movs	r3, #1
 8009b36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b3a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009b3c:	321a      	adds	r2, #26
 8009b3e:	47a0      	blx	r4
 8009b40:	3001      	adds	r0, #1
 8009b42:	d100      	bne.n	8009b46 <_printf_float+0x2ee>
 8009b44:	e6e4      	b.n	8009910 <_printf_float+0xb8>
 8009b46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b48:	3301      	adds	r3, #1
 8009b4a:	e7ea      	b.n	8009b22 <_printf_float+0x2ca>
 8009b4c:	7fefffff 	.word	0x7fefffff
 8009b50:	0800d364 	.word	0x0800d364
 8009b54:	0800d368 	.word	0x0800d368
 8009b58:	0800d36c 	.word	0x0800d36c
 8009b5c:	0800d370 	.word	0x0800d370
 8009b60:	0800d637 	.word	0x0800d637
 8009b64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b66:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009b68:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b6a:	429e      	cmp	r6, r3
 8009b6c:	dd00      	ble.n	8009b70 <_printf_float+0x318>
 8009b6e:	001e      	movs	r6, r3
 8009b70:	2e00      	cmp	r6, #0
 8009b72:	dc31      	bgt.n	8009bd8 <_printf_float+0x380>
 8009b74:	43f3      	mvns	r3, r6
 8009b76:	2400      	movs	r4, #0
 8009b78:	17db      	asrs	r3, r3, #31
 8009b7a:	4033      	ands	r3, r6
 8009b7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b7e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009b80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b82:	1af3      	subs	r3, r6, r3
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	dc30      	bgt.n	8009bea <_printf_float+0x392>
 8009b88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	dc38      	bgt.n	8009c02 <_printf_float+0x3aa>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	07db      	lsls	r3, r3, #31
 8009b94:	d435      	bmi.n	8009c02 <_printf_float+0x3aa>
 8009b96:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009b98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b9c:	1b9b      	subs	r3, r3, r6
 8009b9e:	1b14      	subs	r4, r2, r4
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	dd00      	ble.n	8009ba6 <_printf_float+0x34e>
 8009ba4:	001c      	movs	r4, r3
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	dc34      	bgt.n	8009c14 <_printf_float+0x3bc>
 8009baa:	43e3      	mvns	r3, r4
 8009bac:	2600      	movs	r6, #0
 8009bae:	17db      	asrs	r3, r3, #31
 8009bb0:	401c      	ands	r4, r3
 8009bb2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bb4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	1b1b      	subs	r3, r3, r4
 8009bba:	42b3      	cmp	r3, r6
 8009bbc:	dc00      	bgt.n	8009bc0 <_printf_float+0x368>
 8009bbe:	e77c      	b.n	8009aba <_printf_float+0x262>
 8009bc0:	002a      	movs	r2, r5
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bc8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009bca:	321a      	adds	r2, #26
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d100      	bne.n	8009bd4 <_printf_float+0x37c>
 8009bd2:	e69d      	b.n	8009910 <_printf_float+0xb8>
 8009bd4:	3601      	adds	r6, #1
 8009bd6:	e7ec      	b.n	8009bb2 <_printf_float+0x35a>
 8009bd8:	0033      	movs	r3, r6
 8009bda:	003a      	movs	r2, r7
 8009bdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009be0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009be2:	47a0      	blx	r4
 8009be4:	3001      	adds	r0, #1
 8009be6:	d1c5      	bne.n	8009b74 <_printf_float+0x31c>
 8009be8:	e692      	b.n	8009910 <_printf_float+0xb8>
 8009bea:	002a      	movs	r2, r5
 8009bec:	2301      	movs	r3, #1
 8009bee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bf0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bf2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009bf4:	321a      	adds	r2, #26
 8009bf6:	47b0      	blx	r6
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d100      	bne.n	8009bfe <_printf_float+0x3a6>
 8009bfc:	e688      	b.n	8009910 <_printf_float+0xb8>
 8009bfe:	3401      	adds	r4, #1
 8009c00:	e7bd      	b.n	8009b7e <_printf_float+0x326>
 8009c02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009c0c:	47a0      	blx	r4
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d1c1      	bne.n	8009b96 <_printf_float+0x33e>
 8009c12:	e67d      	b.n	8009910 <_printf_float+0xb8>
 8009c14:	19ba      	adds	r2, r7, r6
 8009c16:	0023      	movs	r3, r4
 8009c18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c1c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009c1e:	47b0      	blx	r6
 8009c20:	3001      	adds	r0, #1
 8009c22:	d1c2      	bne.n	8009baa <_printf_float+0x352>
 8009c24:	e674      	b.n	8009910 <_printf_float+0xb8>
 8009c26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c28:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	dc02      	bgt.n	8009c34 <_printf_float+0x3dc>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	421a      	tst	r2, r3
 8009c32:	d039      	beq.n	8009ca8 <_printf_float+0x450>
 8009c34:	2301      	movs	r3, #1
 8009c36:	003a      	movs	r2, r7
 8009c38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c3c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009c3e:	47b0      	blx	r6
 8009c40:	3001      	adds	r0, #1
 8009c42:	d100      	bne.n	8009c46 <_printf_float+0x3ee>
 8009c44:	e664      	b.n	8009910 <_printf_float+0xb8>
 8009c46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c4e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009c50:	47b0      	blx	r6
 8009c52:	3001      	adds	r0, #1
 8009c54:	d100      	bne.n	8009c58 <_printf_float+0x400>
 8009c56:	e65b      	b.n	8009910 <_printf_float+0xb8>
 8009c58:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009c5a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009c5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c5e:	2200      	movs	r2, #0
 8009c60:	3b01      	subs	r3, #1
 8009c62:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c64:	2300      	movs	r3, #0
 8009c66:	f7f6 fbfb 	bl	8000460 <__aeabi_dcmpeq>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d11a      	bne.n	8009ca4 <_printf_float+0x44c>
 8009c6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c70:	1c7a      	adds	r2, r7, #1
 8009c72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c76:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009c78:	47b0      	blx	r6
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	d10e      	bne.n	8009c9c <_printf_float+0x444>
 8009c7e:	e647      	b.n	8009910 <_printf_float+0xb8>
 8009c80:	002a      	movs	r2, r5
 8009c82:	2301      	movs	r3, #1
 8009c84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c88:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009c8a:	321a      	adds	r2, #26
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d100      	bne.n	8009c94 <_printf_float+0x43c>
 8009c92:	e63d      	b.n	8009910 <_printf_float+0xb8>
 8009c94:	3601      	adds	r6, #1
 8009c96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c98:	429e      	cmp	r6, r3
 8009c9a:	dbf1      	blt.n	8009c80 <_printf_float+0x428>
 8009c9c:	002a      	movs	r2, r5
 8009c9e:	0023      	movs	r3, r4
 8009ca0:	3250      	adds	r2, #80	@ 0x50
 8009ca2:	e6da      	b.n	8009a5a <_printf_float+0x202>
 8009ca4:	2600      	movs	r6, #0
 8009ca6:	e7f6      	b.n	8009c96 <_printf_float+0x43e>
 8009ca8:	003a      	movs	r2, r7
 8009caa:	e7e2      	b.n	8009c72 <_printf_float+0x41a>
 8009cac:	002a      	movs	r2, r5
 8009cae:	2301      	movs	r3, #1
 8009cb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cb4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009cb6:	3219      	adds	r2, #25
 8009cb8:	47b0      	blx	r6
 8009cba:	3001      	adds	r0, #1
 8009cbc:	d100      	bne.n	8009cc0 <_printf_float+0x468>
 8009cbe:	e627      	b.n	8009910 <_printf_float+0xb8>
 8009cc0:	3401      	adds	r4, #1
 8009cc2:	68eb      	ldr	r3, [r5, #12]
 8009cc4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	dcef      	bgt.n	8009cac <_printf_float+0x454>
 8009ccc:	e6f9      	b.n	8009ac2 <_printf_float+0x26a>
 8009cce:	2400      	movs	r4, #0
 8009cd0:	e7f7      	b.n	8009cc2 <_printf_float+0x46a>
 8009cd2:	46c0      	nop			@ (mov r8, r8)

08009cd4 <_printf_common>:
 8009cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cd6:	0016      	movs	r6, r2
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	688a      	ldr	r2, [r1, #8]
 8009cdc:	690b      	ldr	r3, [r1, #16]
 8009cde:	000c      	movs	r4, r1
 8009ce0:	9000      	str	r0, [sp, #0]
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	da00      	bge.n	8009ce8 <_printf_common+0x14>
 8009ce6:	0013      	movs	r3, r2
 8009ce8:	0022      	movs	r2, r4
 8009cea:	6033      	str	r3, [r6, #0]
 8009cec:	3243      	adds	r2, #67	@ 0x43
 8009cee:	7812      	ldrb	r2, [r2, #0]
 8009cf0:	2a00      	cmp	r2, #0
 8009cf2:	d001      	beq.n	8009cf8 <_printf_common+0x24>
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	6033      	str	r3, [r6, #0]
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	069b      	lsls	r3, r3, #26
 8009cfc:	d502      	bpl.n	8009d04 <_printf_common+0x30>
 8009cfe:	6833      	ldr	r3, [r6, #0]
 8009d00:	3302      	adds	r3, #2
 8009d02:	6033      	str	r3, [r6, #0]
 8009d04:	6822      	ldr	r2, [r4, #0]
 8009d06:	2306      	movs	r3, #6
 8009d08:	0015      	movs	r5, r2
 8009d0a:	401d      	ands	r5, r3
 8009d0c:	421a      	tst	r2, r3
 8009d0e:	d027      	beq.n	8009d60 <_printf_common+0x8c>
 8009d10:	0023      	movs	r3, r4
 8009d12:	3343      	adds	r3, #67	@ 0x43
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	1e5a      	subs	r2, r3, #1
 8009d18:	4193      	sbcs	r3, r2
 8009d1a:	6822      	ldr	r2, [r4, #0]
 8009d1c:	0692      	lsls	r2, r2, #26
 8009d1e:	d430      	bmi.n	8009d82 <_printf_common+0xae>
 8009d20:	0022      	movs	r2, r4
 8009d22:	9901      	ldr	r1, [sp, #4]
 8009d24:	9800      	ldr	r0, [sp, #0]
 8009d26:	9d08      	ldr	r5, [sp, #32]
 8009d28:	3243      	adds	r2, #67	@ 0x43
 8009d2a:	47a8      	blx	r5
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d025      	beq.n	8009d7c <_printf_common+0xa8>
 8009d30:	2206      	movs	r2, #6
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	2500      	movs	r5, #0
 8009d36:	4013      	ands	r3, r2
 8009d38:	2b04      	cmp	r3, #4
 8009d3a:	d105      	bne.n	8009d48 <_printf_common+0x74>
 8009d3c:	6833      	ldr	r3, [r6, #0]
 8009d3e:	68e5      	ldr	r5, [r4, #12]
 8009d40:	1aed      	subs	r5, r5, r3
 8009d42:	43eb      	mvns	r3, r5
 8009d44:	17db      	asrs	r3, r3, #31
 8009d46:	401d      	ands	r5, r3
 8009d48:	68a3      	ldr	r3, [r4, #8]
 8009d4a:	6922      	ldr	r2, [r4, #16]
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	dd01      	ble.n	8009d54 <_printf_common+0x80>
 8009d50:	1a9b      	subs	r3, r3, r2
 8009d52:	18ed      	adds	r5, r5, r3
 8009d54:	2600      	movs	r6, #0
 8009d56:	42b5      	cmp	r5, r6
 8009d58:	d120      	bne.n	8009d9c <_printf_common+0xc8>
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	e010      	b.n	8009d80 <_printf_common+0xac>
 8009d5e:	3501      	adds	r5, #1
 8009d60:	68e3      	ldr	r3, [r4, #12]
 8009d62:	6832      	ldr	r2, [r6, #0]
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	42ab      	cmp	r3, r5
 8009d68:	ddd2      	ble.n	8009d10 <_printf_common+0x3c>
 8009d6a:	0022      	movs	r2, r4
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	9901      	ldr	r1, [sp, #4]
 8009d70:	9800      	ldr	r0, [sp, #0]
 8009d72:	9f08      	ldr	r7, [sp, #32]
 8009d74:	3219      	adds	r2, #25
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d1f0      	bne.n	8009d5e <_printf_common+0x8a>
 8009d7c:	2001      	movs	r0, #1
 8009d7e:	4240      	negs	r0, r0
 8009d80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d82:	2030      	movs	r0, #48	@ 0x30
 8009d84:	18e1      	adds	r1, r4, r3
 8009d86:	3143      	adds	r1, #67	@ 0x43
 8009d88:	7008      	strb	r0, [r1, #0]
 8009d8a:	0021      	movs	r1, r4
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	3145      	adds	r1, #69	@ 0x45
 8009d90:	7809      	ldrb	r1, [r1, #0]
 8009d92:	18a2      	adds	r2, r4, r2
 8009d94:	3243      	adds	r2, #67	@ 0x43
 8009d96:	3302      	adds	r3, #2
 8009d98:	7011      	strb	r1, [r2, #0]
 8009d9a:	e7c1      	b.n	8009d20 <_printf_common+0x4c>
 8009d9c:	0022      	movs	r2, r4
 8009d9e:	2301      	movs	r3, #1
 8009da0:	9901      	ldr	r1, [sp, #4]
 8009da2:	9800      	ldr	r0, [sp, #0]
 8009da4:	9f08      	ldr	r7, [sp, #32]
 8009da6:	321a      	adds	r2, #26
 8009da8:	47b8      	blx	r7
 8009daa:	3001      	adds	r0, #1
 8009dac:	d0e6      	beq.n	8009d7c <_printf_common+0xa8>
 8009dae:	3601      	adds	r6, #1
 8009db0:	e7d1      	b.n	8009d56 <_printf_common+0x82>
	...

08009db4 <_printf_i>:
 8009db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009db6:	b08b      	sub	sp, #44	@ 0x2c
 8009db8:	9206      	str	r2, [sp, #24]
 8009dba:	000a      	movs	r2, r1
 8009dbc:	3243      	adds	r2, #67	@ 0x43
 8009dbe:	9307      	str	r3, [sp, #28]
 8009dc0:	9005      	str	r0, [sp, #20]
 8009dc2:	9203      	str	r2, [sp, #12]
 8009dc4:	7e0a      	ldrb	r2, [r1, #24]
 8009dc6:	000c      	movs	r4, r1
 8009dc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009dca:	2a78      	cmp	r2, #120	@ 0x78
 8009dcc:	d809      	bhi.n	8009de2 <_printf_i+0x2e>
 8009dce:	2a62      	cmp	r2, #98	@ 0x62
 8009dd0:	d80b      	bhi.n	8009dea <_printf_i+0x36>
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	d100      	bne.n	8009dd8 <_printf_i+0x24>
 8009dd6:	e0bc      	b.n	8009f52 <_printf_i+0x19e>
 8009dd8:	497b      	ldr	r1, [pc, #492]	@ (8009fc8 <_printf_i+0x214>)
 8009dda:	9104      	str	r1, [sp, #16]
 8009ddc:	2a58      	cmp	r2, #88	@ 0x58
 8009dde:	d100      	bne.n	8009de2 <_printf_i+0x2e>
 8009de0:	e090      	b.n	8009f04 <_printf_i+0x150>
 8009de2:	0025      	movs	r5, r4
 8009de4:	3542      	adds	r5, #66	@ 0x42
 8009de6:	702a      	strb	r2, [r5, #0]
 8009de8:	e022      	b.n	8009e30 <_printf_i+0x7c>
 8009dea:	0010      	movs	r0, r2
 8009dec:	3863      	subs	r0, #99	@ 0x63
 8009dee:	2815      	cmp	r0, #21
 8009df0:	d8f7      	bhi.n	8009de2 <_printf_i+0x2e>
 8009df2:	f7f6 f9a5 	bl	8000140 <__gnu_thumb1_case_shi>
 8009df6:	0016      	.short	0x0016
 8009df8:	fff6001f 	.word	0xfff6001f
 8009dfc:	fff6fff6 	.word	0xfff6fff6
 8009e00:	001ffff6 	.word	0x001ffff6
 8009e04:	fff6fff6 	.word	0xfff6fff6
 8009e08:	fff6fff6 	.word	0xfff6fff6
 8009e0c:	003600a1 	.word	0x003600a1
 8009e10:	fff60080 	.word	0xfff60080
 8009e14:	00b2fff6 	.word	0x00b2fff6
 8009e18:	0036fff6 	.word	0x0036fff6
 8009e1c:	fff6fff6 	.word	0xfff6fff6
 8009e20:	0084      	.short	0x0084
 8009e22:	0025      	movs	r5, r4
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	3542      	adds	r5, #66	@ 0x42
 8009e28:	1d11      	adds	r1, r2, #4
 8009e2a:	6019      	str	r1, [r3, #0]
 8009e2c:	6813      	ldr	r3, [r2, #0]
 8009e2e:	702b      	strb	r3, [r5, #0]
 8009e30:	2301      	movs	r3, #1
 8009e32:	e0a0      	b.n	8009f76 <_printf_i+0x1c2>
 8009e34:	6818      	ldr	r0, [r3, #0]
 8009e36:	6809      	ldr	r1, [r1, #0]
 8009e38:	1d02      	adds	r2, r0, #4
 8009e3a:	060d      	lsls	r5, r1, #24
 8009e3c:	d50b      	bpl.n	8009e56 <_printf_i+0xa2>
 8009e3e:	6806      	ldr	r6, [r0, #0]
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	2e00      	cmp	r6, #0
 8009e44:	da03      	bge.n	8009e4e <_printf_i+0x9a>
 8009e46:	232d      	movs	r3, #45	@ 0x2d
 8009e48:	9a03      	ldr	r2, [sp, #12]
 8009e4a:	4276      	negs	r6, r6
 8009e4c:	7013      	strb	r3, [r2, #0]
 8009e4e:	4b5e      	ldr	r3, [pc, #376]	@ (8009fc8 <_printf_i+0x214>)
 8009e50:	270a      	movs	r7, #10
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	e018      	b.n	8009e88 <_printf_i+0xd4>
 8009e56:	6806      	ldr	r6, [r0, #0]
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	0649      	lsls	r1, r1, #25
 8009e5c:	d5f1      	bpl.n	8009e42 <_printf_i+0x8e>
 8009e5e:	b236      	sxth	r6, r6
 8009e60:	e7ef      	b.n	8009e42 <_printf_i+0x8e>
 8009e62:	6808      	ldr	r0, [r1, #0]
 8009e64:	6819      	ldr	r1, [r3, #0]
 8009e66:	c940      	ldmia	r1!, {r6}
 8009e68:	0605      	lsls	r5, r0, #24
 8009e6a:	d402      	bmi.n	8009e72 <_printf_i+0xbe>
 8009e6c:	0640      	lsls	r0, r0, #25
 8009e6e:	d500      	bpl.n	8009e72 <_printf_i+0xbe>
 8009e70:	b2b6      	uxth	r6, r6
 8009e72:	6019      	str	r1, [r3, #0]
 8009e74:	4b54      	ldr	r3, [pc, #336]	@ (8009fc8 <_printf_i+0x214>)
 8009e76:	270a      	movs	r7, #10
 8009e78:	9304      	str	r3, [sp, #16]
 8009e7a:	2a6f      	cmp	r2, #111	@ 0x6f
 8009e7c:	d100      	bne.n	8009e80 <_printf_i+0xcc>
 8009e7e:	3f02      	subs	r7, #2
 8009e80:	0023      	movs	r3, r4
 8009e82:	2200      	movs	r2, #0
 8009e84:	3343      	adds	r3, #67	@ 0x43
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	6863      	ldr	r3, [r4, #4]
 8009e8a:	60a3      	str	r3, [r4, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	db03      	blt.n	8009e98 <_printf_i+0xe4>
 8009e90:	2104      	movs	r1, #4
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	438a      	bics	r2, r1
 8009e96:	6022      	str	r2, [r4, #0]
 8009e98:	2e00      	cmp	r6, #0
 8009e9a:	d102      	bne.n	8009ea2 <_printf_i+0xee>
 8009e9c:	9d03      	ldr	r5, [sp, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00c      	beq.n	8009ebc <_printf_i+0x108>
 8009ea2:	9d03      	ldr	r5, [sp, #12]
 8009ea4:	0030      	movs	r0, r6
 8009ea6:	0039      	movs	r1, r7
 8009ea8:	f7f6 f9da 	bl	8000260 <__aeabi_uidivmod>
 8009eac:	9b04      	ldr	r3, [sp, #16]
 8009eae:	3d01      	subs	r5, #1
 8009eb0:	5c5b      	ldrb	r3, [r3, r1]
 8009eb2:	702b      	strb	r3, [r5, #0]
 8009eb4:	0033      	movs	r3, r6
 8009eb6:	0006      	movs	r6, r0
 8009eb8:	429f      	cmp	r7, r3
 8009eba:	d9f3      	bls.n	8009ea4 <_printf_i+0xf0>
 8009ebc:	2f08      	cmp	r7, #8
 8009ebe:	d109      	bne.n	8009ed4 <_printf_i+0x120>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	07db      	lsls	r3, r3, #31
 8009ec4:	d506      	bpl.n	8009ed4 <_printf_i+0x120>
 8009ec6:	6862      	ldr	r2, [r4, #4]
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	dc02      	bgt.n	8009ed4 <_printf_i+0x120>
 8009ece:	2330      	movs	r3, #48	@ 0x30
 8009ed0:	3d01      	subs	r5, #1
 8009ed2:	702b      	strb	r3, [r5, #0]
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	1b5b      	subs	r3, r3, r5
 8009ed8:	6123      	str	r3, [r4, #16]
 8009eda:	9b07      	ldr	r3, [sp, #28]
 8009edc:	0021      	movs	r1, r4
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	9805      	ldr	r0, [sp, #20]
 8009ee2:	9b06      	ldr	r3, [sp, #24]
 8009ee4:	aa09      	add	r2, sp, #36	@ 0x24
 8009ee6:	f7ff fef5 	bl	8009cd4 <_printf_common>
 8009eea:	3001      	adds	r0, #1
 8009eec:	d148      	bne.n	8009f80 <_printf_i+0x1cc>
 8009eee:	2001      	movs	r0, #1
 8009ef0:	4240      	negs	r0, r0
 8009ef2:	b00b      	add	sp, #44	@ 0x2c
 8009ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	6809      	ldr	r1, [r1, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	6022      	str	r2, [r4, #0]
 8009efe:	2278      	movs	r2, #120	@ 0x78
 8009f00:	4932      	ldr	r1, [pc, #200]	@ (8009fcc <_printf_i+0x218>)
 8009f02:	9104      	str	r1, [sp, #16]
 8009f04:	0021      	movs	r1, r4
 8009f06:	3145      	adds	r1, #69	@ 0x45
 8009f08:	700a      	strb	r2, [r1, #0]
 8009f0a:	6819      	ldr	r1, [r3, #0]
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	c940      	ldmia	r1!, {r6}
 8009f10:	0610      	lsls	r0, r2, #24
 8009f12:	d402      	bmi.n	8009f1a <_printf_i+0x166>
 8009f14:	0650      	lsls	r0, r2, #25
 8009f16:	d500      	bpl.n	8009f1a <_printf_i+0x166>
 8009f18:	b2b6      	uxth	r6, r6
 8009f1a:	6019      	str	r1, [r3, #0]
 8009f1c:	07d3      	lsls	r3, r2, #31
 8009f1e:	d502      	bpl.n	8009f26 <_printf_i+0x172>
 8009f20:	2320      	movs	r3, #32
 8009f22:	4313      	orrs	r3, r2
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	2e00      	cmp	r6, #0
 8009f28:	d001      	beq.n	8009f2e <_printf_i+0x17a>
 8009f2a:	2710      	movs	r7, #16
 8009f2c:	e7a8      	b.n	8009e80 <_printf_i+0xcc>
 8009f2e:	2220      	movs	r2, #32
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	4393      	bics	r3, r2
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	e7f8      	b.n	8009f2a <_printf_i+0x176>
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	680d      	ldr	r5, [r1, #0]
 8009f3c:	1d10      	adds	r0, r2, #4
 8009f3e:	6949      	ldr	r1, [r1, #20]
 8009f40:	6018      	str	r0, [r3, #0]
 8009f42:	6813      	ldr	r3, [r2, #0]
 8009f44:	062e      	lsls	r6, r5, #24
 8009f46:	d501      	bpl.n	8009f4c <_printf_i+0x198>
 8009f48:	6019      	str	r1, [r3, #0]
 8009f4a:	e002      	b.n	8009f52 <_printf_i+0x19e>
 8009f4c:	066d      	lsls	r5, r5, #25
 8009f4e:	d5fb      	bpl.n	8009f48 <_printf_i+0x194>
 8009f50:	8019      	strh	r1, [r3, #0]
 8009f52:	2300      	movs	r3, #0
 8009f54:	9d03      	ldr	r5, [sp, #12]
 8009f56:	6123      	str	r3, [r4, #16]
 8009f58:	e7bf      	b.n	8009eda <_printf_i+0x126>
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	1d11      	adds	r1, r2, #4
 8009f5e:	6019      	str	r1, [r3, #0]
 8009f60:	6815      	ldr	r5, [r2, #0]
 8009f62:	2100      	movs	r1, #0
 8009f64:	0028      	movs	r0, r5
 8009f66:	6862      	ldr	r2, [r4, #4]
 8009f68:	f000 fabb 	bl	800a4e2 <memchr>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d001      	beq.n	8009f74 <_printf_i+0x1c0>
 8009f70:	1b40      	subs	r0, r0, r5
 8009f72:	6060      	str	r0, [r4, #4]
 8009f74:	6863      	ldr	r3, [r4, #4]
 8009f76:	6123      	str	r3, [r4, #16]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	9a03      	ldr	r2, [sp, #12]
 8009f7c:	7013      	strb	r3, [r2, #0]
 8009f7e:	e7ac      	b.n	8009eda <_printf_i+0x126>
 8009f80:	002a      	movs	r2, r5
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	9906      	ldr	r1, [sp, #24]
 8009f86:	9805      	ldr	r0, [sp, #20]
 8009f88:	9d07      	ldr	r5, [sp, #28]
 8009f8a:	47a8      	blx	r5
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d0ae      	beq.n	8009eee <_printf_i+0x13a>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	079b      	lsls	r3, r3, #30
 8009f94:	d415      	bmi.n	8009fc2 <_printf_i+0x20e>
 8009f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f98:	68e0      	ldr	r0, [r4, #12]
 8009f9a:	4298      	cmp	r0, r3
 8009f9c:	daa9      	bge.n	8009ef2 <_printf_i+0x13e>
 8009f9e:	0018      	movs	r0, r3
 8009fa0:	e7a7      	b.n	8009ef2 <_printf_i+0x13e>
 8009fa2:	0022      	movs	r2, r4
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	9906      	ldr	r1, [sp, #24]
 8009fa8:	9805      	ldr	r0, [sp, #20]
 8009faa:	9e07      	ldr	r6, [sp, #28]
 8009fac:	3219      	adds	r2, #25
 8009fae:	47b0      	blx	r6
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d09c      	beq.n	8009eee <_printf_i+0x13a>
 8009fb4:	3501      	adds	r5, #1
 8009fb6:	68e3      	ldr	r3, [r4, #12]
 8009fb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fba:	1a9b      	subs	r3, r3, r2
 8009fbc:	42ab      	cmp	r3, r5
 8009fbe:	dcf0      	bgt.n	8009fa2 <_printf_i+0x1ee>
 8009fc0:	e7e9      	b.n	8009f96 <_printf_i+0x1e2>
 8009fc2:	2500      	movs	r5, #0
 8009fc4:	e7f7      	b.n	8009fb6 <_printf_i+0x202>
 8009fc6:	46c0      	nop			@ (mov r8, r8)
 8009fc8:	0800d374 	.word	0x0800d374
 8009fcc:	0800d385 	.word	0x0800d385

08009fd0 <std>:
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	0004      	movs	r4, r0
 8009fd6:	6003      	str	r3, [r0, #0]
 8009fd8:	6043      	str	r3, [r0, #4]
 8009fda:	6083      	str	r3, [r0, #8]
 8009fdc:	8181      	strh	r1, [r0, #12]
 8009fde:	6643      	str	r3, [r0, #100]	@ 0x64
 8009fe0:	81c2      	strh	r2, [r0, #14]
 8009fe2:	6103      	str	r3, [r0, #16]
 8009fe4:	6143      	str	r3, [r0, #20]
 8009fe6:	6183      	str	r3, [r0, #24]
 8009fe8:	0019      	movs	r1, r3
 8009fea:	2208      	movs	r2, #8
 8009fec:	305c      	adds	r0, #92	@ 0x5c
 8009fee:	f000 f97d 	bl	800a2ec <memset>
 8009ff2:	4b0b      	ldr	r3, [pc, #44]	@ (800a020 <std+0x50>)
 8009ff4:	6224      	str	r4, [r4, #32]
 8009ff6:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ff8:	4b0a      	ldr	r3, [pc, #40]	@ (800a024 <std+0x54>)
 8009ffa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ffc:	4b0a      	ldr	r3, [pc, #40]	@ (800a028 <std+0x58>)
 8009ffe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a000:	4b0a      	ldr	r3, [pc, #40]	@ (800a02c <std+0x5c>)
 800a002:	6323      	str	r3, [r4, #48]	@ 0x30
 800a004:	4b0a      	ldr	r3, [pc, #40]	@ (800a030 <std+0x60>)
 800a006:	429c      	cmp	r4, r3
 800a008:	d005      	beq.n	800a016 <std+0x46>
 800a00a:	4b0a      	ldr	r3, [pc, #40]	@ (800a034 <std+0x64>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	d002      	beq.n	800a016 <std+0x46>
 800a010:	4b09      	ldr	r3, [pc, #36]	@ (800a038 <std+0x68>)
 800a012:	429c      	cmp	r4, r3
 800a014:	d103      	bne.n	800a01e <std+0x4e>
 800a016:	0020      	movs	r0, r4
 800a018:	3058      	adds	r0, #88	@ 0x58
 800a01a:	f000 fa5f 	bl	800a4dc <__retarget_lock_init_recursive>
 800a01e:	bd10      	pop	{r4, pc}
 800a020:	0800a251 	.word	0x0800a251
 800a024:	0800a27d 	.word	0x0800a27d
 800a028:	0800a2b5 	.word	0x0800a2b5
 800a02c:	0800a2e1 	.word	0x0800a2e1
 800a030:	200005e4 	.word	0x200005e4
 800a034:	2000064c 	.word	0x2000064c
 800a038:	200006b4 	.word	0x200006b4

0800a03c <stdio_exit_handler>:
 800a03c:	b510      	push	{r4, lr}
 800a03e:	4a03      	ldr	r2, [pc, #12]	@ (800a04c <stdio_exit_handler+0x10>)
 800a040:	4903      	ldr	r1, [pc, #12]	@ (800a050 <stdio_exit_handler+0x14>)
 800a042:	4804      	ldr	r0, [pc, #16]	@ (800a054 <stdio_exit_handler+0x18>)
 800a044:	f000 f86c 	bl	800a120 <_fwalk_sglue>
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	46c0      	nop			@ (mov r8, r8)
 800a04c:	20000018 	.word	0x20000018
 800a050:	0800c5a5 	.word	0x0800c5a5
 800a054:	20000028 	.word	0x20000028

0800a058 <cleanup_stdio>:
 800a058:	6841      	ldr	r1, [r0, #4]
 800a05a:	4b0b      	ldr	r3, [pc, #44]	@ (800a088 <cleanup_stdio+0x30>)
 800a05c:	b510      	push	{r4, lr}
 800a05e:	0004      	movs	r4, r0
 800a060:	4299      	cmp	r1, r3
 800a062:	d001      	beq.n	800a068 <cleanup_stdio+0x10>
 800a064:	f002 fa9e 	bl	800c5a4 <_fflush_r>
 800a068:	68a1      	ldr	r1, [r4, #8]
 800a06a:	4b08      	ldr	r3, [pc, #32]	@ (800a08c <cleanup_stdio+0x34>)
 800a06c:	4299      	cmp	r1, r3
 800a06e:	d002      	beq.n	800a076 <cleanup_stdio+0x1e>
 800a070:	0020      	movs	r0, r4
 800a072:	f002 fa97 	bl	800c5a4 <_fflush_r>
 800a076:	68e1      	ldr	r1, [r4, #12]
 800a078:	4b05      	ldr	r3, [pc, #20]	@ (800a090 <cleanup_stdio+0x38>)
 800a07a:	4299      	cmp	r1, r3
 800a07c:	d002      	beq.n	800a084 <cleanup_stdio+0x2c>
 800a07e:	0020      	movs	r0, r4
 800a080:	f002 fa90 	bl	800c5a4 <_fflush_r>
 800a084:	bd10      	pop	{r4, pc}
 800a086:	46c0      	nop			@ (mov r8, r8)
 800a088:	200005e4 	.word	0x200005e4
 800a08c:	2000064c 	.word	0x2000064c
 800a090:	200006b4 	.word	0x200006b4

0800a094 <global_stdio_init.part.0>:
 800a094:	b510      	push	{r4, lr}
 800a096:	4b09      	ldr	r3, [pc, #36]	@ (800a0bc <global_stdio_init.part.0+0x28>)
 800a098:	4a09      	ldr	r2, [pc, #36]	@ (800a0c0 <global_stdio_init.part.0+0x2c>)
 800a09a:	2104      	movs	r1, #4
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	4809      	ldr	r0, [pc, #36]	@ (800a0c4 <global_stdio_init.part.0+0x30>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f7ff ff95 	bl	8009fd0 <std>
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	2109      	movs	r1, #9
 800a0aa:	4807      	ldr	r0, [pc, #28]	@ (800a0c8 <global_stdio_init.part.0+0x34>)
 800a0ac:	f7ff ff90 	bl	8009fd0 <std>
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	2112      	movs	r1, #18
 800a0b4:	4805      	ldr	r0, [pc, #20]	@ (800a0cc <global_stdio_init.part.0+0x38>)
 800a0b6:	f7ff ff8b 	bl	8009fd0 <std>
 800a0ba:	bd10      	pop	{r4, pc}
 800a0bc:	2000071c 	.word	0x2000071c
 800a0c0:	0800a03d 	.word	0x0800a03d
 800a0c4:	200005e4 	.word	0x200005e4
 800a0c8:	2000064c 	.word	0x2000064c
 800a0cc:	200006b4 	.word	0x200006b4

0800a0d0 <__sfp_lock_acquire>:
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	4802      	ldr	r0, [pc, #8]	@ (800a0dc <__sfp_lock_acquire+0xc>)
 800a0d4:	f000 fa03 	bl	800a4de <__retarget_lock_acquire_recursive>
 800a0d8:	bd10      	pop	{r4, pc}
 800a0da:	46c0      	nop			@ (mov r8, r8)
 800a0dc:	20000725 	.word	0x20000725

0800a0e0 <__sfp_lock_release>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	4802      	ldr	r0, [pc, #8]	@ (800a0ec <__sfp_lock_release+0xc>)
 800a0e4:	f000 f9fc 	bl	800a4e0 <__retarget_lock_release_recursive>
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	46c0      	nop			@ (mov r8, r8)
 800a0ec:	20000725 	.word	0x20000725

0800a0f0 <__sinit>:
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	0004      	movs	r4, r0
 800a0f4:	f7ff ffec 	bl	800a0d0 <__sfp_lock_acquire>
 800a0f8:	6a23      	ldr	r3, [r4, #32]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <__sinit+0x14>
 800a0fe:	f7ff ffef 	bl	800a0e0 <__sfp_lock_release>
 800a102:	bd10      	pop	{r4, pc}
 800a104:	4b04      	ldr	r3, [pc, #16]	@ (800a118 <__sinit+0x28>)
 800a106:	6223      	str	r3, [r4, #32]
 800a108:	4b04      	ldr	r3, [pc, #16]	@ (800a11c <__sinit+0x2c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1f6      	bne.n	800a0fe <__sinit+0xe>
 800a110:	f7ff ffc0 	bl	800a094 <global_stdio_init.part.0>
 800a114:	e7f3      	b.n	800a0fe <__sinit+0xe>
 800a116:	46c0      	nop			@ (mov r8, r8)
 800a118:	0800a059 	.word	0x0800a059
 800a11c:	2000071c 	.word	0x2000071c

0800a120 <_fwalk_sglue>:
 800a120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a122:	0014      	movs	r4, r2
 800a124:	2600      	movs	r6, #0
 800a126:	9000      	str	r0, [sp, #0]
 800a128:	9101      	str	r1, [sp, #4]
 800a12a:	68a5      	ldr	r5, [r4, #8]
 800a12c:	6867      	ldr	r7, [r4, #4]
 800a12e:	3f01      	subs	r7, #1
 800a130:	d504      	bpl.n	800a13c <_fwalk_sglue+0x1c>
 800a132:	6824      	ldr	r4, [r4, #0]
 800a134:	2c00      	cmp	r4, #0
 800a136:	d1f8      	bne.n	800a12a <_fwalk_sglue+0xa>
 800a138:	0030      	movs	r0, r6
 800a13a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a13c:	89ab      	ldrh	r3, [r5, #12]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d908      	bls.n	800a154 <_fwalk_sglue+0x34>
 800a142:	220e      	movs	r2, #14
 800a144:	5eab      	ldrsh	r3, [r5, r2]
 800a146:	3301      	adds	r3, #1
 800a148:	d004      	beq.n	800a154 <_fwalk_sglue+0x34>
 800a14a:	0029      	movs	r1, r5
 800a14c:	9800      	ldr	r0, [sp, #0]
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	4798      	blx	r3
 800a152:	4306      	orrs	r6, r0
 800a154:	3568      	adds	r5, #104	@ 0x68
 800a156:	e7ea      	b.n	800a12e <_fwalk_sglue+0xe>

0800a158 <sniprintf>:
 800a158:	b40c      	push	{r2, r3}
 800a15a:	b530      	push	{r4, r5, lr}
 800a15c:	4b17      	ldr	r3, [pc, #92]	@ (800a1bc <sniprintf+0x64>)
 800a15e:	000c      	movs	r4, r1
 800a160:	681d      	ldr	r5, [r3, #0]
 800a162:	b09d      	sub	sp, #116	@ 0x74
 800a164:	2900      	cmp	r1, #0
 800a166:	da08      	bge.n	800a17a <sniprintf+0x22>
 800a168:	238b      	movs	r3, #139	@ 0x8b
 800a16a:	2001      	movs	r0, #1
 800a16c:	602b      	str	r3, [r5, #0]
 800a16e:	4240      	negs	r0, r0
 800a170:	b01d      	add	sp, #116	@ 0x74
 800a172:	bc30      	pop	{r4, r5}
 800a174:	bc08      	pop	{r3}
 800a176:	b002      	add	sp, #8
 800a178:	4718      	bx	r3
 800a17a:	2382      	movs	r3, #130	@ 0x82
 800a17c:	466a      	mov	r2, sp
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	8293      	strh	r3, [r2, #20]
 800a182:	2300      	movs	r3, #0
 800a184:	9002      	str	r0, [sp, #8]
 800a186:	9006      	str	r0, [sp, #24]
 800a188:	4299      	cmp	r1, r3
 800a18a:	d000      	beq.n	800a18e <sniprintf+0x36>
 800a18c:	1e4b      	subs	r3, r1, #1
 800a18e:	9304      	str	r3, [sp, #16]
 800a190:	9307      	str	r3, [sp, #28]
 800a192:	2301      	movs	r3, #1
 800a194:	466a      	mov	r2, sp
 800a196:	425b      	negs	r3, r3
 800a198:	82d3      	strh	r3, [r2, #22]
 800a19a:	0028      	movs	r0, r5
 800a19c:	ab21      	add	r3, sp, #132	@ 0x84
 800a19e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a1a0:	a902      	add	r1, sp, #8
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	f001 fd5c 	bl	800bc60 <_svfiprintf_r>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	da01      	bge.n	800a1b0 <sniprintf+0x58>
 800a1ac:	238b      	movs	r3, #139	@ 0x8b
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	2c00      	cmp	r4, #0
 800a1b2:	d0dd      	beq.n	800a170 <sniprintf+0x18>
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	9b02      	ldr	r3, [sp, #8]
 800a1b8:	701a      	strb	r2, [r3, #0]
 800a1ba:	e7d9      	b.n	800a170 <sniprintf+0x18>
 800a1bc:	20000024 	.word	0x20000024

0800a1c0 <siprintf>:
 800a1c0:	b40e      	push	{r1, r2, r3}
 800a1c2:	b500      	push	{lr}
 800a1c4:	490b      	ldr	r1, [pc, #44]	@ (800a1f4 <siprintf+0x34>)
 800a1c6:	b09c      	sub	sp, #112	@ 0x70
 800a1c8:	ab1d      	add	r3, sp, #116	@ 0x74
 800a1ca:	9002      	str	r0, [sp, #8]
 800a1cc:	9006      	str	r0, [sp, #24]
 800a1ce:	9107      	str	r1, [sp, #28]
 800a1d0:	9104      	str	r1, [sp, #16]
 800a1d2:	4809      	ldr	r0, [pc, #36]	@ (800a1f8 <siprintf+0x38>)
 800a1d4:	4909      	ldr	r1, [pc, #36]	@ (800a1fc <siprintf+0x3c>)
 800a1d6:	cb04      	ldmia	r3!, {r2}
 800a1d8:	9105      	str	r1, [sp, #20]
 800a1da:	6800      	ldr	r0, [r0, #0]
 800a1dc:	a902      	add	r1, sp, #8
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	f001 fd3e 	bl	800bc60 <_svfiprintf_r>
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	9b02      	ldr	r3, [sp, #8]
 800a1e8:	701a      	strb	r2, [r3, #0]
 800a1ea:	b01c      	add	sp, #112	@ 0x70
 800a1ec:	bc08      	pop	{r3}
 800a1ee:	b003      	add	sp, #12
 800a1f0:	4718      	bx	r3
 800a1f2:	46c0      	nop			@ (mov r8, r8)
 800a1f4:	7fffffff 	.word	0x7fffffff
 800a1f8:	20000024 	.word	0x20000024
 800a1fc:	ffff0208 	.word	0xffff0208

0800a200 <siscanf>:
 800a200:	b40e      	push	{r1, r2, r3}
 800a202:	b530      	push	{r4, r5, lr}
 800a204:	2381      	movs	r3, #129	@ 0x81
 800a206:	b09c      	sub	sp, #112	@ 0x70
 800a208:	466a      	mov	r2, sp
 800a20a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	cc20      	ldmia	r4!, {r5}
 800a210:	8293      	strh	r3, [r2, #20]
 800a212:	9002      	str	r0, [sp, #8]
 800a214:	9006      	str	r0, [sp, #24]
 800a216:	f7f5 ff81 	bl	800011c <strlen>
 800a21a:	4b0b      	ldr	r3, [pc, #44]	@ (800a248 <siscanf+0x48>)
 800a21c:	466a      	mov	r2, sp
 800a21e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a220:	2300      	movs	r3, #0
 800a222:	9003      	str	r0, [sp, #12]
 800a224:	9007      	str	r0, [sp, #28]
 800a226:	4809      	ldr	r0, [pc, #36]	@ (800a24c <siscanf+0x4c>)
 800a228:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a22a:	9314      	str	r3, [sp, #80]	@ 0x50
 800a22c:	3b01      	subs	r3, #1
 800a22e:	82d3      	strh	r3, [r2, #22]
 800a230:	a902      	add	r1, sp, #8
 800a232:	0023      	movs	r3, r4
 800a234:	002a      	movs	r2, r5
 800a236:	6800      	ldr	r0, [r0, #0]
 800a238:	9401      	str	r4, [sp, #4]
 800a23a:	f001 fe6b 	bl	800bf14 <__ssvfiscanf_r>
 800a23e:	b01c      	add	sp, #112	@ 0x70
 800a240:	bc30      	pop	{r4, r5}
 800a242:	bc08      	pop	{r3}
 800a244:	b003      	add	sp, #12
 800a246:	4718      	bx	r3
 800a248:	0800a279 	.word	0x0800a279
 800a24c:	20000024 	.word	0x20000024

0800a250 <__sread>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	000c      	movs	r4, r1
 800a254:	250e      	movs	r5, #14
 800a256:	5f49      	ldrsh	r1, [r1, r5]
 800a258:	f000 f8ee 	bl	800a438 <_read_r>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	db03      	blt.n	800a268 <__sread+0x18>
 800a260:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a262:	181b      	adds	r3, r3, r0
 800a264:	6563      	str	r3, [r4, #84]	@ 0x54
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	4a02      	ldr	r2, [pc, #8]	@ (800a274 <__sread+0x24>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	e7f9      	b.n	800a266 <__sread+0x16>
 800a272:	46c0      	nop			@ (mov r8, r8)
 800a274:	ffffefff 	.word	0xffffefff

0800a278 <__seofread>:
 800a278:	2000      	movs	r0, #0
 800a27a:	4770      	bx	lr

0800a27c <__swrite>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	001f      	movs	r7, r3
 800a280:	898b      	ldrh	r3, [r1, #12]
 800a282:	0005      	movs	r5, r0
 800a284:	000c      	movs	r4, r1
 800a286:	0016      	movs	r6, r2
 800a288:	05db      	lsls	r3, r3, #23
 800a28a:	d505      	bpl.n	800a298 <__swrite+0x1c>
 800a28c:	230e      	movs	r3, #14
 800a28e:	5ec9      	ldrsh	r1, [r1, r3]
 800a290:	2200      	movs	r2, #0
 800a292:	2302      	movs	r3, #2
 800a294:	f000 f8bc 	bl	800a410 <_lseek_r>
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	4a05      	ldr	r2, [pc, #20]	@ (800a2b0 <__swrite+0x34>)
 800a29c:	0028      	movs	r0, r5
 800a29e:	4013      	ands	r3, r2
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	0032      	movs	r2, r6
 800a2a4:	230e      	movs	r3, #14
 800a2a6:	5ee1      	ldrsh	r1, [r4, r3]
 800a2a8:	003b      	movs	r3, r7
 800a2aa:	f000 f8d9 	bl	800a460 <_write_r>
 800a2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2b0:	ffffefff 	.word	0xffffefff

0800a2b4 <__sseek>:
 800a2b4:	b570      	push	{r4, r5, r6, lr}
 800a2b6:	000c      	movs	r4, r1
 800a2b8:	250e      	movs	r5, #14
 800a2ba:	5f49      	ldrsh	r1, [r1, r5]
 800a2bc:	f000 f8a8 	bl	800a410 <_lseek_r>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	1c42      	adds	r2, r0, #1
 800a2c4:	d103      	bne.n	800a2ce <__sseek+0x1a>
 800a2c6:	4a05      	ldr	r2, [pc, #20]	@ (800a2dc <__sseek+0x28>)
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	bd70      	pop	{r4, r5, r6, pc}
 800a2ce:	2280      	movs	r2, #128	@ 0x80
 800a2d0:	0152      	lsls	r2, r2, #5
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2d8:	e7f8      	b.n	800a2cc <__sseek+0x18>
 800a2da:	46c0      	nop			@ (mov r8, r8)
 800a2dc:	ffffefff 	.word	0xffffefff

0800a2e0 <__sclose>:
 800a2e0:	b510      	push	{r4, lr}
 800a2e2:	230e      	movs	r3, #14
 800a2e4:	5ec9      	ldrsh	r1, [r1, r3]
 800a2e6:	f000 f881 	bl	800a3ec <_close_r>
 800a2ea:	bd10      	pop	{r4, pc}

0800a2ec <memset>:
 800a2ec:	0003      	movs	r3, r0
 800a2ee:	1882      	adds	r2, r0, r2
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d100      	bne.n	800a2f6 <memset+0xa>
 800a2f4:	4770      	bx	lr
 800a2f6:	7019      	strb	r1, [r3, #0]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	e7f9      	b.n	800a2f0 <memset+0x4>

0800a2fc <strncpy>:
 800a2fc:	0003      	movs	r3, r0
 800a2fe:	b530      	push	{r4, r5, lr}
 800a300:	001d      	movs	r5, r3
 800a302:	2a00      	cmp	r2, #0
 800a304:	d006      	beq.n	800a314 <strncpy+0x18>
 800a306:	780c      	ldrb	r4, [r1, #0]
 800a308:	3a01      	subs	r2, #1
 800a30a:	3301      	adds	r3, #1
 800a30c:	702c      	strb	r4, [r5, #0]
 800a30e:	3101      	adds	r1, #1
 800a310:	2c00      	cmp	r4, #0
 800a312:	d1f5      	bne.n	800a300 <strncpy+0x4>
 800a314:	2100      	movs	r1, #0
 800a316:	189a      	adds	r2, r3, r2
 800a318:	4293      	cmp	r3, r2
 800a31a:	d100      	bne.n	800a31e <strncpy+0x22>
 800a31c:	bd30      	pop	{r4, r5, pc}
 800a31e:	7019      	strb	r1, [r3, #0]
 800a320:	3301      	adds	r3, #1
 800a322:	e7f9      	b.n	800a318 <strncpy+0x1c>

0800a324 <strtok>:
 800a324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a326:	4b16      	ldr	r3, [pc, #88]	@ (800a380 <strtok+0x5c>)
 800a328:	0005      	movs	r5, r0
 800a32a:	681f      	ldr	r7, [r3, #0]
 800a32c:	000e      	movs	r6, r1
 800a32e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a330:	2c00      	cmp	r4, #0
 800a332:	d11d      	bne.n	800a370 <strtok+0x4c>
 800a334:	2050      	movs	r0, #80	@ 0x50
 800a336:	f000 ffd3 	bl	800b2e0 <malloc>
 800a33a:	1e02      	subs	r2, r0, #0
 800a33c:	6478      	str	r0, [r7, #68]	@ 0x44
 800a33e:	d104      	bne.n	800a34a <strtok+0x26>
 800a340:	215b      	movs	r1, #91	@ 0x5b
 800a342:	4b10      	ldr	r3, [pc, #64]	@ (800a384 <strtok+0x60>)
 800a344:	4810      	ldr	r0, [pc, #64]	@ (800a388 <strtok+0x64>)
 800a346:	f000 f8e1 	bl	800a50c <__assert_func>
 800a34a:	6004      	str	r4, [r0, #0]
 800a34c:	6044      	str	r4, [r0, #4]
 800a34e:	6084      	str	r4, [r0, #8]
 800a350:	60c4      	str	r4, [r0, #12]
 800a352:	6104      	str	r4, [r0, #16]
 800a354:	6144      	str	r4, [r0, #20]
 800a356:	6184      	str	r4, [r0, #24]
 800a358:	6284      	str	r4, [r0, #40]	@ 0x28
 800a35a:	62c4      	str	r4, [r0, #44]	@ 0x2c
 800a35c:	6304      	str	r4, [r0, #48]	@ 0x30
 800a35e:	6344      	str	r4, [r0, #52]	@ 0x34
 800a360:	6384      	str	r4, [r0, #56]	@ 0x38
 800a362:	63c4      	str	r4, [r0, #60]	@ 0x3c
 800a364:	6404      	str	r4, [r0, #64]	@ 0x40
 800a366:	6444      	str	r4, [r0, #68]	@ 0x44
 800a368:	6484      	str	r4, [r0, #72]	@ 0x48
 800a36a:	64c4      	str	r4, [r0, #76]	@ 0x4c
 800a36c:	7704      	strb	r4, [r0, #28]
 800a36e:	6244      	str	r4, [r0, #36]	@ 0x24
 800a370:	0031      	movs	r1, r6
 800a372:	0028      	movs	r0, r5
 800a374:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a376:	2301      	movs	r3, #1
 800a378:	f000 f808 	bl	800a38c <__strtok_r>
 800a37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a37e:	46c0      	nop			@ (mov r8, r8)
 800a380:	20000024 	.word	0x20000024
 800a384:	0800d396 	.word	0x0800d396
 800a388:	0800d3ad 	.word	0x0800d3ad

0800a38c <__strtok_r>:
 800a38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a38e:	1e04      	subs	r4, r0, #0
 800a390:	d102      	bne.n	800a398 <__strtok_r+0xc>
 800a392:	6814      	ldr	r4, [r2, #0]
 800a394:	2c00      	cmp	r4, #0
 800a396:	d009      	beq.n	800a3ac <__strtok_r+0x20>
 800a398:	0020      	movs	r0, r4
 800a39a:	000e      	movs	r6, r1
 800a39c:	7805      	ldrb	r5, [r0, #0]
 800a39e:	3401      	adds	r4, #1
 800a3a0:	7837      	ldrb	r7, [r6, #0]
 800a3a2:	2f00      	cmp	r7, #0
 800a3a4:	d104      	bne.n	800a3b0 <__strtok_r+0x24>
 800a3a6:	2d00      	cmp	r5, #0
 800a3a8:	d10d      	bne.n	800a3c6 <__strtok_r+0x3a>
 800a3aa:	6015      	str	r5, [r2, #0]
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	e006      	b.n	800a3be <__strtok_r+0x32>
 800a3b0:	3601      	adds	r6, #1
 800a3b2:	42bd      	cmp	r5, r7
 800a3b4:	d1f4      	bne.n	800a3a0 <__strtok_r+0x14>
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1ee      	bne.n	800a398 <__strtok_r+0xc>
 800a3ba:	6014      	str	r4, [r2, #0]
 800a3bc:	7003      	strb	r3, [r0, #0]
 800a3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	2d00      	cmp	r5, #0
 800a3c4:	d102      	bne.n	800a3cc <__strtok_r+0x40>
 800a3c6:	000b      	movs	r3, r1
 800a3c8:	7826      	ldrb	r6, [r4, #0]
 800a3ca:	3401      	adds	r4, #1
 800a3cc:	781d      	ldrb	r5, [r3, #0]
 800a3ce:	42ae      	cmp	r6, r5
 800a3d0:	d1f6      	bne.n	800a3c0 <__strtok_r+0x34>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	001d      	movs	r5, r3
 800a3d6:	429e      	cmp	r6, r3
 800a3d8:	d002      	beq.n	800a3e0 <__strtok_r+0x54>
 800a3da:	0023      	movs	r3, r4
 800a3dc:	1e61      	subs	r1, r4, #1
 800a3de:	700d      	strb	r5, [r1, #0]
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	e7ec      	b.n	800a3be <__strtok_r+0x32>

0800a3e4 <_localeconv_r>:
 800a3e4:	4800      	ldr	r0, [pc, #0]	@ (800a3e8 <_localeconv_r+0x4>)
 800a3e6:	4770      	bx	lr
 800a3e8:	20000164 	.word	0x20000164

0800a3ec <_close_r>:
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	b570      	push	{r4, r5, r6, lr}
 800a3f0:	4d06      	ldr	r5, [pc, #24]	@ (800a40c <_close_r+0x20>)
 800a3f2:	0004      	movs	r4, r0
 800a3f4:	0008      	movs	r0, r1
 800a3f6:	602b      	str	r3, [r5, #0]
 800a3f8:	f7fa f9b4 	bl	8004764 <_close>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	d103      	bne.n	800a408 <_close_r+0x1c>
 800a400:	682b      	ldr	r3, [r5, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d000      	beq.n	800a408 <_close_r+0x1c>
 800a406:	6023      	str	r3, [r4, #0]
 800a408:	bd70      	pop	{r4, r5, r6, pc}
 800a40a:	46c0      	nop			@ (mov r8, r8)
 800a40c:	20000720 	.word	0x20000720

0800a410 <_lseek_r>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	0004      	movs	r4, r0
 800a414:	0008      	movs	r0, r1
 800a416:	0011      	movs	r1, r2
 800a418:	001a      	movs	r2, r3
 800a41a:	2300      	movs	r3, #0
 800a41c:	4d05      	ldr	r5, [pc, #20]	@ (800a434 <_lseek_r+0x24>)
 800a41e:	602b      	str	r3, [r5, #0]
 800a420:	f7fa f9c1 	bl	80047a6 <_lseek>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d103      	bne.n	800a430 <_lseek_r+0x20>
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d000      	beq.n	800a430 <_lseek_r+0x20>
 800a42e:	6023      	str	r3, [r4, #0]
 800a430:	bd70      	pop	{r4, r5, r6, pc}
 800a432:	46c0      	nop			@ (mov r8, r8)
 800a434:	20000720 	.word	0x20000720

0800a438 <_read_r>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	0004      	movs	r4, r0
 800a43c:	0008      	movs	r0, r1
 800a43e:	0011      	movs	r1, r2
 800a440:	001a      	movs	r2, r3
 800a442:	2300      	movs	r3, #0
 800a444:	4d05      	ldr	r5, [pc, #20]	@ (800a45c <_read_r+0x24>)
 800a446:	602b      	str	r3, [r5, #0]
 800a448:	f7fa f953 	bl	80046f2 <_read>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d103      	bne.n	800a458 <_read_r+0x20>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d000      	beq.n	800a458 <_read_r+0x20>
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	bd70      	pop	{r4, r5, r6, pc}
 800a45a:	46c0      	nop			@ (mov r8, r8)
 800a45c:	20000720 	.word	0x20000720

0800a460 <_write_r>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	0004      	movs	r4, r0
 800a464:	0008      	movs	r0, r1
 800a466:	0011      	movs	r1, r2
 800a468:	001a      	movs	r2, r3
 800a46a:	2300      	movs	r3, #0
 800a46c:	4d05      	ldr	r5, [pc, #20]	@ (800a484 <_write_r+0x24>)
 800a46e:	602b      	str	r3, [r5, #0]
 800a470:	f7fa f95c 	bl	800472c <_write>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d103      	bne.n	800a480 <_write_r+0x20>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d000      	beq.n	800a480 <_write_r+0x20>
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	bd70      	pop	{r4, r5, r6, pc}
 800a482:	46c0      	nop			@ (mov r8, r8)
 800a484:	20000720 	.word	0x20000720

0800a488 <__errno>:
 800a488:	4b01      	ldr	r3, [pc, #4]	@ (800a490 <__errno+0x8>)
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	4770      	bx	lr
 800a48e:	46c0      	nop			@ (mov r8, r8)
 800a490:	20000024 	.word	0x20000024

0800a494 <__libc_init_array>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	2600      	movs	r6, #0
 800a498:	4c0c      	ldr	r4, [pc, #48]	@ (800a4cc <__libc_init_array+0x38>)
 800a49a:	4d0d      	ldr	r5, [pc, #52]	@ (800a4d0 <__libc_init_array+0x3c>)
 800a49c:	1b64      	subs	r4, r4, r5
 800a49e:	10a4      	asrs	r4, r4, #2
 800a4a0:	42a6      	cmp	r6, r4
 800a4a2:	d109      	bne.n	800a4b8 <__libc_init_array+0x24>
 800a4a4:	2600      	movs	r6, #0
 800a4a6:	f002 fdb3 	bl	800d010 <_init>
 800a4aa:	4c0a      	ldr	r4, [pc, #40]	@ (800a4d4 <__libc_init_array+0x40>)
 800a4ac:	4d0a      	ldr	r5, [pc, #40]	@ (800a4d8 <__libc_init_array+0x44>)
 800a4ae:	1b64      	subs	r4, r4, r5
 800a4b0:	10a4      	asrs	r4, r4, #2
 800a4b2:	42a6      	cmp	r6, r4
 800a4b4:	d105      	bne.n	800a4c2 <__libc_init_array+0x2e>
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	00b3      	lsls	r3, r6, #2
 800a4ba:	58eb      	ldr	r3, [r5, r3]
 800a4bc:	4798      	blx	r3
 800a4be:	3601      	adds	r6, #1
 800a4c0:	e7ee      	b.n	800a4a0 <__libc_init_array+0xc>
 800a4c2:	00b3      	lsls	r3, r6, #2
 800a4c4:	58eb      	ldr	r3, [r5, r3]
 800a4c6:	4798      	blx	r3
 800a4c8:	3601      	adds	r6, #1
 800a4ca:	e7f2      	b.n	800a4b2 <__libc_init_array+0x1e>
 800a4cc:	0800d748 	.word	0x0800d748
 800a4d0:	0800d748 	.word	0x0800d748
 800a4d4:	0800d74c 	.word	0x0800d74c
 800a4d8:	0800d748 	.word	0x0800d748

0800a4dc <__retarget_lock_init_recursive>:
 800a4dc:	4770      	bx	lr

0800a4de <__retarget_lock_acquire_recursive>:
 800a4de:	4770      	bx	lr

0800a4e0 <__retarget_lock_release_recursive>:
 800a4e0:	4770      	bx	lr

0800a4e2 <memchr>:
 800a4e2:	b2c9      	uxtb	r1, r1
 800a4e4:	1882      	adds	r2, r0, r2
 800a4e6:	4290      	cmp	r0, r2
 800a4e8:	d101      	bne.n	800a4ee <memchr+0xc>
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	4770      	bx	lr
 800a4ee:	7803      	ldrb	r3, [r0, #0]
 800a4f0:	428b      	cmp	r3, r1
 800a4f2:	d0fb      	beq.n	800a4ec <memchr+0xa>
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	e7f6      	b.n	800a4e6 <memchr+0x4>

0800a4f8 <memcpy>:
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d100      	bne.n	800a502 <memcpy+0xa>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	5ccc      	ldrb	r4, [r1, r3]
 800a504:	54c4      	strb	r4, [r0, r3]
 800a506:	3301      	adds	r3, #1
 800a508:	e7f8      	b.n	800a4fc <memcpy+0x4>
	...

0800a50c <__assert_func>:
 800a50c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a50e:	0014      	movs	r4, r2
 800a510:	001a      	movs	r2, r3
 800a512:	4b09      	ldr	r3, [pc, #36]	@ (800a538 <__assert_func+0x2c>)
 800a514:	0005      	movs	r5, r0
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	000e      	movs	r6, r1
 800a51a:	68d8      	ldr	r0, [r3, #12]
 800a51c:	4b07      	ldr	r3, [pc, #28]	@ (800a53c <__assert_func+0x30>)
 800a51e:	2c00      	cmp	r4, #0
 800a520:	d101      	bne.n	800a526 <__assert_func+0x1a>
 800a522:	4b07      	ldr	r3, [pc, #28]	@ (800a540 <__assert_func+0x34>)
 800a524:	001c      	movs	r4, r3
 800a526:	4907      	ldr	r1, [pc, #28]	@ (800a544 <__assert_func+0x38>)
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	9402      	str	r4, [sp, #8]
 800a52c:	002b      	movs	r3, r5
 800a52e:	9600      	str	r6, [sp, #0]
 800a530:	f002 f864 	bl	800c5fc <fiprintf>
 800a534:	f002 f910 	bl	800c758 <abort>
 800a538:	20000024 	.word	0x20000024
 800a53c:	0800d407 	.word	0x0800d407
 800a540:	0800d442 	.word	0x0800d442
 800a544:	0800d414 	.word	0x0800d414

0800a548 <quorem>:
 800a548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54a:	6902      	ldr	r2, [r0, #16]
 800a54c:	690f      	ldr	r7, [r1, #16]
 800a54e:	b087      	sub	sp, #28
 800a550:	0006      	movs	r6, r0
 800a552:	000b      	movs	r3, r1
 800a554:	2000      	movs	r0, #0
 800a556:	9102      	str	r1, [sp, #8]
 800a558:	42ba      	cmp	r2, r7
 800a55a:	db6d      	blt.n	800a638 <quorem+0xf0>
 800a55c:	3f01      	subs	r7, #1
 800a55e:	00bc      	lsls	r4, r7, #2
 800a560:	3314      	adds	r3, #20
 800a562:	9305      	str	r3, [sp, #20]
 800a564:	191b      	adds	r3, r3, r4
 800a566:	9303      	str	r3, [sp, #12]
 800a568:	0033      	movs	r3, r6
 800a56a:	3314      	adds	r3, #20
 800a56c:	191c      	adds	r4, r3, r4
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	9b03      	ldr	r3, [sp, #12]
 800a576:	9804      	ldr	r0, [sp, #16]
 800a578:	681d      	ldr	r5, [r3, #0]
 800a57a:	3501      	adds	r5, #1
 800a57c:	0029      	movs	r1, r5
 800a57e:	f7f5 fde9 	bl	8000154 <__udivsi3>
 800a582:	9b04      	ldr	r3, [sp, #16]
 800a584:	9000      	str	r0, [sp, #0]
 800a586:	42ab      	cmp	r3, r5
 800a588:	d32b      	bcc.n	800a5e2 <quorem+0x9a>
 800a58a:	9b05      	ldr	r3, [sp, #20]
 800a58c:	9d01      	ldr	r5, [sp, #4]
 800a58e:	469c      	mov	ip, r3
 800a590:	2300      	movs	r3, #0
 800a592:	9305      	str	r3, [sp, #20]
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	4662      	mov	r2, ip
 800a598:	ca08      	ldmia	r2!, {r3}
 800a59a:	6828      	ldr	r0, [r5, #0]
 800a59c:	4694      	mov	ip, r2
 800a59e:	9a00      	ldr	r2, [sp, #0]
 800a5a0:	b299      	uxth	r1, r3
 800a5a2:	4351      	muls	r1, r2
 800a5a4:	9a05      	ldr	r2, [sp, #20]
 800a5a6:	0c1b      	lsrs	r3, r3, #16
 800a5a8:	1889      	adds	r1, r1, r2
 800a5aa:	9a00      	ldr	r2, [sp, #0]
 800a5ac:	4353      	muls	r3, r2
 800a5ae:	0c0a      	lsrs	r2, r1, #16
 800a5b0:	189b      	adds	r3, r3, r2
 800a5b2:	0c1a      	lsrs	r2, r3, #16
 800a5b4:	b289      	uxth	r1, r1
 800a5b6:	9205      	str	r2, [sp, #20]
 800a5b8:	b282      	uxth	r2, r0
 800a5ba:	1a52      	subs	r2, r2, r1
 800a5bc:	9904      	ldr	r1, [sp, #16]
 800a5be:	0c00      	lsrs	r0, r0, #16
 800a5c0:	1852      	adds	r2, r2, r1
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	1411      	asrs	r1, r2, #16
 800a5c6:	1ac3      	subs	r3, r0, r3
 800a5c8:	185b      	adds	r3, r3, r1
 800a5ca:	1419      	asrs	r1, r3, #16
 800a5cc:	b292      	uxth	r2, r2
 800a5ce:	041b      	lsls	r3, r3, #16
 800a5d0:	431a      	orrs	r2, r3
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	9104      	str	r1, [sp, #16]
 800a5d6:	c504      	stmia	r5!, {r2}
 800a5d8:	4563      	cmp	r3, ip
 800a5da:	d2dc      	bcs.n	800a596 <quorem+0x4e>
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d030      	beq.n	800a644 <quorem+0xfc>
 800a5e2:	0030      	movs	r0, r6
 800a5e4:	9902      	ldr	r1, [sp, #8]
 800a5e6:	f001 f9c5 	bl	800b974 <__mcmp>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	db23      	blt.n	800a636 <quorem+0xee>
 800a5ee:	0034      	movs	r4, r6
 800a5f0:	2500      	movs	r5, #0
 800a5f2:	9902      	ldr	r1, [sp, #8]
 800a5f4:	3414      	adds	r4, #20
 800a5f6:	3114      	adds	r1, #20
 800a5f8:	6823      	ldr	r3, [r4, #0]
 800a5fa:	c901      	ldmia	r1!, {r0}
 800a5fc:	9302      	str	r3, [sp, #8]
 800a5fe:	466b      	mov	r3, sp
 800a600:	891b      	ldrh	r3, [r3, #8]
 800a602:	b282      	uxth	r2, r0
 800a604:	1a9a      	subs	r2, r3, r2
 800a606:	9b02      	ldr	r3, [sp, #8]
 800a608:	1952      	adds	r2, r2, r5
 800a60a:	0c00      	lsrs	r0, r0, #16
 800a60c:	0c1b      	lsrs	r3, r3, #16
 800a60e:	1a1b      	subs	r3, r3, r0
 800a610:	1410      	asrs	r0, r2, #16
 800a612:	181b      	adds	r3, r3, r0
 800a614:	141d      	asrs	r5, r3, #16
 800a616:	b292      	uxth	r2, r2
 800a618:	041b      	lsls	r3, r3, #16
 800a61a:	431a      	orrs	r2, r3
 800a61c:	9b03      	ldr	r3, [sp, #12]
 800a61e:	c404      	stmia	r4!, {r2}
 800a620:	428b      	cmp	r3, r1
 800a622:	d2e9      	bcs.n	800a5f8 <quorem+0xb0>
 800a624:	9a01      	ldr	r2, [sp, #4]
 800a626:	00bb      	lsls	r3, r7, #2
 800a628:	18d3      	adds	r3, r2, r3
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	d013      	beq.n	800a658 <quorem+0x110>
 800a630:	9b00      	ldr	r3, [sp, #0]
 800a632:	3301      	adds	r3, #1
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	9800      	ldr	r0, [sp, #0]
 800a638:	b007      	add	sp, #28
 800a63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <quorem+0x104>
 800a642:	3f01      	subs	r7, #1
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	3c04      	subs	r4, #4
 800a648:	42a3      	cmp	r3, r4
 800a64a:	d3f7      	bcc.n	800a63c <quorem+0xf4>
 800a64c:	6137      	str	r7, [r6, #16]
 800a64e:	e7c8      	b.n	800a5e2 <quorem+0x9a>
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	2a00      	cmp	r2, #0
 800a654:	d104      	bne.n	800a660 <quorem+0x118>
 800a656:	3f01      	subs	r7, #1
 800a658:	9a01      	ldr	r2, [sp, #4]
 800a65a:	3b04      	subs	r3, #4
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d3f7      	bcc.n	800a650 <quorem+0x108>
 800a660:	6137      	str	r7, [r6, #16]
 800a662:	e7e5      	b.n	800a630 <quorem+0xe8>

0800a664 <_dtoa_r>:
 800a664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a666:	0014      	movs	r4, r2
 800a668:	001d      	movs	r5, r3
 800a66a:	69c6      	ldr	r6, [r0, #28]
 800a66c:	b09d      	sub	sp, #116	@ 0x74
 800a66e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a670:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a672:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800a674:	9003      	str	r0, [sp, #12]
 800a676:	2e00      	cmp	r6, #0
 800a678:	d10f      	bne.n	800a69a <_dtoa_r+0x36>
 800a67a:	2010      	movs	r0, #16
 800a67c:	f000 fe30 	bl	800b2e0 <malloc>
 800a680:	9b03      	ldr	r3, [sp, #12]
 800a682:	1e02      	subs	r2, r0, #0
 800a684:	61d8      	str	r0, [r3, #28]
 800a686:	d104      	bne.n	800a692 <_dtoa_r+0x2e>
 800a688:	21ef      	movs	r1, #239	@ 0xef
 800a68a:	4bc7      	ldr	r3, [pc, #796]	@ (800a9a8 <_dtoa_r+0x344>)
 800a68c:	48c7      	ldr	r0, [pc, #796]	@ (800a9ac <_dtoa_r+0x348>)
 800a68e:	f7ff ff3d 	bl	800a50c <__assert_func>
 800a692:	6046      	str	r6, [r0, #4]
 800a694:	6086      	str	r6, [r0, #8]
 800a696:	6006      	str	r6, [r0, #0]
 800a698:	60c6      	str	r6, [r0, #12]
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	69db      	ldr	r3, [r3, #28]
 800a69e:	6819      	ldr	r1, [r3, #0]
 800a6a0:	2900      	cmp	r1, #0
 800a6a2:	d00b      	beq.n	800a6bc <_dtoa_r+0x58>
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	4093      	lsls	r3, r2
 800a6aa:	604a      	str	r2, [r1, #4]
 800a6ac:	608b      	str	r3, [r1, #8]
 800a6ae:	9803      	ldr	r0, [sp, #12]
 800a6b0:	f000 ff16 	bl	800b4e0 <_Bfree>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	2d00      	cmp	r5, #0
 800a6be:	da1e      	bge.n	800a6fe <_dtoa_r+0x9a>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	006b      	lsls	r3, r5, #1
 800a6c6:	085b      	lsrs	r3, r3, #1
 800a6c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6ca:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a6cc:	4bb8      	ldr	r3, [pc, #736]	@ (800a9b0 <_dtoa_r+0x34c>)
 800a6ce:	4ab8      	ldr	r2, [pc, #736]	@ (800a9b0 <_dtoa_r+0x34c>)
 800a6d0:	403b      	ands	r3, r7
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d116      	bne.n	800a704 <_dtoa_r+0xa0>
 800a6d6:	4bb7      	ldr	r3, [pc, #732]	@ (800a9b4 <_dtoa_r+0x350>)
 800a6d8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	033b      	lsls	r3, r7, #12
 800a6de:	0b1b      	lsrs	r3, r3, #12
 800a6e0:	4323      	orrs	r3, r4
 800a6e2:	d101      	bne.n	800a6e8 <_dtoa_r+0x84>
 800a6e4:	f000 fd83 	bl	800b1ee <_dtoa_r+0xb8a>
 800a6e8:	4bb3      	ldr	r3, [pc, #716]	@ (800a9b8 <_dtoa_r+0x354>)
 800a6ea:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a6ec:	9308      	str	r3, [sp, #32]
 800a6ee:	2a00      	cmp	r2, #0
 800a6f0:	d002      	beq.n	800a6f8 <_dtoa_r+0x94>
 800a6f2:	4bb2      	ldr	r3, [pc, #712]	@ (800a9bc <_dtoa_r+0x358>)
 800a6f4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	9808      	ldr	r0, [sp, #32]
 800a6fa:	b01d      	add	sp, #116	@ 0x74
 800a6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6fe:	2300      	movs	r3, #0
 800a700:	603b      	str	r3, [r7, #0]
 800a702:	e7e2      	b.n	800a6ca <_dtoa_r+0x66>
 800a704:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a708:	9212      	str	r2, [sp, #72]	@ 0x48
 800a70a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a70c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a70e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a710:	2200      	movs	r2, #0
 800a712:	2300      	movs	r3, #0
 800a714:	f7f5 fea4 	bl	8000460 <__aeabi_dcmpeq>
 800a718:	1e06      	subs	r6, r0, #0
 800a71a:	d00b      	beq.n	800a734 <_dtoa_r+0xd0>
 800a71c:	2301      	movs	r3, #1
 800a71e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <_dtoa_r+0xca>
 800a728:	4ba5      	ldr	r3, [pc, #660]	@ (800a9c0 <_dtoa_r+0x35c>)
 800a72a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	4ba5      	ldr	r3, [pc, #660]	@ (800a9c4 <_dtoa_r+0x360>)
 800a730:	9308      	str	r3, [sp, #32]
 800a732:	e7e1      	b.n	800a6f8 <_dtoa_r+0x94>
 800a734:	ab1a      	add	r3, sp, #104	@ 0x68
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	9803      	ldr	r0, [sp, #12]
 800a73e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a740:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a742:	f001 f9cd 	bl	800bae0 <__d2b>
 800a746:	007a      	lsls	r2, r7, #1
 800a748:	9005      	str	r0, [sp, #20]
 800a74a:	0d52      	lsrs	r2, r2, #21
 800a74c:	d100      	bne.n	800a750 <_dtoa_r+0xec>
 800a74e:	e07b      	b.n	800a848 <_dtoa_r+0x1e4>
 800a750:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a752:	9618      	str	r6, [sp, #96]	@ 0x60
 800a754:	0319      	lsls	r1, r3, #12
 800a756:	4b9c      	ldr	r3, [pc, #624]	@ (800a9c8 <_dtoa_r+0x364>)
 800a758:	0b09      	lsrs	r1, r1, #12
 800a75a:	430b      	orrs	r3, r1
 800a75c:	499b      	ldr	r1, [pc, #620]	@ (800a9cc <_dtoa_r+0x368>)
 800a75e:	1857      	adds	r7, r2, r1
 800a760:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a762:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a764:	0019      	movs	r1, r3
 800a766:	2200      	movs	r2, #0
 800a768:	4b99      	ldr	r3, [pc, #612]	@ (800a9d0 <_dtoa_r+0x36c>)
 800a76a:	f7f7 fd0d 	bl	8002188 <__aeabi_dsub>
 800a76e:	4a99      	ldr	r2, [pc, #612]	@ (800a9d4 <_dtoa_r+0x370>)
 800a770:	4b99      	ldr	r3, [pc, #612]	@ (800a9d8 <_dtoa_r+0x374>)
 800a772:	f7f7 fa41 	bl	8001bf8 <__aeabi_dmul>
 800a776:	4a99      	ldr	r2, [pc, #612]	@ (800a9dc <_dtoa_r+0x378>)
 800a778:	4b99      	ldr	r3, [pc, #612]	@ (800a9e0 <_dtoa_r+0x37c>)
 800a77a:	f7f6 fa95 	bl	8000ca8 <__aeabi_dadd>
 800a77e:	0004      	movs	r4, r0
 800a780:	0038      	movs	r0, r7
 800a782:	000d      	movs	r5, r1
 800a784:	f7f8 f8fa 	bl	800297c <__aeabi_i2d>
 800a788:	4a96      	ldr	r2, [pc, #600]	@ (800a9e4 <_dtoa_r+0x380>)
 800a78a:	4b97      	ldr	r3, [pc, #604]	@ (800a9e8 <_dtoa_r+0x384>)
 800a78c:	f7f7 fa34 	bl	8001bf8 <__aeabi_dmul>
 800a790:	0002      	movs	r2, r0
 800a792:	000b      	movs	r3, r1
 800a794:	0020      	movs	r0, r4
 800a796:	0029      	movs	r1, r5
 800a798:	f7f6 fa86 	bl	8000ca8 <__aeabi_dadd>
 800a79c:	0004      	movs	r4, r0
 800a79e:	000d      	movs	r5, r1
 800a7a0:	f7f8 f8b0 	bl	8002904 <__aeabi_d2iz>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	9004      	str	r0, [sp, #16]
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	0020      	movs	r0, r4
 800a7ac:	0029      	movs	r1, r5
 800a7ae:	f7f5 fe5d 	bl	800046c <__aeabi_dcmplt>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d00b      	beq.n	800a7ce <_dtoa_r+0x16a>
 800a7b6:	9804      	ldr	r0, [sp, #16]
 800a7b8:	f7f8 f8e0 	bl	800297c <__aeabi_i2d>
 800a7bc:	002b      	movs	r3, r5
 800a7be:	0022      	movs	r2, r4
 800a7c0:	f7f5 fe4e 	bl	8000460 <__aeabi_dcmpeq>
 800a7c4:	4243      	negs	r3, r0
 800a7c6:	4158      	adcs	r0, r3
 800a7c8:	9b04      	ldr	r3, [sp, #16]
 800a7ca:	1a1b      	subs	r3, r3, r0
 800a7cc:	9304      	str	r3, [sp, #16]
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7d2:	9b04      	ldr	r3, [sp, #16]
 800a7d4:	2b16      	cmp	r3, #22
 800a7d6:	d810      	bhi.n	800a7fa <_dtoa_r+0x196>
 800a7d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a7da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a7dc:	9a04      	ldr	r2, [sp, #16]
 800a7de:	4b83      	ldr	r3, [pc, #524]	@ (800a9ec <_dtoa_r+0x388>)
 800a7e0:	00d2      	lsls	r2, r2, #3
 800a7e2:	189b      	adds	r3, r3, r2
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f7f5 fe40 	bl	800046c <__aeabi_dcmplt>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d047      	beq.n	800a880 <_dtoa_r+0x21c>
 800a7f0:	9b04      	ldr	r3, [sp, #16]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a7fe:	9206      	str	r2, [sp, #24]
 800a800:	1bdb      	subs	r3, r3, r7
 800a802:	1e5a      	subs	r2, r3, #1
 800a804:	d53e      	bpl.n	800a884 <_dtoa_r+0x220>
 800a806:	2201      	movs	r2, #1
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	9306      	str	r3, [sp, #24]
 800a80c:	2300      	movs	r3, #0
 800a80e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a810:	9b04      	ldr	r3, [sp, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	db38      	blt.n	800a888 <_dtoa_r+0x224>
 800a816:	9a04      	ldr	r2, [sp, #16]
 800a818:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a81a:	4694      	mov	ip, r2
 800a81c:	4463      	add	r3, ip
 800a81e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a820:	2300      	movs	r3, #0
 800a822:	9214      	str	r2, [sp, #80]	@ 0x50
 800a824:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a826:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a828:	2401      	movs	r4, #1
 800a82a:	2b09      	cmp	r3, #9
 800a82c:	d867      	bhi.n	800a8fe <_dtoa_r+0x29a>
 800a82e:	2b05      	cmp	r3, #5
 800a830:	dd02      	ble.n	800a838 <_dtoa_r+0x1d4>
 800a832:	2400      	movs	r4, #0
 800a834:	3b04      	subs	r3, #4
 800a836:	9322      	str	r3, [sp, #136]	@ 0x88
 800a838:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a83a:	1e98      	subs	r0, r3, #2
 800a83c:	2803      	cmp	r0, #3
 800a83e:	d867      	bhi.n	800a910 <_dtoa_r+0x2ac>
 800a840:	f7f5 fc74 	bl	800012c <__gnu_thumb1_case_uqi>
 800a844:	5b383a2b 	.word	0x5b383a2b
 800a848:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a84a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a84c:	18f6      	adds	r6, r6, r3
 800a84e:	4b68      	ldr	r3, [pc, #416]	@ (800a9f0 <_dtoa_r+0x38c>)
 800a850:	18f2      	adds	r2, r6, r3
 800a852:	2a20      	cmp	r2, #32
 800a854:	dd0f      	ble.n	800a876 <_dtoa_r+0x212>
 800a856:	2340      	movs	r3, #64	@ 0x40
 800a858:	1a9b      	subs	r3, r3, r2
 800a85a:	409f      	lsls	r7, r3
 800a85c:	4b65      	ldr	r3, [pc, #404]	@ (800a9f4 <_dtoa_r+0x390>)
 800a85e:	0038      	movs	r0, r7
 800a860:	18f3      	adds	r3, r6, r3
 800a862:	40dc      	lsrs	r4, r3
 800a864:	4320      	orrs	r0, r4
 800a866:	f7f8 f8b7 	bl	80029d8 <__aeabi_ui2d>
 800a86a:	2201      	movs	r2, #1
 800a86c:	4b62      	ldr	r3, [pc, #392]	@ (800a9f8 <_dtoa_r+0x394>)
 800a86e:	1e77      	subs	r7, r6, #1
 800a870:	18cb      	adds	r3, r1, r3
 800a872:	9218      	str	r2, [sp, #96]	@ 0x60
 800a874:	e776      	b.n	800a764 <_dtoa_r+0x100>
 800a876:	2320      	movs	r3, #32
 800a878:	0020      	movs	r0, r4
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	4098      	lsls	r0, r3
 800a87e:	e7f2      	b.n	800a866 <_dtoa_r+0x202>
 800a880:	9015      	str	r0, [sp, #84]	@ 0x54
 800a882:	e7ba      	b.n	800a7fa <_dtoa_r+0x196>
 800a884:	920d      	str	r2, [sp, #52]	@ 0x34
 800a886:	e7c3      	b.n	800a810 <_dtoa_r+0x1ac>
 800a888:	9b06      	ldr	r3, [sp, #24]
 800a88a:	9a04      	ldr	r2, [sp, #16]
 800a88c:	1a9b      	subs	r3, r3, r2
 800a88e:	9306      	str	r3, [sp, #24]
 800a890:	4253      	negs	r3, r2
 800a892:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a894:	2300      	movs	r3, #0
 800a896:	9314      	str	r3, [sp, #80]	@ 0x50
 800a898:	e7c5      	b.n	800a826 <_dtoa_r+0x1c2>
 800a89a:	2300      	movs	r3, #0
 800a89c:	9310      	str	r3, [sp, #64]	@ 0x40
 800a89e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8a0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	dc13      	bgt.n	800a8d0 <_dtoa_r+0x26c>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	001a      	movs	r2, r3
 800a8ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8b0:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a8b2:	e00d      	b.n	800a8d0 <_dtoa_r+0x26c>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e7f1      	b.n	800a89c <_dtoa_r+0x238>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a8bc:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8be:	4694      	mov	ip, r2
 800a8c0:	9b04      	ldr	r3, [sp, #16]
 800a8c2:	4463      	add	r3, ip
 800a8c4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	dc00      	bgt.n	800a8d0 <_dtoa_r+0x26c>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	9a03      	ldr	r2, [sp, #12]
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	69d0      	ldr	r0, [r2, #28]
 800a8d6:	2204      	movs	r2, #4
 800a8d8:	0015      	movs	r5, r2
 800a8da:	3514      	adds	r5, #20
 800a8dc:	429d      	cmp	r5, r3
 800a8de:	d91b      	bls.n	800a918 <_dtoa_r+0x2b4>
 800a8e0:	6041      	str	r1, [r0, #4]
 800a8e2:	9803      	ldr	r0, [sp, #12]
 800a8e4:	f000 fdb8 	bl	800b458 <_Balloc>
 800a8e8:	9008      	str	r0, [sp, #32]
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d117      	bne.n	800a91e <_dtoa_r+0x2ba>
 800a8ee:	21b0      	movs	r1, #176	@ 0xb0
 800a8f0:	4b42      	ldr	r3, [pc, #264]	@ (800a9fc <_dtoa_r+0x398>)
 800a8f2:	482e      	ldr	r0, [pc, #184]	@ (800a9ac <_dtoa_r+0x348>)
 800a8f4:	9a08      	ldr	r2, [sp, #32]
 800a8f6:	31ff      	adds	r1, #255	@ 0xff
 800a8f8:	e6c9      	b.n	800a68e <_dtoa_r+0x2a>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e7dd      	b.n	800a8ba <_dtoa_r+0x256>
 800a8fe:	2300      	movs	r3, #0
 800a900:	9410      	str	r4, [sp, #64]	@ 0x40
 800a902:	9322      	str	r3, [sp, #136]	@ 0x88
 800a904:	3b01      	subs	r3, #1
 800a906:	930e      	str	r3, [sp, #56]	@ 0x38
 800a908:	9309      	str	r3, [sp, #36]	@ 0x24
 800a90a:	2200      	movs	r2, #0
 800a90c:	3313      	adds	r3, #19
 800a90e:	e7cf      	b.n	800a8b0 <_dtoa_r+0x24c>
 800a910:	2301      	movs	r3, #1
 800a912:	9310      	str	r3, [sp, #64]	@ 0x40
 800a914:	3b02      	subs	r3, #2
 800a916:	e7f6      	b.n	800a906 <_dtoa_r+0x2a2>
 800a918:	3101      	adds	r1, #1
 800a91a:	0052      	lsls	r2, r2, #1
 800a91c:	e7dc      	b.n	800a8d8 <_dtoa_r+0x274>
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	9a08      	ldr	r2, [sp, #32]
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a928:	2b0e      	cmp	r3, #14
 800a92a:	d900      	bls.n	800a92e <_dtoa_r+0x2ca>
 800a92c:	e0d9      	b.n	800aae2 <_dtoa_r+0x47e>
 800a92e:	2c00      	cmp	r4, #0
 800a930:	d100      	bne.n	800a934 <_dtoa_r+0x2d0>
 800a932:	e0d6      	b.n	800aae2 <_dtoa_r+0x47e>
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	dd64      	ble.n	800aa04 <_dtoa_r+0x3a0>
 800a93a:	210f      	movs	r1, #15
 800a93c:	9a04      	ldr	r2, [sp, #16]
 800a93e:	4b2b      	ldr	r3, [pc, #172]	@ (800a9ec <_dtoa_r+0x388>)
 800a940:	400a      	ands	r2, r1
 800a942:	00d2      	lsls	r2, r2, #3
 800a944:	189b      	adds	r3, r3, r2
 800a946:	681e      	ldr	r6, [r3, #0]
 800a948:	685f      	ldr	r7, [r3, #4]
 800a94a:	9b04      	ldr	r3, [sp, #16]
 800a94c:	2402      	movs	r4, #2
 800a94e:	111d      	asrs	r5, r3, #4
 800a950:	05db      	lsls	r3, r3, #23
 800a952:	d50a      	bpl.n	800a96a <_dtoa_r+0x306>
 800a954:	4b2a      	ldr	r3, [pc, #168]	@ (800aa00 <_dtoa_r+0x39c>)
 800a956:	400d      	ands	r5, r1
 800a958:	6a1a      	ldr	r2, [r3, #32]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a95c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a95e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a960:	f7f6 fd06 	bl	8001370 <__aeabi_ddiv>
 800a964:	900a      	str	r0, [sp, #40]	@ 0x28
 800a966:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a968:	3401      	adds	r4, #1
 800a96a:	4b25      	ldr	r3, [pc, #148]	@ (800aa00 <_dtoa_r+0x39c>)
 800a96c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a96e:	2d00      	cmp	r5, #0
 800a970:	d108      	bne.n	800a984 <_dtoa_r+0x320>
 800a972:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a974:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a976:	0032      	movs	r2, r6
 800a978:	003b      	movs	r3, r7
 800a97a:	f7f6 fcf9 	bl	8001370 <__aeabi_ddiv>
 800a97e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a980:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a982:	e05a      	b.n	800aa3a <_dtoa_r+0x3d6>
 800a984:	2301      	movs	r3, #1
 800a986:	421d      	tst	r5, r3
 800a988:	d009      	beq.n	800a99e <_dtoa_r+0x33a>
 800a98a:	18e4      	adds	r4, r4, r3
 800a98c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a98e:	0030      	movs	r0, r6
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	0039      	movs	r1, r7
 800a996:	f7f7 f92f 	bl	8001bf8 <__aeabi_dmul>
 800a99a:	0006      	movs	r6, r0
 800a99c:	000f      	movs	r7, r1
 800a99e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9a0:	106d      	asrs	r5, r5, #1
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	e7e2      	b.n	800a96c <_dtoa_r+0x308>
 800a9a6:	46c0      	nop			@ (mov r8, r8)
 800a9a8:	0800d396 	.word	0x0800d396
 800a9ac:	0800d450 	.word	0x0800d450
 800a9b0:	7ff00000 	.word	0x7ff00000
 800a9b4:	0000270f 	.word	0x0000270f
 800a9b8:	0800d44c 	.word	0x0800d44c
 800a9bc:	0800d44f 	.word	0x0800d44f
 800a9c0:	0800d638 	.word	0x0800d638
 800a9c4:	0800d637 	.word	0x0800d637
 800a9c8:	3ff00000 	.word	0x3ff00000
 800a9cc:	fffffc01 	.word	0xfffffc01
 800a9d0:	3ff80000 	.word	0x3ff80000
 800a9d4:	636f4361 	.word	0x636f4361
 800a9d8:	3fd287a7 	.word	0x3fd287a7
 800a9dc:	8b60c8b3 	.word	0x8b60c8b3
 800a9e0:	3fc68a28 	.word	0x3fc68a28
 800a9e4:	509f79fb 	.word	0x509f79fb
 800a9e8:	3fd34413 	.word	0x3fd34413
 800a9ec:	0800d548 	.word	0x0800d548
 800a9f0:	00000432 	.word	0x00000432
 800a9f4:	00000412 	.word	0x00000412
 800a9f8:	fe100000 	.word	0xfe100000
 800a9fc:	0800d4a8 	.word	0x0800d4a8
 800aa00:	0800d520 	.word	0x0800d520
 800aa04:	9b04      	ldr	r3, [sp, #16]
 800aa06:	2402      	movs	r4, #2
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d016      	beq.n	800aa3a <_dtoa_r+0x3d6>
 800aa0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800aa0e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aa10:	220f      	movs	r2, #15
 800aa12:	425d      	negs	r5, r3
 800aa14:	402a      	ands	r2, r5
 800aa16:	4bd7      	ldr	r3, [pc, #860]	@ (800ad74 <_dtoa_r+0x710>)
 800aa18:	00d2      	lsls	r2, r2, #3
 800aa1a:	189b      	adds	r3, r3, r2
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	f7f7 f8ea 	bl	8001bf8 <__aeabi_dmul>
 800aa24:	2701      	movs	r7, #1
 800aa26:	2300      	movs	r3, #0
 800aa28:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa2a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa2c:	4ed2      	ldr	r6, [pc, #840]	@ (800ad78 <_dtoa_r+0x714>)
 800aa2e:	112d      	asrs	r5, r5, #4
 800aa30:	2d00      	cmp	r5, #0
 800aa32:	d000      	beq.n	800aa36 <_dtoa_r+0x3d2>
 800aa34:	e0ba      	b.n	800abac <_dtoa_r+0x548>
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1a1      	bne.n	800a97e <_dtoa_r+0x31a>
 800aa3a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aa3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800aa3e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d100      	bne.n	800aa46 <_dtoa_r+0x3e2>
 800aa44:	e0bd      	b.n	800abc2 <_dtoa_r+0x55e>
 800aa46:	2200      	movs	r2, #0
 800aa48:	0030      	movs	r0, r6
 800aa4a:	0039      	movs	r1, r7
 800aa4c:	4bcb      	ldr	r3, [pc, #812]	@ (800ad7c <_dtoa_r+0x718>)
 800aa4e:	f7f5 fd0d 	bl	800046c <__aeabi_dcmplt>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d100      	bne.n	800aa58 <_dtoa_r+0x3f4>
 800aa56:	e0b4      	b.n	800abc2 <_dtoa_r+0x55e>
 800aa58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d100      	bne.n	800aa60 <_dtoa_r+0x3fc>
 800aa5e:	e0b0      	b.n	800abc2 <_dtoa_r+0x55e>
 800aa60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	dd39      	ble.n	800aada <_dtoa_r+0x476>
 800aa66:	9b04      	ldr	r3, [sp, #16]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa6e:	0030      	movs	r0, r6
 800aa70:	4bc3      	ldr	r3, [pc, #780]	@ (800ad80 <_dtoa_r+0x71c>)
 800aa72:	0039      	movs	r1, r7
 800aa74:	f7f7 f8c0 	bl	8001bf8 <__aeabi_dmul>
 800aa78:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa7e:	3401      	adds	r4, #1
 800aa80:	0020      	movs	r0, r4
 800aa82:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa84:	f7f7 ff7a 	bl	800297c <__aeabi_i2d>
 800aa88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa8c:	f7f7 f8b4 	bl	8001bf8 <__aeabi_dmul>
 800aa90:	4bbc      	ldr	r3, [pc, #752]	@ (800ad84 <_dtoa_r+0x720>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	f7f6 f908 	bl	8000ca8 <__aeabi_dadd>
 800aa98:	4bbb      	ldr	r3, [pc, #748]	@ (800ad88 <_dtoa_r+0x724>)
 800aa9a:	0006      	movs	r6, r0
 800aa9c:	18cf      	adds	r7, r1, r3
 800aa9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d000      	beq.n	800aaa6 <_dtoa_r+0x442>
 800aaa4:	e091      	b.n	800abca <_dtoa_r+0x566>
 800aaa6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aaa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4bb7      	ldr	r3, [pc, #732]	@ (800ad8c <_dtoa_r+0x728>)
 800aaae:	f7f7 fb6b 	bl	8002188 <__aeabi_dsub>
 800aab2:	0032      	movs	r2, r6
 800aab4:	003b      	movs	r3, r7
 800aab6:	0004      	movs	r4, r0
 800aab8:	000d      	movs	r5, r1
 800aaba:	f7f5 fceb 	bl	8000494 <__aeabi_dcmpgt>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d000      	beq.n	800aac4 <_dtoa_r+0x460>
 800aac2:	e29d      	b.n	800b000 <_dtoa_r+0x99c>
 800aac4:	2180      	movs	r1, #128	@ 0x80
 800aac6:	0609      	lsls	r1, r1, #24
 800aac8:	187b      	adds	r3, r7, r1
 800aaca:	0032      	movs	r2, r6
 800aacc:	0020      	movs	r0, r4
 800aace:	0029      	movs	r1, r5
 800aad0:	f7f5 fccc 	bl	800046c <__aeabi_dcmplt>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d000      	beq.n	800aada <_dtoa_r+0x476>
 800aad8:	e130      	b.n	800ad3c <_dtoa_r+0x6d8>
 800aada:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aadc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800aade:	930a      	str	r3, [sp, #40]	@ 0x28
 800aae0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aae2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	da00      	bge.n	800aaea <_dtoa_r+0x486>
 800aae8:	e177      	b.n	800adda <_dtoa_r+0x776>
 800aaea:	9a04      	ldr	r2, [sp, #16]
 800aaec:	2a0e      	cmp	r2, #14
 800aaee:	dd00      	ble.n	800aaf2 <_dtoa_r+0x48e>
 800aaf0:	e173      	b.n	800adda <_dtoa_r+0x776>
 800aaf2:	4ba0      	ldr	r3, [pc, #640]	@ (800ad74 <_dtoa_r+0x710>)
 800aaf4:	00d2      	lsls	r2, r2, #3
 800aaf6:	189b      	adds	r3, r3, r2
 800aaf8:	685c      	ldr	r4, [r3, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	9306      	str	r3, [sp, #24]
 800aafe:	9407      	str	r4, [sp, #28]
 800ab00:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	da03      	bge.n	800ab0e <_dtoa_r+0x4aa>
 800ab06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	dc00      	bgt.n	800ab0e <_dtoa_r+0x4aa>
 800ab0c:	e106      	b.n	800ad1c <_dtoa_r+0x6b8>
 800ab0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ab10:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ab12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab14:	9d08      	ldr	r5, [sp, #32]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	195b      	adds	r3, r3, r5
 800ab1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab1c:	9a06      	ldr	r2, [sp, #24]
 800ab1e:	9b07      	ldr	r3, [sp, #28]
 800ab20:	0030      	movs	r0, r6
 800ab22:	0039      	movs	r1, r7
 800ab24:	f7f6 fc24 	bl	8001370 <__aeabi_ddiv>
 800ab28:	f7f7 feec 	bl	8002904 <__aeabi_d2iz>
 800ab2c:	9009      	str	r0, [sp, #36]	@ 0x24
 800ab2e:	f7f7 ff25 	bl	800297c <__aeabi_i2d>
 800ab32:	9a06      	ldr	r2, [sp, #24]
 800ab34:	9b07      	ldr	r3, [sp, #28]
 800ab36:	f7f7 f85f 	bl	8001bf8 <__aeabi_dmul>
 800ab3a:	0002      	movs	r2, r0
 800ab3c:	000b      	movs	r3, r1
 800ab3e:	0030      	movs	r0, r6
 800ab40:	0039      	movs	r1, r7
 800ab42:	f7f7 fb21 	bl	8002188 <__aeabi_dsub>
 800ab46:	002b      	movs	r3, r5
 800ab48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab4a:	3501      	adds	r5, #1
 800ab4c:	3230      	adds	r2, #48	@ 0x30
 800ab4e:	701a      	strb	r2, [r3, #0]
 800ab50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab52:	002c      	movs	r4, r5
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d000      	beq.n	800ab5a <_dtoa_r+0x4f6>
 800ab58:	e131      	b.n	800adbe <_dtoa_r+0x75a>
 800ab5a:	0002      	movs	r2, r0
 800ab5c:	000b      	movs	r3, r1
 800ab5e:	f7f6 f8a3 	bl	8000ca8 <__aeabi_dadd>
 800ab62:	9a06      	ldr	r2, [sp, #24]
 800ab64:	9b07      	ldr	r3, [sp, #28]
 800ab66:	0006      	movs	r6, r0
 800ab68:	000f      	movs	r7, r1
 800ab6a:	f7f5 fc93 	bl	8000494 <__aeabi_dcmpgt>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d000      	beq.n	800ab74 <_dtoa_r+0x510>
 800ab72:	e10f      	b.n	800ad94 <_dtoa_r+0x730>
 800ab74:	9a06      	ldr	r2, [sp, #24]
 800ab76:	9b07      	ldr	r3, [sp, #28]
 800ab78:	0030      	movs	r0, r6
 800ab7a:	0039      	movs	r1, r7
 800ab7c:	f7f5 fc70 	bl	8000460 <__aeabi_dcmpeq>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d003      	beq.n	800ab8c <_dtoa_r+0x528>
 800ab84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab86:	07dd      	lsls	r5, r3, #31
 800ab88:	d500      	bpl.n	800ab8c <_dtoa_r+0x528>
 800ab8a:	e103      	b.n	800ad94 <_dtoa_r+0x730>
 800ab8c:	9905      	ldr	r1, [sp, #20]
 800ab8e:	9803      	ldr	r0, [sp, #12]
 800ab90:	f000 fca6 	bl	800b4e0 <_Bfree>
 800ab94:	2300      	movs	r3, #0
 800ab96:	7023      	strb	r3, [r4, #0]
 800ab98:	9b04      	ldr	r3, [sp, #16]
 800ab9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d100      	bne.n	800aba8 <_dtoa_r+0x544>
 800aba6:	e5a7      	b.n	800a6f8 <_dtoa_r+0x94>
 800aba8:	601c      	str	r4, [r3, #0]
 800abaa:	e5a5      	b.n	800a6f8 <_dtoa_r+0x94>
 800abac:	423d      	tst	r5, r7
 800abae:	d005      	beq.n	800abbc <_dtoa_r+0x558>
 800abb0:	6832      	ldr	r2, [r6, #0]
 800abb2:	6873      	ldr	r3, [r6, #4]
 800abb4:	f7f7 f820 	bl	8001bf8 <__aeabi_dmul>
 800abb8:	003b      	movs	r3, r7
 800abba:	3401      	adds	r4, #1
 800abbc:	106d      	asrs	r5, r5, #1
 800abbe:	3608      	adds	r6, #8
 800abc0:	e736      	b.n	800aa30 <_dtoa_r+0x3cc>
 800abc2:	9b04      	ldr	r3, [sp, #16]
 800abc4:	930c      	str	r3, [sp, #48]	@ 0x30
 800abc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc8:	e75a      	b.n	800aa80 <_dtoa_r+0x41c>
 800abca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abcc:	4b69      	ldr	r3, [pc, #420]	@ (800ad74 <_dtoa_r+0x710>)
 800abce:	3a01      	subs	r2, #1
 800abd0:	00d2      	lsls	r2, r2, #3
 800abd2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800abd4:	189b      	adds	r3, r3, r2
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	2900      	cmp	r1, #0
 800abdc:	d04c      	beq.n	800ac78 <_dtoa_r+0x614>
 800abde:	2000      	movs	r0, #0
 800abe0:	496b      	ldr	r1, [pc, #428]	@ (800ad90 <_dtoa_r+0x72c>)
 800abe2:	f7f6 fbc5 	bl	8001370 <__aeabi_ddiv>
 800abe6:	0032      	movs	r2, r6
 800abe8:	003b      	movs	r3, r7
 800abea:	f7f7 facd 	bl	8002188 <__aeabi_dsub>
 800abee:	9a08      	ldr	r2, [sp, #32]
 800abf0:	0006      	movs	r6, r0
 800abf2:	4694      	mov	ip, r2
 800abf4:	000f      	movs	r7, r1
 800abf6:	9b08      	ldr	r3, [sp, #32]
 800abf8:	9316      	str	r3, [sp, #88]	@ 0x58
 800abfa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800abfc:	4463      	add	r3, ip
 800abfe:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac04:	f7f7 fe7e 	bl	8002904 <__aeabi_d2iz>
 800ac08:	0005      	movs	r5, r0
 800ac0a:	f7f7 feb7 	bl	800297c <__aeabi_i2d>
 800ac0e:	0002      	movs	r2, r0
 800ac10:	000b      	movs	r3, r1
 800ac12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac16:	f7f7 fab7 	bl	8002188 <__aeabi_dsub>
 800ac1a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac1c:	3530      	adds	r5, #48	@ 0x30
 800ac1e:	1c5c      	adds	r4, r3, #1
 800ac20:	701d      	strb	r5, [r3, #0]
 800ac22:	0032      	movs	r2, r6
 800ac24:	003b      	movs	r3, r7
 800ac26:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac28:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac2a:	f7f5 fc1f 	bl	800046c <__aeabi_dcmplt>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d16a      	bne.n	800ad08 <_dtoa_r+0x6a4>
 800ac32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac36:	2000      	movs	r0, #0
 800ac38:	4950      	ldr	r1, [pc, #320]	@ (800ad7c <_dtoa_r+0x718>)
 800ac3a:	f7f7 faa5 	bl	8002188 <__aeabi_dsub>
 800ac3e:	0032      	movs	r2, r6
 800ac40:	003b      	movs	r3, r7
 800ac42:	f7f5 fc13 	bl	800046c <__aeabi_dcmplt>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d000      	beq.n	800ac4c <_dtoa_r+0x5e8>
 800ac4a:	e0a5      	b.n	800ad98 <_dtoa_r+0x734>
 800ac4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac4e:	42a3      	cmp	r3, r4
 800ac50:	d100      	bne.n	800ac54 <_dtoa_r+0x5f0>
 800ac52:	e742      	b.n	800aada <_dtoa_r+0x476>
 800ac54:	2200      	movs	r2, #0
 800ac56:	0030      	movs	r0, r6
 800ac58:	0039      	movs	r1, r7
 800ac5a:	4b49      	ldr	r3, [pc, #292]	@ (800ad80 <_dtoa_r+0x71c>)
 800ac5c:	f7f6 ffcc 	bl	8001bf8 <__aeabi_dmul>
 800ac60:	2200      	movs	r2, #0
 800ac62:	0006      	movs	r6, r0
 800ac64:	000f      	movs	r7, r1
 800ac66:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac6a:	4b45      	ldr	r3, [pc, #276]	@ (800ad80 <_dtoa_r+0x71c>)
 800ac6c:	f7f6 ffc4 	bl	8001bf8 <__aeabi_dmul>
 800ac70:	9416      	str	r4, [sp, #88]	@ 0x58
 800ac72:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac74:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac76:	e7c3      	b.n	800ac00 <_dtoa_r+0x59c>
 800ac78:	0030      	movs	r0, r6
 800ac7a:	0039      	movs	r1, r7
 800ac7c:	f7f6 ffbc 	bl	8001bf8 <__aeabi_dmul>
 800ac80:	9d08      	ldr	r5, [sp, #32]
 800ac82:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ac84:	002b      	movs	r3, r5
 800ac86:	4694      	mov	ip, r2
 800ac88:	9016      	str	r0, [sp, #88]	@ 0x58
 800ac8a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800ac8c:	4463      	add	r3, ip
 800ac8e:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac94:	f7f7 fe36 	bl	8002904 <__aeabi_d2iz>
 800ac98:	0004      	movs	r4, r0
 800ac9a:	f7f7 fe6f 	bl	800297c <__aeabi_i2d>
 800ac9e:	000b      	movs	r3, r1
 800aca0:	0002      	movs	r2, r0
 800aca2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aca4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aca6:	f7f7 fa6f 	bl	8002188 <__aeabi_dsub>
 800acaa:	3430      	adds	r4, #48	@ 0x30
 800acac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acae:	702c      	strb	r4, [r5, #0]
 800acb0:	3501      	adds	r5, #1
 800acb2:	0006      	movs	r6, r0
 800acb4:	000f      	movs	r7, r1
 800acb6:	42ab      	cmp	r3, r5
 800acb8:	d129      	bne.n	800ad0e <_dtoa_r+0x6aa>
 800acba:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800acbc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800acbe:	9b08      	ldr	r3, [sp, #32]
 800acc0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800acc2:	469c      	mov	ip, r3
 800acc4:	2200      	movs	r2, #0
 800acc6:	4b32      	ldr	r3, [pc, #200]	@ (800ad90 <_dtoa_r+0x72c>)
 800acc8:	4464      	add	r4, ip
 800acca:	f7f5 ffed 	bl	8000ca8 <__aeabi_dadd>
 800acce:	0002      	movs	r2, r0
 800acd0:	000b      	movs	r3, r1
 800acd2:	0030      	movs	r0, r6
 800acd4:	0039      	movs	r1, r7
 800acd6:	f7f5 fbdd 	bl	8000494 <__aeabi_dcmpgt>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d15c      	bne.n	800ad98 <_dtoa_r+0x734>
 800acde:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ace0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ace2:	2000      	movs	r0, #0
 800ace4:	492a      	ldr	r1, [pc, #168]	@ (800ad90 <_dtoa_r+0x72c>)
 800ace6:	f7f7 fa4f 	bl	8002188 <__aeabi_dsub>
 800acea:	0002      	movs	r2, r0
 800acec:	000b      	movs	r3, r1
 800acee:	0030      	movs	r0, r6
 800acf0:	0039      	movs	r1, r7
 800acf2:	f7f5 fbbb 	bl	800046c <__aeabi_dcmplt>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d100      	bne.n	800acfc <_dtoa_r+0x698>
 800acfa:	e6ee      	b.n	800aada <_dtoa_r+0x476>
 800acfc:	0023      	movs	r3, r4
 800acfe:	3c01      	subs	r4, #1
 800ad00:	7822      	ldrb	r2, [r4, #0]
 800ad02:	2a30      	cmp	r2, #48	@ 0x30
 800ad04:	d0fa      	beq.n	800acfc <_dtoa_r+0x698>
 800ad06:	001c      	movs	r4, r3
 800ad08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	e73e      	b.n	800ab8c <_dtoa_r+0x528>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	4b1b      	ldr	r3, [pc, #108]	@ (800ad80 <_dtoa_r+0x71c>)
 800ad12:	f7f6 ff71 	bl	8001bf8 <__aeabi_dmul>
 800ad16:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad18:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ad1a:	e7b9      	b.n	800ac90 <_dtoa_r+0x62c>
 800ad1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10c      	bne.n	800ad3c <_dtoa_r+0x6d8>
 800ad22:	9806      	ldr	r0, [sp, #24]
 800ad24:	9907      	ldr	r1, [sp, #28]
 800ad26:	2200      	movs	r2, #0
 800ad28:	4b18      	ldr	r3, [pc, #96]	@ (800ad8c <_dtoa_r+0x728>)
 800ad2a:	f7f6 ff65 	bl	8001bf8 <__aeabi_dmul>
 800ad2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad32:	f7f5 fbb9 	bl	80004a8 <__aeabi_dcmpge>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d100      	bne.n	800ad3c <_dtoa_r+0x6d8>
 800ad3a:	e164      	b.n	800b006 <_dtoa_r+0x9a2>
 800ad3c:	2600      	movs	r6, #0
 800ad3e:	0037      	movs	r7, r6
 800ad40:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad42:	9c08      	ldr	r4, [sp, #32]
 800ad44:	43db      	mvns	r3, r3
 800ad46:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9304      	str	r3, [sp, #16]
 800ad4c:	0031      	movs	r1, r6
 800ad4e:	9803      	ldr	r0, [sp, #12]
 800ad50:	f000 fbc6 	bl	800b4e0 <_Bfree>
 800ad54:	2f00      	cmp	r7, #0
 800ad56:	d0d7      	beq.n	800ad08 <_dtoa_r+0x6a4>
 800ad58:	9b04      	ldr	r3, [sp, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d005      	beq.n	800ad6a <_dtoa_r+0x706>
 800ad5e:	42bb      	cmp	r3, r7
 800ad60:	d003      	beq.n	800ad6a <_dtoa_r+0x706>
 800ad62:	0019      	movs	r1, r3
 800ad64:	9803      	ldr	r0, [sp, #12]
 800ad66:	f000 fbbb 	bl	800b4e0 <_Bfree>
 800ad6a:	0039      	movs	r1, r7
 800ad6c:	9803      	ldr	r0, [sp, #12]
 800ad6e:	f000 fbb7 	bl	800b4e0 <_Bfree>
 800ad72:	e7c9      	b.n	800ad08 <_dtoa_r+0x6a4>
 800ad74:	0800d548 	.word	0x0800d548
 800ad78:	0800d520 	.word	0x0800d520
 800ad7c:	3ff00000 	.word	0x3ff00000
 800ad80:	40240000 	.word	0x40240000
 800ad84:	401c0000 	.word	0x401c0000
 800ad88:	fcc00000 	.word	0xfcc00000
 800ad8c:	40140000 	.word	0x40140000
 800ad90:	3fe00000 	.word	0x3fe00000
 800ad94:	9b04      	ldr	r3, [sp, #16]
 800ad96:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad98:	0023      	movs	r3, r4
 800ad9a:	001c      	movs	r4, r3
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	781a      	ldrb	r2, [r3, #0]
 800ada0:	2a39      	cmp	r2, #57	@ 0x39
 800ada2:	d108      	bne.n	800adb6 <_dtoa_r+0x752>
 800ada4:	9a08      	ldr	r2, [sp, #32]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d1f7      	bne.n	800ad9a <_dtoa_r+0x736>
 800adaa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800adac:	9908      	ldr	r1, [sp, #32]
 800adae:	3201      	adds	r2, #1
 800adb0:	920c      	str	r2, [sp, #48]	@ 0x30
 800adb2:	2230      	movs	r2, #48	@ 0x30
 800adb4:	700a      	strb	r2, [r1, #0]
 800adb6:	781a      	ldrb	r2, [r3, #0]
 800adb8:	3201      	adds	r2, #1
 800adba:	701a      	strb	r2, [r3, #0]
 800adbc:	e7a4      	b.n	800ad08 <_dtoa_r+0x6a4>
 800adbe:	2200      	movs	r2, #0
 800adc0:	4bc6      	ldr	r3, [pc, #792]	@ (800b0dc <_dtoa_r+0xa78>)
 800adc2:	f7f6 ff19 	bl	8001bf8 <__aeabi_dmul>
 800adc6:	2200      	movs	r2, #0
 800adc8:	2300      	movs	r3, #0
 800adca:	0006      	movs	r6, r0
 800adcc:	000f      	movs	r7, r1
 800adce:	f7f5 fb47 	bl	8000460 <__aeabi_dcmpeq>
 800add2:	2800      	cmp	r0, #0
 800add4:	d100      	bne.n	800add8 <_dtoa_r+0x774>
 800add6:	e6a1      	b.n	800ab1c <_dtoa_r+0x4b8>
 800add8:	e6d8      	b.n	800ab8c <_dtoa_r+0x528>
 800adda:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800addc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800adde:	9c06      	ldr	r4, [sp, #24]
 800ade0:	2f00      	cmp	r7, #0
 800ade2:	d014      	beq.n	800ae0e <_dtoa_r+0x7aa>
 800ade4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ade6:	2a01      	cmp	r2, #1
 800ade8:	dd00      	ble.n	800adec <_dtoa_r+0x788>
 800adea:	e0c8      	b.n	800af7e <_dtoa_r+0x91a>
 800adec:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800adee:	2a00      	cmp	r2, #0
 800adf0:	d100      	bne.n	800adf4 <_dtoa_r+0x790>
 800adf2:	e0be      	b.n	800af72 <_dtoa_r+0x90e>
 800adf4:	4aba      	ldr	r2, [pc, #744]	@ (800b0e0 <_dtoa_r+0xa7c>)
 800adf6:	189b      	adds	r3, r3, r2
 800adf8:	9a06      	ldr	r2, [sp, #24]
 800adfa:	2101      	movs	r1, #1
 800adfc:	18d2      	adds	r2, r2, r3
 800adfe:	9206      	str	r2, [sp, #24]
 800ae00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae02:	9803      	ldr	r0, [sp, #12]
 800ae04:	18d3      	adds	r3, r2, r3
 800ae06:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae08:	f000 fc22 	bl	800b650 <__i2b>
 800ae0c:	0007      	movs	r7, r0
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	d00e      	beq.n	800ae30 <_dtoa_r+0x7cc>
 800ae12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dd0b      	ble.n	800ae30 <_dtoa_r+0x7cc>
 800ae18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae1a:	0023      	movs	r3, r4
 800ae1c:	4294      	cmp	r4, r2
 800ae1e:	dd00      	ble.n	800ae22 <_dtoa_r+0x7be>
 800ae20:	0013      	movs	r3, r2
 800ae22:	9a06      	ldr	r2, [sp, #24]
 800ae24:	1ae4      	subs	r4, r4, r3
 800ae26:	1ad2      	subs	r2, r2, r3
 800ae28:	9206      	str	r2, [sp, #24]
 800ae2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d01f      	beq.n	800ae76 <_dtoa_r+0x812>
 800ae36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d100      	bne.n	800ae3e <_dtoa_r+0x7da>
 800ae3c:	e0b5      	b.n	800afaa <_dtoa_r+0x946>
 800ae3e:	2d00      	cmp	r5, #0
 800ae40:	d010      	beq.n	800ae64 <_dtoa_r+0x800>
 800ae42:	0039      	movs	r1, r7
 800ae44:	002a      	movs	r2, r5
 800ae46:	9803      	ldr	r0, [sp, #12]
 800ae48:	f000 fccc 	bl	800b7e4 <__pow5mult>
 800ae4c:	9a05      	ldr	r2, [sp, #20]
 800ae4e:	0001      	movs	r1, r0
 800ae50:	0007      	movs	r7, r0
 800ae52:	9803      	ldr	r0, [sp, #12]
 800ae54:	f000 fc14 	bl	800b680 <__multiply>
 800ae58:	0006      	movs	r6, r0
 800ae5a:	9905      	ldr	r1, [sp, #20]
 800ae5c:	9803      	ldr	r0, [sp, #12]
 800ae5e:	f000 fb3f 	bl	800b4e0 <_Bfree>
 800ae62:	9605      	str	r6, [sp, #20]
 800ae64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae66:	1b5a      	subs	r2, r3, r5
 800ae68:	42ab      	cmp	r3, r5
 800ae6a:	d004      	beq.n	800ae76 <_dtoa_r+0x812>
 800ae6c:	9905      	ldr	r1, [sp, #20]
 800ae6e:	9803      	ldr	r0, [sp, #12]
 800ae70:	f000 fcb8 	bl	800b7e4 <__pow5mult>
 800ae74:	9005      	str	r0, [sp, #20]
 800ae76:	2101      	movs	r1, #1
 800ae78:	9803      	ldr	r0, [sp, #12]
 800ae7a:	f000 fbe9 	bl	800b650 <__i2b>
 800ae7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae80:	0006      	movs	r6, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d100      	bne.n	800ae88 <_dtoa_r+0x824>
 800ae86:	e1bc      	b.n	800b202 <_dtoa_r+0xb9e>
 800ae88:	001a      	movs	r2, r3
 800ae8a:	0001      	movs	r1, r0
 800ae8c:	9803      	ldr	r0, [sp, #12]
 800ae8e:	f000 fca9 	bl	800b7e4 <__pow5mult>
 800ae92:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ae94:	0006      	movs	r6, r0
 800ae96:	2500      	movs	r5, #0
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	dc16      	bgt.n	800aeca <_dtoa_r+0x866>
 800ae9c:	2500      	movs	r5, #0
 800ae9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aea0:	42ab      	cmp	r3, r5
 800aea2:	d10e      	bne.n	800aec2 <_dtoa_r+0x85e>
 800aea4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aea6:	031b      	lsls	r3, r3, #12
 800aea8:	42ab      	cmp	r3, r5
 800aeaa:	d10a      	bne.n	800aec2 <_dtoa_r+0x85e>
 800aeac:	4b8d      	ldr	r3, [pc, #564]	@ (800b0e4 <_dtoa_r+0xa80>)
 800aeae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aeb0:	4213      	tst	r3, r2
 800aeb2:	d006      	beq.n	800aec2 <_dtoa_r+0x85e>
 800aeb4:	9b06      	ldr	r3, [sp, #24]
 800aeb6:	3501      	adds	r5, #1
 800aeb8:	3301      	adds	r3, #1
 800aeba:	9306      	str	r3, [sp, #24]
 800aebc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aebe:	3301      	adds	r3, #1
 800aec0:	930d      	str	r3, [sp, #52]	@ 0x34
 800aec2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aec4:	2001      	movs	r0, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d008      	beq.n	800aedc <_dtoa_r+0x878>
 800aeca:	6933      	ldr	r3, [r6, #16]
 800aecc:	3303      	adds	r3, #3
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	18f3      	adds	r3, r6, r3
 800aed2:	6858      	ldr	r0, [r3, #4]
 800aed4:	f000 fb6c 	bl	800b5b0 <__hi0bits>
 800aed8:	2320      	movs	r3, #32
 800aeda:	1a18      	subs	r0, r3, r0
 800aedc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aede:	1818      	adds	r0, r3, r0
 800aee0:	0002      	movs	r2, r0
 800aee2:	231f      	movs	r3, #31
 800aee4:	401a      	ands	r2, r3
 800aee6:	4218      	tst	r0, r3
 800aee8:	d065      	beq.n	800afb6 <_dtoa_r+0x952>
 800aeea:	3301      	adds	r3, #1
 800aeec:	1a9b      	subs	r3, r3, r2
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	dd5d      	ble.n	800afae <_dtoa_r+0x94a>
 800aef2:	231c      	movs	r3, #28
 800aef4:	1a9b      	subs	r3, r3, r2
 800aef6:	9a06      	ldr	r2, [sp, #24]
 800aef8:	18e4      	adds	r4, r4, r3
 800aefa:	18d2      	adds	r2, r2, r3
 800aefc:	9206      	str	r2, [sp, #24]
 800aefe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af00:	18d3      	adds	r3, r2, r3
 800af02:	930d      	str	r3, [sp, #52]	@ 0x34
 800af04:	9b06      	ldr	r3, [sp, #24]
 800af06:	2b00      	cmp	r3, #0
 800af08:	dd05      	ble.n	800af16 <_dtoa_r+0x8b2>
 800af0a:	001a      	movs	r2, r3
 800af0c:	9905      	ldr	r1, [sp, #20]
 800af0e:	9803      	ldr	r0, [sp, #12]
 800af10:	f000 fcc4 	bl	800b89c <__lshift>
 800af14:	9005      	str	r0, [sp, #20]
 800af16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dd05      	ble.n	800af28 <_dtoa_r+0x8c4>
 800af1c:	0031      	movs	r1, r6
 800af1e:	001a      	movs	r2, r3
 800af20:	9803      	ldr	r0, [sp, #12]
 800af22:	f000 fcbb 	bl	800b89c <__lshift>
 800af26:	0006      	movs	r6, r0
 800af28:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d045      	beq.n	800afba <_dtoa_r+0x956>
 800af2e:	0031      	movs	r1, r6
 800af30:	9805      	ldr	r0, [sp, #20]
 800af32:	f000 fd1f 	bl	800b974 <__mcmp>
 800af36:	2800      	cmp	r0, #0
 800af38:	da3f      	bge.n	800afba <_dtoa_r+0x956>
 800af3a:	9b04      	ldr	r3, [sp, #16]
 800af3c:	220a      	movs	r2, #10
 800af3e:	3b01      	subs	r3, #1
 800af40:	930c      	str	r3, [sp, #48]	@ 0x30
 800af42:	9905      	ldr	r1, [sp, #20]
 800af44:	2300      	movs	r3, #0
 800af46:	9803      	ldr	r0, [sp, #12]
 800af48:	f000 faee 	bl	800b528 <__multadd>
 800af4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af4e:	9005      	str	r0, [sp, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d100      	bne.n	800af56 <_dtoa_r+0x8f2>
 800af54:	e15c      	b.n	800b210 <_dtoa_r+0xbac>
 800af56:	2300      	movs	r3, #0
 800af58:	0039      	movs	r1, r7
 800af5a:	220a      	movs	r2, #10
 800af5c:	9803      	ldr	r0, [sp, #12]
 800af5e:	f000 fae3 	bl	800b528 <__multadd>
 800af62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af64:	0007      	movs	r7, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	dc55      	bgt.n	800b016 <_dtoa_r+0x9b2>
 800af6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	dc2d      	bgt.n	800afcc <_dtoa_r+0x968>
 800af70:	e051      	b.n	800b016 <_dtoa_r+0x9b2>
 800af72:	2336      	movs	r3, #54	@ 0x36
 800af74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af76:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800af78:	9c06      	ldr	r4, [sp, #24]
 800af7a:	1a9b      	subs	r3, r3, r2
 800af7c:	e73c      	b.n	800adf8 <_dtoa_r+0x794>
 800af7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af80:	1e5d      	subs	r5, r3, #1
 800af82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af84:	42ab      	cmp	r3, r5
 800af86:	db08      	blt.n	800af9a <_dtoa_r+0x936>
 800af88:	1b5d      	subs	r5, r3, r5
 800af8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af8c:	9c06      	ldr	r4, [sp, #24]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	db00      	blt.n	800af94 <_dtoa_r+0x930>
 800af92:	e731      	b.n	800adf8 <_dtoa_r+0x794>
 800af94:	1ae4      	subs	r4, r4, r3
 800af96:	2300      	movs	r3, #0
 800af98:	e72e      	b.n	800adf8 <_dtoa_r+0x794>
 800af9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800af9e:	1aeb      	subs	r3, r5, r3
 800afa0:	18d3      	adds	r3, r2, r3
 800afa2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800afa4:	9314      	str	r3, [sp, #80]	@ 0x50
 800afa6:	2500      	movs	r5, #0
 800afa8:	e7ef      	b.n	800af8a <_dtoa_r+0x926>
 800afaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800afac:	e75e      	b.n	800ae6c <_dtoa_r+0x808>
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d0a8      	beq.n	800af04 <_dtoa_r+0x8a0>
 800afb2:	331c      	adds	r3, #28
 800afb4:	e79f      	b.n	800aef6 <_dtoa_r+0x892>
 800afb6:	0013      	movs	r3, r2
 800afb8:	e7fb      	b.n	800afb2 <_dtoa_r+0x94e>
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	930c      	str	r3, [sp, #48]	@ 0x30
 800afbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc0:	930e      	str	r3, [sp, #56]	@ 0x38
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dc23      	bgt.n	800b00e <_dtoa_r+0x9aa>
 800afc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800afc8:	2b02      	cmp	r3, #2
 800afca:	dd20      	ble.n	800b00e <_dtoa_r+0x9aa>
 800afcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d000      	beq.n	800afd4 <_dtoa_r+0x970>
 800afd2:	e6b5      	b.n	800ad40 <_dtoa_r+0x6dc>
 800afd4:	0031      	movs	r1, r6
 800afd6:	2205      	movs	r2, #5
 800afd8:	9803      	ldr	r0, [sp, #12]
 800afda:	f000 faa5 	bl	800b528 <__multadd>
 800afde:	0006      	movs	r6, r0
 800afe0:	0001      	movs	r1, r0
 800afe2:	9805      	ldr	r0, [sp, #20]
 800afe4:	f000 fcc6 	bl	800b974 <__mcmp>
 800afe8:	2800      	cmp	r0, #0
 800afea:	dc00      	bgt.n	800afee <_dtoa_r+0x98a>
 800afec:	e6a8      	b.n	800ad40 <_dtoa_r+0x6dc>
 800afee:	9b08      	ldr	r3, [sp, #32]
 800aff0:	9a08      	ldr	r2, [sp, #32]
 800aff2:	1c5c      	adds	r4, r3, #1
 800aff4:	2331      	movs	r3, #49	@ 0x31
 800aff6:	7013      	strb	r3, [r2, #0]
 800aff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800affa:	3301      	adds	r3, #1
 800affc:	930c      	str	r3, [sp, #48]	@ 0x30
 800affe:	e6a3      	b.n	800ad48 <_dtoa_r+0x6e4>
 800b000:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b002:	0037      	movs	r7, r6
 800b004:	e7f3      	b.n	800afee <_dtoa_r+0x98a>
 800b006:	9b04      	ldr	r3, [sp, #16]
 800b008:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800b00a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b00c:	e7f9      	b.n	800b002 <_dtoa_r+0x99e>
 800b00e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b010:	2b00      	cmp	r3, #0
 800b012:	d100      	bne.n	800b016 <_dtoa_r+0x9b2>
 800b014:	e100      	b.n	800b218 <_dtoa_r+0xbb4>
 800b016:	2c00      	cmp	r4, #0
 800b018:	dd05      	ble.n	800b026 <_dtoa_r+0x9c2>
 800b01a:	0039      	movs	r1, r7
 800b01c:	0022      	movs	r2, r4
 800b01e:	9803      	ldr	r0, [sp, #12]
 800b020:	f000 fc3c 	bl	800b89c <__lshift>
 800b024:	0007      	movs	r7, r0
 800b026:	0038      	movs	r0, r7
 800b028:	2d00      	cmp	r5, #0
 800b02a:	d018      	beq.n	800b05e <_dtoa_r+0x9fa>
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	9803      	ldr	r0, [sp, #12]
 800b030:	f000 fa12 	bl	800b458 <_Balloc>
 800b034:	1e04      	subs	r4, r0, #0
 800b036:	d105      	bne.n	800b044 <_dtoa_r+0x9e0>
 800b038:	0022      	movs	r2, r4
 800b03a:	4b2b      	ldr	r3, [pc, #172]	@ (800b0e8 <_dtoa_r+0xa84>)
 800b03c:	482b      	ldr	r0, [pc, #172]	@ (800b0ec <_dtoa_r+0xa88>)
 800b03e:	492c      	ldr	r1, [pc, #176]	@ (800b0f0 <_dtoa_r+0xa8c>)
 800b040:	f7ff fb25 	bl	800a68e <_dtoa_r+0x2a>
 800b044:	0039      	movs	r1, r7
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	310c      	adds	r1, #12
 800b04a:	3202      	adds	r2, #2
 800b04c:	0092      	lsls	r2, r2, #2
 800b04e:	300c      	adds	r0, #12
 800b050:	f7ff fa52 	bl	800a4f8 <memcpy>
 800b054:	2201      	movs	r2, #1
 800b056:	0021      	movs	r1, r4
 800b058:	9803      	ldr	r0, [sp, #12]
 800b05a:	f000 fc1f 	bl	800b89c <__lshift>
 800b05e:	9b08      	ldr	r3, [sp, #32]
 800b060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b062:	9306      	str	r3, [sp, #24]
 800b064:	3b01      	subs	r3, #1
 800b066:	189b      	adds	r3, r3, r2
 800b068:	2201      	movs	r2, #1
 800b06a:	9704      	str	r7, [sp, #16]
 800b06c:	0007      	movs	r7, r0
 800b06e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b072:	4013      	ands	r3, r2
 800b074:	930e      	str	r3, [sp, #56]	@ 0x38
 800b076:	0031      	movs	r1, r6
 800b078:	9805      	ldr	r0, [sp, #20]
 800b07a:	f7ff fa65 	bl	800a548 <quorem>
 800b07e:	9904      	ldr	r1, [sp, #16]
 800b080:	0005      	movs	r5, r0
 800b082:	900a      	str	r0, [sp, #40]	@ 0x28
 800b084:	9805      	ldr	r0, [sp, #20]
 800b086:	f000 fc75 	bl	800b974 <__mcmp>
 800b08a:	003a      	movs	r2, r7
 800b08c:	900d      	str	r0, [sp, #52]	@ 0x34
 800b08e:	0031      	movs	r1, r6
 800b090:	9803      	ldr	r0, [sp, #12]
 800b092:	f000 fc8b 	bl	800b9ac <__mdiff>
 800b096:	2201      	movs	r2, #1
 800b098:	68c3      	ldr	r3, [r0, #12]
 800b09a:	0004      	movs	r4, r0
 800b09c:	3530      	adds	r5, #48	@ 0x30
 800b09e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d104      	bne.n	800b0ae <_dtoa_r+0xa4a>
 800b0a4:	0001      	movs	r1, r0
 800b0a6:	9805      	ldr	r0, [sp, #20]
 800b0a8:	f000 fc64 	bl	800b974 <__mcmp>
 800b0ac:	9009      	str	r0, [sp, #36]	@ 0x24
 800b0ae:	0021      	movs	r1, r4
 800b0b0:	9803      	ldr	r0, [sp, #12]
 800b0b2:	f000 fa15 	bl	800b4e0 <_Bfree>
 800b0b6:	9b06      	ldr	r3, [sp, #24]
 800b0b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0ba:	1c5c      	adds	r4, r3, #1
 800b0bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	d116      	bne.n	800b0f4 <_dtoa_r+0xa90>
 800b0c6:	2d39      	cmp	r5, #57	@ 0x39
 800b0c8:	d02f      	beq.n	800b12a <_dtoa_r+0xac6>
 800b0ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	dd01      	ble.n	800b0d4 <_dtoa_r+0xa70>
 800b0d0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b0d2:	3531      	adds	r5, #49	@ 0x31
 800b0d4:	9b06      	ldr	r3, [sp, #24]
 800b0d6:	701d      	strb	r5, [r3, #0]
 800b0d8:	e638      	b.n	800ad4c <_dtoa_r+0x6e8>
 800b0da:	46c0      	nop			@ (mov r8, r8)
 800b0dc:	40240000 	.word	0x40240000
 800b0e0:	00000433 	.word	0x00000433
 800b0e4:	7ff00000 	.word	0x7ff00000
 800b0e8:	0800d4a8 	.word	0x0800d4a8
 800b0ec:	0800d450 	.word	0x0800d450
 800b0f0:	000002ef 	.word	0x000002ef
 800b0f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	db04      	blt.n	800b104 <_dtoa_r+0xaa0>
 800b0fa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b100:	4313      	orrs	r3, r2
 800b102:	d11e      	bne.n	800b142 <_dtoa_r+0xade>
 800b104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b106:	2b00      	cmp	r3, #0
 800b108:	dde4      	ble.n	800b0d4 <_dtoa_r+0xa70>
 800b10a:	9905      	ldr	r1, [sp, #20]
 800b10c:	2201      	movs	r2, #1
 800b10e:	9803      	ldr	r0, [sp, #12]
 800b110:	f000 fbc4 	bl	800b89c <__lshift>
 800b114:	0031      	movs	r1, r6
 800b116:	9005      	str	r0, [sp, #20]
 800b118:	f000 fc2c 	bl	800b974 <__mcmp>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	dc02      	bgt.n	800b126 <_dtoa_r+0xac2>
 800b120:	d1d8      	bne.n	800b0d4 <_dtoa_r+0xa70>
 800b122:	07eb      	lsls	r3, r5, #31
 800b124:	d5d6      	bpl.n	800b0d4 <_dtoa_r+0xa70>
 800b126:	2d39      	cmp	r5, #57	@ 0x39
 800b128:	d1d2      	bne.n	800b0d0 <_dtoa_r+0xa6c>
 800b12a:	2339      	movs	r3, #57	@ 0x39
 800b12c:	9a06      	ldr	r2, [sp, #24]
 800b12e:	7013      	strb	r3, [r2, #0]
 800b130:	0023      	movs	r3, r4
 800b132:	001c      	movs	r4, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	781a      	ldrb	r2, [r3, #0]
 800b138:	2a39      	cmp	r2, #57	@ 0x39
 800b13a:	d04f      	beq.n	800b1dc <_dtoa_r+0xb78>
 800b13c:	3201      	adds	r2, #1
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	e604      	b.n	800ad4c <_dtoa_r+0x6e8>
 800b142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b144:	2b00      	cmp	r3, #0
 800b146:	dd03      	ble.n	800b150 <_dtoa_r+0xaec>
 800b148:	2d39      	cmp	r5, #57	@ 0x39
 800b14a:	d0ee      	beq.n	800b12a <_dtoa_r+0xac6>
 800b14c:	3501      	adds	r5, #1
 800b14e:	e7c1      	b.n	800b0d4 <_dtoa_r+0xa70>
 800b150:	9b06      	ldr	r3, [sp, #24]
 800b152:	9a06      	ldr	r2, [sp, #24]
 800b154:	701d      	strb	r5, [r3, #0]
 800b156:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b158:	4293      	cmp	r3, r2
 800b15a:	d02a      	beq.n	800b1b2 <_dtoa_r+0xb4e>
 800b15c:	2300      	movs	r3, #0
 800b15e:	220a      	movs	r2, #10
 800b160:	9905      	ldr	r1, [sp, #20]
 800b162:	9803      	ldr	r0, [sp, #12]
 800b164:	f000 f9e0 	bl	800b528 <__multadd>
 800b168:	9b04      	ldr	r3, [sp, #16]
 800b16a:	9005      	str	r0, [sp, #20]
 800b16c:	42bb      	cmp	r3, r7
 800b16e:	d109      	bne.n	800b184 <_dtoa_r+0xb20>
 800b170:	2300      	movs	r3, #0
 800b172:	220a      	movs	r2, #10
 800b174:	9904      	ldr	r1, [sp, #16]
 800b176:	9803      	ldr	r0, [sp, #12]
 800b178:	f000 f9d6 	bl	800b528 <__multadd>
 800b17c:	9004      	str	r0, [sp, #16]
 800b17e:	0007      	movs	r7, r0
 800b180:	9406      	str	r4, [sp, #24]
 800b182:	e778      	b.n	800b076 <_dtoa_r+0xa12>
 800b184:	9904      	ldr	r1, [sp, #16]
 800b186:	2300      	movs	r3, #0
 800b188:	220a      	movs	r2, #10
 800b18a:	9803      	ldr	r0, [sp, #12]
 800b18c:	f000 f9cc 	bl	800b528 <__multadd>
 800b190:	2300      	movs	r3, #0
 800b192:	9004      	str	r0, [sp, #16]
 800b194:	220a      	movs	r2, #10
 800b196:	0039      	movs	r1, r7
 800b198:	9803      	ldr	r0, [sp, #12]
 800b19a:	f000 f9c5 	bl	800b528 <__multadd>
 800b19e:	e7ee      	b.n	800b17e <_dtoa_r+0xb1a>
 800b1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1a2:	2401      	movs	r4, #1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	dd00      	ble.n	800b1aa <_dtoa_r+0xb46>
 800b1a8:	001c      	movs	r4, r3
 800b1aa:	9b08      	ldr	r3, [sp, #32]
 800b1ac:	191c      	adds	r4, r3, r4
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	9304      	str	r3, [sp, #16]
 800b1b2:	9905      	ldr	r1, [sp, #20]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	9803      	ldr	r0, [sp, #12]
 800b1b8:	f000 fb70 	bl	800b89c <__lshift>
 800b1bc:	0031      	movs	r1, r6
 800b1be:	9005      	str	r0, [sp, #20]
 800b1c0:	f000 fbd8 	bl	800b974 <__mcmp>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	dcb3      	bgt.n	800b130 <_dtoa_r+0xacc>
 800b1c8:	d101      	bne.n	800b1ce <_dtoa_r+0xb6a>
 800b1ca:	07ed      	lsls	r5, r5, #31
 800b1cc:	d4b0      	bmi.n	800b130 <_dtoa_r+0xacc>
 800b1ce:	0023      	movs	r3, r4
 800b1d0:	001c      	movs	r4, r3
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	2a30      	cmp	r2, #48	@ 0x30
 800b1d8:	d0fa      	beq.n	800b1d0 <_dtoa_r+0xb6c>
 800b1da:	e5b7      	b.n	800ad4c <_dtoa_r+0x6e8>
 800b1dc:	9a08      	ldr	r2, [sp, #32]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d1a7      	bne.n	800b132 <_dtoa_r+0xace>
 800b1e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b1e8:	2331      	movs	r3, #49	@ 0x31
 800b1ea:	7013      	strb	r3, [r2, #0]
 800b1ec:	e5ae      	b.n	800ad4c <_dtoa_r+0x6e8>
 800b1ee:	4b15      	ldr	r3, [pc, #84]	@ (800b244 <_dtoa_r+0xbe0>)
 800b1f0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b1f2:	9308      	str	r3, [sp, #32]
 800b1f4:	4b14      	ldr	r3, [pc, #80]	@ (800b248 <_dtoa_r+0xbe4>)
 800b1f6:	2a00      	cmp	r2, #0
 800b1f8:	d001      	beq.n	800b1fe <_dtoa_r+0xb9a>
 800b1fa:	f7ff fa7b 	bl	800a6f4 <_dtoa_r+0x90>
 800b1fe:	f7ff fa7b 	bl	800a6f8 <_dtoa_r+0x94>
 800b202:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b204:	2b01      	cmp	r3, #1
 800b206:	dc00      	bgt.n	800b20a <_dtoa_r+0xba6>
 800b208:	e648      	b.n	800ae9c <_dtoa_r+0x838>
 800b20a:	2001      	movs	r0, #1
 800b20c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b20e:	e665      	b.n	800aedc <_dtoa_r+0x878>
 800b210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b212:	2b00      	cmp	r3, #0
 800b214:	dc00      	bgt.n	800b218 <_dtoa_r+0xbb4>
 800b216:	e6d6      	b.n	800afc6 <_dtoa_r+0x962>
 800b218:	2400      	movs	r4, #0
 800b21a:	0031      	movs	r1, r6
 800b21c:	9805      	ldr	r0, [sp, #20]
 800b21e:	f7ff f993 	bl	800a548 <quorem>
 800b222:	9b08      	ldr	r3, [sp, #32]
 800b224:	3030      	adds	r0, #48	@ 0x30
 800b226:	5518      	strb	r0, [r3, r4]
 800b228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b22a:	3401      	adds	r4, #1
 800b22c:	0005      	movs	r5, r0
 800b22e:	429c      	cmp	r4, r3
 800b230:	dab6      	bge.n	800b1a0 <_dtoa_r+0xb3c>
 800b232:	2300      	movs	r3, #0
 800b234:	220a      	movs	r2, #10
 800b236:	9905      	ldr	r1, [sp, #20]
 800b238:	9803      	ldr	r0, [sp, #12]
 800b23a:	f000 f975 	bl	800b528 <__multadd>
 800b23e:	9005      	str	r0, [sp, #20]
 800b240:	e7eb      	b.n	800b21a <_dtoa_r+0xbb6>
 800b242:	46c0      	nop			@ (mov r8, r8)
 800b244:	0800d443 	.word	0x0800d443
 800b248:	0800d44b 	.word	0x0800d44b

0800b24c <_free_r>:
 800b24c:	b570      	push	{r4, r5, r6, lr}
 800b24e:	0005      	movs	r5, r0
 800b250:	1e0c      	subs	r4, r1, #0
 800b252:	d010      	beq.n	800b276 <_free_r+0x2a>
 800b254:	3c04      	subs	r4, #4
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	da00      	bge.n	800b25e <_free_r+0x12>
 800b25c:	18e4      	adds	r4, r4, r3
 800b25e:	0028      	movs	r0, r5
 800b260:	f000 f8ea 	bl	800b438 <__malloc_lock>
 800b264:	4a1d      	ldr	r2, [pc, #116]	@ (800b2dc <_free_r+0x90>)
 800b266:	6813      	ldr	r3, [r2, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d105      	bne.n	800b278 <_free_r+0x2c>
 800b26c:	6063      	str	r3, [r4, #4]
 800b26e:	6014      	str	r4, [r2, #0]
 800b270:	0028      	movs	r0, r5
 800b272:	f000 f8e9 	bl	800b448 <__malloc_unlock>
 800b276:	bd70      	pop	{r4, r5, r6, pc}
 800b278:	42a3      	cmp	r3, r4
 800b27a:	d908      	bls.n	800b28e <_free_r+0x42>
 800b27c:	6820      	ldr	r0, [r4, #0]
 800b27e:	1821      	adds	r1, r4, r0
 800b280:	428b      	cmp	r3, r1
 800b282:	d1f3      	bne.n	800b26c <_free_r+0x20>
 800b284:	6819      	ldr	r1, [r3, #0]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	1809      	adds	r1, r1, r0
 800b28a:	6021      	str	r1, [r4, #0]
 800b28c:	e7ee      	b.n	800b26c <_free_r+0x20>
 800b28e:	001a      	movs	r2, r3
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <_free_r+0x4e>
 800b296:	42a3      	cmp	r3, r4
 800b298:	d9f9      	bls.n	800b28e <_free_r+0x42>
 800b29a:	6811      	ldr	r1, [r2, #0]
 800b29c:	1850      	adds	r0, r2, r1
 800b29e:	42a0      	cmp	r0, r4
 800b2a0:	d10b      	bne.n	800b2ba <_free_r+0x6e>
 800b2a2:	6820      	ldr	r0, [r4, #0]
 800b2a4:	1809      	adds	r1, r1, r0
 800b2a6:	1850      	adds	r0, r2, r1
 800b2a8:	6011      	str	r1, [r2, #0]
 800b2aa:	4283      	cmp	r3, r0
 800b2ac:	d1e0      	bne.n	800b270 <_free_r+0x24>
 800b2ae:	6818      	ldr	r0, [r3, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	1841      	adds	r1, r0, r1
 800b2b4:	6011      	str	r1, [r2, #0]
 800b2b6:	6053      	str	r3, [r2, #4]
 800b2b8:	e7da      	b.n	800b270 <_free_r+0x24>
 800b2ba:	42a0      	cmp	r0, r4
 800b2bc:	d902      	bls.n	800b2c4 <_free_r+0x78>
 800b2be:	230c      	movs	r3, #12
 800b2c0:	602b      	str	r3, [r5, #0]
 800b2c2:	e7d5      	b.n	800b270 <_free_r+0x24>
 800b2c4:	6820      	ldr	r0, [r4, #0]
 800b2c6:	1821      	adds	r1, r4, r0
 800b2c8:	428b      	cmp	r3, r1
 800b2ca:	d103      	bne.n	800b2d4 <_free_r+0x88>
 800b2cc:	6819      	ldr	r1, [r3, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	1809      	adds	r1, r1, r0
 800b2d2:	6021      	str	r1, [r4, #0]
 800b2d4:	6063      	str	r3, [r4, #4]
 800b2d6:	6054      	str	r4, [r2, #4]
 800b2d8:	e7ca      	b.n	800b270 <_free_r+0x24>
 800b2da:	46c0      	nop			@ (mov r8, r8)
 800b2dc:	2000072c 	.word	0x2000072c

0800b2e0 <malloc>:
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	4b03      	ldr	r3, [pc, #12]	@ (800b2f0 <malloc+0x10>)
 800b2e4:	0001      	movs	r1, r0
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	f000 f826 	bl	800b338 <_malloc_r>
 800b2ec:	bd10      	pop	{r4, pc}
 800b2ee:	46c0      	nop			@ (mov r8, r8)
 800b2f0:	20000024 	.word	0x20000024

0800b2f4 <sbrk_aligned>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	4e0f      	ldr	r6, [pc, #60]	@ (800b334 <sbrk_aligned+0x40>)
 800b2f8:	000d      	movs	r5, r1
 800b2fa:	6831      	ldr	r1, [r6, #0]
 800b2fc:	0004      	movs	r4, r0
 800b2fe:	2900      	cmp	r1, #0
 800b300:	d102      	bne.n	800b308 <sbrk_aligned+0x14>
 800b302:	f001 fa17 	bl	800c734 <_sbrk_r>
 800b306:	6030      	str	r0, [r6, #0]
 800b308:	0029      	movs	r1, r5
 800b30a:	0020      	movs	r0, r4
 800b30c:	f001 fa12 	bl	800c734 <_sbrk_r>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d103      	bne.n	800b31c <sbrk_aligned+0x28>
 800b314:	2501      	movs	r5, #1
 800b316:	426d      	negs	r5, r5
 800b318:	0028      	movs	r0, r5
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	2303      	movs	r3, #3
 800b31e:	1cc5      	adds	r5, r0, #3
 800b320:	439d      	bics	r5, r3
 800b322:	42a8      	cmp	r0, r5
 800b324:	d0f8      	beq.n	800b318 <sbrk_aligned+0x24>
 800b326:	1a29      	subs	r1, r5, r0
 800b328:	0020      	movs	r0, r4
 800b32a:	f001 fa03 	bl	800c734 <_sbrk_r>
 800b32e:	3001      	adds	r0, #1
 800b330:	d1f2      	bne.n	800b318 <sbrk_aligned+0x24>
 800b332:	e7ef      	b.n	800b314 <sbrk_aligned+0x20>
 800b334:	20000728 	.word	0x20000728

0800b338 <_malloc_r>:
 800b338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b33a:	2203      	movs	r2, #3
 800b33c:	1ccb      	adds	r3, r1, #3
 800b33e:	4393      	bics	r3, r2
 800b340:	3308      	adds	r3, #8
 800b342:	0005      	movs	r5, r0
 800b344:	001f      	movs	r7, r3
 800b346:	2b0c      	cmp	r3, #12
 800b348:	d234      	bcs.n	800b3b4 <_malloc_r+0x7c>
 800b34a:	270c      	movs	r7, #12
 800b34c:	42b9      	cmp	r1, r7
 800b34e:	d833      	bhi.n	800b3b8 <_malloc_r+0x80>
 800b350:	0028      	movs	r0, r5
 800b352:	f000 f871 	bl	800b438 <__malloc_lock>
 800b356:	4e37      	ldr	r6, [pc, #220]	@ (800b434 <_malloc_r+0xfc>)
 800b358:	6833      	ldr	r3, [r6, #0]
 800b35a:	001c      	movs	r4, r3
 800b35c:	2c00      	cmp	r4, #0
 800b35e:	d12f      	bne.n	800b3c0 <_malloc_r+0x88>
 800b360:	0039      	movs	r1, r7
 800b362:	0028      	movs	r0, r5
 800b364:	f7ff ffc6 	bl	800b2f4 <sbrk_aligned>
 800b368:	0004      	movs	r4, r0
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	d15f      	bne.n	800b42e <_malloc_r+0xf6>
 800b36e:	6834      	ldr	r4, [r6, #0]
 800b370:	9400      	str	r4, [sp, #0]
 800b372:	9b00      	ldr	r3, [sp, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d14a      	bne.n	800b40e <_malloc_r+0xd6>
 800b378:	2c00      	cmp	r4, #0
 800b37a:	d052      	beq.n	800b422 <_malloc_r+0xea>
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	0028      	movs	r0, r5
 800b380:	18e3      	adds	r3, r4, r3
 800b382:	9900      	ldr	r1, [sp, #0]
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	f001 f9d5 	bl	800c734 <_sbrk_r>
 800b38a:	9b01      	ldr	r3, [sp, #4]
 800b38c:	4283      	cmp	r3, r0
 800b38e:	d148      	bne.n	800b422 <_malloc_r+0xea>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	0028      	movs	r0, r5
 800b394:	1aff      	subs	r7, r7, r3
 800b396:	0039      	movs	r1, r7
 800b398:	f7ff ffac 	bl	800b2f4 <sbrk_aligned>
 800b39c:	3001      	adds	r0, #1
 800b39e:	d040      	beq.n	800b422 <_malloc_r+0xea>
 800b3a0:	6823      	ldr	r3, [r4, #0]
 800b3a2:	19db      	adds	r3, r3, r7
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	6833      	ldr	r3, [r6, #0]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	2a00      	cmp	r2, #0
 800b3ac:	d133      	bne.n	800b416 <_malloc_r+0xde>
 800b3ae:	9b00      	ldr	r3, [sp, #0]
 800b3b0:	6033      	str	r3, [r6, #0]
 800b3b2:	e019      	b.n	800b3e8 <_malloc_r+0xb0>
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dac9      	bge.n	800b34c <_malloc_r+0x14>
 800b3b8:	230c      	movs	r3, #12
 800b3ba:	602b      	str	r3, [r5, #0]
 800b3bc:	2000      	movs	r0, #0
 800b3be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3c0:	6821      	ldr	r1, [r4, #0]
 800b3c2:	1bc9      	subs	r1, r1, r7
 800b3c4:	d420      	bmi.n	800b408 <_malloc_r+0xd0>
 800b3c6:	290b      	cmp	r1, #11
 800b3c8:	d90a      	bls.n	800b3e0 <_malloc_r+0xa8>
 800b3ca:	19e2      	adds	r2, r4, r7
 800b3cc:	6027      	str	r7, [r4, #0]
 800b3ce:	42a3      	cmp	r3, r4
 800b3d0:	d104      	bne.n	800b3dc <_malloc_r+0xa4>
 800b3d2:	6032      	str	r2, [r6, #0]
 800b3d4:	6863      	ldr	r3, [r4, #4]
 800b3d6:	6011      	str	r1, [r2, #0]
 800b3d8:	6053      	str	r3, [r2, #4]
 800b3da:	e005      	b.n	800b3e8 <_malloc_r+0xb0>
 800b3dc:	605a      	str	r2, [r3, #4]
 800b3de:	e7f9      	b.n	800b3d4 <_malloc_r+0x9c>
 800b3e0:	6862      	ldr	r2, [r4, #4]
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	d10e      	bne.n	800b404 <_malloc_r+0xcc>
 800b3e6:	6032      	str	r2, [r6, #0]
 800b3e8:	0028      	movs	r0, r5
 800b3ea:	f000 f82d 	bl	800b448 <__malloc_unlock>
 800b3ee:	0020      	movs	r0, r4
 800b3f0:	2207      	movs	r2, #7
 800b3f2:	300b      	adds	r0, #11
 800b3f4:	1d23      	adds	r3, r4, #4
 800b3f6:	4390      	bics	r0, r2
 800b3f8:	1ac2      	subs	r2, r0, r3
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	d0df      	beq.n	800b3be <_malloc_r+0x86>
 800b3fe:	1a1b      	subs	r3, r3, r0
 800b400:	50a3      	str	r3, [r4, r2]
 800b402:	e7dc      	b.n	800b3be <_malloc_r+0x86>
 800b404:	605a      	str	r2, [r3, #4]
 800b406:	e7ef      	b.n	800b3e8 <_malloc_r+0xb0>
 800b408:	0023      	movs	r3, r4
 800b40a:	6864      	ldr	r4, [r4, #4]
 800b40c:	e7a6      	b.n	800b35c <_malloc_r+0x24>
 800b40e:	9c00      	ldr	r4, [sp, #0]
 800b410:	6863      	ldr	r3, [r4, #4]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	e7ad      	b.n	800b372 <_malloc_r+0x3a>
 800b416:	001a      	movs	r2, r3
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	d1fb      	bne.n	800b416 <_malloc_r+0xde>
 800b41e:	2300      	movs	r3, #0
 800b420:	e7da      	b.n	800b3d8 <_malloc_r+0xa0>
 800b422:	230c      	movs	r3, #12
 800b424:	0028      	movs	r0, r5
 800b426:	602b      	str	r3, [r5, #0]
 800b428:	f000 f80e 	bl	800b448 <__malloc_unlock>
 800b42c:	e7c6      	b.n	800b3bc <_malloc_r+0x84>
 800b42e:	6007      	str	r7, [r0, #0]
 800b430:	e7da      	b.n	800b3e8 <_malloc_r+0xb0>
 800b432:	46c0      	nop			@ (mov r8, r8)
 800b434:	2000072c 	.word	0x2000072c

0800b438 <__malloc_lock>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	4802      	ldr	r0, [pc, #8]	@ (800b444 <__malloc_lock+0xc>)
 800b43c:	f7ff f84f 	bl	800a4de <__retarget_lock_acquire_recursive>
 800b440:	bd10      	pop	{r4, pc}
 800b442:	46c0      	nop			@ (mov r8, r8)
 800b444:	20000724 	.word	0x20000724

0800b448 <__malloc_unlock>:
 800b448:	b510      	push	{r4, lr}
 800b44a:	4802      	ldr	r0, [pc, #8]	@ (800b454 <__malloc_unlock+0xc>)
 800b44c:	f7ff f848 	bl	800a4e0 <__retarget_lock_release_recursive>
 800b450:	bd10      	pop	{r4, pc}
 800b452:	46c0      	nop			@ (mov r8, r8)
 800b454:	20000724 	.word	0x20000724

0800b458 <_Balloc>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	69c5      	ldr	r5, [r0, #28]
 800b45c:	0006      	movs	r6, r0
 800b45e:	000c      	movs	r4, r1
 800b460:	2d00      	cmp	r5, #0
 800b462:	d10e      	bne.n	800b482 <_Balloc+0x2a>
 800b464:	2010      	movs	r0, #16
 800b466:	f7ff ff3b 	bl	800b2e0 <malloc>
 800b46a:	1e02      	subs	r2, r0, #0
 800b46c:	61f0      	str	r0, [r6, #28]
 800b46e:	d104      	bne.n	800b47a <_Balloc+0x22>
 800b470:	216b      	movs	r1, #107	@ 0x6b
 800b472:	4b19      	ldr	r3, [pc, #100]	@ (800b4d8 <_Balloc+0x80>)
 800b474:	4819      	ldr	r0, [pc, #100]	@ (800b4dc <_Balloc+0x84>)
 800b476:	f7ff f849 	bl	800a50c <__assert_func>
 800b47a:	6045      	str	r5, [r0, #4]
 800b47c:	6085      	str	r5, [r0, #8]
 800b47e:	6005      	str	r5, [r0, #0]
 800b480:	60c5      	str	r5, [r0, #12]
 800b482:	69f5      	ldr	r5, [r6, #28]
 800b484:	68eb      	ldr	r3, [r5, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d013      	beq.n	800b4b2 <_Balloc+0x5a>
 800b48a:	69f3      	ldr	r3, [r6, #28]
 800b48c:	00a2      	lsls	r2, r4, #2
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	189b      	adds	r3, r3, r2
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	2800      	cmp	r0, #0
 800b496:	d118      	bne.n	800b4ca <_Balloc+0x72>
 800b498:	2101      	movs	r1, #1
 800b49a:	000d      	movs	r5, r1
 800b49c:	40a5      	lsls	r5, r4
 800b49e:	1d6a      	adds	r2, r5, #5
 800b4a0:	0030      	movs	r0, r6
 800b4a2:	0092      	lsls	r2, r2, #2
 800b4a4:	f001 f95f 	bl	800c766 <_calloc_r>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d00c      	beq.n	800b4c6 <_Balloc+0x6e>
 800b4ac:	6044      	str	r4, [r0, #4]
 800b4ae:	6085      	str	r5, [r0, #8]
 800b4b0:	e00d      	b.n	800b4ce <_Balloc+0x76>
 800b4b2:	2221      	movs	r2, #33	@ 0x21
 800b4b4:	2104      	movs	r1, #4
 800b4b6:	0030      	movs	r0, r6
 800b4b8:	f001 f955 	bl	800c766 <_calloc_r>
 800b4bc:	69f3      	ldr	r3, [r6, #28]
 800b4be:	60e8      	str	r0, [r5, #12]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e1      	bne.n	800b48a <_Balloc+0x32>
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ca:	6802      	ldr	r2, [r0, #0]
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	6103      	str	r3, [r0, #16]
 800b4d2:	60c3      	str	r3, [r0, #12]
 800b4d4:	e7f8      	b.n	800b4c8 <_Balloc+0x70>
 800b4d6:	46c0      	nop			@ (mov r8, r8)
 800b4d8:	0800d396 	.word	0x0800d396
 800b4dc:	0800d4b9 	.word	0x0800d4b9

0800b4e0 <_Bfree>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	69c6      	ldr	r6, [r0, #28]
 800b4e4:	0005      	movs	r5, r0
 800b4e6:	000c      	movs	r4, r1
 800b4e8:	2e00      	cmp	r6, #0
 800b4ea:	d10e      	bne.n	800b50a <_Bfree+0x2a>
 800b4ec:	2010      	movs	r0, #16
 800b4ee:	f7ff fef7 	bl	800b2e0 <malloc>
 800b4f2:	1e02      	subs	r2, r0, #0
 800b4f4:	61e8      	str	r0, [r5, #28]
 800b4f6:	d104      	bne.n	800b502 <_Bfree+0x22>
 800b4f8:	218f      	movs	r1, #143	@ 0x8f
 800b4fa:	4b09      	ldr	r3, [pc, #36]	@ (800b520 <_Bfree+0x40>)
 800b4fc:	4809      	ldr	r0, [pc, #36]	@ (800b524 <_Bfree+0x44>)
 800b4fe:	f7ff f805 	bl	800a50c <__assert_func>
 800b502:	6046      	str	r6, [r0, #4]
 800b504:	6086      	str	r6, [r0, #8]
 800b506:	6006      	str	r6, [r0, #0]
 800b508:	60c6      	str	r6, [r0, #12]
 800b50a:	2c00      	cmp	r4, #0
 800b50c:	d007      	beq.n	800b51e <_Bfree+0x3e>
 800b50e:	69eb      	ldr	r3, [r5, #28]
 800b510:	6862      	ldr	r2, [r4, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	0092      	lsls	r2, r2, #2
 800b516:	189b      	adds	r3, r3, r2
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	6022      	str	r2, [r4, #0]
 800b51c:	601c      	str	r4, [r3, #0]
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
 800b520:	0800d396 	.word	0x0800d396
 800b524:	0800d4b9 	.word	0x0800d4b9

0800b528 <__multadd>:
 800b528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b52a:	000f      	movs	r7, r1
 800b52c:	9001      	str	r0, [sp, #4]
 800b52e:	000c      	movs	r4, r1
 800b530:	001e      	movs	r6, r3
 800b532:	2000      	movs	r0, #0
 800b534:	690d      	ldr	r5, [r1, #16]
 800b536:	3714      	adds	r7, #20
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	3001      	adds	r0, #1
 800b53c:	b299      	uxth	r1, r3
 800b53e:	4351      	muls	r1, r2
 800b540:	0c1b      	lsrs	r3, r3, #16
 800b542:	4353      	muls	r3, r2
 800b544:	1989      	adds	r1, r1, r6
 800b546:	0c0e      	lsrs	r6, r1, #16
 800b548:	199b      	adds	r3, r3, r6
 800b54a:	0c1e      	lsrs	r6, r3, #16
 800b54c:	b289      	uxth	r1, r1
 800b54e:	041b      	lsls	r3, r3, #16
 800b550:	185b      	adds	r3, r3, r1
 800b552:	c708      	stmia	r7!, {r3}
 800b554:	4285      	cmp	r5, r0
 800b556:	dcef      	bgt.n	800b538 <__multadd+0x10>
 800b558:	2e00      	cmp	r6, #0
 800b55a:	d022      	beq.n	800b5a2 <__multadd+0x7a>
 800b55c:	68a3      	ldr	r3, [r4, #8]
 800b55e:	42ab      	cmp	r3, r5
 800b560:	dc19      	bgt.n	800b596 <__multadd+0x6e>
 800b562:	6861      	ldr	r1, [r4, #4]
 800b564:	9801      	ldr	r0, [sp, #4]
 800b566:	3101      	adds	r1, #1
 800b568:	f7ff ff76 	bl	800b458 <_Balloc>
 800b56c:	1e07      	subs	r7, r0, #0
 800b56e:	d105      	bne.n	800b57c <__multadd+0x54>
 800b570:	003a      	movs	r2, r7
 800b572:	21ba      	movs	r1, #186	@ 0xba
 800b574:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a8 <__multadd+0x80>)
 800b576:	480d      	ldr	r0, [pc, #52]	@ (800b5ac <__multadd+0x84>)
 800b578:	f7fe ffc8 	bl	800a50c <__assert_func>
 800b57c:	0021      	movs	r1, r4
 800b57e:	6922      	ldr	r2, [r4, #16]
 800b580:	310c      	adds	r1, #12
 800b582:	3202      	adds	r2, #2
 800b584:	0092      	lsls	r2, r2, #2
 800b586:	300c      	adds	r0, #12
 800b588:	f7fe ffb6 	bl	800a4f8 <memcpy>
 800b58c:	0021      	movs	r1, r4
 800b58e:	9801      	ldr	r0, [sp, #4]
 800b590:	f7ff ffa6 	bl	800b4e0 <_Bfree>
 800b594:	003c      	movs	r4, r7
 800b596:	1d2b      	adds	r3, r5, #4
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	18e3      	adds	r3, r4, r3
 800b59c:	3501      	adds	r5, #1
 800b59e:	605e      	str	r6, [r3, #4]
 800b5a0:	6125      	str	r5, [r4, #16]
 800b5a2:	0020      	movs	r0, r4
 800b5a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5a6:	46c0      	nop			@ (mov r8, r8)
 800b5a8:	0800d4a8 	.word	0x0800d4a8
 800b5ac:	0800d4b9 	.word	0x0800d4b9

0800b5b0 <__hi0bits>:
 800b5b0:	2280      	movs	r2, #128	@ 0x80
 800b5b2:	0003      	movs	r3, r0
 800b5b4:	0252      	lsls	r2, r2, #9
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d201      	bcs.n	800b5c0 <__hi0bits+0x10>
 800b5bc:	041b      	lsls	r3, r3, #16
 800b5be:	3010      	adds	r0, #16
 800b5c0:	2280      	movs	r2, #128	@ 0x80
 800b5c2:	0452      	lsls	r2, r2, #17
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d201      	bcs.n	800b5cc <__hi0bits+0x1c>
 800b5c8:	3008      	adds	r0, #8
 800b5ca:	021b      	lsls	r3, r3, #8
 800b5cc:	2280      	movs	r2, #128	@ 0x80
 800b5ce:	0552      	lsls	r2, r2, #21
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d201      	bcs.n	800b5d8 <__hi0bits+0x28>
 800b5d4:	3004      	adds	r0, #4
 800b5d6:	011b      	lsls	r3, r3, #4
 800b5d8:	2280      	movs	r2, #128	@ 0x80
 800b5da:	05d2      	lsls	r2, r2, #23
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d201      	bcs.n	800b5e4 <__hi0bits+0x34>
 800b5e0:	3002      	adds	r0, #2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	db03      	blt.n	800b5f0 <__hi0bits+0x40>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	4213      	tst	r3, r2
 800b5ec:	d100      	bne.n	800b5f0 <__hi0bits+0x40>
 800b5ee:	2020      	movs	r0, #32
 800b5f0:	4770      	bx	lr

0800b5f2 <__lo0bits>:
 800b5f2:	6803      	ldr	r3, [r0, #0]
 800b5f4:	0001      	movs	r1, r0
 800b5f6:	2207      	movs	r2, #7
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	4010      	ands	r0, r2
 800b5fc:	4213      	tst	r3, r2
 800b5fe:	d00d      	beq.n	800b61c <__lo0bits+0x2a>
 800b600:	3a06      	subs	r2, #6
 800b602:	2000      	movs	r0, #0
 800b604:	4213      	tst	r3, r2
 800b606:	d105      	bne.n	800b614 <__lo0bits+0x22>
 800b608:	3002      	adds	r0, #2
 800b60a:	4203      	tst	r3, r0
 800b60c:	d003      	beq.n	800b616 <__lo0bits+0x24>
 800b60e:	40d3      	lsrs	r3, r2
 800b610:	0010      	movs	r0, r2
 800b612:	600b      	str	r3, [r1, #0]
 800b614:	4770      	bx	lr
 800b616:	089b      	lsrs	r3, r3, #2
 800b618:	600b      	str	r3, [r1, #0]
 800b61a:	e7fb      	b.n	800b614 <__lo0bits+0x22>
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	2a00      	cmp	r2, #0
 800b620:	d101      	bne.n	800b626 <__lo0bits+0x34>
 800b622:	2010      	movs	r0, #16
 800b624:	0c1b      	lsrs	r3, r3, #16
 800b626:	b2da      	uxtb	r2, r3
 800b628:	2a00      	cmp	r2, #0
 800b62a:	d101      	bne.n	800b630 <__lo0bits+0x3e>
 800b62c:	3008      	adds	r0, #8
 800b62e:	0a1b      	lsrs	r3, r3, #8
 800b630:	071a      	lsls	r2, r3, #28
 800b632:	d101      	bne.n	800b638 <__lo0bits+0x46>
 800b634:	3004      	adds	r0, #4
 800b636:	091b      	lsrs	r3, r3, #4
 800b638:	079a      	lsls	r2, r3, #30
 800b63a:	d101      	bne.n	800b640 <__lo0bits+0x4e>
 800b63c:	3002      	adds	r0, #2
 800b63e:	089b      	lsrs	r3, r3, #2
 800b640:	07da      	lsls	r2, r3, #31
 800b642:	d4e9      	bmi.n	800b618 <__lo0bits+0x26>
 800b644:	3001      	adds	r0, #1
 800b646:	085b      	lsrs	r3, r3, #1
 800b648:	d1e6      	bne.n	800b618 <__lo0bits+0x26>
 800b64a:	2020      	movs	r0, #32
 800b64c:	e7e2      	b.n	800b614 <__lo0bits+0x22>
	...

0800b650 <__i2b>:
 800b650:	b510      	push	{r4, lr}
 800b652:	000c      	movs	r4, r1
 800b654:	2101      	movs	r1, #1
 800b656:	f7ff feff 	bl	800b458 <_Balloc>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d107      	bne.n	800b66e <__i2b+0x1e>
 800b65e:	2146      	movs	r1, #70	@ 0x46
 800b660:	4c05      	ldr	r4, [pc, #20]	@ (800b678 <__i2b+0x28>)
 800b662:	0002      	movs	r2, r0
 800b664:	4b05      	ldr	r3, [pc, #20]	@ (800b67c <__i2b+0x2c>)
 800b666:	0020      	movs	r0, r4
 800b668:	31ff      	adds	r1, #255	@ 0xff
 800b66a:	f7fe ff4f 	bl	800a50c <__assert_func>
 800b66e:	2301      	movs	r3, #1
 800b670:	6144      	str	r4, [r0, #20]
 800b672:	6103      	str	r3, [r0, #16]
 800b674:	bd10      	pop	{r4, pc}
 800b676:	46c0      	nop			@ (mov r8, r8)
 800b678:	0800d4b9 	.word	0x0800d4b9
 800b67c:	0800d4a8 	.word	0x0800d4a8

0800b680 <__multiply>:
 800b680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b682:	0014      	movs	r4, r2
 800b684:	690a      	ldr	r2, [r1, #16]
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	000d      	movs	r5, r1
 800b68a:	b08b      	sub	sp, #44	@ 0x2c
 800b68c:	429a      	cmp	r2, r3
 800b68e:	db02      	blt.n	800b696 <__multiply+0x16>
 800b690:	0023      	movs	r3, r4
 800b692:	000c      	movs	r4, r1
 800b694:	001d      	movs	r5, r3
 800b696:	6927      	ldr	r7, [r4, #16]
 800b698:	692e      	ldr	r6, [r5, #16]
 800b69a:	6861      	ldr	r1, [r4, #4]
 800b69c:	19bb      	adds	r3, r7, r6
 800b69e:	9303      	str	r3, [sp, #12]
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	19ba      	adds	r2, r7, r6
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	da00      	bge.n	800b6aa <__multiply+0x2a>
 800b6a8:	3101      	adds	r1, #1
 800b6aa:	f7ff fed5 	bl	800b458 <_Balloc>
 800b6ae:	9002      	str	r0, [sp, #8]
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d106      	bne.n	800b6c2 <__multiply+0x42>
 800b6b4:	21b1      	movs	r1, #177	@ 0xb1
 800b6b6:	4b49      	ldr	r3, [pc, #292]	@ (800b7dc <__multiply+0x15c>)
 800b6b8:	4849      	ldr	r0, [pc, #292]	@ (800b7e0 <__multiply+0x160>)
 800b6ba:	9a02      	ldr	r2, [sp, #8]
 800b6bc:	0049      	lsls	r1, r1, #1
 800b6be:	f7fe ff25 	bl	800a50c <__assert_func>
 800b6c2:	9b02      	ldr	r3, [sp, #8]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	3314      	adds	r3, #20
 800b6c8:	469c      	mov	ip, r3
 800b6ca:	19bb      	adds	r3, r7, r6
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4463      	add	r3, ip
 800b6d0:	9304      	str	r3, [sp, #16]
 800b6d2:	4663      	mov	r3, ip
 800b6d4:	9904      	ldr	r1, [sp, #16]
 800b6d6:	428b      	cmp	r3, r1
 800b6d8:	d32a      	bcc.n	800b730 <__multiply+0xb0>
 800b6da:	0023      	movs	r3, r4
 800b6dc:	00bf      	lsls	r7, r7, #2
 800b6de:	3314      	adds	r3, #20
 800b6e0:	3514      	adds	r5, #20
 800b6e2:	9308      	str	r3, [sp, #32]
 800b6e4:	00b6      	lsls	r6, r6, #2
 800b6e6:	19db      	adds	r3, r3, r7
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	19ab      	adds	r3, r5, r6
 800b6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ee:	2304      	movs	r3, #4
 800b6f0:	9306      	str	r3, [sp, #24]
 800b6f2:	0023      	movs	r3, r4
 800b6f4:	9a05      	ldr	r2, [sp, #20]
 800b6f6:	3315      	adds	r3, #21
 800b6f8:	9501      	str	r5, [sp, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d305      	bcc.n	800b70a <__multiply+0x8a>
 800b6fe:	1b13      	subs	r3, r2, r4
 800b700:	3b15      	subs	r3, #21
 800b702:	089b      	lsrs	r3, r3, #2
 800b704:	3301      	adds	r3, #1
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	9306      	str	r3, [sp, #24]
 800b70a:	9b01      	ldr	r3, [sp, #4]
 800b70c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b70e:	4293      	cmp	r3, r2
 800b710:	d310      	bcc.n	800b734 <__multiply+0xb4>
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	dd05      	ble.n	800b724 <__multiply+0xa4>
 800b718:	9b04      	ldr	r3, [sp, #16]
 800b71a:	3b04      	subs	r3, #4
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d056      	beq.n	800b7d2 <__multiply+0x152>
 800b724:	9b02      	ldr	r3, [sp, #8]
 800b726:	9a03      	ldr	r2, [sp, #12]
 800b728:	0018      	movs	r0, r3
 800b72a:	611a      	str	r2, [r3, #16]
 800b72c:	b00b      	add	sp, #44	@ 0x2c
 800b72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b730:	c304      	stmia	r3!, {r2}
 800b732:	e7cf      	b.n	800b6d4 <__multiply+0x54>
 800b734:	9b01      	ldr	r3, [sp, #4]
 800b736:	6818      	ldr	r0, [r3, #0]
 800b738:	b280      	uxth	r0, r0
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d01e      	beq.n	800b77c <__multiply+0xfc>
 800b73e:	4667      	mov	r7, ip
 800b740:	2500      	movs	r5, #0
 800b742:	9e08      	ldr	r6, [sp, #32]
 800b744:	ce02      	ldmia	r6!, {r1}
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	9307      	str	r3, [sp, #28]
 800b74a:	b28b      	uxth	r3, r1
 800b74c:	4343      	muls	r3, r0
 800b74e:	001a      	movs	r2, r3
 800b750:	466b      	mov	r3, sp
 800b752:	0c09      	lsrs	r1, r1, #16
 800b754:	8b9b      	ldrh	r3, [r3, #28]
 800b756:	4341      	muls	r1, r0
 800b758:	18d3      	adds	r3, r2, r3
 800b75a:	9a07      	ldr	r2, [sp, #28]
 800b75c:	195b      	adds	r3, r3, r5
 800b75e:	0c12      	lsrs	r2, r2, #16
 800b760:	1889      	adds	r1, r1, r2
 800b762:	0c1a      	lsrs	r2, r3, #16
 800b764:	188a      	adds	r2, r1, r2
 800b766:	b29b      	uxth	r3, r3
 800b768:	0c15      	lsrs	r5, r2, #16
 800b76a:	0412      	lsls	r2, r2, #16
 800b76c:	431a      	orrs	r2, r3
 800b76e:	9b05      	ldr	r3, [sp, #20]
 800b770:	c704      	stmia	r7!, {r2}
 800b772:	42b3      	cmp	r3, r6
 800b774:	d8e6      	bhi.n	800b744 <__multiply+0xc4>
 800b776:	4663      	mov	r3, ip
 800b778:	9a06      	ldr	r2, [sp, #24]
 800b77a:	509d      	str	r5, [r3, r2]
 800b77c:	9b01      	ldr	r3, [sp, #4]
 800b77e:	6818      	ldr	r0, [r3, #0]
 800b780:	0c00      	lsrs	r0, r0, #16
 800b782:	d020      	beq.n	800b7c6 <__multiply+0x146>
 800b784:	4663      	mov	r3, ip
 800b786:	0025      	movs	r5, r4
 800b788:	4661      	mov	r1, ip
 800b78a:	2700      	movs	r7, #0
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	3514      	adds	r5, #20
 800b790:	682a      	ldr	r2, [r5, #0]
 800b792:	680e      	ldr	r6, [r1, #0]
 800b794:	b292      	uxth	r2, r2
 800b796:	4342      	muls	r2, r0
 800b798:	0c36      	lsrs	r6, r6, #16
 800b79a:	1992      	adds	r2, r2, r6
 800b79c:	19d2      	adds	r2, r2, r7
 800b79e:	0416      	lsls	r6, r2, #16
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	431e      	orrs	r6, r3
 800b7a4:	600e      	str	r6, [r1, #0]
 800b7a6:	cd40      	ldmia	r5!, {r6}
 800b7a8:	684b      	ldr	r3, [r1, #4]
 800b7aa:	0c36      	lsrs	r6, r6, #16
 800b7ac:	4346      	muls	r6, r0
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	0c12      	lsrs	r2, r2, #16
 800b7b2:	18f3      	adds	r3, r6, r3
 800b7b4:	189b      	adds	r3, r3, r2
 800b7b6:	9a05      	ldr	r2, [sp, #20]
 800b7b8:	0c1f      	lsrs	r7, r3, #16
 800b7ba:	3104      	adds	r1, #4
 800b7bc:	42aa      	cmp	r2, r5
 800b7be:	d8e7      	bhi.n	800b790 <__multiply+0x110>
 800b7c0:	4662      	mov	r2, ip
 800b7c2:	9906      	ldr	r1, [sp, #24]
 800b7c4:	5053      	str	r3, [r2, r1]
 800b7c6:	9b01      	ldr	r3, [sp, #4]
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	9301      	str	r3, [sp, #4]
 800b7cc:	2304      	movs	r3, #4
 800b7ce:	449c      	add	ip, r3
 800b7d0:	e79b      	b.n	800b70a <__multiply+0x8a>
 800b7d2:	9b03      	ldr	r3, [sp, #12]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	9303      	str	r3, [sp, #12]
 800b7d8:	e79b      	b.n	800b712 <__multiply+0x92>
 800b7da:	46c0      	nop			@ (mov r8, r8)
 800b7dc:	0800d4a8 	.word	0x0800d4a8
 800b7e0:	0800d4b9 	.word	0x0800d4b9

0800b7e4 <__pow5mult>:
 800b7e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	0015      	movs	r5, r2
 800b7ea:	0007      	movs	r7, r0
 800b7ec:	000e      	movs	r6, r1
 800b7ee:	401a      	ands	r2, r3
 800b7f0:	421d      	tst	r5, r3
 800b7f2:	d008      	beq.n	800b806 <__pow5mult+0x22>
 800b7f4:	4925      	ldr	r1, [pc, #148]	@ (800b88c <__pow5mult+0xa8>)
 800b7f6:	3a01      	subs	r2, #1
 800b7f8:	0092      	lsls	r2, r2, #2
 800b7fa:	5852      	ldr	r2, [r2, r1]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	0031      	movs	r1, r6
 800b800:	f7ff fe92 	bl	800b528 <__multadd>
 800b804:	0006      	movs	r6, r0
 800b806:	10ad      	asrs	r5, r5, #2
 800b808:	d03d      	beq.n	800b886 <__pow5mult+0xa2>
 800b80a:	69fc      	ldr	r4, [r7, #28]
 800b80c:	2c00      	cmp	r4, #0
 800b80e:	d10f      	bne.n	800b830 <__pow5mult+0x4c>
 800b810:	2010      	movs	r0, #16
 800b812:	f7ff fd65 	bl	800b2e0 <malloc>
 800b816:	1e02      	subs	r2, r0, #0
 800b818:	61f8      	str	r0, [r7, #28]
 800b81a:	d105      	bne.n	800b828 <__pow5mult+0x44>
 800b81c:	21b4      	movs	r1, #180	@ 0xb4
 800b81e:	4b1c      	ldr	r3, [pc, #112]	@ (800b890 <__pow5mult+0xac>)
 800b820:	481c      	ldr	r0, [pc, #112]	@ (800b894 <__pow5mult+0xb0>)
 800b822:	31ff      	adds	r1, #255	@ 0xff
 800b824:	f7fe fe72 	bl	800a50c <__assert_func>
 800b828:	6044      	str	r4, [r0, #4]
 800b82a:	6084      	str	r4, [r0, #8]
 800b82c:	6004      	str	r4, [r0, #0]
 800b82e:	60c4      	str	r4, [r0, #12]
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	689c      	ldr	r4, [r3, #8]
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	2c00      	cmp	r4, #0
 800b838:	d108      	bne.n	800b84c <__pow5mult+0x68>
 800b83a:	0038      	movs	r0, r7
 800b83c:	4916      	ldr	r1, [pc, #88]	@ (800b898 <__pow5mult+0xb4>)
 800b83e:	f7ff ff07 	bl	800b650 <__i2b>
 800b842:	9b01      	ldr	r3, [sp, #4]
 800b844:	0004      	movs	r4, r0
 800b846:	6098      	str	r0, [r3, #8]
 800b848:	2300      	movs	r3, #0
 800b84a:	6003      	str	r3, [r0, #0]
 800b84c:	2301      	movs	r3, #1
 800b84e:	421d      	tst	r5, r3
 800b850:	d00a      	beq.n	800b868 <__pow5mult+0x84>
 800b852:	0031      	movs	r1, r6
 800b854:	0022      	movs	r2, r4
 800b856:	0038      	movs	r0, r7
 800b858:	f7ff ff12 	bl	800b680 <__multiply>
 800b85c:	0031      	movs	r1, r6
 800b85e:	9001      	str	r0, [sp, #4]
 800b860:	0038      	movs	r0, r7
 800b862:	f7ff fe3d 	bl	800b4e0 <_Bfree>
 800b866:	9e01      	ldr	r6, [sp, #4]
 800b868:	106d      	asrs	r5, r5, #1
 800b86a:	d00c      	beq.n	800b886 <__pow5mult+0xa2>
 800b86c:	6820      	ldr	r0, [r4, #0]
 800b86e:	2800      	cmp	r0, #0
 800b870:	d107      	bne.n	800b882 <__pow5mult+0x9e>
 800b872:	0022      	movs	r2, r4
 800b874:	0021      	movs	r1, r4
 800b876:	0038      	movs	r0, r7
 800b878:	f7ff ff02 	bl	800b680 <__multiply>
 800b87c:	2300      	movs	r3, #0
 800b87e:	6020      	str	r0, [r4, #0]
 800b880:	6003      	str	r3, [r0, #0]
 800b882:	0004      	movs	r4, r0
 800b884:	e7e2      	b.n	800b84c <__pow5mult+0x68>
 800b886:	0030      	movs	r0, r6
 800b888:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b88a:	46c0      	nop			@ (mov r8, r8)
 800b88c:	0800d514 	.word	0x0800d514
 800b890:	0800d396 	.word	0x0800d396
 800b894:	0800d4b9 	.word	0x0800d4b9
 800b898:	00000271 	.word	0x00000271

0800b89c <__lshift>:
 800b89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b89e:	000c      	movs	r4, r1
 800b8a0:	0016      	movs	r6, r2
 800b8a2:	6923      	ldr	r3, [r4, #16]
 800b8a4:	1157      	asrs	r7, r2, #5
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	18fb      	adds	r3, r7, r3
 800b8aa:	9301      	str	r3, [sp, #4]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	6849      	ldr	r1, [r1, #4]
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	9002      	str	r0, [sp, #8]
 800b8b6:	9a00      	ldr	r2, [sp, #0]
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	db10      	blt.n	800b8de <__lshift+0x42>
 800b8bc:	9802      	ldr	r0, [sp, #8]
 800b8be:	f7ff fdcb 	bl	800b458 <_Balloc>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	0001      	movs	r1, r0
 800b8c6:	0005      	movs	r5, r0
 800b8c8:	001a      	movs	r2, r3
 800b8ca:	3114      	adds	r1, #20
 800b8cc:	4298      	cmp	r0, r3
 800b8ce:	d10c      	bne.n	800b8ea <__lshift+0x4e>
 800b8d0:	21ef      	movs	r1, #239	@ 0xef
 800b8d2:	002a      	movs	r2, r5
 800b8d4:	4b25      	ldr	r3, [pc, #148]	@ (800b96c <__lshift+0xd0>)
 800b8d6:	4826      	ldr	r0, [pc, #152]	@ (800b970 <__lshift+0xd4>)
 800b8d8:	0049      	lsls	r1, r1, #1
 800b8da:	f7fe fe17 	bl	800a50c <__assert_func>
 800b8de:	3101      	adds	r1, #1
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	e7e8      	b.n	800b8b6 <__lshift+0x1a>
 800b8e4:	0098      	lsls	r0, r3, #2
 800b8e6:	500a      	str	r2, [r1, r0]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	42bb      	cmp	r3, r7
 800b8ec:	dbfa      	blt.n	800b8e4 <__lshift+0x48>
 800b8ee:	43fb      	mvns	r3, r7
 800b8f0:	17db      	asrs	r3, r3, #31
 800b8f2:	401f      	ands	r7, r3
 800b8f4:	00bf      	lsls	r7, r7, #2
 800b8f6:	0023      	movs	r3, r4
 800b8f8:	201f      	movs	r0, #31
 800b8fa:	19c9      	adds	r1, r1, r7
 800b8fc:	0037      	movs	r7, r6
 800b8fe:	6922      	ldr	r2, [r4, #16]
 800b900:	3314      	adds	r3, #20
 800b902:	0092      	lsls	r2, r2, #2
 800b904:	189a      	adds	r2, r3, r2
 800b906:	4007      	ands	r7, r0
 800b908:	4206      	tst	r6, r0
 800b90a:	d029      	beq.n	800b960 <__lshift+0xc4>
 800b90c:	3001      	adds	r0, #1
 800b90e:	1bc0      	subs	r0, r0, r7
 800b910:	9003      	str	r0, [sp, #12]
 800b912:	468c      	mov	ip, r1
 800b914:	2000      	movs	r0, #0
 800b916:	681e      	ldr	r6, [r3, #0]
 800b918:	40be      	lsls	r6, r7
 800b91a:	4306      	orrs	r6, r0
 800b91c:	4660      	mov	r0, ip
 800b91e:	c040      	stmia	r0!, {r6}
 800b920:	4684      	mov	ip, r0
 800b922:	9e03      	ldr	r6, [sp, #12]
 800b924:	cb01      	ldmia	r3!, {r0}
 800b926:	40f0      	lsrs	r0, r6
 800b928:	429a      	cmp	r2, r3
 800b92a:	d8f4      	bhi.n	800b916 <__lshift+0x7a>
 800b92c:	0026      	movs	r6, r4
 800b92e:	3615      	adds	r6, #21
 800b930:	2304      	movs	r3, #4
 800b932:	42b2      	cmp	r2, r6
 800b934:	d304      	bcc.n	800b940 <__lshift+0xa4>
 800b936:	1b13      	subs	r3, r2, r4
 800b938:	3b15      	subs	r3, #21
 800b93a:	089b      	lsrs	r3, r3, #2
 800b93c:	3301      	adds	r3, #1
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	50c8      	str	r0, [r1, r3]
 800b942:	2800      	cmp	r0, #0
 800b944:	d002      	beq.n	800b94c <__lshift+0xb0>
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	3302      	adds	r3, #2
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	9b00      	ldr	r3, [sp, #0]
 800b94e:	9802      	ldr	r0, [sp, #8]
 800b950:	3b01      	subs	r3, #1
 800b952:	0021      	movs	r1, r4
 800b954:	612b      	str	r3, [r5, #16]
 800b956:	f7ff fdc3 	bl	800b4e0 <_Bfree>
 800b95a:	0028      	movs	r0, r5
 800b95c:	b005      	add	sp, #20
 800b95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b960:	cb01      	ldmia	r3!, {r0}
 800b962:	c101      	stmia	r1!, {r0}
 800b964:	429a      	cmp	r2, r3
 800b966:	d8fb      	bhi.n	800b960 <__lshift+0xc4>
 800b968:	e7f0      	b.n	800b94c <__lshift+0xb0>
 800b96a:	46c0      	nop			@ (mov r8, r8)
 800b96c:	0800d4a8 	.word	0x0800d4a8
 800b970:	0800d4b9 	.word	0x0800d4b9

0800b974 <__mcmp>:
 800b974:	b530      	push	{r4, r5, lr}
 800b976:	690b      	ldr	r3, [r1, #16]
 800b978:	6904      	ldr	r4, [r0, #16]
 800b97a:	0002      	movs	r2, r0
 800b97c:	1ae0      	subs	r0, r4, r3
 800b97e:	429c      	cmp	r4, r3
 800b980:	d10f      	bne.n	800b9a2 <__mcmp+0x2e>
 800b982:	3214      	adds	r2, #20
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	3114      	adds	r1, #20
 800b988:	0014      	movs	r4, r2
 800b98a:	18c9      	adds	r1, r1, r3
 800b98c:	18d2      	adds	r2, r2, r3
 800b98e:	3a04      	subs	r2, #4
 800b990:	3904      	subs	r1, #4
 800b992:	6815      	ldr	r5, [r2, #0]
 800b994:	680b      	ldr	r3, [r1, #0]
 800b996:	429d      	cmp	r5, r3
 800b998:	d004      	beq.n	800b9a4 <__mcmp+0x30>
 800b99a:	2001      	movs	r0, #1
 800b99c:	429d      	cmp	r5, r3
 800b99e:	d200      	bcs.n	800b9a2 <__mcmp+0x2e>
 800b9a0:	3802      	subs	r0, #2
 800b9a2:	bd30      	pop	{r4, r5, pc}
 800b9a4:	4294      	cmp	r4, r2
 800b9a6:	d3f2      	bcc.n	800b98e <__mcmp+0x1a>
 800b9a8:	e7fb      	b.n	800b9a2 <__mcmp+0x2e>
	...

0800b9ac <__mdiff>:
 800b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ae:	000c      	movs	r4, r1
 800b9b0:	b087      	sub	sp, #28
 800b9b2:	9000      	str	r0, [sp, #0]
 800b9b4:	0011      	movs	r1, r2
 800b9b6:	0020      	movs	r0, r4
 800b9b8:	0017      	movs	r7, r2
 800b9ba:	f7ff ffdb 	bl	800b974 <__mcmp>
 800b9be:	1e05      	subs	r5, r0, #0
 800b9c0:	d110      	bne.n	800b9e4 <__mdiff+0x38>
 800b9c2:	0001      	movs	r1, r0
 800b9c4:	9800      	ldr	r0, [sp, #0]
 800b9c6:	f7ff fd47 	bl	800b458 <_Balloc>
 800b9ca:	1e02      	subs	r2, r0, #0
 800b9cc:	d104      	bne.n	800b9d8 <__mdiff+0x2c>
 800b9ce:	4b40      	ldr	r3, [pc, #256]	@ (800bad0 <__mdiff+0x124>)
 800b9d0:	4840      	ldr	r0, [pc, #256]	@ (800bad4 <__mdiff+0x128>)
 800b9d2:	4941      	ldr	r1, [pc, #260]	@ (800bad8 <__mdiff+0x12c>)
 800b9d4:	f7fe fd9a 	bl	800a50c <__assert_func>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	6145      	str	r5, [r0, #20]
 800b9dc:	6103      	str	r3, [r0, #16]
 800b9de:	0010      	movs	r0, r2
 800b9e0:	b007      	add	sp, #28
 800b9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e4:	2600      	movs	r6, #0
 800b9e6:	42b0      	cmp	r0, r6
 800b9e8:	da03      	bge.n	800b9f2 <__mdiff+0x46>
 800b9ea:	0023      	movs	r3, r4
 800b9ec:	003c      	movs	r4, r7
 800b9ee:	001f      	movs	r7, r3
 800b9f0:	3601      	adds	r6, #1
 800b9f2:	6861      	ldr	r1, [r4, #4]
 800b9f4:	9800      	ldr	r0, [sp, #0]
 800b9f6:	f7ff fd2f 	bl	800b458 <_Balloc>
 800b9fa:	1e02      	subs	r2, r0, #0
 800b9fc:	d103      	bne.n	800ba06 <__mdiff+0x5a>
 800b9fe:	4b34      	ldr	r3, [pc, #208]	@ (800bad0 <__mdiff+0x124>)
 800ba00:	4834      	ldr	r0, [pc, #208]	@ (800bad4 <__mdiff+0x128>)
 800ba02:	4936      	ldr	r1, [pc, #216]	@ (800badc <__mdiff+0x130>)
 800ba04:	e7e6      	b.n	800b9d4 <__mdiff+0x28>
 800ba06:	6923      	ldr	r3, [r4, #16]
 800ba08:	3414      	adds	r4, #20
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	18e3      	adds	r3, r4, r3
 800ba10:	0021      	movs	r1, r4
 800ba12:	9401      	str	r4, [sp, #4]
 800ba14:	003c      	movs	r4, r7
 800ba16:	9302      	str	r3, [sp, #8]
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	3414      	adds	r4, #20
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	18e3      	adds	r3, r4, r3
 800ba20:	9303      	str	r3, [sp, #12]
 800ba22:	0003      	movs	r3, r0
 800ba24:	60c6      	str	r6, [r0, #12]
 800ba26:	468c      	mov	ip, r1
 800ba28:	2000      	movs	r0, #0
 800ba2a:	3314      	adds	r3, #20
 800ba2c:	9304      	str	r3, [sp, #16]
 800ba2e:	9305      	str	r3, [sp, #20]
 800ba30:	4663      	mov	r3, ip
 800ba32:	cb20      	ldmia	r3!, {r5}
 800ba34:	b2a9      	uxth	r1, r5
 800ba36:	000e      	movs	r6, r1
 800ba38:	469c      	mov	ip, r3
 800ba3a:	cc08      	ldmia	r4!, {r3}
 800ba3c:	0c2d      	lsrs	r5, r5, #16
 800ba3e:	b299      	uxth	r1, r3
 800ba40:	1a71      	subs	r1, r6, r1
 800ba42:	1809      	adds	r1, r1, r0
 800ba44:	0c1b      	lsrs	r3, r3, #16
 800ba46:	1408      	asrs	r0, r1, #16
 800ba48:	1aeb      	subs	r3, r5, r3
 800ba4a:	181b      	adds	r3, r3, r0
 800ba4c:	1418      	asrs	r0, r3, #16
 800ba4e:	b289      	uxth	r1, r1
 800ba50:	041b      	lsls	r3, r3, #16
 800ba52:	4319      	orrs	r1, r3
 800ba54:	9b05      	ldr	r3, [sp, #20]
 800ba56:	c302      	stmia	r3!, {r1}
 800ba58:	9305      	str	r3, [sp, #20]
 800ba5a:	9b03      	ldr	r3, [sp, #12]
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	d8e7      	bhi.n	800ba30 <__mdiff+0x84>
 800ba60:	0039      	movs	r1, r7
 800ba62:	9c03      	ldr	r4, [sp, #12]
 800ba64:	3115      	adds	r1, #21
 800ba66:	2304      	movs	r3, #4
 800ba68:	428c      	cmp	r4, r1
 800ba6a:	d304      	bcc.n	800ba76 <__mdiff+0xca>
 800ba6c:	1be3      	subs	r3, r4, r7
 800ba6e:	3b15      	subs	r3, #21
 800ba70:	089b      	lsrs	r3, r3, #2
 800ba72:	3301      	adds	r3, #1
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	9901      	ldr	r1, [sp, #4]
 800ba78:	18cd      	adds	r5, r1, r3
 800ba7a:	9904      	ldr	r1, [sp, #16]
 800ba7c:	002e      	movs	r6, r5
 800ba7e:	18cb      	adds	r3, r1, r3
 800ba80:	001f      	movs	r7, r3
 800ba82:	9902      	ldr	r1, [sp, #8]
 800ba84:	428e      	cmp	r6, r1
 800ba86:	d311      	bcc.n	800baac <__mdiff+0x100>
 800ba88:	9c02      	ldr	r4, [sp, #8]
 800ba8a:	1ee9      	subs	r1, r5, #3
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	428c      	cmp	r4, r1
 800ba90:	d304      	bcc.n	800ba9c <__mdiff+0xf0>
 800ba92:	0021      	movs	r1, r4
 800ba94:	3103      	adds	r1, #3
 800ba96:	1b49      	subs	r1, r1, r5
 800ba98:	0889      	lsrs	r1, r1, #2
 800ba9a:	0088      	lsls	r0, r1, #2
 800ba9c:	181b      	adds	r3, r3, r0
 800ba9e:	3b04      	subs	r3, #4
 800baa0:	6819      	ldr	r1, [r3, #0]
 800baa2:	2900      	cmp	r1, #0
 800baa4:	d010      	beq.n	800bac8 <__mdiff+0x11c>
 800baa6:	9b00      	ldr	r3, [sp, #0]
 800baa8:	6113      	str	r3, [r2, #16]
 800baaa:	e798      	b.n	800b9de <__mdiff+0x32>
 800baac:	4684      	mov	ip, r0
 800baae:	ce02      	ldmia	r6!, {r1}
 800bab0:	b288      	uxth	r0, r1
 800bab2:	4460      	add	r0, ip
 800bab4:	1400      	asrs	r0, r0, #16
 800bab6:	0c0c      	lsrs	r4, r1, #16
 800bab8:	1904      	adds	r4, r0, r4
 800baba:	4461      	add	r1, ip
 800babc:	1420      	asrs	r0, r4, #16
 800babe:	b289      	uxth	r1, r1
 800bac0:	0424      	lsls	r4, r4, #16
 800bac2:	4321      	orrs	r1, r4
 800bac4:	c702      	stmia	r7!, {r1}
 800bac6:	e7dc      	b.n	800ba82 <__mdiff+0xd6>
 800bac8:	9900      	ldr	r1, [sp, #0]
 800baca:	3901      	subs	r1, #1
 800bacc:	9100      	str	r1, [sp, #0]
 800bace:	e7e6      	b.n	800ba9e <__mdiff+0xf2>
 800bad0:	0800d4a8 	.word	0x0800d4a8
 800bad4:	0800d4b9 	.word	0x0800d4b9
 800bad8:	00000237 	.word	0x00000237
 800badc:	00000245 	.word	0x00000245

0800bae0 <__d2b>:
 800bae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bae2:	2101      	movs	r1, #1
 800bae4:	0016      	movs	r6, r2
 800bae6:	001f      	movs	r7, r3
 800bae8:	f7ff fcb6 	bl	800b458 <_Balloc>
 800baec:	1e04      	subs	r4, r0, #0
 800baee:	d105      	bne.n	800bafc <__d2b+0x1c>
 800baf0:	0022      	movs	r2, r4
 800baf2:	4b25      	ldr	r3, [pc, #148]	@ (800bb88 <__d2b+0xa8>)
 800baf4:	4825      	ldr	r0, [pc, #148]	@ (800bb8c <__d2b+0xac>)
 800baf6:	4926      	ldr	r1, [pc, #152]	@ (800bb90 <__d2b+0xb0>)
 800baf8:	f7fe fd08 	bl	800a50c <__assert_func>
 800bafc:	033b      	lsls	r3, r7, #12
 800bafe:	007d      	lsls	r5, r7, #1
 800bb00:	0b1b      	lsrs	r3, r3, #12
 800bb02:	0d6d      	lsrs	r5, r5, #21
 800bb04:	d002      	beq.n	800bb0c <__d2b+0x2c>
 800bb06:	2280      	movs	r2, #128	@ 0x80
 800bb08:	0352      	lsls	r2, r2, #13
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	9301      	str	r3, [sp, #4]
 800bb0e:	2e00      	cmp	r6, #0
 800bb10:	d025      	beq.n	800bb5e <__d2b+0x7e>
 800bb12:	4668      	mov	r0, sp
 800bb14:	9600      	str	r6, [sp, #0]
 800bb16:	f7ff fd6c 	bl	800b5f2 <__lo0bits>
 800bb1a:	9b01      	ldr	r3, [sp, #4]
 800bb1c:	9900      	ldr	r1, [sp, #0]
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d01b      	beq.n	800bb5a <__d2b+0x7a>
 800bb22:	2220      	movs	r2, #32
 800bb24:	001e      	movs	r6, r3
 800bb26:	1a12      	subs	r2, r2, r0
 800bb28:	4096      	lsls	r6, r2
 800bb2a:	0032      	movs	r2, r6
 800bb2c:	40c3      	lsrs	r3, r0
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	6162      	str	r2, [r4, #20]
 800bb32:	9301      	str	r3, [sp, #4]
 800bb34:	9e01      	ldr	r6, [sp, #4]
 800bb36:	61a6      	str	r6, [r4, #24]
 800bb38:	1e73      	subs	r3, r6, #1
 800bb3a:	419e      	sbcs	r6, r3
 800bb3c:	3601      	adds	r6, #1
 800bb3e:	6126      	str	r6, [r4, #16]
 800bb40:	2d00      	cmp	r5, #0
 800bb42:	d014      	beq.n	800bb6e <__d2b+0x8e>
 800bb44:	2635      	movs	r6, #53	@ 0x35
 800bb46:	4b13      	ldr	r3, [pc, #76]	@ (800bb94 <__d2b+0xb4>)
 800bb48:	18ed      	adds	r5, r5, r3
 800bb4a:	9b08      	ldr	r3, [sp, #32]
 800bb4c:	182d      	adds	r5, r5, r0
 800bb4e:	601d      	str	r5, [r3, #0]
 800bb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb52:	1a36      	subs	r6, r6, r0
 800bb54:	601e      	str	r6, [r3, #0]
 800bb56:	0020      	movs	r0, r4
 800bb58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb5a:	6161      	str	r1, [r4, #20]
 800bb5c:	e7ea      	b.n	800bb34 <__d2b+0x54>
 800bb5e:	a801      	add	r0, sp, #4
 800bb60:	f7ff fd47 	bl	800b5f2 <__lo0bits>
 800bb64:	9b01      	ldr	r3, [sp, #4]
 800bb66:	2601      	movs	r6, #1
 800bb68:	6163      	str	r3, [r4, #20]
 800bb6a:	3020      	adds	r0, #32
 800bb6c:	e7e7      	b.n	800bb3e <__d2b+0x5e>
 800bb6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb98 <__d2b+0xb8>)
 800bb70:	18c0      	adds	r0, r0, r3
 800bb72:	9b08      	ldr	r3, [sp, #32]
 800bb74:	6018      	str	r0, [r3, #0]
 800bb76:	4b09      	ldr	r3, [pc, #36]	@ (800bb9c <__d2b+0xbc>)
 800bb78:	18f3      	adds	r3, r6, r3
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	18e3      	adds	r3, r4, r3
 800bb7e:	6958      	ldr	r0, [r3, #20]
 800bb80:	f7ff fd16 	bl	800b5b0 <__hi0bits>
 800bb84:	0176      	lsls	r6, r6, #5
 800bb86:	e7e3      	b.n	800bb50 <__d2b+0x70>
 800bb88:	0800d4a8 	.word	0x0800d4a8
 800bb8c:	0800d4b9 	.word	0x0800d4b9
 800bb90:	0000030f 	.word	0x0000030f
 800bb94:	fffffbcd 	.word	0xfffffbcd
 800bb98:	fffffbce 	.word	0xfffffbce
 800bb9c:	3fffffff 	.word	0x3fffffff

0800bba0 <__ssputs_r>:
 800bba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bba2:	688e      	ldr	r6, [r1, #8]
 800bba4:	b085      	sub	sp, #20
 800bba6:	001f      	movs	r7, r3
 800bba8:	000c      	movs	r4, r1
 800bbaa:	680b      	ldr	r3, [r1, #0]
 800bbac:	9002      	str	r0, [sp, #8]
 800bbae:	9203      	str	r2, [sp, #12]
 800bbb0:	42be      	cmp	r6, r7
 800bbb2:	d830      	bhi.n	800bc16 <__ssputs_r+0x76>
 800bbb4:	210c      	movs	r1, #12
 800bbb6:	5e62      	ldrsh	r2, [r4, r1]
 800bbb8:	2190      	movs	r1, #144	@ 0x90
 800bbba:	00c9      	lsls	r1, r1, #3
 800bbbc:	420a      	tst	r2, r1
 800bbbe:	d028      	beq.n	800bc12 <__ssputs_r+0x72>
 800bbc0:	2003      	movs	r0, #3
 800bbc2:	6921      	ldr	r1, [r4, #16]
 800bbc4:	1a5b      	subs	r3, r3, r1
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	6963      	ldr	r3, [r4, #20]
 800bbca:	4343      	muls	r3, r0
 800bbcc:	9801      	ldr	r0, [sp, #4]
 800bbce:	0fdd      	lsrs	r5, r3, #31
 800bbd0:	18ed      	adds	r5, r5, r3
 800bbd2:	1c7b      	adds	r3, r7, #1
 800bbd4:	181b      	adds	r3, r3, r0
 800bbd6:	106d      	asrs	r5, r5, #1
 800bbd8:	42ab      	cmp	r3, r5
 800bbda:	d900      	bls.n	800bbde <__ssputs_r+0x3e>
 800bbdc:	001d      	movs	r5, r3
 800bbde:	0552      	lsls	r2, r2, #21
 800bbe0:	d528      	bpl.n	800bc34 <__ssputs_r+0x94>
 800bbe2:	0029      	movs	r1, r5
 800bbe4:	9802      	ldr	r0, [sp, #8]
 800bbe6:	f7ff fba7 	bl	800b338 <_malloc_r>
 800bbea:	1e06      	subs	r6, r0, #0
 800bbec:	d02c      	beq.n	800bc48 <__ssputs_r+0xa8>
 800bbee:	9a01      	ldr	r2, [sp, #4]
 800bbf0:	6921      	ldr	r1, [r4, #16]
 800bbf2:	f7fe fc81 	bl	800a4f8 <memcpy>
 800bbf6:	89a2      	ldrh	r2, [r4, #12]
 800bbf8:	4b18      	ldr	r3, [pc, #96]	@ (800bc5c <__ssputs_r+0xbc>)
 800bbfa:	401a      	ands	r2, r3
 800bbfc:	2380      	movs	r3, #128	@ 0x80
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	9b01      	ldr	r3, [sp, #4]
 800bc04:	6126      	str	r6, [r4, #16]
 800bc06:	18f6      	adds	r6, r6, r3
 800bc08:	6026      	str	r6, [r4, #0]
 800bc0a:	003e      	movs	r6, r7
 800bc0c:	6165      	str	r5, [r4, #20]
 800bc0e:	1aed      	subs	r5, r5, r3
 800bc10:	60a5      	str	r5, [r4, #8]
 800bc12:	42be      	cmp	r6, r7
 800bc14:	d900      	bls.n	800bc18 <__ssputs_r+0x78>
 800bc16:	003e      	movs	r6, r7
 800bc18:	0032      	movs	r2, r6
 800bc1a:	9903      	ldr	r1, [sp, #12]
 800bc1c:	6820      	ldr	r0, [r4, #0]
 800bc1e:	f000 fd75 	bl	800c70c <memmove>
 800bc22:	2000      	movs	r0, #0
 800bc24:	68a3      	ldr	r3, [r4, #8]
 800bc26:	1b9b      	subs	r3, r3, r6
 800bc28:	60a3      	str	r3, [r4, #8]
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	199b      	adds	r3, r3, r6
 800bc2e:	6023      	str	r3, [r4, #0]
 800bc30:	b005      	add	sp, #20
 800bc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc34:	002a      	movs	r2, r5
 800bc36:	9802      	ldr	r0, [sp, #8]
 800bc38:	f000 fdd4 	bl	800c7e4 <_realloc_r>
 800bc3c:	1e06      	subs	r6, r0, #0
 800bc3e:	d1e0      	bne.n	800bc02 <__ssputs_r+0x62>
 800bc40:	6921      	ldr	r1, [r4, #16]
 800bc42:	9802      	ldr	r0, [sp, #8]
 800bc44:	f7ff fb02 	bl	800b24c <_free_r>
 800bc48:	230c      	movs	r3, #12
 800bc4a:	2001      	movs	r0, #1
 800bc4c:	9a02      	ldr	r2, [sp, #8]
 800bc4e:	4240      	negs	r0, r0
 800bc50:	6013      	str	r3, [r2, #0]
 800bc52:	89a2      	ldrh	r2, [r4, #12]
 800bc54:	3334      	adds	r3, #52	@ 0x34
 800bc56:	4313      	orrs	r3, r2
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	e7e9      	b.n	800bc30 <__ssputs_r+0x90>
 800bc5c:	fffffb7f 	.word	0xfffffb7f

0800bc60 <_svfiprintf_r>:
 800bc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc62:	b0a1      	sub	sp, #132	@ 0x84
 800bc64:	9003      	str	r0, [sp, #12]
 800bc66:	001d      	movs	r5, r3
 800bc68:	898b      	ldrh	r3, [r1, #12]
 800bc6a:	000f      	movs	r7, r1
 800bc6c:	0016      	movs	r6, r2
 800bc6e:	061b      	lsls	r3, r3, #24
 800bc70:	d511      	bpl.n	800bc96 <_svfiprintf_r+0x36>
 800bc72:	690b      	ldr	r3, [r1, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10e      	bne.n	800bc96 <_svfiprintf_r+0x36>
 800bc78:	2140      	movs	r1, #64	@ 0x40
 800bc7a:	f7ff fb5d 	bl	800b338 <_malloc_r>
 800bc7e:	6038      	str	r0, [r7, #0]
 800bc80:	6138      	str	r0, [r7, #16]
 800bc82:	2800      	cmp	r0, #0
 800bc84:	d105      	bne.n	800bc92 <_svfiprintf_r+0x32>
 800bc86:	230c      	movs	r3, #12
 800bc88:	9a03      	ldr	r2, [sp, #12]
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	4240      	negs	r0, r0
 800bc90:	e0cf      	b.n	800be32 <_svfiprintf_r+0x1d2>
 800bc92:	2340      	movs	r3, #64	@ 0x40
 800bc94:	617b      	str	r3, [r7, #20]
 800bc96:	2300      	movs	r3, #0
 800bc98:	ac08      	add	r4, sp, #32
 800bc9a:	6163      	str	r3, [r4, #20]
 800bc9c:	3320      	adds	r3, #32
 800bc9e:	7663      	strb	r3, [r4, #25]
 800bca0:	3310      	adds	r3, #16
 800bca2:	76a3      	strb	r3, [r4, #26]
 800bca4:	9507      	str	r5, [sp, #28]
 800bca6:	0035      	movs	r5, r6
 800bca8:	782b      	ldrb	r3, [r5, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d001      	beq.n	800bcb2 <_svfiprintf_r+0x52>
 800bcae:	2b25      	cmp	r3, #37	@ 0x25
 800bcb0:	d148      	bne.n	800bd44 <_svfiprintf_r+0xe4>
 800bcb2:	1bab      	subs	r3, r5, r6
 800bcb4:	9305      	str	r3, [sp, #20]
 800bcb6:	42b5      	cmp	r5, r6
 800bcb8:	d00b      	beq.n	800bcd2 <_svfiprintf_r+0x72>
 800bcba:	0032      	movs	r2, r6
 800bcbc:	0039      	movs	r1, r7
 800bcbe:	9803      	ldr	r0, [sp, #12]
 800bcc0:	f7ff ff6e 	bl	800bba0 <__ssputs_r>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d100      	bne.n	800bcca <_svfiprintf_r+0x6a>
 800bcc8:	e0ae      	b.n	800be28 <_svfiprintf_r+0x1c8>
 800bcca:	6963      	ldr	r3, [r4, #20]
 800bccc:	9a05      	ldr	r2, [sp, #20]
 800bcce:	189b      	adds	r3, r3, r2
 800bcd0:	6163      	str	r3, [r4, #20]
 800bcd2:	782b      	ldrb	r3, [r5, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d100      	bne.n	800bcda <_svfiprintf_r+0x7a>
 800bcd8:	e0a6      	b.n	800be28 <_svfiprintf_r+0x1c8>
 800bcda:	2201      	movs	r2, #1
 800bcdc:	2300      	movs	r3, #0
 800bcde:	4252      	negs	r2, r2
 800bce0:	6062      	str	r2, [r4, #4]
 800bce2:	a904      	add	r1, sp, #16
 800bce4:	3254      	adds	r2, #84	@ 0x54
 800bce6:	1852      	adds	r2, r2, r1
 800bce8:	1c6e      	adds	r6, r5, #1
 800bcea:	6023      	str	r3, [r4, #0]
 800bcec:	60e3      	str	r3, [r4, #12]
 800bcee:	60a3      	str	r3, [r4, #8]
 800bcf0:	7013      	strb	r3, [r2, #0]
 800bcf2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bcf4:	4b54      	ldr	r3, [pc, #336]	@ (800be48 <_svfiprintf_r+0x1e8>)
 800bcf6:	2205      	movs	r2, #5
 800bcf8:	0018      	movs	r0, r3
 800bcfa:	7831      	ldrb	r1, [r6, #0]
 800bcfc:	9305      	str	r3, [sp, #20]
 800bcfe:	f7fe fbf0 	bl	800a4e2 <memchr>
 800bd02:	1c75      	adds	r5, r6, #1
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d11f      	bne.n	800bd48 <_svfiprintf_r+0xe8>
 800bd08:	6822      	ldr	r2, [r4, #0]
 800bd0a:	06d3      	lsls	r3, r2, #27
 800bd0c:	d504      	bpl.n	800bd18 <_svfiprintf_r+0xb8>
 800bd0e:	2353      	movs	r3, #83	@ 0x53
 800bd10:	a904      	add	r1, sp, #16
 800bd12:	185b      	adds	r3, r3, r1
 800bd14:	2120      	movs	r1, #32
 800bd16:	7019      	strb	r1, [r3, #0]
 800bd18:	0713      	lsls	r3, r2, #28
 800bd1a:	d504      	bpl.n	800bd26 <_svfiprintf_r+0xc6>
 800bd1c:	2353      	movs	r3, #83	@ 0x53
 800bd1e:	a904      	add	r1, sp, #16
 800bd20:	185b      	adds	r3, r3, r1
 800bd22:	212b      	movs	r1, #43	@ 0x2b
 800bd24:	7019      	strb	r1, [r3, #0]
 800bd26:	7833      	ldrb	r3, [r6, #0]
 800bd28:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd2a:	d016      	beq.n	800bd5a <_svfiprintf_r+0xfa>
 800bd2c:	0035      	movs	r5, r6
 800bd2e:	2100      	movs	r1, #0
 800bd30:	200a      	movs	r0, #10
 800bd32:	68e3      	ldr	r3, [r4, #12]
 800bd34:	782a      	ldrb	r2, [r5, #0]
 800bd36:	1c6e      	adds	r6, r5, #1
 800bd38:	3a30      	subs	r2, #48	@ 0x30
 800bd3a:	2a09      	cmp	r2, #9
 800bd3c:	d950      	bls.n	800bde0 <_svfiprintf_r+0x180>
 800bd3e:	2900      	cmp	r1, #0
 800bd40:	d111      	bne.n	800bd66 <_svfiprintf_r+0x106>
 800bd42:	e017      	b.n	800bd74 <_svfiprintf_r+0x114>
 800bd44:	3501      	adds	r5, #1
 800bd46:	e7af      	b.n	800bca8 <_svfiprintf_r+0x48>
 800bd48:	9b05      	ldr	r3, [sp, #20]
 800bd4a:	6822      	ldr	r2, [r4, #0]
 800bd4c:	1ac0      	subs	r0, r0, r3
 800bd4e:	2301      	movs	r3, #1
 800bd50:	4083      	lsls	r3, r0
 800bd52:	4313      	orrs	r3, r2
 800bd54:	002e      	movs	r6, r5
 800bd56:	6023      	str	r3, [r4, #0]
 800bd58:	e7cc      	b.n	800bcf4 <_svfiprintf_r+0x94>
 800bd5a:	9b07      	ldr	r3, [sp, #28]
 800bd5c:	1d19      	adds	r1, r3, #4
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	9107      	str	r1, [sp, #28]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	db01      	blt.n	800bd6a <_svfiprintf_r+0x10a>
 800bd66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd68:	e004      	b.n	800bd74 <_svfiprintf_r+0x114>
 800bd6a:	425b      	negs	r3, r3
 800bd6c:	60e3      	str	r3, [r4, #12]
 800bd6e:	2302      	movs	r3, #2
 800bd70:	4313      	orrs	r3, r2
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	782b      	ldrb	r3, [r5, #0]
 800bd76:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd78:	d10c      	bne.n	800bd94 <_svfiprintf_r+0x134>
 800bd7a:	786b      	ldrb	r3, [r5, #1]
 800bd7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd7e:	d134      	bne.n	800bdea <_svfiprintf_r+0x18a>
 800bd80:	9b07      	ldr	r3, [sp, #28]
 800bd82:	3502      	adds	r5, #2
 800bd84:	1d1a      	adds	r2, r3, #4
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	9207      	str	r2, [sp, #28]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	da01      	bge.n	800bd92 <_svfiprintf_r+0x132>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	425b      	negs	r3, r3
 800bd92:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd94:	4e2d      	ldr	r6, [pc, #180]	@ (800be4c <_svfiprintf_r+0x1ec>)
 800bd96:	2203      	movs	r2, #3
 800bd98:	0030      	movs	r0, r6
 800bd9a:	7829      	ldrb	r1, [r5, #0]
 800bd9c:	f7fe fba1 	bl	800a4e2 <memchr>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d006      	beq.n	800bdb2 <_svfiprintf_r+0x152>
 800bda4:	2340      	movs	r3, #64	@ 0x40
 800bda6:	1b80      	subs	r0, r0, r6
 800bda8:	4083      	lsls	r3, r0
 800bdaa:	6822      	ldr	r2, [r4, #0]
 800bdac:	3501      	adds	r5, #1
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	7829      	ldrb	r1, [r5, #0]
 800bdb4:	2206      	movs	r2, #6
 800bdb6:	4826      	ldr	r0, [pc, #152]	@ (800be50 <_svfiprintf_r+0x1f0>)
 800bdb8:	1c6e      	adds	r6, r5, #1
 800bdba:	7621      	strb	r1, [r4, #24]
 800bdbc:	f7fe fb91 	bl	800a4e2 <memchr>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d038      	beq.n	800be36 <_svfiprintf_r+0x1d6>
 800bdc4:	4b23      	ldr	r3, [pc, #140]	@ (800be54 <_svfiprintf_r+0x1f4>)
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d122      	bne.n	800be10 <_svfiprintf_r+0x1b0>
 800bdca:	2207      	movs	r2, #7
 800bdcc:	9b07      	ldr	r3, [sp, #28]
 800bdce:	3307      	adds	r3, #7
 800bdd0:	4393      	bics	r3, r2
 800bdd2:	3308      	adds	r3, #8
 800bdd4:	9307      	str	r3, [sp, #28]
 800bdd6:	6963      	ldr	r3, [r4, #20]
 800bdd8:	9a04      	ldr	r2, [sp, #16]
 800bdda:	189b      	adds	r3, r3, r2
 800bddc:	6163      	str	r3, [r4, #20]
 800bdde:	e762      	b.n	800bca6 <_svfiprintf_r+0x46>
 800bde0:	4343      	muls	r3, r0
 800bde2:	0035      	movs	r5, r6
 800bde4:	2101      	movs	r1, #1
 800bde6:	189b      	adds	r3, r3, r2
 800bde8:	e7a4      	b.n	800bd34 <_svfiprintf_r+0xd4>
 800bdea:	2300      	movs	r3, #0
 800bdec:	200a      	movs	r0, #10
 800bdee:	0019      	movs	r1, r3
 800bdf0:	3501      	adds	r5, #1
 800bdf2:	6063      	str	r3, [r4, #4]
 800bdf4:	782a      	ldrb	r2, [r5, #0]
 800bdf6:	1c6e      	adds	r6, r5, #1
 800bdf8:	3a30      	subs	r2, #48	@ 0x30
 800bdfa:	2a09      	cmp	r2, #9
 800bdfc:	d903      	bls.n	800be06 <_svfiprintf_r+0x1a6>
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d0c8      	beq.n	800bd94 <_svfiprintf_r+0x134>
 800be02:	9109      	str	r1, [sp, #36]	@ 0x24
 800be04:	e7c6      	b.n	800bd94 <_svfiprintf_r+0x134>
 800be06:	4341      	muls	r1, r0
 800be08:	0035      	movs	r5, r6
 800be0a:	2301      	movs	r3, #1
 800be0c:	1889      	adds	r1, r1, r2
 800be0e:	e7f1      	b.n	800bdf4 <_svfiprintf_r+0x194>
 800be10:	aa07      	add	r2, sp, #28
 800be12:	9200      	str	r2, [sp, #0]
 800be14:	0021      	movs	r1, r4
 800be16:	003a      	movs	r2, r7
 800be18:	4b0f      	ldr	r3, [pc, #60]	@ (800be58 <_svfiprintf_r+0x1f8>)
 800be1a:	9803      	ldr	r0, [sp, #12]
 800be1c:	f7fd fd1c 	bl	8009858 <_printf_float>
 800be20:	9004      	str	r0, [sp, #16]
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	3301      	adds	r3, #1
 800be26:	d1d6      	bne.n	800bdd6 <_svfiprintf_r+0x176>
 800be28:	89bb      	ldrh	r3, [r7, #12]
 800be2a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800be2c:	065b      	lsls	r3, r3, #25
 800be2e:	d500      	bpl.n	800be32 <_svfiprintf_r+0x1d2>
 800be30:	e72c      	b.n	800bc8c <_svfiprintf_r+0x2c>
 800be32:	b021      	add	sp, #132	@ 0x84
 800be34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be36:	aa07      	add	r2, sp, #28
 800be38:	9200      	str	r2, [sp, #0]
 800be3a:	0021      	movs	r1, r4
 800be3c:	003a      	movs	r2, r7
 800be3e:	4b06      	ldr	r3, [pc, #24]	@ (800be58 <_svfiprintf_r+0x1f8>)
 800be40:	9803      	ldr	r0, [sp, #12]
 800be42:	f7fd ffb7 	bl	8009db4 <_printf_i>
 800be46:	e7eb      	b.n	800be20 <_svfiprintf_r+0x1c0>
 800be48:	0800d610 	.word	0x0800d610
 800be4c:	0800d616 	.word	0x0800d616
 800be50:	0800d61a 	.word	0x0800d61a
 800be54:	08009859 	.word	0x08009859
 800be58:	0800bba1 	.word	0x0800bba1

0800be5c <_sungetc_r>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	0014      	movs	r4, r2
 800be60:	1c4b      	adds	r3, r1, #1
 800be62:	d103      	bne.n	800be6c <_sungetc_r+0x10>
 800be64:	2501      	movs	r5, #1
 800be66:	426d      	negs	r5, r5
 800be68:	0028      	movs	r0, r5
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	8993      	ldrh	r3, [r2, #12]
 800be6e:	2220      	movs	r2, #32
 800be70:	4393      	bics	r3, r2
 800be72:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	b2ce      	uxtb	r6, r1
 800be78:	6863      	ldr	r3, [r4, #4]
 800be7a:	b2cd      	uxtb	r5, r1
 800be7c:	2a00      	cmp	r2, #0
 800be7e:	d010      	beq.n	800bea2 <_sungetc_r+0x46>
 800be80:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800be82:	429a      	cmp	r2, r3
 800be84:	dd07      	ble.n	800be96 <_sungetc_r+0x3a>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	3b01      	subs	r3, #1
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	701e      	strb	r6, [r3, #0]
 800be8e:	6863      	ldr	r3, [r4, #4]
 800be90:	3301      	adds	r3, #1
 800be92:	6063      	str	r3, [r4, #4]
 800be94:	e7e8      	b.n	800be68 <_sungetc_r+0xc>
 800be96:	0021      	movs	r1, r4
 800be98:	f000 fbfa 	bl	800c690 <__submore>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d0f2      	beq.n	800be86 <_sungetc_r+0x2a>
 800bea0:	e7e0      	b.n	800be64 <_sungetc_r+0x8>
 800bea2:	6921      	ldr	r1, [r4, #16]
 800bea4:	6822      	ldr	r2, [r4, #0]
 800bea6:	2900      	cmp	r1, #0
 800bea8:	d007      	beq.n	800beba <_sungetc_r+0x5e>
 800beaa:	4291      	cmp	r1, r2
 800beac:	d205      	bcs.n	800beba <_sungetc_r+0x5e>
 800beae:	1e51      	subs	r1, r2, #1
 800beb0:	7808      	ldrb	r0, [r1, #0]
 800beb2:	42a8      	cmp	r0, r5
 800beb4:	d101      	bne.n	800beba <_sungetc_r+0x5e>
 800beb6:	6021      	str	r1, [r4, #0]
 800beb8:	e7ea      	b.n	800be90 <_sungetc_r+0x34>
 800beba:	6423      	str	r3, [r4, #64]	@ 0x40
 800bebc:	0023      	movs	r3, r4
 800bebe:	3344      	adds	r3, #68	@ 0x44
 800bec0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bec2:	2303      	movs	r3, #3
 800bec4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bec6:	0023      	movs	r3, r4
 800bec8:	3346      	adds	r3, #70	@ 0x46
 800beca:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800becc:	701e      	strb	r6, [r3, #0]
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	2301      	movs	r3, #1
 800bed2:	e7de      	b.n	800be92 <_sungetc_r+0x36>

0800bed4 <__ssrefill_r>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	000c      	movs	r4, r1
 800bed8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800beda:	2900      	cmp	r1, #0
 800bedc:	d00e      	beq.n	800befc <__ssrefill_r+0x28>
 800bede:	0023      	movs	r3, r4
 800bee0:	3344      	adds	r3, #68	@ 0x44
 800bee2:	4299      	cmp	r1, r3
 800bee4:	d001      	beq.n	800beea <__ssrefill_r+0x16>
 800bee6:	f7ff f9b1 	bl	800b24c <_free_r>
 800beea:	2000      	movs	r0, #0
 800beec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800beee:	6360      	str	r0, [r4, #52]	@ 0x34
 800bef0:	6063      	str	r3, [r4, #4]
 800bef2:	4283      	cmp	r3, r0
 800bef4:	d002      	beq.n	800befc <__ssrefill_r+0x28>
 800bef6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	bd10      	pop	{r4, pc}
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	2001      	movs	r0, #1
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	2300      	movs	r3, #0
 800bf04:	89a2      	ldrh	r2, [r4, #12]
 800bf06:	6063      	str	r3, [r4, #4]
 800bf08:	3320      	adds	r3, #32
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	81a3      	strh	r3, [r4, #12]
 800bf0e:	4240      	negs	r0, r0
 800bf10:	e7f3      	b.n	800befa <__ssrefill_r+0x26>
	...

0800bf14 <__ssvfiscanf_r>:
 800bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf16:	4caa      	ldr	r4, [pc, #680]	@ (800c1c0 <__ssvfiscanf_r+0x2ac>)
 800bf18:	44a5      	add	sp, r4
 800bf1a:	000c      	movs	r4, r1
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	9001      	str	r0, [sp, #4]
 800bf20:	20be      	movs	r0, #190	@ 0xbe
 800bf22:	9146      	str	r1, [sp, #280]	@ 0x118
 800bf24:	9147      	str	r1, [sp, #284]	@ 0x11c
 800bf26:	a903      	add	r1, sp, #12
 800bf28:	9148      	str	r1, [sp, #288]	@ 0x120
 800bf2a:	49a6      	ldr	r1, [pc, #664]	@ (800c1c4 <__ssvfiscanf_r+0x2b0>)
 800bf2c:	0040      	lsls	r0, r0, #1
 800bf2e:	ad43      	add	r5, sp, #268	@ 0x10c
 800bf30:	5029      	str	r1, [r5, r0]
 800bf32:	49a5      	ldr	r1, [pc, #660]	@ (800c1c8 <__ssvfiscanf_r+0x2b4>)
 800bf34:	3004      	adds	r0, #4
 800bf36:	ad43      	add	r5, sp, #268	@ 0x10c
 800bf38:	5029      	str	r1, [r5, r0]
 800bf3a:	9302      	str	r3, [sp, #8]
 800bf3c:	7813      	ldrb	r3, [r2, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d100      	bne.n	800bf44 <__ssvfiscanf_r+0x30>
 800bf42:	e13a      	b.n	800c1ba <__ssvfiscanf_r+0x2a6>
 800bf44:	2108      	movs	r1, #8
 800bf46:	2708      	movs	r7, #8
 800bf48:	4ea0      	ldr	r6, [pc, #640]	@ (800c1cc <__ssvfiscanf_r+0x2b8>)
 800bf4a:	1c55      	adds	r5, r2, #1
 800bf4c:	5cf0      	ldrb	r0, [r6, r3]
 800bf4e:	4001      	ands	r1, r0
 800bf50:	4238      	tst	r0, r7
 800bf52:	d01c      	beq.n	800bf8e <__ssvfiscanf_r+0x7a>
 800bf54:	6863      	ldr	r3, [r4, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	dd0f      	ble.n	800bf7a <__ssvfiscanf_r+0x66>
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	781a      	ldrb	r2, [r3, #0]
 800bf5e:	5cb2      	ldrb	r2, [r6, r2]
 800bf60:	423a      	tst	r2, r7
 800bf62:	d101      	bne.n	800bf68 <__ssvfiscanf_r+0x54>
 800bf64:	002a      	movs	r2, r5
 800bf66:	e7e9      	b.n	800bf3c <__ssvfiscanf_r+0x28>
 800bf68:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	3201      	adds	r2, #1
 800bf6e:	9247      	str	r2, [sp, #284]	@ 0x11c
 800bf70:	6862      	ldr	r2, [r4, #4]
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	3a01      	subs	r2, #1
 800bf76:	6062      	str	r2, [r4, #4]
 800bf78:	e7ec      	b.n	800bf54 <__ssvfiscanf_r+0x40>
 800bf7a:	22c0      	movs	r2, #192	@ 0xc0
 800bf7c:	ab43      	add	r3, sp, #268	@ 0x10c
 800bf7e:	0052      	lsls	r2, r2, #1
 800bf80:	0021      	movs	r1, r4
 800bf82:	589b      	ldr	r3, [r3, r2]
 800bf84:	9801      	ldr	r0, [sp, #4]
 800bf86:	4798      	blx	r3
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d0e6      	beq.n	800bf5a <__ssvfiscanf_r+0x46>
 800bf8c:	e7ea      	b.n	800bf64 <__ssvfiscanf_r+0x50>
 800bf8e:	001e      	movs	r6, r3
 800bf90:	2b25      	cmp	r3, #37	@ 0x25
 800bf92:	d160      	bne.n	800c056 <__ssvfiscanf_r+0x142>
 800bf94:	9145      	str	r1, [sp, #276]	@ 0x114
 800bf96:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bf98:	7853      	ldrb	r3, [r2, #1]
 800bf9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf9c:	d102      	bne.n	800bfa4 <__ssvfiscanf_r+0x90>
 800bf9e:	3b1a      	subs	r3, #26
 800bfa0:	9343      	str	r3, [sp, #268]	@ 0x10c
 800bfa2:	1c95      	adds	r5, r2, #2
 800bfa4:	002e      	movs	r6, r5
 800bfa6:	220a      	movs	r2, #10
 800bfa8:	7831      	ldrb	r1, [r6, #0]
 800bfaa:	1c75      	adds	r5, r6, #1
 800bfac:	000b      	movs	r3, r1
 800bfae:	3b30      	subs	r3, #48	@ 0x30
 800bfb0:	2b09      	cmp	r3, #9
 800bfb2:	d91d      	bls.n	800bff0 <__ssvfiscanf_r+0xdc>
 800bfb4:	4f86      	ldr	r7, [pc, #536]	@ (800c1d0 <__ssvfiscanf_r+0x2bc>)
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	0038      	movs	r0, r7
 800bfba:	f7fe fa92 	bl	800a4e2 <memchr>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d006      	beq.n	800bfd0 <__ssvfiscanf_r+0xbc>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	1bc0      	subs	r0, r0, r7
 800bfc6:	4083      	lsls	r3, r0
 800bfc8:	002e      	movs	r6, r5
 800bfca:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	9343      	str	r3, [sp, #268]	@ 0x10c
 800bfd0:	1c75      	adds	r5, r6, #1
 800bfd2:	7836      	ldrb	r6, [r6, #0]
 800bfd4:	2e78      	cmp	r6, #120	@ 0x78
 800bfd6:	d806      	bhi.n	800bfe6 <__ssvfiscanf_r+0xd2>
 800bfd8:	2e57      	cmp	r6, #87	@ 0x57
 800bfda:	d810      	bhi.n	800bffe <__ssvfiscanf_r+0xea>
 800bfdc:	2e25      	cmp	r6, #37	@ 0x25
 800bfde:	d03a      	beq.n	800c056 <__ssvfiscanf_r+0x142>
 800bfe0:	d834      	bhi.n	800c04c <__ssvfiscanf_r+0x138>
 800bfe2:	2e00      	cmp	r6, #0
 800bfe4:	d055      	beq.n	800c092 <__ssvfiscanf_r+0x17e>
 800bfe6:	2303      	movs	r3, #3
 800bfe8:	9349      	str	r3, [sp, #292]	@ 0x124
 800bfea:	3307      	adds	r3, #7
 800bfec:	9344      	str	r3, [sp, #272]	@ 0x110
 800bfee:	e069      	b.n	800c0c4 <__ssvfiscanf_r+0x1b0>
 800bff0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800bff2:	002e      	movs	r6, r5
 800bff4:	4353      	muls	r3, r2
 800bff6:	3b30      	subs	r3, #48	@ 0x30
 800bff8:	185b      	adds	r3, r3, r1
 800bffa:	9345      	str	r3, [sp, #276]	@ 0x114
 800bffc:	e7d4      	b.n	800bfa8 <__ssvfiscanf_r+0x94>
 800bffe:	0030      	movs	r0, r6
 800c000:	3858      	subs	r0, #88	@ 0x58
 800c002:	2820      	cmp	r0, #32
 800c004:	d8ef      	bhi.n	800bfe6 <__ssvfiscanf_r+0xd2>
 800c006:	f7f4 f89b 	bl	8000140 <__gnu_thumb1_case_shi>
 800c00a:	004b      	.short	0x004b
 800c00c:	ffeeffee 	.word	0xffeeffee
 800c010:	ffee007d 	.word	0xffee007d
 800c014:	ffeeffee 	.word	0xffeeffee
 800c018:	ffeeffee 	.word	0xffeeffee
 800c01c:	ffeeffee 	.word	0xffeeffee
 800c020:	007b0088 	.word	0x007b0088
 800c024:	00240024 	.word	0x00240024
 800c028:	ffee0024 	.word	0xffee0024
 800c02c:	ffee0055 	.word	0xffee0055
 800c030:	ffeeffee 	.word	0xffeeffee
 800c034:	0090ffee 	.word	0x0090ffee
 800c038:	00470059 	.word	0x00470059
 800c03c:	ffeeffee 	.word	0xffeeffee
 800c040:	ffee008e 	.word	0xffee008e
 800c044:	ffee007b 	.word	0xffee007b
 800c048:	004bffee 	.word	0x004bffee
 800c04c:	3e45      	subs	r6, #69	@ 0x45
 800c04e:	2e02      	cmp	r6, #2
 800c050:	d8c9      	bhi.n	800bfe6 <__ssvfiscanf_r+0xd2>
 800c052:	2305      	movs	r3, #5
 800c054:	e035      	b.n	800c0c2 <__ssvfiscanf_r+0x1ae>
 800c056:	6863      	ldr	r3, [r4, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dd0d      	ble.n	800c078 <__ssvfiscanf_r+0x164>
 800c05c:	6823      	ldr	r3, [r4, #0]
 800c05e:	781a      	ldrb	r2, [r3, #0]
 800c060:	42b2      	cmp	r2, r6
 800c062:	d000      	beq.n	800c066 <__ssvfiscanf_r+0x152>
 800c064:	e0a9      	b.n	800c1ba <__ssvfiscanf_r+0x2a6>
 800c066:	3301      	adds	r3, #1
 800c068:	6862      	ldr	r2, [r4, #4]
 800c06a:	6023      	str	r3, [r4, #0]
 800c06c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c06e:	3a01      	subs	r2, #1
 800c070:	3301      	adds	r3, #1
 800c072:	6062      	str	r2, [r4, #4]
 800c074:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c076:	e775      	b.n	800bf64 <__ssvfiscanf_r+0x50>
 800c078:	23c0      	movs	r3, #192	@ 0xc0
 800c07a:	aa43      	add	r2, sp, #268	@ 0x10c
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	0021      	movs	r1, r4
 800c080:	58d3      	ldr	r3, [r2, r3]
 800c082:	9801      	ldr	r0, [sp, #4]
 800c084:	4798      	blx	r3
 800c086:	2800      	cmp	r0, #0
 800c088:	d0e8      	beq.n	800c05c <__ssvfiscanf_r+0x148>
 800c08a:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d000      	beq.n	800c092 <__ssvfiscanf_r+0x17e>
 800c090:	e08b      	b.n	800c1aa <__ssvfiscanf_r+0x296>
 800c092:	2001      	movs	r0, #1
 800c094:	4240      	negs	r0, r0
 800c096:	e08c      	b.n	800c1b2 <__ssvfiscanf_r+0x29e>
 800c098:	2320      	movs	r3, #32
 800c09a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c09c:	4313      	orrs	r3, r2
 800c09e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c0a0:	2380      	movs	r3, #128	@ 0x80
 800c0a2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c0aa:	2310      	movs	r3, #16
 800c0ac:	9344      	str	r3, [sp, #272]	@ 0x110
 800c0ae:	2e6e      	cmp	r6, #110	@ 0x6e
 800c0b0:	d902      	bls.n	800c0b8 <__ssvfiscanf_r+0x1a4>
 800c0b2:	e005      	b.n	800c0c0 <__ssvfiscanf_r+0x1ac>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9344      	str	r3, [sp, #272]	@ 0x110
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e002      	b.n	800c0c2 <__ssvfiscanf_r+0x1ae>
 800c0bc:	2308      	movs	r3, #8
 800c0be:	9344      	str	r3, [sp, #272]	@ 0x110
 800c0c0:	2304      	movs	r3, #4
 800c0c2:	9349      	str	r3, [sp, #292]	@ 0x124
 800c0c4:	6863      	ldr	r3, [r4, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	dd3e      	ble.n	800c148 <__ssvfiscanf_r+0x234>
 800c0ca:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c0cc:	065b      	lsls	r3, r3, #25
 800c0ce:	d408      	bmi.n	800c0e2 <__ssvfiscanf_r+0x1ce>
 800c0d0:	27c0      	movs	r7, #192	@ 0xc0
 800c0d2:	2608      	movs	r6, #8
 800c0d4:	007f      	lsls	r7, r7, #1
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	493c      	ldr	r1, [pc, #240]	@ (800c1cc <__ssvfiscanf_r+0x2b8>)
 800c0da:	781a      	ldrb	r2, [r3, #0]
 800c0dc:	5c8a      	ldrb	r2, [r1, r2]
 800c0de:	4232      	tst	r2, r6
 800c0e0:	d13c      	bne.n	800c15c <__ssvfiscanf_r+0x248>
 800c0e2:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	dc4c      	bgt.n	800c182 <__ssvfiscanf_r+0x26e>
 800c0e8:	0022      	movs	r2, r4
 800c0ea:	9801      	ldr	r0, [sp, #4]
 800c0ec:	ab02      	add	r3, sp, #8
 800c0ee:	a943      	add	r1, sp, #268	@ 0x10c
 800c0f0:	f000 f872 	bl	800c1d8 <_scanf_chars>
 800c0f4:	2801      	cmp	r0, #1
 800c0f6:	d060      	beq.n	800c1ba <__ssvfiscanf_r+0x2a6>
 800c0f8:	2802      	cmp	r0, #2
 800c0fa:	d000      	beq.n	800c0fe <__ssvfiscanf_r+0x1ea>
 800c0fc:	e732      	b.n	800bf64 <__ssvfiscanf_r+0x50>
 800c0fe:	e7c4      	b.n	800c08a <__ssvfiscanf_r+0x176>
 800c100:	230a      	movs	r3, #10
 800c102:	e7d3      	b.n	800c0ac <__ssvfiscanf_r+0x198>
 800c104:	0029      	movs	r1, r5
 800c106:	a803      	add	r0, sp, #12
 800c108:	f000 fa88 	bl	800c61c <__sccl>
 800c10c:	2340      	movs	r3, #64	@ 0x40
 800c10e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c110:	0005      	movs	r5, r0
 800c112:	4313      	orrs	r3, r2
 800c114:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c116:	2301      	movs	r3, #1
 800c118:	e7d3      	b.n	800c0c2 <__ssvfiscanf_r+0x1ae>
 800c11a:	2340      	movs	r3, #64	@ 0x40
 800c11c:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c11e:	4313      	orrs	r3, r2
 800c120:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c122:	2300      	movs	r3, #0
 800c124:	e7cd      	b.n	800c0c2 <__ssvfiscanf_r+0x1ae>
 800c126:	2302      	movs	r3, #2
 800c128:	e7cb      	b.n	800c0c2 <__ssvfiscanf_r+0x1ae>
 800c12a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c12c:	06d3      	lsls	r3, r2, #27
 800c12e:	d500      	bpl.n	800c132 <__ssvfiscanf_r+0x21e>
 800c130:	e718      	b.n	800bf64 <__ssvfiscanf_r+0x50>
 800c132:	9b02      	ldr	r3, [sp, #8]
 800c134:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800c136:	1d18      	adds	r0, r3, #4
 800c138:	9002      	str	r0, [sp, #8]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	07d6      	lsls	r6, r2, #31
 800c13e:	d501      	bpl.n	800c144 <__ssvfiscanf_r+0x230>
 800c140:	8019      	strh	r1, [r3, #0]
 800c142:	e70f      	b.n	800bf64 <__ssvfiscanf_r+0x50>
 800c144:	6019      	str	r1, [r3, #0]
 800c146:	e70d      	b.n	800bf64 <__ssvfiscanf_r+0x50>
 800c148:	23c0      	movs	r3, #192	@ 0xc0
 800c14a:	aa43      	add	r2, sp, #268	@ 0x10c
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	0021      	movs	r1, r4
 800c150:	58d3      	ldr	r3, [r2, r3]
 800c152:	9801      	ldr	r0, [sp, #4]
 800c154:	4798      	blx	r3
 800c156:	2800      	cmp	r0, #0
 800c158:	d0b7      	beq.n	800c0ca <__ssvfiscanf_r+0x1b6>
 800c15a:	e796      	b.n	800c08a <__ssvfiscanf_r+0x176>
 800c15c:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800c15e:	3201      	adds	r2, #1
 800c160:	9247      	str	r2, [sp, #284]	@ 0x11c
 800c162:	6862      	ldr	r2, [r4, #4]
 800c164:	3a01      	subs	r2, #1
 800c166:	6062      	str	r2, [r4, #4]
 800c168:	2a00      	cmp	r2, #0
 800c16a:	dd02      	ble.n	800c172 <__ssvfiscanf_r+0x25e>
 800c16c:	3301      	adds	r3, #1
 800c16e:	6023      	str	r3, [r4, #0]
 800c170:	e7b1      	b.n	800c0d6 <__ssvfiscanf_r+0x1c2>
 800c172:	ab43      	add	r3, sp, #268	@ 0x10c
 800c174:	0021      	movs	r1, r4
 800c176:	59db      	ldr	r3, [r3, r7]
 800c178:	9801      	ldr	r0, [sp, #4]
 800c17a:	4798      	blx	r3
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d0aa      	beq.n	800c0d6 <__ssvfiscanf_r+0x1c2>
 800c180:	e783      	b.n	800c08a <__ssvfiscanf_r+0x176>
 800c182:	2b04      	cmp	r3, #4
 800c184:	dc06      	bgt.n	800c194 <__ssvfiscanf_r+0x280>
 800c186:	0022      	movs	r2, r4
 800c188:	9801      	ldr	r0, [sp, #4]
 800c18a:	ab02      	add	r3, sp, #8
 800c18c:	a943      	add	r1, sp, #268	@ 0x10c
 800c18e:	f000 f883 	bl	800c298 <_scanf_i>
 800c192:	e7af      	b.n	800c0f4 <__ssvfiscanf_r+0x1e0>
 800c194:	4b0f      	ldr	r3, [pc, #60]	@ (800c1d4 <__ssvfiscanf_r+0x2c0>)
 800c196:	2b00      	cmp	r3, #0
 800c198:	d100      	bne.n	800c19c <__ssvfiscanf_r+0x288>
 800c19a:	e6e3      	b.n	800bf64 <__ssvfiscanf_r+0x50>
 800c19c:	0022      	movs	r2, r4
 800c19e:	9801      	ldr	r0, [sp, #4]
 800c1a0:	ab02      	add	r3, sp, #8
 800c1a2:	a943      	add	r1, sp, #268	@ 0x10c
 800c1a4:	e000      	b.n	800c1a8 <__ssvfiscanf_r+0x294>
 800c1a6:	bf00      	nop
 800c1a8:	e7a4      	b.n	800c0f4 <__ssvfiscanf_r+0x1e0>
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	065b      	lsls	r3, r3, #25
 800c1ae:	d500      	bpl.n	800c1b2 <__ssvfiscanf_r+0x29e>
 800c1b0:	e76f      	b.n	800c092 <__ssvfiscanf_r+0x17e>
 800c1b2:	23a5      	movs	r3, #165	@ 0xa5
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	449d      	add	sp, r3
 800c1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ba:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800c1bc:	e7f9      	b.n	800c1b2 <__ssvfiscanf_r+0x29e>
 800c1be:	46c0      	nop			@ (mov r8, r8)
 800c1c0:	fffffd6c 	.word	0xfffffd6c
 800c1c4:	0800be5d 	.word	0x0800be5d
 800c1c8:	0800bed5 	.word	0x0800bed5
 800c1cc:	0800d647 	.word	0x0800d647
 800c1d0:	0800d616 	.word	0x0800d616
 800c1d4:	00000000 	.word	0x00000000

0800c1d8 <_scanf_chars>:
 800c1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1da:	0015      	movs	r5, r2
 800c1dc:	688a      	ldr	r2, [r1, #8]
 800c1de:	000c      	movs	r4, r1
 800c1e0:	9001      	str	r0, [sp, #4]
 800c1e2:	2a00      	cmp	r2, #0
 800c1e4:	d104      	bne.n	800c1f0 <_scanf_chars+0x18>
 800c1e6:	698a      	ldr	r2, [r1, #24]
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	d117      	bne.n	800c21c <_scanf_chars+0x44>
 800c1ec:	3201      	adds	r2, #1
 800c1ee:	60a2      	str	r2, [r4, #8]
 800c1f0:	6822      	ldr	r2, [r4, #0]
 800c1f2:	06d2      	lsls	r2, r2, #27
 800c1f4:	d403      	bmi.n	800c1fe <_scanf_chars+0x26>
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	1d11      	adds	r1, r2, #4
 800c1fa:	6019      	str	r1, [r3, #0]
 800c1fc:	6817      	ldr	r7, [r2, #0]
 800c1fe:	2600      	movs	r6, #0
 800c200:	69a0      	ldr	r0, [r4, #24]
 800c202:	2800      	cmp	r0, #0
 800c204:	d016      	beq.n	800c234 <_scanf_chars+0x5c>
 800c206:	2801      	cmp	r0, #1
 800c208:	d10b      	bne.n	800c222 <_scanf_chars+0x4a>
 800c20a:	682b      	ldr	r3, [r5, #0]
 800c20c:	6962      	ldr	r2, [r4, #20]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	5cd3      	ldrb	r3, [r2, r3]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10e      	bne.n	800c234 <_scanf_chars+0x5c>
 800c216:	2e00      	cmp	r6, #0
 800c218:	d03b      	beq.n	800c292 <_scanf_chars+0xba>
 800c21a:	e029      	b.n	800c270 <_scanf_chars+0x98>
 800c21c:	2201      	movs	r2, #1
 800c21e:	4252      	negs	r2, r2
 800c220:	e7e5      	b.n	800c1ee <_scanf_chars+0x16>
 800c222:	2802      	cmp	r0, #2
 800c224:	d124      	bne.n	800c270 <_scanf_chars+0x98>
 800c226:	682b      	ldr	r3, [r5, #0]
 800c228:	4a1a      	ldr	r2, [pc, #104]	@ (800c294 <_scanf_chars+0xbc>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	5cd3      	ldrb	r3, [r2, r3]
 800c22e:	2208      	movs	r2, #8
 800c230:	4213      	tst	r3, r2
 800c232:	d11d      	bne.n	800c270 <_scanf_chars+0x98>
 800c234:	2210      	movs	r2, #16
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	3601      	adds	r6, #1
 800c23a:	4213      	tst	r3, r2
 800c23c:	d103      	bne.n	800c246 <_scanf_chars+0x6e>
 800c23e:	682b      	ldr	r3, [r5, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	703b      	strb	r3, [r7, #0]
 800c244:	3701      	adds	r7, #1
 800c246:	682a      	ldr	r2, [r5, #0]
 800c248:	686b      	ldr	r3, [r5, #4]
 800c24a:	3201      	adds	r2, #1
 800c24c:	602a      	str	r2, [r5, #0]
 800c24e:	68a2      	ldr	r2, [r4, #8]
 800c250:	3b01      	subs	r3, #1
 800c252:	3a01      	subs	r2, #1
 800c254:	606b      	str	r3, [r5, #4]
 800c256:	60a2      	str	r2, [r4, #8]
 800c258:	2a00      	cmp	r2, #0
 800c25a:	d009      	beq.n	800c270 <_scanf_chars+0x98>
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dccf      	bgt.n	800c200 <_scanf_chars+0x28>
 800c260:	23c0      	movs	r3, #192	@ 0xc0
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	0029      	movs	r1, r5
 800c266:	58e3      	ldr	r3, [r4, r3]
 800c268:	9801      	ldr	r0, [sp, #4]
 800c26a:	4798      	blx	r3
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d0c7      	beq.n	800c200 <_scanf_chars+0x28>
 800c270:	6822      	ldr	r2, [r4, #0]
 800c272:	2310      	movs	r3, #16
 800c274:	0011      	movs	r1, r2
 800c276:	4019      	ands	r1, r3
 800c278:	421a      	tst	r2, r3
 800c27a:	d106      	bne.n	800c28a <_scanf_chars+0xb2>
 800c27c:	68e3      	ldr	r3, [r4, #12]
 800c27e:	3301      	adds	r3, #1
 800c280:	60e3      	str	r3, [r4, #12]
 800c282:	69a3      	ldr	r3, [r4, #24]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d000      	beq.n	800c28a <_scanf_chars+0xb2>
 800c288:	7039      	strb	r1, [r7, #0]
 800c28a:	2000      	movs	r0, #0
 800c28c:	6923      	ldr	r3, [r4, #16]
 800c28e:	199b      	adds	r3, r3, r6
 800c290:	6123      	str	r3, [r4, #16]
 800c292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c294:	0800d647 	.word	0x0800d647

0800c298 <_scanf_i>:
 800c298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c29a:	b08b      	sub	sp, #44	@ 0x2c
 800c29c:	9301      	str	r3, [sp, #4]
 800c29e:	4b78      	ldr	r3, [pc, #480]	@ (800c480 <_scanf_i+0x1e8>)
 800c2a0:	0016      	movs	r6, r2
 800c2a2:	9004      	str	r0, [sp, #16]
 800c2a4:	aa07      	add	r2, sp, #28
 800c2a6:	cba1      	ldmia	r3!, {r0, r5, r7}
 800c2a8:	c2a1      	stmia	r2!, {r0, r5, r7}
 800c2aa:	4a76      	ldr	r2, [pc, #472]	@ (800c484 <_scanf_i+0x1ec>)
 800c2ac:	698b      	ldr	r3, [r1, #24]
 800c2ae:	000c      	movs	r4, r1
 800c2b0:	9205      	str	r2, [sp, #20]
 800c2b2:	2b03      	cmp	r3, #3
 800c2b4:	d101      	bne.n	800c2ba <_scanf_i+0x22>
 800c2b6:	4b74      	ldr	r3, [pc, #464]	@ (800c488 <_scanf_i+0x1f0>)
 800c2b8:	9305      	str	r3, [sp, #20]
 800c2ba:	22ae      	movs	r2, #174	@ 0xae
 800c2bc:	2000      	movs	r0, #0
 800c2be:	68a3      	ldr	r3, [r4, #8]
 800c2c0:	0052      	lsls	r2, r2, #1
 800c2c2:	1e59      	subs	r1, r3, #1
 800c2c4:	9003      	str	r0, [sp, #12]
 800c2c6:	4291      	cmp	r1, r2
 800c2c8:	d905      	bls.n	800c2d6 <_scanf_i+0x3e>
 800c2ca:	3b5e      	subs	r3, #94	@ 0x5e
 800c2cc:	3bff      	subs	r3, #255	@ 0xff
 800c2ce:	9303      	str	r3, [sp, #12]
 800c2d0:	235e      	movs	r3, #94	@ 0x5e
 800c2d2:	33ff      	adds	r3, #255	@ 0xff
 800c2d4:	60a3      	str	r3, [r4, #8]
 800c2d6:	0023      	movs	r3, r4
 800c2d8:	331c      	adds	r3, #28
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	23d0      	movs	r3, #208	@ 0xd0
 800c2de:	2700      	movs	r7, #0
 800c2e0:	6822      	ldr	r2, [r4, #0]
 800c2e2:	011b      	lsls	r3, r3, #4
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	9b00      	ldr	r3, [sp, #0]
 800c2ea:	9302      	str	r3, [sp, #8]
 800c2ec:	6833      	ldr	r3, [r6, #0]
 800c2ee:	a807      	add	r0, sp, #28
 800c2f0:	7819      	ldrb	r1, [r3, #0]
 800c2f2:	00bb      	lsls	r3, r7, #2
 800c2f4:	2202      	movs	r2, #2
 800c2f6:	5818      	ldr	r0, [r3, r0]
 800c2f8:	f7fe f8f3 	bl	800a4e2 <memchr>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d029      	beq.n	800c354 <_scanf_i+0xbc>
 800c300:	2f01      	cmp	r7, #1
 800c302:	d15e      	bne.n	800c3c2 <_scanf_i+0x12a>
 800c304:	6863      	ldr	r3, [r4, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <_scanf_i+0x80>
 800c30a:	3308      	adds	r3, #8
 800c30c:	6822      	ldr	r2, [r4, #0]
 800c30e:	6063      	str	r3, [r4, #4]
 800c310:	33f9      	adds	r3, #249	@ 0xf9
 800c312:	33ff      	adds	r3, #255	@ 0xff
 800c314:	4313      	orrs	r3, r2
 800c316:	6023      	str	r3, [r4, #0]
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	4a5c      	ldr	r2, [pc, #368]	@ (800c48c <_scanf_i+0x1f4>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	6023      	str	r3, [r4, #0]
 800c320:	68a3      	ldr	r3, [r4, #8]
 800c322:	1e5a      	subs	r2, r3, #1
 800c324:	60a2      	str	r2, [r4, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d014      	beq.n	800c354 <_scanf_i+0xbc>
 800c32a:	6833      	ldr	r3, [r6, #0]
 800c32c:	1c5a      	adds	r2, r3, #1
 800c32e:	6032      	str	r2, [r6, #0]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	9a02      	ldr	r2, [sp, #8]
 800c334:	7013      	strb	r3, [r2, #0]
 800c336:	6873      	ldr	r3, [r6, #4]
 800c338:	1c55      	adds	r5, r2, #1
 800c33a:	3b01      	subs	r3, #1
 800c33c:	6073      	str	r3, [r6, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	dc07      	bgt.n	800c352 <_scanf_i+0xba>
 800c342:	23c0      	movs	r3, #192	@ 0xc0
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	0031      	movs	r1, r6
 800c348:	58e3      	ldr	r3, [r4, r3]
 800c34a:	9804      	ldr	r0, [sp, #16]
 800c34c:	4798      	blx	r3
 800c34e:	2800      	cmp	r0, #0
 800c350:	d17e      	bne.n	800c450 <_scanf_i+0x1b8>
 800c352:	9502      	str	r5, [sp, #8]
 800c354:	3701      	adds	r7, #1
 800c356:	2f03      	cmp	r7, #3
 800c358:	d1c8      	bne.n	800c2ec <_scanf_i+0x54>
 800c35a:	6863      	ldr	r3, [r4, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <_scanf_i+0xcc>
 800c360:	330a      	adds	r3, #10
 800c362:	6063      	str	r3, [r4, #4]
 800c364:	2700      	movs	r7, #0
 800c366:	6863      	ldr	r3, [r4, #4]
 800c368:	4949      	ldr	r1, [pc, #292]	@ (800c490 <_scanf_i+0x1f8>)
 800c36a:	6960      	ldr	r0, [r4, #20]
 800c36c:	1ac9      	subs	r1, r1, r3
 800c36e:	f000 f955 	bl	800c61c <__sccl>
 800c372:	9d02      	ldr	r5, [sp, #8]
 800c374:	68a3      	ldr	r3, [r4, #8]
 800c376:	6820      	ldr	r0, [r4, #0]
 800c378:	9302      	str	r3, [sp, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d03f      	beq.n	800c3fe <_scanf_i+0x166>
 800c37e:	6831      	ldr	r1, [r6, #0]
 800c380:	6963      	ldr	r3, [r4, #20]
 800c382:	780a      	ldrb	r2, [r1, #0]
 800c384:	5c9b      	ldrb	r3, [r3, r2]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d039      	beq.n	800c3fe <_scanf_i+0x166>
 800c38a:	2a30      	cmp	r2, #48	@ 0x30
 800c38c:	d128      	bne.n	800c3e0 <_scanf_i+0x148>
 800c38e:	2380      	movs	r3, #128	@ 0x80
 800c390:	011b      	lsls	r3, r3, #4
 800c392:	4218      	tst	r0, r3
 800c394:	d024      	beq.n	800c3e0 <_scanf_i+0x148>
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	3701      	adds	r7, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <_scanf_i+0x112>
 800c39e:	001a      	movs	r2, r3
 800c3a0:	9b02      	ldr	r3, [sp, #8]
 800c3a2:	3a01      	subs	r2, #1
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	9203      	str	r2, [sp, #12]
 800c3a8:	60a3      	str	r3, [r4, #8]
 800c3aa:	6873      	ldr	r3, [r6, #4]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	6073      	str	r3, [r6, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	dd1c      	ble.n	800c3ee <_scanf_i+0x156>
 800c3b4:	6833      	ldr	r3, [r6, #0]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	6033      	str	r3, [r6, #0]
 800c3ba:	68a3      	ldr	r3, [r4, #8]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	60a3      	str	r3, [r4, #8]
 800c3c0:	e7d8      	b.n	800c374 <_scanf_i+0xdc>
 800c3c2:	2f02      	cmp	r7, #2
 800c3c4:	d1ac      	bne.n	800c320 <_scanf_i+0x88>
 800c3c6:	23c0      	movs	r3, #192	@ 0xc0
 800c3c8:	2180      	movs	r1, #128	@ 0x80
 800c3ca:	6822      	ldr	r2, [r4, #0]
 800c3cc:	00db      	lsls	r3, r3, #3
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	0089      	lsls	r1, r1, #2
 800c3d2:	428b      	cmp	r3, r1
 800c3d4:	d1c1      	bne.n	800c35a <_scanf_i+0xc2>
 800c3d6:	2310      	movs	r3, #16
 800c3d8:	6063      	str	r3, [r4, #4]
 800c3da:	33f0      	adds	r3, #240	@ 0xf0
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	e79e      	b.n	800c31e <_scanf_i+0x86>
 800c3e0:	4b2c      	ldr	r3, [pc, #176]	@ (800c494 <_scanf_i+0x1fc>)
 800c3e2:	4003      	ands	r3, r0
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	780b      	ldrb	r3, [r1, #0]
 800c3e8:	702b      	strb	r3, [r5, #0]
 800c3ea:	3501      	adds	r5, #1
 800c3ec:	e7dd      	b.n	800c3aa <_scanf_i+0x112>
 800c3ee:	23c0      	movs	r3, #192	@ 0xc0
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	0031      	movs	r1, r6
 800c3f4:	58e3      	ldr	r3, [r4, r3]
 800c3f6:	9804      	ldr	r0, [sp, #16]
 800c3f8:	4798      	blx	r3
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d0dd      	beq.n	800c3ba <_scanf_i+0x122>
 800c3fe:	6823      	ldr	r3, [r4, #0]
 800c400:	05db      	lsls	r3, r3, #23
 800c402:	d50e      	bpl.n	800c422 <_scanf_i+0x18a>
 800c404:	9b00      	ldr	r3, [sp, #0]
 800c406:	429d      	cmp	r5, r3
 800c408:	d907      	bls.n	800c41a <_scanf_i+0x182>
 800c40a:	23be      	movs	r3, #190	@ 0xbe
 800c40c:	3d01      	subs	r5, #1
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	0032      	movs	r2, r6
 800c412:	7829      	ldrb	r1, [r5, #0]
 800c414:	58e3      	ldr	r3, [r4, r3]
 800c416:	9804      	ldr	r0, [sp, #16]
 800c418:	4798      	blx	r3
 800c41a:	9b00      	ldr	r3, [sp, #0]
 800c41c:	2001      	movs	r0, #1
 800c41e:	429d      	cmp	r5, r3
 800c420:	d029      	beq.n	800c476 <_scanf_i+0x1de>
 800c422:	6821      	ldr	r1, [r4, #0]
 800c424:	2310      	movs	r3, #16
 800c426:	000a      	movs	r2, r1
 800c428:	401a      	ands	r2, r3
 800c42a:	4219      	tst	r1, r3
 800c42c:	d11c      	bne.n	800c468 <_scanf_i+0x1d0>
 800c42e:	702a      	strb	r2, [r5, #0]
 800c430:	6863      	ldr	r3, [r4, #4]
 800c432:	9900      	ldr	r1, [sp, #0]
 800c434:	9804      	ldr	r0, [sp, #16]
 800c436:	9e05      	ldr	r6, [sp, #20]
 800c438:	47b0      	blx	r6
 800c43a:	9b01      	ldr	r3, [sp, #4]
 800c43c:	6822      	ldr	r2, [r4, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	0691      	lsls	r1, r2, #26
 800c442:	d507      	bpl.n	800c454 <_scanf_i+0x1bc>
 800c444:	9901      	ldr	r1, [sp, #4]
 800c446:	1d1a      	adds	r2, r3, #4
 800c448:	600a      	str	r2, [r1, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	6018      	str	r0, [r3, #0]
 800c44e:	e008      	b.n	800c462 <_scanf_i+0x1ca>
 800c450:	2700      	movs	r7, #0
 800c452:	e7d4      	b.n	800c3fe <_scanf_i+0x166>
 800c454:	1d19      	adds	r1, r3, #4
 800c456:	07d6      	lsls	r6, r2, #31
 800c458:	d50f      	bpl.n	800c47a <_scanf_i+0x1e2>
 800c45a:	9a01      	ldr	r2, [sp, #4]
 800c45c:	6011      	str	r1, [r2, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	8018      	strh	r0, [r3, #0]
 800c462:	68e3      	ldr	r3, [r4, #12]
 800c464:	3301      	adds	r3, #1
 800c466:	60e3      	str	r3, [r4, #12]
 800c468:	2000      	movs	r0, #0
 800c46a:	9b00      	ldr	r3, [sp, #0]
 800c46c:	1aed      	subs	r5, r5, r3
 800c46e:	6923      	ldr	r3, [r4, #16]
 800c470:	19ed      	adds	r5, r5, r7
 800c472:	195b      	adds	r3, r3, r5
 800c474:	6123      	str	r3, [r4, #16]
 800c476:	b00b      	add	sp, #44	@ 0x2c
 800c478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c47a:	9a01      	ldr	r2, [sp, #4]
 800c47c:	6011      	str	r1, [r2, #0]
 800c47e:	e7e4      	b.n	800c44a <_scanf_i+0x1b2>
 800c480:	0800d264 	.word	0x0800d264
 800c484:	0800ca65 	.word	0x0800ca65
 800c488:	0800c959 	.word	0x0800c959
 800c48c:	fffffaff 	.word	0xfffffaff
 800c490:	0800d631 	.word	0x0800d631
 800c494:	fffff6ff 	.word	0xfffff6ff

0800c498 <__sflush_r>:
 800c498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c49a:	220c      	movs	r2, #12
 800c49c:	5e8b      	ldrsh	r3, [r1, r2]
 800c49e:	0005      	movs	r5, r0
 800c4a0:	000c      	movs	r4, r1
 800c4a2:	071a      	lsls	r2, r3, #28
 800c4a4:	d456      	bmi.n	800c554 <__sflush_r+0xbc>
 800c4a6:	684a      	ldr	r2, [r1, #4]
 800c4a8:	2a00      	cmp	r2, #0
 800c4aa:	dc02      	bgt.n	800c4b2 <__sflush_r+0x1a>
 800c4ac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c4ae:	2a00      	cmp	r2, #0
 800c4b0:	dd4e      	ble.n	800c550 <__sflush_r+0xb8>
 800c4b2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c4b4:	2f00      	cmp	r7, #0
 800c4b6:	d04b      	beq.n	800c550 <__sflush_r+0xb8>
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	2080      	movs	r0, #128	@ 0x80
 800c4bc:	682e      	ldr	r6, [r5, #0]
 800c4be:	602a      	str	r2, [r5, #0]
 800c4c0:	001a      	movs	r2, r3
 800c4c2:	0140      	lsls	r0, r0, #5
 800c4c4:	6a21      	ldr	r1, [r4, #32]
 800c4c6:	4002      	ands	r2, r0
 800c4c8:	4203      	tst	r3, r0
 800c4ca:	d033      	beq.n	800c534 <__sflush_r+0x9c>
 800c4cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	075b      	lsls	r3, r3, #29
 800c4d2:	d506      	bpl.n	800c4e2 <__sflush_r+0x4a>
 800c4d4:	6863      	ldr	r3, [r4, #4]
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <__sflush_r+0x4a>
 800c4de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4e0:	1ad2      	subs	r2, r2, r3
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	0028      	movs	r0, r5
 800c4e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c4e8:	6a21      	ldr	r1, [r4, #32]
 800c4ea:	47b8      	blx	r7
 800c4ec:	89a2      	ldrh	r2, [r4, #12]
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	d106      	bne.n	800c500 <__sflush_r+0x68>
 800c4f2:	6829      	ldr	r1, [r5, #0]
 800c4f4:	291d      	cmp	r1, #29
 800c4f6:	d846      	bhi.n	800c586 <__sflush_r+0xee>
 800c4f8:	4b29      	ldr	r3, [pc, #164]	@ (800c5a0 <__sflush_r+0x108>)
 800c4fa:	410b      	asrs	r3, r1
 800c4fc:	07db      	lsls	r3, r3, #31
 800c4fe:	d442      	bmi.n	800c586 <__sflush_r+0xee>
 800c500:	2300      	movs	r3, #0
 800c502:	6063      	str	r3, [r4, #4]
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	04d2      	lsls	r2, r2, #19
 800c50a:	d505      	bpl.n	800c518 <__sflush_r+0x80>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <__sflush_r+0x7e>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d100      	bne.n	800c518 <__sflush_r+0x80>
 800c516:	6560      	str	r0, [r4, #84]	@ 0x54
 800c518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c51a:	602e      	str	r6, [r5, #0]
 800c51c:	2900      	cmp	r1, #0
 800c51e:	d017      	beq.n	800c550 <__sflush_r+0xb8>
 800c520:	0023      	movs	r3, r4
 800c522:	3344      	adds	r3, #68	@ 0x44
 800c524:	4299      	cmp	r1, r3
 800c526:	d002      	beq.n	800c52e <__sflush_r+0x96>
 800c528:	0028      	movs	r0, r5
 800c52a:	f7fe fe8f 	bl	800b24c <_free_r>
 800c52e:	2300      	movs	r3, #0
 800c530:	6363      	str	r3, [r4, #52]	@ 0x34
 800c532:	e00d      	b.n	800c550 <__sflush_r+0xb8>
 800c534:	2301      	movs	r3, #1
 800c536:	0028      	movs	r0, r5
 800c538:	47b8      	blx	r7
 800c53a:	0002      	movs	r2, r0
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d1c6      	bne.n	800c4ce <__sflush_r+0x36>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0c3      	beq.n	800c4ce <__sflush_r+0x36>
 800c546:	2b1d      	cmp	r3, #29
 800c548:	d001      	beq.n	800c54e <__sflush_r+0xb6>
 800c54a:	2b16      	cmp	r3, #22
 800c54c:	d11a      	bne.n	800c584 <__sflush_r+0xec>
 800c54e:	602e      	str	r6, [r5, #0]
 800c550:	2000      	movs	r0, #0
 800c552:	e01e      	b.n	800c592 <__sflush_r+0xfa>
 800c554:	690e      	ldr	r6, [r1, #16]
 800c556:	2e00      	cmp	r6, #0
 800c558:	d0fa      	beq.n	800c550 <__sflush_r+0xb8>
 800c55a:	680f      	ldr	r7, [r1, #0]
 800c55c:	600e      	str	r6, [r1, #0]
 800c55e:	1bba      	subs	r2, r7, r6
 800c560:	9201      	str	r2, [sp, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	079b      	lsls	r3, r3, #30
 800c566:	d100      	bne.n	800c56a <__sflush_r+0xd2>
 800c568:	694a      	ldr	r2, [r1, #20]
 800c56a:	60a2      	str	r2, [r4, #8]
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	ddee      	ble.n	800c550 <__sflush_r+0xb8>
 800c572:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c574:	0032      	movs	r2, r6
 800c576:	001f      	movs	r7, r3
 800c578:	0028      	movs	r0, r5
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	6a21      	ldr	r1, [r4, #32]
 800c57e:	47b8      	blx	r7
 800c580:	2800      	cmp	r0, #0
 800c582:	dc07      	bgt.n	800c594 <__sflush_r+0xfc>
 800c584:	89a2      	ldrh	r2, [r4, #12]
 800c586:	2340      	movs	r3, #64	@ 0x40
 800c588:	2001      	movs	r0, #1
 800c58a:	4313      	orrs	r3, r2
 800c58c:	b21b      	sxth	r3, r3
 800c58e:	81a3      	strh	r3, [r4, #12]
 800c590:	4240      	negs	r0, r0
 800c592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c594:	9b01      	ldr	r3, [sp, #4]
 800c596:	1836      	adds	r6, r6, r0
 800c598:	1a1b      	subs	r3, r3, r0
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	e7e6      	b.n	800c56c <__sflush_r+0xd4>
 800c59e:	46c0      	nop			@ (mov r8, r8)
 800c5a0:	dfbffffe 	.word	0xdfbffffe

0800c5a4 <_fflush_r>:
 800c5a4:	690b      	ldr	r3, [r1, #16]
 800c5a6:	b570      	push	{r4, r5, r6, lr}
 800c5a8:	0005      	movs	r5, r0
 800c5aa:	000c      	movs	r4, r1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d102      	bne.n	800c5b6 <_fflush_r+0x12>
 800c5b0:	2500      	movs	r5, #0
 800c5b2:	0028      	movs	r0, r5
 800c5b4:	bd70      	pop	{r4, r5, r6, pc}
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d004      	beq.n	800c5c4 <_fflush_r+0x20>
 800c5ba:	6a03      	ldr	r3, [r0, #32]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d101      	bne.n	800c5c4 <_fflush_r+0x20>
 800c5c0:	f7fd fd96 	bl	800a0f0 <__sinit>
 800c5c4:	220c      	movs	r2, #12
 800c5c6:	5ea3      	ldrsh	r3, [r4, r2]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0f1      	beq.n	800c5b0 <_fflush_r+0xc>
 800c5cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5ce:	07d2      	lsls	r2, r2, #31
 800c5d0:	d404      	bmi.n	800c5dc <_fflush_r+0x38>
 800c5d2:	059b      	lsls	r3, r3, #22
 800c5d4:	d402      	bmi.n	800c5dc <_fflush_r+0x38>
 800c5d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5d8:	f7fd ff81 	bl	800a4de <__retarget_lock_acquire_recursive>
 800c5dc:	0028      	movs	r0, r5
 800c5de:	0021      	movs	r1, r4
 800c5e0:	f7ff ff5a 	bl	800c498 <__sflush_r>
 800c5e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5e6:	0005      	movs	r5, r0
 800c5e8:	07db      	lsls	r3, r3, #31
 800c5ea:	d4e2      	bmi.n	800c5b2 <_fflush_r+0xe>
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	059b      	lsls	r3, r3, #22
 800c5f0:	d4df      	bmi.n	800c5b2 <_fflush_r+0xe>
 800c5f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5f4:	f7fd ff74 	bl	800a4e0 <__retarget_lock_release_recursive>
 800c5f8:	e7db      	b.n	800c5b2 <_fflush_r+0xe>
	...

0800c5fc <fiprintf>:
 800c5fc:	b40e      	push	{r1, r2, r3}
 800c5fe:	b517      	push	{r0, r1, r2, r4, lr}
 800c600:	4c05      	ldr	r4, [pc, #20]	@ (800c618 <fiprintf+0x1c>)
 800c602:	ab05      	add	r3, sp, #20
 800c604:	cb04      	ldmia	r3!, {r2}
 800c606:	0001      	movs	r1, r0
 800c608:	6820      	ldr	r0, [r4, #0]
 800c60a:	9301      	str	r3, [sp, #4]
 800c60c:	f000 fa62 	bl	800cad4 <_vfiprintf_r>
 800c610:	bc1e      	pop	{r1, r2, r3, r4}
 800c612:	bc08      	pop	{r3}
 800c614:	b003      	add	sp, #12
 800c616:	4718      	bx	r3
 800c618:	20000024 	.word	0x20000024

0800c61c <__sccl>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	780b      	ldrb	r3, [r1, #0]
 800c620:	0004      	movs	r4, r0
 800c622:	2b5e      	cmp	r3, #94	@ 0x5e
 800c624:	d018      	beq.n	800c658 <__sccl+0x3c>
 800c626:	2200      	movs	r2, #0
 800c628:	1c4d      	adds	r5, r1, #1
 800c62a:	0021      	movs	r1, r4
 800c62c:	1c60      	adds	r0, r4, #1
 800c62e:	30ff      	adds	r0, #255	@ 0xff
 800c630:	700a      	strb	r2, [r1, #0]
 800c632:	3101      	adds	r1, #1
 800c634:	4281      	cmp	r1, r0
 800c636:	d1fb      	bne.n	800c630 <__sccl+0x14>
 800c638:	1e68      	subs	r0, r5, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00b      	beq.n	800c656 <__sccl+0x3a>
 800c63e:	2101      	movs	r1, #1
 800c640:	404a      	eors	r2, r1
 800c642:	0028      	movs	r0, r5
 800c644:	54e2      	strb	r2, [r4, r3]
 800c646:	7801      	ldrb	r1, [r0, #0]
 800c648:	1c45      	adds	r5, r0, #1
 800c64a:	292d      	cmp	r1, #45	@ 0x2d
 800c64c:	d00a      	beq.n	800c664 <__sccl+0x48>
 800c64e:	295d      	cmp	r1, #93	@ 0x5d
 800c650:	d01b      	beq.n	800c68a <__sccl+0x6e>
 800c652:	2900      	cmp	r1, #0
 800c654:	d104      	bne.n	800c660 <__sccl+0x44>
 800c656:	bd70      	pop	{r4, r5, r6, pc}
 800c658:	2201      	movs	r2, #1
 800c65a:	784b      	ldrb	r3, [r1, #1]
 800c65c:	1c8d      	adds	r5, r1, #2
 800c65e:	e7e4      	b.n	800c62a <__sccl+0xe>
 800c660:	000b      	movs	r3, r1
 800c662:	e7ee      	b.n	800c642 <__sccl+0x26>
 800c664:	7846      	ldrb	r6, [r0, #1]
 800c666:	2e5d      	cmp	r6, #93	@ 0x5d
 800c668:	d0fa      	beq.n	800c660 <__sccl+0x44>
 800c66a:	42b3      	cmp	r3, r6
 800c66c:	dcf8      	bgt.n	800c660 <__sccl+0x44>
 800c66e:	0019      	movs	r1, r3
 800c670:	3002      	adds	r0, #2
 800c672:	3101      	adds	r1, #1
 800c674:	5462      	strb	r2, [r4, r1]
 800c676:	428e      	cmp	r6, r1
 800c678:	dcfb      	bgt.n	800c672 <__sccl+0x56>
 800c67a:	2100      	movs	r1, #0
 800c67c:	1c5d      	adds	r5, r3, #1
 800c67e:	42b3      	cmp	r3, r6
 800c680:	da01      	bge.n	800c686 <__sccl+0x6a>
 800c682:	1af1      	subs	r1, r6, r3
 800c684:	3901      	subs	r1, #1
 800c686:	186b      	adds	r3, r5, r1
 800c688:	e7dd      	b.n	800c646 <__sccl+0x2a>
 800c68a:	0028      	movs	r0, r5
 800c68c:	e7e3      	b.n	800c656 <__sccl+0x3a>
	...

0800c690 <__submore>:
 800c690:	000b      	movs	r3, r1
 800c692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c694:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800c696:	3344      	adds	r3, #68	@ 0x44
 800c698:	000c      	movs	r4, r1
 800c69a:	429d      	cmp	r5, r3
 800c69c:	d11c      	bne.n	800c6d8 <__submore+0x48>
 800c69e:	2680      	movs	r6, #128	@ 0x80
 800c6a0:	00f6      	lsls	r6, r6, #3
 800c6a2:	0031      	movs	r1, r6
 800c6a4:	f7fe fe48 	bl	800b338 <_malloc_r>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d102      	bne.n	800c6b2 <__submore+0x22>
 800c6ac:	2001      	movs	r0, #1
 800c6ae:	4240      	negs	r0, r0
 800c6b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6b2:	0023      	movs	r3, r4
 800c6b4:	6360      	str	r0, [r4, #52]	@ 0x34
 800c6b6:	63a6      	str	r6, [r4, #56]	@ 0x38
 800c6b8:	3346      	adds	r3, #70	@ 0x46
 800c6ba:	781a      	ldrb	r2, [r3, #0]
 800c6bc:	4b10      	ldr	r3, [pc, #64]	@ (800c700 <__submore+0x70>)
 800c6be:	54c2      	strb	r2, [r0, r3]
 800c6c0:	0023      	movs	r3, r4
 800c6c2:	3345      	adds	r3, #69	@ 0x45
 800c6c4:	781a      	ldrb	r2, [r3, #0]
 800c6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c704 <__submore+0x74>)
 800c6c8:	54c2      	strb	r2, [r0, r3]
 800c6ca:	782a      	ldrb	r2, [r5, #0]
 800c6cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c708 <__submore+0x78>)
 800c6ce:	54c2      	strb	r2, [r0, r3]
 800c6d0:	18c0      	adds	r0, r0, r3
 800c6d2:	6020      	str	r0, [r4, #0]
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	e7eb      	b.n	800c6b0 <__submore+0x20>
 800c6d8:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800c6da:	0029      	movs	r1, r5
 800c6dc:	0073      	lsls	r3, r6, #1
 800c6de:	001a      	movs	r2, r3
 800c6e0:	9301      	str	r3, [sp, #4]
 800c6e2:	f000 f87f 	bl	800c7e4 <_realloc_r>
 800c6e6:	1e05      	subs	r5, r0, #0
 800c6e8:	d0e0      	beq.n	800c6ac <__submore+0x1c>
 800c6ea:	1987      	adds	r7, r0, r6
 800c6ec:	0001      	movs	r1, r0
 800c6ee:	0032      	movs	r2, r6
 800c6f0:	0038      	movs	r0, r7
 800c6f2:	f7fd ff01 	bl	800a4f8 <memcpy>
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	6027      	str	r7, [r4, #0]
 800c6fa:	6365      	str	r5, [r4, #52]	@ 0x34
 800c6fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c6fe:	e7e9      	b.n	800c6d4 <__submore+0x44>
 800c700:	000003ff 	.word	0x000003ff
 800c704:	000003fe 	.word	0x000003fe
 800c708:	000003fd 	.word	0x000003fd

0800c70c <memmove>:
 800c70c:	b510      	push	{r4, lr}
 800c70e:	4288      	cmp	r0, r1
 800c710:	d806      	bhi.n	800c720 <memmove+0x14>
 800c712:	2300      	movs	r3, #0
 800c714:	429a      	cmp	r2, r3
 800c716:	d008      	beq.n	800c72a <memmove+0x1e>
 800c718:	5ccc      	ldrb	r4, [r1, r3]
 800c71a:	54c4      	strb	r4, [r0, r3]
 800c71c:	3301      	adds	r3, #1
 800c71e:	e7f9      	b.n	800c714 <memmove+0x8>
 800c720:	188b      	adds	r3, r1, r2
 800c722:	4298      	cmp	r0, r3
 800c724:	d2f5      	bcs.n	800c712 <memmove+0x6>
 800c726:	3a01      	subs	r2, #1
 800c728:	d200      	bcs.n	800c72c <memmove+0x20>
 800c72a:	bd10      	pop	{r4, pc}
 800c72c:	5c8b      	ldrb	r3, [r1, r2]
 800c72e:	5483      	strb	r3, [r0, r2]
 800c730:	e7f9      	b.n	800c726 <memmove+0x1a>
	...

0800c734 <_sbrk_r>:
 800c734:	2300      	movs	r3, #0
 800c736:	b570      	push	{r4, r5, r6, lr}
 800c738:	4d06      	ldr	r5, [pc, #24]	@ (800c754 <_sbrk_r+0x20>)
 800c73a:	0004      	movs	r4, r0
 800c73c:	0008      	movs	r0, r1
 800c73e:	602b      	str	r3, [r5, #0]
 800c740:	f7f8 f83c 	bl	80047bc <_sbrk>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	d103      	bne.n	800c750 <_sbrk_r+0x1c>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d000      	beq.n	800c750 <_sbrk_r+0x1c>
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	bd70      	pop	{r4, r5, r6, pc}
 800c752:	46c0      	nop			@ (mov r8, r8)
 800c754:	20000720 	.word	0x20000720

0800c758 <abort>:
 800c758:	2006      	movs	r0, #6
 800c75a:	b510      	push	{r4, lr}
 800c75c:	f000 fba0 	bl	800cea0 <raise>
 800c760:	2001      	movs	r0, #1
 800c762:	f7f7 ffb9 	bl	80046d8 <_exit>

0800c766 <_calloc_r>:
 800c766:	b570      	push	{r4, r5, r6, lr}
 800c768:	0c0b      	lsrs	r3, r1, #16
 800c76a:	0c15      	lsrs	r5, r2, #16
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d11e      	bne.n	800c7ae <_calloc_r+0x48>
 800c770:	2d00      	cmp	r5, #0
 800c772:	d10c      	bne.n	800c78e <_calloc_r+0x28>
 800c774:	b289      	uxth	r1, r1
 800c776:	b294      	uxth	r4, r2
 800c778:	434c      	muls	r4, r1
 800c77a:	0021      	movs	r1, r4
 800c77c:	f7fe fddc 	bl	800b338 <_malloc_r>
 800c780:	1e05      	subs	r5, r0, #0
 800c782:	d01a      	beq.n	800c7ba <_calloc_r+0x54>
 800c784:	0022      	movs	r2, r4
 800c786:	2100      	movs	r1, #0
 800c788:	f7fd fdb0 	bl	800a2ec <memset>
 800c78c:	e016      	b.n	800c7bc <_calloc_r+0x56>
 800c78e:	1c2b      	adds	r3, r5, #0
 800c790:	1c0c      	adds	r4, r1, #0
 800c792:	b289      	uxth	r1, r1
 800c794:	b292      	uxth	r2, r2
 800c796:	434a      	muls	r2, r1
 800c798:	b29b      	uxth	r3, r3
 800c79a:	b2a1      	uxth	r1, r4
 800c79c:	4359      	muls	r1, r3
 800c79e:	0c14      	lsrs	r4, r2, #16
 800c7a0:	190c      	adds	r4, r1, r4
 800c7a2:	0c23      	lsrs	r3, r4, #16
 800c7a4:	d107      	bne.n	800c7b6 <_calloc_r+0x50>
 800c7a6:	0424      	lsls	r4, r4, #16
 800c7a8:	b292      	uxth	r2, r2
 800c7aa:	4314      	orrs	r4, r2
 800c7ac:	e7e5      	b.n	800c77a <_calloc_r+0x14>
 800c7ae:	2d00      	cmp	r5, #0
 800c7b0:	d101      	bne.n	800c7b6 <_calloc_r+0x50>
 800c7b2:	1c14      	adds	r4, r2, #0
 800c7b4:	e7ed      	b.n	800c792 <_calloc_r+0x2c>
 800c7b6:	230c      	movs	r3, #12
 800c7b8:	6003      	str	r3, [r0, #0]
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	0028      	movs	r0, r5
 800c7be:	bd70      	pop	{r4, r5, r6, pc}

0800c7c0 <__ascii_mbtowc>:
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	2900      	cmp	r1, #0
 800c7c4:	d100      	bne.n	800c7c8 <__ascii_mbtowc+0x8>
 800c7c6:	a901      	add	r1, sp, #4
 800c7c8:	1e10      	subs	r0, r2, #0
 800c7ca:	d006      	beq.n	800c7da <__ascii_mbtowc+0x1a>
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d006      	beq.n	800c7de <__ascii_mbtowc+0x1e>
 800c7d0:	7813      	ldrb	r3, [r2, #0]
 800c7d2:	600b      	str	r3, [r1, #0]
 800c7d4:	7810      	ldrb	r0, [r2, #0]
 800c7d6:	1e43      	subs	r3, r0, #1
 800c7d8:	4198      	sbcs	r0, r3
 800c7da:	b002      	add	sp, #8
 800c7dc:	4770      	bx	lr
 800c7de:	2002      	movs	r0, #2
 800c7e0:	4240      	negs	r0, r0
 800c7e2:	e7fa      	b.n	800c7da <__ascii_mbtowc+0x1a>

0800c7e4 <_realloc_r>:
 800c7e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7e6:	0006      	movs	r6, r0
 800c7e8:	000c      	movs	r4, r1
 800c7ea:	0015      	movs	r5, r2
 800c7ec:	2900      	cmp	r1, #0
 800c7ee:	d105      	bne.n	800c7fc <_realloc_r+0x18>
 800c7f0:	0011      	movs	r1, r2
 800c7f2:	f7fe fda1 	bl	800b338 <_malloc_r>
 800c7f6:	0004      	movs	r4, r0
 800c7f8:	0020      	movs	r0, r4
 800c7fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	d103      	bne.n	800c808 <_realloc_r+0x24>
 800c800:	f7fe fd24 	bl	800b24c <_free_r>
 800c804:	2400      	movs	r4, #0
 800c806:	e7f7      	b.n	800c7f8 <_realloc_r+0x14>
 800c808:	f000 fb6a 	bl	800cee0 <_malloc_usable_size_r>
 800c80c:	0007      	movs	r7, r0
 800c80e:	4285      	cmp	r5, r0
 800c810:	d802      	bhi.n	800c818 <_realloc_r+0x34>
 800c812:	0843      	lsrs	r3, r0, #1
 800c814:	42ab      	cmp	r3, r5
 800c816:	d3ef      	bcc.n	800c7f8 <_realloc_r+0x14>
 800c818:	0029      	movs	r1, r5
 800c81a:	0030      	movs	r0, r6
 800c81c:	f7fe fd8c 	bl	800b338 <_malloc_r>
 800c820:	9001      	str	r0, [sp, #4]
 800c822:	2800      	cmp	r0, #0
 800c824:	d0ee      	beq.n	800c804 <_realloc_r+0x20>
 800c826:	002a      	movs	r2, r5
 800c828:	42bd      	cmp	r5, r7
 800c82a:	d900      	bls.n	800c82e <_realloc_r+0x4a>
 800c82c:	003a      	movs	r2, r7
 800c82e:	0021      	movs	r1, r4
 800c830:	9801      	ldr	r0, [sp, #4]
 800c832:	f7fd fe61 	bl	800a4f8 <memcpy>
 800c836:	0021      	movs	r1, r4
 800c838:	0030      	movs	r0, r6
 800c83a:	f7fe fd07 	bl	800b24c <_free_r>
 800c83e:	9c01      	ldr	r4, [sp, #4]
 800c840:	e7da      	b.n	800c7f8 <_realloc_r+0x14>
	...

0800c844 <_strtol_l.constprop.0>:
 800c844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c846:	b085      	sub	sp, #20
 800c848:	0017      	movs	r7, r2
 800c84a:	001e      	movs	r6, r3
 800c84c:	9003      	str	r0, [sp, #12]
 800c84e:	9101      	str	r1, [sp, #4]
 800c850:	2b24      	cmp	r3, #36	@ 0x24
 800c852:	d844      	bhi.n	800c8de <_strtol_l.constprop.0+0x9a>
 800c854:	000c      	movs	r4, r1
 800c856:	2b01      	cmp	r3, #1
 800c858:	d041      	beq.n	800c8de <_strtol_l.constprop.0+0x9a>
 800c85a:	4b3d      	ldr	r3, [pc, #244]	@ (800c950 <_strtol_l.constprop.0+0x10c>)
 800c85c:	2208      	movs	r2, #8
 800c85e:	469c      	mov	ip, r3
 800c860:	0023      	movs	r3, r4
 800c862:	4661      	mov	r1, ip
 800c864:	781d      	ldrb	r5, [r3, #0]
 800c866:	3401      	adds	r4, #1
 800c868:	5d48      	ldrb	r0, [r1, r5]
 800c86a:	0001      	movs	r1, r0
 800c86c:	4011      	ands	r1, r2
 800c86e:	4210      	tst	r0, r2
 800c870:	d1f6      	bne.n	800c860 <_strtol_l.constprop.0+0x1c>
 800c872:	2d2d      	cmp	r5, #45	@ 0x2d
 800c874:	d13a      	bne.n	800c8ec <_strtol_l.constprop.0+0xa8>
 800c876:	7825      	ldrb	r5, [r4, #0]
 800c878:	1c9c      	adds	r4, r3, #2
 800c87a:	2301      	movs	r3, #1
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	2210      	movs	r2, #16
 800c880:	0033      	movs	r3, r6
 800c882:	4393      	bics	r3, r2
 800c884:	d109      	bne.n	800c89a <_strtol_l.constprop.0+0x56>
 800c886:	2d30      	cmp	r5, #48	@ 0x30
 800c888:	d136      	bne.n	800c8f8 <_strtol_l.constprop.0+0xb4>
 800c88a:	2120      	movs	r1, #32
 800c88c:	7823      	ldrb	r3, [r4, #0]
 800c88e:	438b      	bics	r3, r1
 800c890:	2b58      	cmp	r3, #88	@ 0x58
 800c892:	d131      	bne.n	800c8f8 <_strtol_l.constprop.0+0xb4>
 800c894:	0016      	movs	r6, r2
 800c896:	7865      	ldrb	r5, [r4, #1]
 800c898:	3402      	adds	r4, #2
 800c89a:	4a2e      	ldr	r2, [pc, #184]	@ (800c954 <_strtol_l.constprop.0+0x110>)
 800c89c:	9b00      	ldr	r3, [sp, #0]
 800c89e:	4694      	mov	ip, r2
 800c8a0:	4463      	add	r3, ip
 800c8a2:	0031      	movs	r1, r6
 800c8a4:	0018      	movs	r0, r3
 800c8a6:	9302      	str	r3, [sp, #8]
 800c8a8:	f7f3 fcda 	bl	8000260 <__aeabi_uidivmod>
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	4684      	mov	ip, r0
 800c8b0:	0010      	movs	r0, r2
 800c8b2:	002b      	movs	r3, r5
 800c8b4:	3b30      	subs	r3, #48	@ 0x30
 800c8b6:	2b09      	cmp	r3, #9
 800c8b8:	d825      	bhi.n	800c906 <_strtol_l.constprop.0+0xc2>
 800c8ba:	001d      	movs	r5, r3
 800c8bc:	42ae      	cmp	r6, r5
 800c8be:	dd31      	ble.n	800c924 <_strtol_l.constprop.0+0xe0>
 800c8c0:	1c53      	adds	r3, r2, #1
 800c8c2:	d009      	beq.n	800c8d8 <_strtol_l.constprop.0+0x94>
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	4252      	negs	r2, r2
 800c8c8:	4584      	cmp	ip, r0
 800c8ca:	d305      	bcc.n	800c8d8 <_strtol_l.constprop.0+0x94>
 800c8cc:	d101      	bne.n	800c8d2 <_strtol_l.constprop.0+0x8e>
 800c8ce:	42a9      	cmp	r1, r5
 800c8d0:	db25      	blt.n	800c91e <_strtol_l.constprop.0+0xda>
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	4370      	muls	r0, r6
 800c8d6:	1828      	adds	r0, r5, r0
 800c8d8:	7825      	ldrb	r5, [r4, #0]
 800c8da:	3401      	adds	r4, #1
 800c8dc:	e7e9      	b.n	800c8b2 <_strtol_l.constprop.0+0x6e>
 800c8de:	f7fd fdd3 	bl	800a488 <__errno>
 800c8e2:	2316      	movs	r3, #22
 800c8e4:	6003      	str	r3, [r0, #0]
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	b005      	add	sp, #20
 800c8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ec:	9100      	str	r1, [sp, #0]
 800c8ee:	2d2b      	cmp	r5, #43	@ 0x2b
 800c8f0:	d1c5      	bne.n	800c87e <_strtol_l.constprop.0+0x3a>
 800c8f2:	7825      	ldrb	r5, [r4, #0]
 800c8f4:	1c9c      	adds	r4, r3, #2
 800c8f6:	e7c2      	b.n	800c87e <_strtol_l.constprop.0+0x3a>
 800c8f8:	2e00      	cmp	r6, #0
 800c8fa:	d1ce      	bne.n	800c89a <_strtol_l.constprop.0+0x56>
 800c8fc:	3608      	adds	r6, #8
 800c8fe:	2d30      	cmp	r5, #48	@ 0x30
 800c900:	d0cb      	beq.n	800c89a <_strtol_l.constprop.0+0x56>
 800c902:	3602      	adds	r6, #2
 800c904:	e7c9      	b.n	800c89a <_strtol_l.constprop.0+0x56>
 800c906:	002b      	movs	r3, r5
 800c908:	3b41      	subs	r3, #65	@ 0x41
 800c90a:	2b19      	cmp	r3, #25
 800c90c:	d801      	bhi.n	800c912 <_strtol_l.constprop.0+0xce>
 800c90e:	3d37      	subs	r5, #55	@ 0x37
 800c910:	e7d4      	b.n	800c8bc <_strtol_l.constprop.0+0x78>
 800c912:	002b      	movs	r3, r5
 800c914:	3b61      	subs	r3, #97	@ 0x61
 800c916:	2b19      	cmp	r3, #25
 800c918:	d804      	bhi.n	800c924 <_strtol_l.constprop.0+0xe0>
 800c91a:	3d57      	subs	r5, #87	@ 0x57
 800c91c:	e7ce      	b.n	800c8bc <_strtol_l.constprop.0+0x78>
 800c91e:	2201      	movs	r2, #1
 800c920:	4252      	negs	r2, r2
 800c922:	e7d9      	b.n	800c8d8 <_strtol_l.constprop.0+0x94>
 800c924:	1c53      	adds	r3, r2, #1
 800c926:	d108      	bne.n	800c93a <_strtol_l.constprop.0+0xf6>
 800c928:	2322      	movs	r3, #34	@ 0x22
 800c92a:	9a03      	ldr	r2, [sp, #12]
 800c92c:	9802      	ldr	r0, [sp, #8]
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	2f00      	cmp	r7, #0
 800c932:	d0d9      	beq.n	800c8e8 <_strtol_l.constprop.0+0xa4>
 800c934:	1e63      	subs	r3, r4, #1
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	e007      	b.n	800c94a <_strtol_l.constprop.0+0x106>
 800c93a:	9b00      	ldr	r3, [sp, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d000      	beq.n	800c942 <_strtol_l.constprop.0+0xfe>
 800c940:	4240      	negs	r0, r0
 800c942:	2f00      	cmp	r7, #0
 800c944:	d0d0      	beq.n	800c8e8 <_strtol_l.constprop.0+0xa4>
 800c946:	2a00      	cmp	r2, #0
 800c948:	d1f4      	bne.n	800c934 <_strtol_l.constprop.0+0xf0>
 800c94a:	9b01      	ldr	r3, [sp, #4]
 800c94c:	603b      	str	r3, [r7, #0]
 800c94e:	e7cb      	b.n	800c8e8 <_strtol_l.constprop.0+0xa4>
 800c950:	0800d647 	.word	0x0800d647
 800c954:	7fffffff 	.word	0x7fffffff

0800c958 <_strtol_r>:
 800c958:	b510      	push	{r4, lr}
 800c95a:	f7ff ff73 	bl	800c844 <_strtol_l.constprop.0>
 800c95e:	bd10      	pop	{r4, pc}

0800c960 <_strtoul_l.constprop.0>:
 800c960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c962:	001e      	movs	r6, r3
 800c964:	4b3e      	ldr	r3, [pc, #248]	@ (800ca60 <_strtoul_l.constprop.0+0x100>)
 800c966:	0017      	movs	r7, r2
 800c968:	000c      	movs	r4, r1
 800c96a:	469c      	mov	ip, r3
 800c96c:	2208      	movs	r2, #8
 800c96e:	b085      	sub	sp, #20
 800c970:	9003      	str	r0, [sp, #12]
 800c972:	9100      	str	r1, [sp, #0]
 800c974:	0023      	movs	r3, r4
 800c976:	4661      	mov	r1, ip
 800c978:	781d      	ldrb	r5, [r3, #0]
 800c97a:	3401      	adds	r4, #1
 800c97c:	5d48      	ldrb	r0, [r1, r5]
 800c97e:	0001      	movs	r1, r0
 800c980:	4011      	ands	r1, r2
 800c982:	4210      	tst	r0, r2
 800c984:	d1f6      	bne.n	800c974 <_strtoul_l.constprop.0+0x14>
 800c986:	2d2d      	cmp	r5, #45	@ 0x2d
 800c988:	d137      	bne.n	800c9fa <_strtoul_l.constprop.0+0x9a>
 800c98a:	7825      	ldrb	r5, [r4, #0]
 800c98c:	1c9c      	adds	r4, r3, #2
 800c98e:	2301      	movs	r3, #1
 800c990:	9302      	str	r3, [sp, #8]
 800c992:	2210      	movs	r2, #16
 800c994:	0033      	movs	r3, r6
 800c996:	4393      	bics	r3, r2
 800c998:	d109      	bne.n	800c9ae <_strtoul_l.constprop.0+0x4e>
 800c99a:	2d30      	cmp	r5, #48	@ 0x30
 800c99c:	d133      	bne.n	800ca06 <_strtoul_l.constprop.0+0xa6>
 800c99e:	2120      	movs	r1, #32
 800c9a0:	7823      	ldrb	r3, [r4, #0]
 800c9a2:	438b      	bics	r3, r1
 800c9a4:	2b58      	cmp	r3, #88	@ 0x58
 800c9a6:	d12e      	bne.n	800ca06 <_strtoul_l.constprop.0+0xa6>
 800c9a8:	0016      	movs	r6, r2
 800c9aa:	7865      	ldrb	r5, [r4, #1]
 800c9ac:	3402      	adds	r4, #2
 800c9ae:	2001      	movs	r0, #1
 800c9b0:	0031      	movs	r1, r6
 800c9b2:	4240      	negs	r0, r0
 800c9b4:	f7f3 fbce 	bl	8000154 <__udivsi3>
 800c9b8:	9001      	str	r0, [sp, #4]
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	0031      	movs	r1, r6
 800c9be:	4240      	negs	r0, r0
 800c9c0:	f7f3 fc4e 	bl	8000260 <__aeabi_uidivmod>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	4694      	mov	ip, r2
 800c9cc:	002a      	movs	r2, r5
 800c9ce:	3a30      	subs	r2, #48	@ 0x30
 800c9d0:	2a09      	cmp	r2, #9
 800c9d2:	d81f      	bhi.n	800ca14 <_strtoul_l.constprop.0+0xb4>
 800c9d4:	0015      	movs	r5, r2
 800c9d6:	42ae      	cmp	r6, r5
 800c9d8:	dd2b      	ble.n	800ca32 <_strtoul_l.constprop.0+0xd2>
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	d00a      	beq.n	800c9f4 <_strtoul_l.constprop.0+0x94>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	9a01      	ldr	r2, [sp, #4]
 800c9e2:	425b      	negs	r3, r3
 800c9e4:	4282      	cmp	r2, r0
 800c9e6:	d305      	bcc.n	800c9f4 <_strtoul_l.constprop.0+0x94>
 800c9e8:	d101      	bne.n	800c9ee <_strtoul_l.constprop.0+0x8e>
 800c9ea:	42a9      	cmp	r1, r5
 800c9ec:	db1e      	blt.n	800ca2c <_strtoul_l.constprop.0+0xcc>
 800c9ee:	4663      	mov	r3, ip
 800c9f0:	4370      	muls	r0, r6
 800c9f2:	1828      	adds	r0, r5, r0
 800c9f4:	7825      	ldrb	r5, [r4, #0]
 800c9f6:	3401      	adds	r4, #1
 800c9f8:	e7e8      	b.n	800c9cc <_strtoul_l.constprop.0+0x6c>
 800c9fa:	9102      	str	r1, [sp, #8]
 800c9fc:	2d2b      	cmp	r5, #43	@ 0x2b
 800c9fe:	d1c8      	bne.n	800c992 <_strtoul_l.constprop.0+0x32>
 800ca00:	7825      	ldrb	r5, [r4, #0]
 800ca02:	1c9c      	adds	r4, r3, #2
 800ca04:	e7c5      	b.n	800c992 <_strtoul_l.constprop.0+0x32>
 800ca06:	2e00      	cmp	r6, #0
 800ca08:	d1d1      	bne.n	800c9ae <_strtoul_l.constprop.0+0x4e>
 800ca0a:	3608      	adds	r6, #8
 800ca0c:	2d30      	cmp	r5, #48	@ 0x30
 800ca0e:	d0ce      	beq.n	800c9ae <_strtoul_l.constprop.0+0x4e>
 800ca10:	3602      	adds	r6, #2
 800ca12:	e7cc      	b.n	800c9ae <_strtoul_l.constprop.0+0x4e>
 800ca14:	002a      	movs	r2, r5
 800ca16:	3a41      	subs	r2, #65	@ 0x41
 800ca18:	2a19      	cmp	r2, #25
 800ca1a:	d801      	bhi.n	800ca20 <_strtoul_l.constprop.0+0xc0>
 800ca1c:	3d37      	subs	r5, #55	@ 0x37
 800ca1e:	e7da      	b.n	800c9d6 <_strtoul_l.constprop.0+0x76>
 800ca20:	002a      	movs	r2, r5
 800ca22:	3a61      	subs	r2, #97	@ 0x61
 800ca24:	2a19      	cmp	r2, #25
 800ca26:	d804      	bhi.n	800ca32 <_strtoul_l.constprop.0+0xd2>
 800ca28:	3d57      	subs	r5, #87	@ 0x57
 800ca2a:	e7d4      	b.n	800c9d6 <_strtoul_l.constprop.0+0x76>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	425b      	negs	r3, r3
 800ca30:	e7e0      	b.n	800c9f4 <_strtoul_l.constprop.0+0x94>
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	d107      	bne.n	800ca46 <_strtoul_l.constprop.0+0xe6>
 800ca36:	2222      	movs	r2, #34	@ 0x22
 800ca38:	9903      	ldr	r1, [sp, #12]
 800ca3a:	0018      	movs	r0, r3
 800ca3c:	600a      	str	r2, [r1, #0]
 800ca3e:	2f00      	cmp	r7, #0
 800ca40:	d109      	bne.n	800ca56 <_strtoul_l.constprop.0+0xf6>
 800ca42:	b005      	add	sp, #20
 800ca44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca46:	9a02      	ldr	r2, [sp, #8]
 800ca48:	2a00      	cmp	r2, #0
 800ca4a:	d000      	beq.n	800ca4e <_strtoul_l.constprop.0+0xee>
 800ca4c:	4240      	negs	r0, r0
 800ca4e:	2f00      	cmp	r7, #0
 800ca50:	d0f7      	beq.n	800ca42 <_strtoul_l.constprop.0+0xe2>
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <_strtoul_l.constprop.0+0xfa>
 800ca56:	1e63      	subs	r3, r4, #1
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	9b00      	ldr	r3, [sp, #0]
 800ca5c:	603b      	str	r3, [r7, #0]
 800ca5e:	e7f0      	b.n	800ca42 <_strtoul_l.constprop.0+0xe2>
 800ca60:	0800d647 	.word	0x0800d647

0800ca64 <_strtoul_r>:
 800ca64:	b510      	push	{r4, lr}
 800ca66:	f7ff ff7b 	bl	800c960 <_strtoul_l.constprop.0>
 800ca6a:	bd10      	pop	{r4, pc}

0800ca6c <__ascii_wctomb>:
 800ca6c:	0003      	movs	r3, r0
 800ca6e:	1e08      	subs	r0, r1, #0
 800ca70:	d005      	beq.n	800ca7e <__ascii_wctomb+0x12>
 800ca72:	2aff      	cmp	r2, #255	@ 0xff
 800ca74:	d904      	bls.n	800ca80 <__ascii_wctomb+0x14>
 800ca76:	228a      	movs	r2, #138	@ 0x8a
 800ca78:	2001      	movs	r0, #1
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	4240      	negs	r0, r0
 800ca7e:	4770      	bx	lr
 800ca80:	2001      	movs	r0, #1
 800ca82:	700a      	strb	r2, [r1, #0]
 800ca84:	e7fb      	b.n	800ca7e <__ascii_wctomb+0x12>

0800ca86 <__sfputc_r>:
 800ca86:	6893      	ldr	r3, [r2, #8]
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	6093      	str	r3, [r2, #8]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	da04      	bge.n	800ca9c <__sfputc_r+0x16>
 800ca92:	6994      	ldr	r4, [r2, #24]
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	db07      	blt.n	800caa8 <__sfputc_r+0x22>
 800ca98:	290a      	cmp	r1, #10
 800ca9a:	d005      	beq.n	800caa8 <__sfputc_r+0x22>
 800ca9c:	6813      	ldr	r3, [r2, #0]
 800ca9e:	1c58      	adds	r0, r3, #1
 800caa0:	6010      	str	r0, [r2, #0]
 800caa2:	7019      	strb	r1, [r3, #0]
 800caa4:	0008      	movs	r0, r1
 800caa6:	bd10      	pop	{r4, pc}
 800caa8:	f000 f930 	bl	800cd0c <__swbuf_r>
 800caac:	0001      	movs	r1, r0
 800caae:	e7f9      	b.n	800caa4 <__sfputc_r+0x1e>

0800cab0 <__sfputs_r>:
 800cab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab2:	0006      	movs	r6, r0
 800cab4:	000f      	movs	r7, r1
 800cab6:	0014      	movs	r4, r2
 800cab8:	18d5      	adds	r5, r2, r3
 800caba:	42ac      	cmp	r4, r5
 800cabc:	d101      	bne.n	800cac2 <__sfputs_r+0x12>
 800cabe:	2000      	movs	r0, #0
 800cac0:	e007      	b.n	800cad2 <__sfputs_r+0x22>
 800cac2:	7821      	ldrb	r1, [r4, #0]
 800cac4:	003a      	movs	r2, r7
 800cac6:	0030      	movs	r0, r6
 800cac8:	f7ff ffdd 	bl	800ca86 <__sfputc_r>
 800cacc:	3401      	adds	r4, #1
 800cace:	1c43      	adds	r3, r0, #1
 800cad0:	d1f3      	bne.n	800caba <__sfputs_r+0xa>
 800cad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cad4 <_vfiprintf_r>:
 800cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cad6:	b0a1      	sub	sp, #132	@ 0x84
 800cad8:	000f      	movs	r7, r1
 800cada:	0015      	movs	r5, r2
 800cadc:	001e      	movs	r6, r3
 800cade:	9003      	str	r0, [sp, #12]
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d004      	beq.n	800caee <_vfiprintf_r+0x1a>
 800cae4:	6a03      	ldr	r3, [r0, #32]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <_vfiprintf_r+0x1a>
 800caea:	f7fd fb01 	bl	800a0f0 <__sinit>
 800caee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caf0:	07db      	lsls	r3, r3, #31
 800caf2:	d405      	bmi.n	800cb00 <_vfiprintf_r+0x2c>
 800caf4:	89bb      	ldrh	r3, [r7, #12]
 800caf6:	059b      	lsls	r3, r3, #22
 800caf8:	d402      	bmi.n	800cb00 <_vfiprintf_r+0x2c>
 800cafa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cafc:	f7fd fcef 	bl	800a4de <__retarget_lock_acquire_recursive>
 800cb00:	89bb      	ldrh	r3, [r7, #12]
 800cb02:	071b      	lsls	r3, r3, #28
 800cb04:	d502      	bpl.n	800cb0c <_vfiprintf_r+0x38>
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d113      	bne.n	800cb34 <_vfiprintf_r+0x60>
 800cb0c:	0039      	movs	r1, r7
 800cb0e:	9803      	ldr	r0, [sp, #12]
 800cb10:	f000 f93e 	bl	800cd90 <__swsetup_r>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d00d      	beq.n	800cb34 <_vfiprintf_r+0x60>
 800cb18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb1a:	07db      	lsls	r3, r3, #31
 800cb1c:	d503      	bpl.n	800cb26 <_vfiprintf_r+0x52>
 800cb1e:	2001      	movs	r0, #1
 800cb20:	4240      	negs	r0, r0
 800cb22:	b021      	add	sp, #132	@ 0x84
 800cb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb26:	89bb      	ldrh	r3, [r7, #12]
 800cb28:	059b      	lsls	r3, r3, #22
 800cb2a:	d4f8      	bmi.n	800cb1e <_vfiprintf_r+0x4a>
 800cb2c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cb2e:	f7fd fcd7 	bl	800a4e0 <__retarget_lock_release_recursive>
 800cb32:	e7f4      	b.n	800cb1e <_vfiprintf_r+0x4a>
 800cb34:	2300      	movs	r3, #0
 800cb36:	ac08      	add	r4, sp, #32
 800cb38:	6163      	str	r3, [r4, #20]
 800cb3a:	3320      	adds	r3, #32
 800cb3c:	7663      	strb	r3, [r4, #25]
 800cb3e:	3310      	adds	r3, #16
 800cb40:	76a3      	strb	r3, [r4, #26]
 800cb42:	9607      	str	r6, [sp, #28]
 800cb44:	002e      	movs	r6, r5
 800cb46:	7833      	ldrb	r3, [r6, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <_vfiprintf_r+0x7c>
 800cb4c:	2b25      	cmp	r3, #37	@ 0x25
 800cb4e:	d148      	bne.n	800cbe2 <_vfiprintf_r+0x10e>
 800cb50:	1b73      	subs	r3, r6, r5
 800cb52:	9305      	str	r3, [sp, #20]
 800cb54:	42ae      	cmp	r6, r5
 800cb56:	d00b      	beq.n	800cb70 <_vfiprintf_r+0x9c>
 800cb58:	002a      	movs	r2, r5
 800cb5a:	0039      	movs	r1, r7
 800cb5c:	9803      	ldr	r0, [sp, #12]
 800cb5e:	f7ff ffa7 	bl	800cab0 <__sfputs_r>
 800cb62:	3001      	adds	r0, #1
 800cb64:	d100      	bne.n	800cb68 <_vfiprintf_r+0x94>
 800cb66:	e0ae      	b.n	800ccc6 <_vfiprintf_r+0x1f2>
 800cb68:	6963      	ldr	r3, [r4, #20]
 800cb6a:	9a05      	ldr	r2, [sp, #20]
 800cb6c:	189b      	adds	r3, r3, r2
 800cb6e:	6163      	str	r3, [r4, #20]
 800cb70:	7833      	ldrb	r3, [r6, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d100      	bne.n	800cb78 <_vfiprintf_r+0xa4>
 800cb76:	e0a6      	b.n	800ccc6 <_vfiprintf_r+0x1f2>
 800cb78:	2201      	movs	r2, #1
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	4252      	negs	r2, r2
 800cb7e:	6062      	str	r2, [r4, #4]
 800cb80:	a904      	add	r1, sp, #16
 800cb82:	3254      	adds	r2, #84	@ 0x54
 800cb84:	1852      	adds	r2, r2, r1
 800cb86:	1c75      	adds	r5, r6, #1
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	60e3      	str	r3, [r4, #12]
 800cb8c:	60a3      	str	r3, [r4, #8]
 800cb8e:	7013      	strb	r3, [r2, #0]
 800cb90:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cb92:	4b59      	ldr	r3, [pc, #356]	@ (800ccf8 <_vfiprintf_r+0x224>)
 800cb94:	2205      	movs	r2, #5
 800cb96:	0018      	movs	r0, r3
 800cb98:	7829      	ldrb	r1, [r5, #0]
 800cb9a:	9305      	str	r3, [sp, #20]
 800cb9c:	f7fd fca1 	bl	800a4e2 <memchr>
 800cba0:	1c6e      	adds	r6, r5, #1
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d11f      	bne.n	800cbe6 <_vfiprintf_r+0x112>
 800cba6:	6822      	ldr	r2, [r4, #0]
 800cba8:	06d3      	lsls	r3, r2, #27
 800cbaa:	d504      	bpl.n	800cbb6 <_vfiprintf_r+0xe2>
 800cbac:	2353      	movs	r3, #83	@ 0x53
 800cbae:	a904      	add	r1, sp, #16
 800cbb0:	185b      	adds	r3, r3, r1
 800cbb2:	2120      	movs	r1, #32
 800cbb4:	7019      	strb	r1, [r3, #0]
 800cbb6:	0713      	lsls	r3, r2, #28
 800cbb8:	d504      	bpl.n	800cbc4 <_vfiprintf_r+0xf0>
 800cbba:	2353      	movs	r3, #83	@ 0x53
 800cbbc:	a904      	add	r1, sp, #16
 800cbbe:	185b      	adds	r3, r3, r1
 800cbc0:	212b      	movs	r1, #43	@ 0x2b
 800cbc2:	7019      	strb	r1, [r3, #0]
 800cbc4:	782b      	ldrb	r3, [r5, #0]
 800cbc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbc8:	d016      	beq.n	800cbf8 <_vfiprintf_r+0x124>
 800cbca:	002e      	movs	r6, r5
 800cbcc:	2100      	movs	r1, #0
 800cbce:	200a      	movs	r0, #10
 800cbd0:	68e3      	ldr	r3, [r4, #12]
 800cbd2:	7832      	ldrb	r2, [r6, #0]
 800cbd4:	1c75      	adds	r5, r6, #1
 800cbd6:	3a30      	subs	r2, #48	@ 0x30
 800cbd8:	2a09      	cmp	r2, #9
 800cbda:	d950      	bls.n	800cc7e <_vfiprintf_r+0x1aa>
 800cbdc:	2900      	cmp	r1, #0
 800cbde:	d111      	bne.n	800cc04 <_vfiprintf_r+0x130>
 800cbe0:	e017      	b.n	800cc12 <_vfiprintf_r+0x13e>
 800cbe2:	3601      	adds	r6, #1
 800cbe4:	e7af      	b.n	800cb46 <_vfiprintf_r+0x72>
 800cbe6:	9b05      	ldr	r3, [sp, #20]
 800cbe8:	6822      	ldr	r2, [r4, #0]
 800cbea:	1ac0      	subs	r0, r0, r3
 800cbec:	2301      	movs	r3, #1
 800cbee:	4083      	lsls	r3, r0
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	0035      	movs	r5, r6
 800cbf4:	6023      	str	r3, [r4, #0]
 800cbf6:	e7cc      	b.n	800cb92 <_vfiprintf_r+0xbe>
 800cbf8:	9b07      	ldr	r3, [sp, #28]
 800cbfa:	1d19      	adds	r1, r3, #4
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	9107      	str	r1, [sp, #28]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	db01      	blt.n	800cc08 <_vfiprintf_r+0x134>
 800cc04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc06:	e004      	b.n	800cc12 <_vfiprintf_r+0x13e>
 800cc08:	425b      	negs	r3, r3
 800cc0a:	60e3      	str	r3, [r4, #12]
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	7833      	ldrb	r3, [r6, #0]
 800cc14:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc16:	d10c      	bne.n	800cc32 <_vfiprintf_r+0x15e>
 800cc18:	7873      	ldrb	r3, [r6, #1]
 800cc1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc1c:	d134      	bne.n	800cc88 <_vfiprintf_r+0x1b4>
 800cc1e:	9b07      	ldr	r3, [sp, #28]
 800cc20:	3602      	adds	r6, #2
 800cc22:	1d1a      	adds	r2, r3, #4
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	9207      	str	r2, [sp, #28]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	da01      	bge.n	800cc30 <_vfiprintf_r+0x15c>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	425b      	negs	r3, r3
 800cc30:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc32:	4d32      	ldr	r5, [pc, #200]	@ (800ccfc <_vfiprintf_r+0x228>)
 800cc34:	2203      	movs	r2, #3
 800cc36:	0028      	movs	r0, r5
 800cc38:	7831      	ldrb	r1, [r6, #0]
 800cc3a:	f7fd fc52 	bl	800a4e2 <memchr>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d006      	beq.n	800cc50 <_vfiprintf_r+0x17c>
 800cc42:	2340      	movs	r3, #64	@ 0x40
 800cc44:	1b40      	subs	r0, r0, r5
 800cc46:	4083      	lsls	r3, r0
 800cc48:	6822      	ldr	r2, [r4, #0]
 800cc4a:	3601      	adds	r6, #1
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	6023      	str	r3, [r4, #0]
 800cc50:	7831      	ldrb	r1, [r6, #0]
 800cc52:	2206      	movs	r2, #6
 800cc54:	482a      	ldr	r0, [pc, #168]	@ (800cd00 <_vfiprintf_r+0x22c>)
 800cc56:	1c75      	adds	r5, r6, #1
 800cc58:	7621      	strb	r1, [r4, #24]
 800cc5a:	f7fd fc42 	bl	800a4e2 <memchr>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d040      	beq.n	800cce4 <_vfiprintf_r+0x210>
 800cc62:	4b28      	ldr	r3, [pc, #160]	@ (800cd04 <_vfiprintf_r+0x230>)
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d122      	bne.n	800ccae <_vfiprintf_r+0x1da>
 800cc68:	2207      	movs	r2, #7
 800cc6a:	9b07      	ldr	r3, [sp, #28]
 800cc6c:	3307      	adds	r3, #7
 800cc6e:	4393      	bics	r3, r2
 800cc70:	3308      	adds	r3, #8
 800cc72:	9307      	str	r3, [sp, #28]
 800cc74:	6963      	ldr	r3, [r4, #20]
 800cc76:	9a04      	ldr	r2, [sp, #16]
 800cc78:	189b      	adds	r3, r3, r2
 800cc7a:	6163      	str	r3, [r4, #20]
 800cc7c:	e762      	b.n	800cb44 <_vfiprintf_r+0x70>
 800cc7e:	4343      	muls	r3, r0
 800cc80:	002e      	movs	r6, r5
 800cc82:	2101      	movs	r1, #1
 800cc84:	189b      	adds	r3, r3, r2
 800cc86:	e7a4      	b.n	800cbd2 <_vfiprintf_r+0xfe>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	200a      	movs	r0, #10
 800cc8c:	0019      	movs	r1, r3
 800cc8e:	3601      	adds	r6, #1
 800cc90:	6063      	str	r3, [r4, #4]
 800cc92:	7832      	ldrb	r2, [r6, #0]
 800cc94:	1c75      	adds	r5, r6, #1
 800cc96:	3a30      	subs	r2, #48	@ 0x30
 800cc98:	2a09      	cmp	r2, #9
 800cc9a:	d903      	bls.n	800cca4 <_vfiprintf_r+0x1d0>
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d0c8      	beq.n	800cc32 <_vfiprintf_r+0x15e>
 800cca0:	9109      	str	r1, [sp, #36]	@ 0x24
 800cca2:	e7c6      	b.n	800cc32 <_vfiprintf_r+0x15e>
 800cca4:	4341      	muls	r1, r0
 800cca6:	002e      	movs	r6, r5
 800cca8:	2301      	movs	r3, #1
 800ccaa:	1889      	adds	r1, r1, r2
 800ccac:	e7f1      	b.n	800cc92 <_vfiprintf_r+0x1be>
 800ccae:	aa07      	add	r2, sp, #28
 800ccb0:	9200      	str	r2, [sp, #0]
 800ccb2:	0021      	movs	r1, r4
 800ccb4:	003a      	movs	r2, r7
 800ccb6:	4b14      	ldr	r3, [pc, #80]	@ (800cd08 <_vfiprintf_r+0x234>)
 800ccb8:	9803      	ldr	r0, [sp, #12]
 800ccba:	f7fc fdcd 	bl	8009858 <_printf_float>
 800ccbe:	9004      	str	r0, [sp, #16]
 800ccc0:	9b04      	ldr	r3, [sp, #16]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	d1d6      	bne.n	800cc74 <_vfiprintf_r+0x1a0>
 800ccc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccc8:	07db      	lsls	r3, r3, #31
 800ccca:	d405      	bmi.n	800ccd8 <_vfiprintf_r+0x204>
 800cccc:	89bb      	ldrh	r3, [r7, #12]
 800ccce:	059b      	lsls	r3, r3, #22
 800ccd0:	d402      	bmi.n	800ccd8 <_vfiprintf_r+0x204>
 800ccd2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ccd4:	f7fd fc04 	bl	800a4e0 <__retarget_lock_release_recursive>
 800ccd8:	89bb      	ldrh	r3, [r7, #12]
 800ccda:	065b      	lsls	r3, r3, #25
 800ccdc:	d500      	bpl.n	800cce0 <_vfiprintf_r+0x20c>
 800ccde:	e71e      	b.n	800cb1e <_vfiprintf_r+0x4a>
 800cce0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800cce2:	e71e      	b.n	800cb22 <_vfiprintf_r+0x4e>
 800cce4:	aa07      	add	r2, sp, #28
 800cce6:	9200      	str	r2, [sp, #0]
 800cce8:	0021      	movs	r1, r4
 800ccea:	003a      	movs	r2, r7
 800ccec:	4b06      	ldr	r3, [pc, #24]	@ (800cd08 <_vfiprintf_r+0x234>)
 800ccee:	9803      	ldr	r0, [sp, #12]
 800ccf0:	f7fd f860 	bl	8009db4 <_printf_i>
 800ccf4:	e7e3      	b.n	800ccbe <_vfiprintf_r+0x1ea>
 800ccf6:	46c0      	nop			@ (mov r8, r8)
 800ccf8:	0800d610 	.word	0x0800d610
 800ccfc:	0800d616 	.word	0x0800d616
 800cd00:	0800d61a 	.word	0x0800d61a
 800cd04:	08009859 	.word	0x08009859
 800cd08:	0800cab1 	.word	0x0800cab1

0800cd0c <__swbuf_r>:
 800cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0e:	0006      	movs	r6, r0
 800cd10:	000d      	movs	r5, r1
 800cd12:	0014      	movs	r4, r2
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d004      	beq.n	800cd22 <__swbuf_r+0x16>
 800cd18:	6a03      	ldr	r3, [r0, #32]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <__swbuf_r+0x16>
 800cd1e:	f7fd f9e7 	bl	800a0f0 <__sinit>
 800cd22:	69a3      	ldr	r3, [r4, #24]
 800cd24:	60a3      	str	r3, [r4, #8]
 800cd26:	89a3      	ldrh	r3, [r4, #12]
 800cd28:	071b      	lsls	r3, r3, #28
 800cd2a:	d502      	bpl.n	800cd32 <__swbuf_r+0x26>
 800cd2c:	6923      	ldr	r3, [r4, #16]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d109      	bne.n	800cd46 <__swbuf_r+0x3a>
 800cd32:	0021      	movs	r1, r4
 800cd34:	0030      	movs	r0, r6
 800cd36:	f000 f82b 	bl	800cd90 <__swsetup_r>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d003      	beq.n	800cd46 <__swbuf_r+0x3a>
 800cd3e:	2501      	movs	r5, #1
 800cd40:	426d      	negs	r5, r5
 800cd42:	0028      	movs	r0, r5
 800cd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	6820      	ldr	r0, [r4, #0]
 800cd4a:	b2ef      	uxtb	r7, r5
 800cd4c:	1ac0      	subs	r0, r0, r3
 800cd4e:	6963      	ldr	r3, [r4, #20]
 800cd50:	b2ed      	uxtb	r5, r5
 800cd52:	4283      	cmp	r3, r0
 800cd54:	dc05      	bgt.n	800cd62 <__swbuf_r+0x56>
 800cd56:	0021      	movs	r1, r4
 800cd58:	0030      	movs	r0, r6
 800cd5a:	f7ff fc23 	bl	800c5a4 <_fflush_r>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d1ed      	bne.n	800cd3e <__swbuf_r+0x32>
 800cd62:	68a3      	ldr	r3, [r4, #8]
 800cd64:	3001      	adds	r0, #1
 800cd66:	3b01      	subs	r3, #1
 800cd68:	60a3      	str	r3, [r4, #8]
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	6022      	str	r2, [r4, #0]
 800cd70:	701f      	strb	r7, [r3, #0]
 800cd72:	6963      	ldr	r3, [r4, #20]
 800cd74:	4283      	cmp	r3, r0
 800cd76:	d004      	beq.n	800cd82 <__swbuf_r+0x76>
 800cd78:	89a3      	ldrh	r3, [r4, #12]
 800cd7a:	07db      	lsls	r3, r3, #31
 800cd7c:	d5e1      	bpl.n	800cd42 <__swbuf_r+0x36>
 800cd7e:	2d0a      	cmp	r5, #10
 800cd80:	d1df      	bne.n	800cd42 <__swbuf_r+0x36>
 800cd82:	0021      	movs	r1, r4
 800cd84:	0030      	movs	r0, r6
 800cd86:	f7ff fc0d 	bl	800c5a4 <_fflush_r>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	d0d9      	beq.n	800cd42 <__swbuf_r+0x36>
 800cd8e:	e7d6      	b.n	800cd3e <__swbuf_r+0x32>

0800cd90 <__swsetup_r>:
 800cd90:	4b2d      	ldr	r3, [pc, #180]	@ (800ce48 <__swsetup_r+0xb8>)
 800cd92:	b570      	push	{r4, r5, r6, lr}
 800cd94:	0005      	movs	r5, r0
 800cd96:	6818      	ldr	r0, [r3, #0]
 800cd98:	000c      	movs	r4, r1
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d004      	beq.n	800cda8 <__swsetup_r+0x18>
 800cd9e:	6a03      	ldr	r3, [r0, #32]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <__swsetup_r+0x18>
 800cda4:	f7fd f9a4 	bl	800a0f0 <__sinit>
 800cda8:	230c      	movs	r3, #12
 800cdaa:	5ee2      	ldrsh	r2, [r4, r3]
 800cdac:	0713      	lsls	r3, r2, #28
 800cdae:	d423      	bmi.n	800cdf8 <__swsetup_r+0x68>
 800cdb0:	06d3      	lsls	r3, r2, #27
 800cdb2:	d407      	bmi.n	800cdc4 <__swsetup_r+0x34>
 800cdb4:	2309      	movs	r3, #9
 800cdb6:	602b      	str	r3, [r5, #0]
 800cdb8:	2340      	movs	r3, #64	@ 0x40
 800cdba:	2001      	movs	r0, #1
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	81a3      	strh	r3, [r4, #12]
 800cdc0:	4240      	negs	r0, r0
 800cdc2:	e03a      	b.n	800ce3a <__swsetup_r+0xaa>
 800cdc4:	0752      	lsls	r2, r2, #29
 800cdc6:	d513      	bpl.n	800cdf0 <__swsetup_r+0x60>
 800cdc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdca:	2900      	cmp	r1, #0
 800cdcc:	d008      	beq.n	800cde0 <__swsetup_r+0x50>
 800cdce:	0023      	movs	r3, r4
 800cdd0:	3344      	adds	r3, #68	@ 0x44
 800cdd2:	4299      	cmp	r1, r3
 800cdd4:	d002      	beq.n	800cddc <__swsetup_r+0x4c>
 800cdd6:	0028      	movs	r0, r5
 800cdd8:	f7fe fa38 	bl	800b24c <_free_r>
 800cddc:	2300      	movs	r3, #0
 800cdde:	6363      	str	r3, [r4, #52]	@ 0x34
 800cde0:	2224      	movs	r2, #36	@ 0x24
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	4393      	bics	r3, r2
 800cde6:	81a3      	strh	r3, [r4, #12]
 800cde8:	2300      	movs	r3, #0
 800cdea:	6063      	str	r3, [r4, #4]
 800cdec:	6923      	ldr	r3, [r4, #16]
 800cdee:	6023      	str	r3, [r4, #0]
 800cdf0:	2308      	movs	r3, #8
 800cdf2:	89a2      	ldrh	r2, [r4, #12]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	81a3      	strh	r3, [r4, #12]
 800cdf8:	6923      	ldr	r3, [r4, #16]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10b      	bne.n	800ce16 <__swsetup_r+0x86>
 800cdfe:	21a0      	movs	r1, #160	@ 0xa0
 800ce00:	2280      	movs	r2, #128	@ 0x80
 800ce02:	89a3      	ldrh	r3, [r4, #12]
 800ce04:	0089      	lsls	r1, r1, #2
 800ce06:	0092      	lsls	r2, r2, #2
 800ce08:	400b      	ands	r3, r1
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d003      	beq.n	800ce16 <__swsetup_r+0x86>
 800ce0e:	0021      	movs	r1, r4
 800ce10:	0028      	movs	r0, r5
 800ce12:	f000 f897 	bl	800cf44 <__smakebuf_r>
 800ce16:	230c      	movs	r3, #12
 800ce18:	5ee2      	ldrsh	r2, [r4, r3]
 800ce1a:	2101      	movs	r1, #1
 800ce1c:	0013      	movs	r3, r2
 800ce1e:	400b      	ands	r3, r1
 800ce20:	420a      	tst	r2, r1
 800ce22:	d00b      	beq.n	800ce3c <__swsetup_r+0xac>
 800ce24:	2300      	movs	r3, #0
 800ce26:	60a3      	str	r3, [r4, #8]
 800ce28:	6963      	ldr	r3, [r4, #20]
 800ce2a:	425b      	negs	r3, r3
 800ce2c:	61a3      	str	r3, [r4, #24]
 800ce2e:	2000      	movs	r0, #0
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	4283      	cmp	r3, r0
 800ce34:	d101      	bne.n	800ce3a <__swsetup_r+0xaa>
 800ce36:	0613      	lsls	r3, r2, #24
 800ce38:	d4be      	bmi.n	800cdb8 <__swsetup_r+0x28>
 800ce3a:	bd70      	pop	{r4, r5, r6, pc}
 800ce3c:	0791      	lsls	r1, r2, #30
 800ce3e:	d400      	bmi.n	800ce42 <__swsetup_r+0xb2>
 800ce40:	6963      	ldr	r3, [r4, #20]
 800ce42:	60a3      	str	r3, [r4, #8]
 800ce44:	e7f3      	b.n	800ce2e <__swsetup_r+0x9e>
 800ce46:	46c0      	nop			@ (mov r8, r8)
 800ce48:	20000024 	.word	0x20000024

0800ce4c <_raise_r>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	0004      	movs	r4, r0
 800ce50:	000d      	movs	r5, r1
 800ce52:	291f      	cmp	r1, #31
 800ce54:	d904      	bls.n	800ce60 <_raise_r+0x14>
 800ce56:	2316      	movs	r3, #22
 800ce58:	6003      	str	r3, [r0, #0]
 800ce5a:	2001      	movs	r0, #1
 800ce5c:	4240      	negs	r0, r0
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d004      	beq.n	800ce70 <_raise_r+0x24>
 800ce66:	008a      	lsls	r2, r1, #2
 800ce68:	189b      	adds	r3, r3, r2
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	2a00      	cmp	r2, #0
 800ce6e:	d108      	bne.n	800ce82 <_raise_r+0x36>
 800ce70:	0020      	movs	r0, r4
 800ce72:	f000 f831 	bl	800ced8 <_getpid_r>
 800ce76:	002a      	movs	r2, r5
 800ce78:	0001      	movs	r1, r0
 800ce7a:	0020      	movs	r0, r4
 800ce7c:	f000 f81a 	bl	800ceb4 <_kill_r>
 800ce80:	e7ed      	b.n	800ce5e <_raise_r+0x12>
 800ce82:	2a01      	cmp	r2, #1
 800ce84:	d009      	beq.n	800ce9a <_raise_r+0x4e>
 800ce86:	1c51      	adds	r1, r2, #1
 800ce88:	d103      	bne.n	800ce92 <_raise_r+0x46>
 800ce8a:	2316      	movs	r3, #22
 800ce8c:	6003      	str	r3, [r0, #0]
 800ce8e:	2001      	movs	r0, #1
 800ce90:	e7e5      	b.n	800ce5e <_raise_r+0x12>
 800ce92:	2100      	movs	r1, #0
 800ce94:	0028      	movs	r0, r5
 800ce96:	6019      	str	r1, [r3, #0]
 800ce98:	4790      	blx	r2
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	e7df      	b.n	800ce5e <_raise_r+0x12>
	...

0800cea0 <raise>:
 800cea0:	b510      	push	{r4, lr}
 800cea2:	4b03      	ldr	r3, [pc, #12]	@ (800ceb0 <raise+0x10>)
 800cea4:	0001      	movs	r1, r0
 800cea6:	6818      	ldr	r0, [r3, #0]
 800cea8:	f7ff ffd0 	bl	800ce4c <_raise_r>
 800ceac:	bd10      	pop	{r4, pc}
 800ceae:	46c0      	nop			@ (mov r8, r8)
 800ceb0:	20000024 	.word	0x20000024

0800ceb4 <_kill_r>:
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	b570      	push	{r4, r5, r6, lr}
 800ceb8:	4d06      	ldr	r5, [pc, #24]	@ (800ced4 <_kill_r+0x20>)
 800ceba:	0004      	movs	r4, r0
 800cebc:	0008      	movs	r0, r1
 800cebe:	0011      	movs	r1, r2
 800cec0:	602b      	str	r3, [r5, #0]
 800cec2:	f7f7 fbf9 	bl	80046b8 <_kill>
 800cec6:	1c43      	adds	r3, r0, #1
 800cec8:	d103      	bne.n	800ced2 <_kill_r+0x1e>
 800ceca:	682b      	ldr	r3, [r5, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d000      	beq.n	800ced2 <_kill_r+0x1e>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd70      	pop	{r4, r5, r6, pc}
 800ced4:	20000720 	.word	0x20000720

0800ced8 <_getpid_r>:
 800ced8:	b510      	push	{r4, lr}
 800ceda:	f7f7 fbe7 	bl	80046ac <_getpid>
 800cede:	bd10      	pop	{r4, pc}

0800cee0 <_malloc_usable_size_r>:
 800cee0:	1f0b      	subs	r3, r1, #4
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	1f18      	subs	r0, r3, #4
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	da01      	bge.n	800ceee <_malloc_usable_size_r+0xe>
 800ceea:	580b      	ldr	r3, [r1, r0]
 800ceec:	18c0      	adds	r0, r0, r3
 800ceee:	4770      	bx	lr

0800cef0 <__swhatbuf_r>:
 800cef0:	b570      	push	{r4, r5, r6, lr}
 800cef2:	000e      	movs	r6, r1
 800cef4:	001d      	movs	r5, r3
 800cef6:	230e      	movs	r3, #14
 800cef8:	5ec9      	ldrsh	r1, [r1, r3]
 800cefa:	0014      	movs	r4, r2
 800cefc:	b096      	sub	sp, #88	@ 0x58
 800cefe:	2900      	cmp	r1, #0
 800cf00:	da0c      	bge.n	800cf1c <__swhatbuf_r+0x2c>
 800cf02:	89b2      	ldrh	r2, [r6, #12]
 800cf04:	2380      	movs	r3, #128	@ 0x80
 800cf06:	0011      	movs	r1, r2
 800cf08:	4019      	ands	r1, r3
 800cf0a:	421a      	tst	r2, r3
 800cf0c:	d114      	bne.n	800cf38 <__swhatbuf_r+0x48>
 800cf0e:	2380      	movs	r3, #128	@ 0x80
 800cf10:	00db      	lsls	r3, r3, #3
 800cf12:	2000      	movs	r0, #0
 800cf14:	6029      	str	r1, [r5, #0]
 800cf16:	6023      	str	r3, [r4, #0]
 800cf18:	b016      	add	sp, #88	@ 0x58
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}
 800cf1c:	466a      	mov	r2, sp
 800cf1e:	f000 f853 	bl	800cfc8 <_fstat_r>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	dbed      	blt.n	800cf02 <__swhatbuf_r+0x12>
 800cf26:	23f0      	movs	r3, #240	@ 0xf0
 800cf28:	9901      	ldr	r1, [sp, #4]
 800cf2a:	021b      	lsls	r3, r3, #8
 800cf2c:	4019      	ands	r1, r3
 800cf2e:	4b04      	ldr	r3, [pc, #16]	@ (800cf40 <__swhatbuf_r+0x50>)
 800cf30:	18c9      	adds	r1, r1, r3
 800cf32:	424b      	negs	r3, r1
 800cf34:	4159      	adcs	r1, r3
 800cf36:	e7ea      	b.n	800cf0e <__swhatbuf_r+0x1e>
 800cf38:	2100      	movs	r1, #0
 800cf3a:	2340      	movs	r3, #64	@ 0x40
 800cf3c:	e7e9      	b.n	800cf12 <__swhatbuf_r+0x22>
 800cf3e:	46c0      	nop			@ (mov r8, r8)
 800cf40:	ffffe000 	.word	0xffffe000

0800cf44 <__smakebuf_r>:
 800cf44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf46:	2602      	movs	r6, #2
 800cf48:	898b      	ldrh	r3, [r1, #12]
 800cf4a:	0005      	movs	r5, r0
 800cf4c:	000c      	movs	r4, r1
 800cf4e:	b085      	sub	sp, #20
 800cf50:	4233      	tst	r3, r6
 800cf52:	d007      	beq.n	800cf64 <__smakebuf_r+0x20>
 800cf54:	0023      	movs	r3, r4
 800cf56:	3347      	adds	r3, #71	@ 0x47
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	6123      	str	r3, [r4, #16]
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	6163      	str	r3, [r4, #20]
 800cf60:	b005      	add	sp, #20
 800cf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf64:	ab03      	add	r3, sp, #12
 800cf66:	aa02      	add	r2, sp, #8
 800cf68:	f7ff ffc2 	bl	800cef0 <__swhatbuf_r>
 800cf6c:	9f02      	ldr	r7, [sp, #8]
 800cf6e:	9001      	str	r0, [sp, #4]
 800cf70:	0039      	movs	r1, r7
 800cf72:	0028      	movs	r0, r5
 800cf74:	f7fe f9e0 	bl	800b338 <_malloc_r>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d108      	bne.n	800cf8e <__smakebuf_r+0x4a>
 800cf7c:	220c      	movs	r2, #12
 800cf7e:	5ea3      	ldrsh	r3, [r4, r2]
 800cf80:	059a      	lsls	r2, r3, #22
 800cf82:	d4ed      	bmi.n	800cf60 <__smakebuf_r+0x1c>
 800cf84:	2203      	movs	r2, #3
 800cf86:	4393      	bics	r3, r2
 800cf88:	431e      	orrs	r6, r3
 800cf8a:	81a6      	strh	r6, [r4, #12]
 800cf8c:	e7e2      	b.n	800cf54 <__smakebuf_r+0x10>
 800cf8e:	2380      	movs	r3, #128	@ 0x80
 800cf90:	89a2      	ldrh	r2, [r4, #12]
 800cf92:	6020      	str	r0, [r4, #0]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	81a3      	strh	r3, [r4, #12]
 800cf98:	9b03      	ldr	r3, [sp, #12]
 800cf9a:	6120      	str	r0, [r4, #16]
 800cf9c:	6167      	str	r7, [r4, #20]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00c      	beq.n	800cfbc <__smakebuf_r+0x78>
 800cfa2:	0028      	movs	r0, r5
 800cfa4:	230e      	movs	r3, #14
 800cfa6:	5ee1      	ldrsh	r1, [r4, r3]
 800cfa8:	f000 f820 	bl	800cfec <_isatty_r>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d005      	beq.n	800cfbc <__smakebuf_r+0x78>
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	89a2      	ldrh	r2, [r4, #12]
 800cfb4:	439a      	bics	r2, r3
 800cfb6:	3b02      	subs	r3, #2
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	81a3      	strh	r3, [r4, #12]
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	9a01      	ldr	r2, [sp, #4]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	81a3      	strh	r3, [r4, #12]
 800cfc4:	e7cc      	b.n	800cf60 <__smakebuf_r+0x1c>
	...

0800cfc8 <_fstat_r>:
 800cfc8:	2300      	movs	r3, #0
 800cfca:	b570      	push	{r4, r5, r6, lr}
 800cfcc:	4d06      	ldr	r5, [pc, #24]	@ (800cfe8 <_fstat_r+0x20>)
 800cfce:	0004      	movs	r4, r0
 800cfd0:	0008      	movs	r0, r1
 800cfd2:	0011      	movs	r1, r2
 800cfd4:	602b      	str	r3, [r5, #0]
 800cfd6:	f7f7 fbcf 	bl	8004778 <_fstat>
 800cfda:	1c43      	adds	r3, r0, #1
 800cfdc:	d103      	bne.n	800cfe6 <_fstat_r+0x1e>
 800cfde:	682b      	ldr	r3, [r5, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d000      	beq.n	800cfe6 <_fstat_r+0x1e>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}
 800cfe8:	20000720 	.word	0x20000720

0800cfec <_isatty_r>:
 800cfec:	2300      	movs	r3, #0
 800cfee:	b570      	push	{r4, r5, r6, lr}
 800cff0:	4d06      	ldr	r5, [pc, #24]	@ (800d00c <_isatty_r+0x20>)
 800cff2:	0004      	movs	r4, r0
 800cff4:	0008      	movs	r0, r1
 800cff6:	602b      	str	r3, [r5, #0]
 800cff8:	f7f7 fbcc 	bl	8004794 <_isatty>
 800cffc:	1c43      	adds	r3, r0, #1
 800cffe:	d103      	bne.n	800d008 <_isatty_r+0x1c>
 800d000:	682b      	ldr	r3, [r5, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d000      	beq.n	800d008 <_isatty_r+0x1c>
 800d006:	6023      	str	r3, [r4, #0]
 800d008:	bd70      	pop	{r4, r5, r6, pc}
 800d00a:	46c0      	nop			@ (mov r8, r8)
 800d00c:	20000720 	.word	0x20000720

0800d010 <_init>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	46c0      	nop			@ (mov r8, r8)
 800d014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d016:	bc08      	pop	{r3}
 800d018:	469e      	mov	lr, r3
 800d01a:	4770      	bx	lr

0800d01c <_fini>:
 800d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01e:	46c0      	nop			@ (mov r8, r8)
 800d020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d022:	bc08      	pop	{r3}
 800d024:	469e      	mov	lr, r3
 800d026:	4770      	bx	lr
