
alimentador_de_peces.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004b7c  08004b7c  00005b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bfc  08004bfc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bfc  08004bfc  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bfc  08004bfc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bfc  08004bfc  00005bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c00  08004c00  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000005c  08004c60  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08004c60  00006460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd92  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f85  00000000  00000000  00013e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00015da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b8  00000000  00000000  00016a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d06  00000000  00000000  000173c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f6c  00000000  00000000  000280c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006321f  00000000  00000000  00039032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c251  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003128  00000000  00000000  0009c294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0009f3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b64 	.word	0x08004b64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004b64 	.word	0x08004b64

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <Flash_read_identification_id>:
extern SPI_HandleTypeDef hspi2;



void Flash_read_identification_id()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
	uint8_t spiBuf[5];

	spiBuf[0] = READ_ID;
 800024a:	003b      	movs	r3, r7
 800024c:	224b      	movs	r2, #75	@ 0x4b
 800024e:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = 0;
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	705a      	strb	r2, [r3, #1]
	spiBuf[2] = 0;
 8000256:	003b      	movs	r3, r7
 8000258:	2200      	movs	r2, #0
 800025a:	709a      	strb	r2, [r3, #2]
	spiBuf[3] = 0;
 800025c:	003b      	movs	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	70da      	strb	r2, [r3, #3]
	spiBuf[4] = 0;
 8000262:	003b      	movs	r3, r7
 8000264:	2200      	movs	r2, #0
 8000266:	711a      	strb	r2, [r3, #4]

	//Put CSN low

	flash_csn(0);
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f819 	bl	80002a0 <flash_csn>
	//Transmit register address

	HAL_SPI_Transmit(&hspi2, &spiBuf[0], 5, 1000);
 800026e:	23fa      	movs	r3, #250	@ 0xfa
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	0039      	movs	r1, r7
 8000274:	4808      	ldr	r0, [pc, #32]	@ (8000298 <Flash_read_identification_id+0x54>)
 8000276:	2205      	movs	r2, #5
 8000278:	f002 fd0a 	bl	8002c90 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, &read_flash_Byte[0], 8, 1000);
 800027c:	23fa      	movs	r3, #250	@ 0xfa
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	4906      	ldr	r1, [pc, #24]	@ (800029c <Flash_read_identification_id+0x58>)
 8000282:	4805      	ldr	r0, [pc, #20]	@ (8000298 <Flash_read_identification_id+0x54>)
 8000284:	2208      	movs	r2, #8
 8000286:	f002 fe63 	bl	8002f50 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f000 f808 	bl	80002a0 <flash_csn>
}
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b002      	add	sp, #8
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000020c 	.word	0x2000020c
 800029c:	20000078 	.word	0x20000078

080002a0 <flash_csn>:


void flash_csn( uint8_t val){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	0002      	movs	r2, r0
 80002a8:	1dfb      	adds	r3, r7, #7
 80002aa:	701a      	strb	r2, [r3, #0]
	if ( val == 0 )
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d107      	bne.n	80002c4 <flash_csn+0x24>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80002b4:	2380      	movs	r3, #128	@ 0x80
 80002b6:	015b      	lsls	r3, r3, #5
 80002b8:	4808      	ldr	r0, [pc, #32]	@ (80002dc <flash_csn+0x3c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0019      	movs	r1, r3
 80002be:	f001 f9c1 	bl	8001644 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);

}
 80002c2:	e006      	b.n	80002d2 <flash_csn+0x32>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80002c4:	2380      	movs	r3, #128	@ 0x80
 80002c6:	015b      	lsls	r3, r3, #5
 80002c8:	4804      	ldr	r0, [pc, #16]	@ (80002dc <flash_csn+0x3c>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	0019      	movs	r1, r3
 80002ce:	f001 f9b9 	bl	8001644 <HAL_GPIO_WritePin>
}
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b002      	add	sp, #8
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	48000400 	.word	0x48000400

080002e0 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	701a      	strb	r2, [r3, #0]
  return (int)( (val/16*10) + (val%16) );
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	091b      	lsrs	r3, r3, #4
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	001a      	movs	r2, r3
 80002f6:	0013      	movs	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	189b      	adds	r3, r3, r2
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	0019      	movs	r1, r3
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	220f      	movs	r2, #15
 8000306:	4013      	ands	r3, r2
 8000308:	18cb      	adds	r3, r1, r3
}
 800030a:	0018      	movs	r0, r3
 800030c:	46bd      	mov	sp, r7
 800030e:	b002      	add	sp, #8
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <Get_Time>:
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c2, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);


void Get_Time (void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800031a:	4828      	ldr	r0, [pc, #160]	@ (80003bc <Get_Time+0xa8>)
 800031c:	23fa      	movs	r3, #250	@ 0xfa
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	9302      	str	r3, [sp, #8]
 8000322:	2307      	movs	r3, #7
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	003b      	movs	r3, r7
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2301      	movs	r3, #1
 800032c:	2200      	movs	r2, #0
 800032e:	21d0      	movs	r1, #208	@ 0xd0
 8000330:	f001 fa66 	bl	8001800 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000334:	003b      	movs	r3, r7
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	0018      	movs	r0, r3
 800033a:	f7ff ffd1 	bl	80002e0 <bcdToDec>
 800033e:	0003      	movs	r3, r0
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <Get_Time+0xac>)
 8000344:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000346:	003b      	movs	r3, r7
 8000348:	785b      	ldrb	r3, [r3, #1]
 800034a:	0018      	movs	r0, r3
 800034c:	f7ff ffc8 	bl	80002e0 <bcdToDec>
 8000350:	0003      	movs	r3, r0
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b1a      	ldr	r3, [pc, #104]	@ (80003c0 <Get_Time+0xac>)
 8000356:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000358:	003b      	movs	r3, r7
 800035a:	789b      	ldrb	r3, [r3, #2]
 800035c:	0018      	movs	r0, r3
 800035e:	f7ff ffbf 	bl	80002e0 <bcdToDec>
 8000362:	0003      	movs	r3, r0
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <Get_Time+0xac>)
 8000368:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 800036a:	003b      	movs	r3, r7
 800036c:	78db      	ldrb	r3, [r3, #3]
 800036e:	0018      	movs	r0, r3
 8000370:	f7ff ffb6 	bl	80002e0 <bcdToDec>
 8000374:	0003      	movs	r3, r0
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <Get_Time+0xac>)
 800037a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 800037c:	003b      	movs	r3, r7
 800037e:	791b      	ldrb	r3, [r3, #4]
 8000380:	0018      	movs	r0, r3
 8000382:	f7ff ffad 	bl	80002e0 <bcdToDec>
 8000386:	0003      	movs	r3, r0
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <Get_Time+0xac>)
 800038c:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 800038e:	003b      	movs	r3, r7
 8000390:	795b      	ldrb	r3, [r3, #5]
 8000392:	0018      	movs	r0, r3
 8000394:	f7ff ffa4 	bl	80002e0 <bcdToDec>
 8000398:	0003      	movs	r3, r0
 800039a:	b2da      	uxtb	r2, r3
 800039c:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <Get_Time+0xac>)
 800039e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80003a0:	003b      	movs	r3, r7
 80003a2:	799b      	ldrb	r3, [r3, #6]
 80003a4:	0018      	movs	r0, r3
 80003a6:	f7ff ff9b 	bl	80002e0 <bcdToDec>
 80003aa:	0003      	movs	r3, r0
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4b04      	ldr	r3, [pc, #16]	@ (80003c0 <Get_Time+0xac>)
 80003b0:	719a      	strb	r2, [r3, #6]
}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b002      	add	sp, #8
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			@ (mov r8, r8)
 80003bc:	200001b8 	.word	0x200001b8
 80003c0:	200002f8 	.word	0x200002f8

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 fc59 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f863 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f000 f9d5 	bl	8000780 <MX_GPIO_Init>
  MX_ADC_Init();
 80003d6:	f000 f8bd 	bl	8000554 <MX_ADC_Init>
  MX_I2C2_Init();
 80003da:	f000 f923 	bl	8000624 <MX_I2C2_Init>
  MX_SPI2_Init();
 80003de:	f000 f961 	bl	80006a4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80003e2:	f000 f99d 	bl	8000720 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Set_Time(00, 03, 14, 5, 3, 1, 19);
  Flash_read_identification_id();
 80003e6:	f7ff ff2d 	bl	8000244 <Flash_read_identification_id>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	Get_Time();
 80003ea:	f7ff ff93 	bl	8000314 <Get_Time>
	sprintf(buffer, "%02d:%02d:%02d\r\n", time.hour, time.minutes, time.seconds);
 80003ee:	4b26      	ldr	r3, [pc, #152]	@ (8000488 <main+0xc4>)
 80003f0:	789b      	ldrb	r3, [r3, #2]
 80003f2:	001a      	movs	r2, r3
 80003f4:	4b24      	ldr	r3, [pc, #144]	@ (8000488 <main+0xc4>)
 80003f6:	785b      	ldrb	r3, [r3, #1]
 80003f8:	001c      	movs	r4, r3
 80003fa:	4b23      	ldr	r3, [pc, #140]	@ (8000488 <main+0xc4>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	4923      	ldr	r1, [pc, #140]	@ (800048c <main+0xc8>)
 8000400:	4823      	ldr	r0, [pc, #140]	@ (8000490 <main+0xcc>)
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	0023      	movs	r3, r4
 8000406:	f003 ff0f 	bl	8004228 <siprintf>
	//buffer[8] = '\0'; // Añade manualmente el terminador

	//sprintf(buffer, "TEST");
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer, strlen(buffer), 100); // Debe mostrar "TEST"
 800040a:	4b21      	ldr	r3, [pc, #132]	@ (8000490 <main+0xcc>)
 800040c:	0018      	movs	r0, r3
 800040e:	f7ff fe7b 	bl	8000108 <strlen>
 8000412:	0003      	movs	r3, r0
 8000414:	b29a      	uxth	r2, r3
 8000416:	491e      	ldr	r1, [pc, #120]	@ (8000490 <main+0xcc>)
 8000418:	481e      	ldr	r0, [pc, #120]	@ (8000494 <main+0xd0>)
 800041a:	2364      	movs	r3, #100	@ 0x64
 800041c:	f003 faf4 	bl	8003a08 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000420:	23fa      	movs	r3, #250	@ 0xfa
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fc8f 	bl	8000d48 <HAL_Delay>


	HAL_GPIO_TogglePin(Alerta_voltaje_min_GPIO_Port, Alerta_voltaje_min_Pin);
 800042a:	2390      	movs	r3, #144	@ 0x90
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2140      	movs	r1, #64	@ 0x40
 8000430:	0018      	movs	r0, r3
 8000432:	f001 f924 	bl	800167e <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000436:	23fa      	movs	r3, #250	@ 0xfa
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fc84 	bl	8000d48 <HAL_Delay>
	HAL_GPIO_TogglePin(RGB_R_GPIO_Port, RGB_R_Pin);
 8000440:	2390      	movs	r3, #144	@ 0x90
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	2101      	movs	r1, #1
 8000446:	0018      	movs	r0, r3
 8000448:	f001 f919 	bl	800167e <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800044c:	23fa      	movs	r3, #250	@ 0xfa
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	0018      	movs	r0, r3
 8000452:	f000 fc79 	bl	8000d48 <HAL_Delay>
	HAL_GPIO_TogglePin(RGB_G_GPIO_Port, RGB_G_Pin);
 8000456:	2390      	movs	r3, #144	@ 0x90
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	2102      	movs	r1, #2
 800045c:	0018      	movs	r0, r3
 800045e:	f001 f90e 	bl	800167e <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000462:	23fa      	movs	r3, #250	@ 0xfa
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fc6e 	bl	8000d48 <HAL_Delay>
	HAL_GPIO_TogglePin(RGB_B_GPIO_Port, RGB_B_Pin);
 800046c:	2390      	movs	r3, #144	@ 0x90
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	2104      	movs	r1, #4
 8000472:	0018      	movs	r0, r3
 8000474:	f001 f903 	bl	800167e <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000478:	23fa      	movs	r3, #250	@ 0xfa
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fc63 	bl	8000d48 <HAL_Delay>
	Get_Time();
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	e7b1      	b.n	80003ea <main+0x26>
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	200002f8 	.word	0x200002f8
 800048c:	08004b7c 	.word	0x08004b7c
 8000490:	20000300 	.word	0x20000300
 8000494:	20000270 	.word	0x20000270

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b095      	sub	sp, #84	@ 0x54
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	2420      	movs	r4, #32
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2330      	movs	r3, #48	@ 0x30
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f003 fedd 	bl	8004268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ae:	2310      	movs	r3, #16
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	0018      	movs	r0, r3
 80004b4:	2310      	movs	r3, #16
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f003 fed5 	bl	8004268 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004be:	003b      	movs	r3, r7
 80004c0:	0018      	movs	r0, r3
 80004c2:	2310      	movs	r3, #16
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f003 fece 	bl	8004268 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80004cc:	0021      	movs	r1, r4
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2212      	movs	r2, #18
 80004d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2201      	movs	r2, #1
 80004d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2201      	movs	r2, #1
 80004de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2210      	movs	r2, #16
 80004e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2210      	movs	r2, #16
 80004ea:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2200      	movs	r2, #0
 80004f0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fde7 	bl	80020c8 <HAL_RCC_OscConfig>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004fe:	f000 f9e5 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	2110      	movs	r1, #16
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2207      	movs	r2, #7
 8000508:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2100      	movs	r1, #0
 8000520:	0018      	movs	r0, r3
 8000522:	f002 f8eb 	bl	80026fc <HAL_RCC_ClockConfig>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800052a:	f000 f9cf 	bl	80008cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800052e:	003b      	movs	r3, r7
 8000530:	2201      	movs	r2, #1
 8000532:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000534:	003b      	movs	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	f002 fa21 	bl	8002984 <HAL_RCCEx_PeriphCLKConfig>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000546:	f000 f9c1 	bl	80008cc <Error_Handler>
  }
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b015      	add	sp, #84	@ 0x54
 8000550:	bd90      	pop	{r4, r7, pc}
	...

08000554 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	0018      	movs	r0, r3
 800055e:	230c      	movs	r3, #12
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f003 fe80 	bl	8004268 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000568:	4b2c      	ldr	r3, [pc, #176]	@ (800061c <MX_ADC_Init+0xc8>)
 800056a:	4a2d      	ldr	r2, [pc, #180]	@ (8000620 <MX_ADC_Init+0xcc>)
 800056c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800056e:	4b2b      	ldr	r3, [pc, #172]	@ (800061c <MX_ADC_Init+0xc8>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000574:	4b29      	ldr	r3, [pc, #164]	@ (800061c <MX_ADC_Init+0xc8>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057a:	4b28      	ldr	r3, [pc, #160]	@ (800061c <MX_ADC_Init+0xc8>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000580:	4b26      	ldr	r3, [pc, #152]	@ (800061c <MX_ADC_Init+0xc8>)
 8000582:	2201      	movs	r2, #1
 8000584:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000586:	4b25      	ldr	r3, [pc, #148]	@ (800061c <MX_ADC_Init+0xc8>)
 8000588:	2204      	movs	r2, #4
 800058a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800058c:	4b23      	ldr	r3, [pc, #140]	@ (800061c <MX_ADC_Init+0xc8>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000592:	4b22      	ldr	r3, [pc, #136]	@ (800061c <MX_ADC_Init+0xc8>)
 8000594:	2200      	movs	r2, #0
 8000596:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000598:	4b20      	ldr	r3, [pc, #128]	@ (800061c <MX_ADC_Init+0xc8>)
 800059a:	2200      	movs	r2, #0
 800059c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800059e:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <MX_ADC_Init+0xc8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a4:	4b1d      	ldr	r3, [pc, #116]	@ (800061c <MX_ADC_Init+0xc8>)
 80005a6:	22c2      	movs	r2, #194	@ 0xc2
 80005a8:	32ff      	adds	r2, #255	@ 0xff
 80005aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <MX_ADC_Init+0xc8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	@ (800061c <MX_ADC_Init+0xc8>)
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ba:	4b18      	ldr	r3, [pc, #96]	@ (800061c <MX_ADC_Init+0xc8>)
 80005bc:	2201      	movs	r2, #1
 80005be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005c0:	4b16      	ldr	r3, [pc, #88]	@ (800061c <MX_ADC_Init+0xc8>)
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fbe4 	bl	8000d90 <HAL_ADC_Init>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80005cc:	f000 f97e 	bl	80008cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2203      	movs	r2, #3
 80005d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	0152      	lsls	r2, r2, #5
 80005dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	0552      	lsls	r2, r2, #21
 80005e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005e6:	1d3a      	adds	r2, r7, #4
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_ADC_Init+0xc8>)
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fd0f 	bl	8001010 <HAL_ADC_ConfigChannel>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80005f6:	f000 f969 	bl	80008cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2204      	movs	r2, #4
 80005fe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000600:	1d3a      	adds	r2, r7, #4
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_ADC_Init+0xc8>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fd02 	bl	8001010 <HAL_ADC_ConfigChannel>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000610:	f000 f95c 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b004      	add	sp, #16
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000178 	.word	0x20000178
 8000620:	40012400 	.word	0x40012400

08000624 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_I2C2_Init+0x74>)
 800062a:	4a1c      	ldr	r2, [pc, #112]	@ (800069c <MX_I2C2_Init+0x78>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000630:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <MX_I2C2_Init+0x7c>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_I2C2_Init+0x74>)
 800063c:	2201      	movs	r2, #1
 800063e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_I2C2_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_I2C2_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000660:	0018      	movs	r0, r3
 8000662:	f001 f827 	bl	80016b4 <HAL_I2C_Init>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800066a:	f000 f92f 	bl	80008cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800066e:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000670:	2100      	movs	r1, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f001 fc90 	bl	8001f98 <HAL_I2CEx_ConfigAnalogFilter>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800067c:	f000 f926 	bl	80008cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <MX_I2C2_Init+0x74>)
 8000682:	2100      	movs	r1, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f001 fcd3 	bl	8002030 <HAL_I2CEx_ConfigDigitalFilter>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800068e:	f000 f91d 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200001b8 	.word	0x200001b8
 800069c:	40005800 	.word	0x40005800
 80006a0:	00201d2b 	.word	0x00201d2b

080006a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006aa:	4a1c      	ldr	r2, [pc, #112]	@ (800071c <MX_SPI2_Init+0x78>)
 80006ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006b0:	2282      	movs	r2, #130	@ 0x82
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006be:	22e0      	movs	r2, #224	@ 0xe0
 80006c0:	00d2      	lsls	r2, r2, #3
 80006c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c4:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ca:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006d2:	2280      	movs	r2, #128	@ 0x80
 80006d4:	0092      	lsls	r2, r2, #2
 80006d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006da:	2228      	movs	r2, #40	@ 0x28
 80006dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006f2:	2207      	movs	r2, #7
 80006f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_SPI2_Init+0x74>)
 80006fe:	2208      	movs	r2, #8
 8000700:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000702:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <MX_SPI2_Init+0x74>)
 8000704:	0018      	movs	r0, r3
 8000706:	f002 fa0b 	bl	8002b20 <HAL_SPI_Init>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800070e:	f000 f8dd 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000020c 	.word	0x2000020c
 800071c:	40003800 	.word	0x40003800

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	@ (800077c <MX_USART1_UART_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 800072c:	22e1      	movs	r2, #225	@ 0xe1
 800072e:	0252      	lsls	r2, r2, #9
 8000730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000762:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000764:	0018      	movs	r0, r3
 8000766:	f003 f8fb 	bl	8003960 <HAL_UART_Init>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f8ad 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000270 	.word	0x20000270
 800077c:	40013800 	.word	0x40013800

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b08b      	sub	sp, #44	@ 0x2c
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	2414      	movs	r4, #20
 8000788:	193b      	adds	r3, r7, r4
 800078a:	0018      	movs	r0, r3
 800078c:	2314      	movs	r3, #20
 800078e:	001a      	movs	r2, r3
 8000790:	2100      	movs	r1, #0
 8000792:	f003 fd69 	bl	8004268 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b4b      	ldr	r3, [pc, #300]	@ (80008c4 <MX_GPIO_Init+0x144>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	4b4a      	ldr	r3, [pc, #296]	@ (80008c4 <MX_GPIO_Init+0x144>)
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0309      	lsls	r1, r1, #12
 80007a0:	430a      	orrs	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	4b47      	ldr	r3, [pc, #284]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	031b      	lsls	r3, r3, #12
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b2:	4b44      	ldr	r3, [pc, #272]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b43      	ldr	r3, [pc, #268]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007b8:	2180      	movs	r1, #128	@ 0x80
 80007ba:	03c9      	lsls	r1, r1, #15
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b40      	ldr	r3, [pc, #256]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	03db      	lsls	r3, r3, #15
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b3d      	ldr	r3, [pc, #244]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b3c      	ldr	r3, [pc, #240]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007d4:	2180      	movs	r1, #128	@ 0x80
 80007d6:	0289      	lsls	r1, r1, #10
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b39      	ldr	r3, [pc, #228]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	@ 0x80
 80007e2:	029b      	lsls	r3, r3, #10
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b36      	ldr	r3, [pc, #216]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	4b35      	ldr	r3, [pc, #212]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007f0:	2180      	movs	r1, #128	@ 0x80
 80007f2:	02c9      	lsls	r1, r1, #11
 80007f4:	430a      	orrs	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	4b32      	ldr	r3, [pc, #200]	@ (80008c4 <MX_GPIO_Init+0x144>)
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	2380      	movs	r3, #128	@ 0x80
 80007fe:	02db      	lsls	r3, r3, #11
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_R_Pin|RGB_G_Pin|RGB_B_Pin|Alerta_voltaje_min_Pin, GPIO_PIN_RESET);
 8000806:	2390      	movs	r3, #144	@ 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2200      	movs	r2, #0
 800080c:	2147      	movs	r1, #71	@ 0x47
 800080e:	0018      	movs	r0, r3
 8000810:	f000 ff18 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	015b      	lsls	r3, r3, #5
 8000818:	482b      	ldr	r0, [pc, #172]	@ (80008c8 <MX_GPIO_Init+0x148>)
 800081a:	2200      	movs	r2, #0
 800081c:	0019      	movs	r1, r3
 800081e:	f000 ff11 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_R_Pin RGB_G_Pin RGB_B_Pin Alerta_voltaje_min_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin|Alerta_voltaje_min_Pin;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2247      	movs	r2, #71	@ 0x47
 8000826:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2201      	movs	r2, #1
 800082c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	193a      	adds	r2, r7, r4
 800083c:	2390      	movs	r3, #144	@ 0x90
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fd8e 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000848:	0021      	movs	r1, r4
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	0152      	lsls	r2, r2, #5
 8000850:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	000c      	movs	r4, r1
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2201      	movs	r2, #1
 8000858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000866:	193b      	adds	r3, r7, r4
 8000868:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <MX_GPIO_Init+0x148>)
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f000 fd79 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_control_Pin */
  GPIO_InitStruct.Pin = Motor_control_Pin;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2220      	movs	r2, #32
 8000876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2202      	movs	r2, #2
 800087c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2201      	movs	r2, #1
 800088e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(Motor_control_GPIO_Port, &GPIO_InitStruct);
 8000890:	193b      	adds	r3, r7, r4
 8000892:	4a0d      	ldr	r2, [pc, #52]	@ (80008c8 <MX_GPIO_Init+0x148>)
 8000894:	0019      	movs	r1, r3
 8000896:	0010      	movs	r0, r2
 8000898:	f000 fd64 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton_1_Pin Boton_2_Pin */
  GPIO_InitStruct.Pin = Boton_1_Pin|Boton_2_Pin;
 800089c:	0021      	movs	r1, r4
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	22c0      	movs	r2, #192	@ 0xc0
 80008a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	4a05      	ldr	r2, [pc, #20]	@ (80008c8 <MX_GPIO_Init+0x148>)
 80008b4:	0019      	movs	r1, r3
 80008b6:	0010      	movs	r0, r2
 80008b8:	f000 fd54 	bl	8001364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b00b      	add	sp, #44	@ 0x2c
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	e7fd      	b.n	80008d4 <Error_Handler+0x8>

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <HAL_MspInit+0x44>)
 80008e0:	699a      	ldr	r2, [r3, #24]
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <HAL_MspInit+0x44>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	430a      	orrs	r2, r1
 80008e8:	619a      	str	r2, [r3, #24]
 80008ea:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <HAL_MspInit+0x44>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	2201      	movs	r2, #1
 80008f0:	4013      	ands	r3, r2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <HAL_MspInit+0x44>)
 80008f8:	69da      	ldr	r2, [r3, #28]
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <HAL_MspInit+0x44>)
 80008fc:	2180      	movs	r1, #128	@ 0x80
 80008fe:	0549      	lsls	r1, r1, #21
 8000900:	430a      	orrs	r2, r1
 8000902:	61da      	str	r2, [r3, #28]
 8000904:	4b05      	ldr	r3, [pc, #20]	@ (800091c <HAL_MspInit+0x44>)
 8000906:	69da      	ldr	r2, [r3, #28]
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	055b      	lsls	r3, r3, #21
 800090c:	4013      	ands	r3, r2
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b002      	add	sp, #8
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b08b      	sub	sp, #44	@ 0x2c
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	2414      	movs	r4, #20
 800092a:	193b      	adds	r3, r7, r4
 800092c:	0018      	movs	r0, r3
 800092e:	2314      	movs	r3, #20
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f003 fc98 	bl	8004268 <memset>
  if(hadc->Instance==ADC1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a19      	ldr	r2, [pc, #100]	@ (80009a4 <HAL_ADC_MspInit+0x84>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d12b      	bne.n	800099a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_ADC_MspInit+0x88>)
 8000944:	699a      	ldr	r2, [r3, #24]
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <HAL_ADC_MspInit+0x88>)
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	0089      	lsls	r1, r1, #2
 800094c:	430a      	orrs	r2, r1
 800094e:	619a      	str	r2, [r3, #24]
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <HAL_ADC_MspInit+0x88>)
 8000952:	699a      	ldr	r2, [r3, #24]
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_ADC_MspInit+0x88>)
 8000960:	695a      	ldr	r2, [r3, #20]
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <HAL_ADC_MspInit+0x88>)
 8000964:	2180      	movs	r1, #128	@ 0x80
 8000966:	0289      	lsls	r1, r1, #10
 8000968:	430a      	orrs	r2, r1
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <HAL_ADC_MspInit+0x88>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	029b      	lsls	r3, r3, #10
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = Temperature_sensor_Pin|Voltage_measure_Pin;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2218      	movs	r2, #24
 800097e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2203      	movs	r2, #3
 8000984:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	193a      	adds	r2, r7, r4
 800098e:	2390      	movs	r3, #144	@ 0x90
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fce5 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b00b      	add	sp, #44	@ 0x2c
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	40012400 	.word	0x40012400
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b08b      	sub	sp, #44	@ 0x2c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	2414      	movs	r4, #20
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	0018      	movs	r0, r3
 80009ba:	2314      	movs	r3, #20
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f003 fc52 	bl	8004268 <memset>
  if(hi2c->Instance==I2C2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a3c <HAL_I2C_MspInit+0x90>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d132      	bne.n	8000a34 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 80009d4:	2180      	movs	r1, #128	@ 0x80
 80009d6:	02c9      	lsls	r1, r1, #11
 80009d8:	430a      	orrs	r2, r1
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	02db      	lsls	r3, r3, #11
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	22c0      	movs	r2, #192	@ 0xc0
 80009ee:	0112      	lsls	r2, r2, #4
 80009f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f2:	0021      	movs	r1, r4
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2212      	movs	r2, #18
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2203      	movs	r2, #3
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <HAL_I2C_MspInit+0x98>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f000 fca6 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a1e:	2180      	movs	r1, #128	@ 0x80
 8000a20:	03c9      	lsls	r1, r1, #15
 8000a22:	430a      	orrs	r2, r1
 8000a24:	61da      	str	r2, [r3, #28]
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a28:	69da      	ldr	r2, [r3, #28]
 8000a2a:	2380      	movs	r3, #128	@ 0x80
 8000a2c:	03db      	lsls	r3, r3, #15
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b00b      	add	sp, #44	@ 0x2c
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	40005800 	.word	0x40005800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	48000400 	.word	0x48000400

08000a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b08b      	sub	sp, #44	@ 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	2414      	movs	r4, #20
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f003 fc04 	bl	8004268 <memset>
  if(hspi->Instance==SPI2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d132      	bne.n	8000ad0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_SPI_MspInit+0x94>)
 8000a6c:	69da      	ldr	r2, [r3, #28]
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <HAL_SPI_MspInit+0x94>)
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	01c9      	lsls	r1, r1, #7
 8000a74:	430a      	orrs	r2, r1
 8000a76:	61da      	str	r2, [r3, #28]
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_SPI_MspInit+0x94>)
 8000a7a:	69da      	ldr	r2, [r3, #28]
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	01db      	lsls	r3, r3, #7
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_SPI_MspInit+0x94>)
 8000a88:	695a      	ldr	r2, [r3, #20]
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_SPI_MspInit+0x94>)
 8000a8c:	2180      	movs	r1, #128	@ 0x80
 8000a8e:	02c9      	lsls	r1, r1, #11
 8000a90:	430a      	orrs	r2, r1
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_SPI_MspInit+0x94>)
 8000a96:	695a      	ldr	r2, [r3, #20]
 8000a98:	2380      	movs	r3, #128	@ 0x80
 8000a9a:	02db      	lsls	r3, r3, #11
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	22e0      	movs	r2, #224	@ 0xe0
 8000aa6:	0212      	lsls	r2, r2, #8
 8000aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	0021      	movs	r1, r4
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2202      	movs	r2, #2
 8000ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2203      	movs	r2, #3
 8000abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <HAL_SPI_MspInit+0x98>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0010      	movs	r0, r2
 8000acc:	f000 fc4a 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b00b      	add	sp, #44	@ 0x2c
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	40003800 	.word	0x40003800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b08b      	sub	sp, #44	@ 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	2414      	movs	r4, #20
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	2314      	movs	r3, #20
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f003 fbb6 	bl	8004268 <memset>
  if(huart->Instance==USART1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a1d      	ldr	r2, [pc, #116]	@ (8000b78 <HAL_UART_MspInit+0x94>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d133      	bne.n	8000b6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b06:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <HAL_UART_MspInit+0x98>)
 8000b08:	699a      	ldr	r2, [r3, #24]
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_UART_MspInit+0x98>)
 8000b0c:	2180      	movs	r1, #128	@ 0x80
 8000b0e:	01c9      	lsls	r1, r1, #7
 8000b10:	430a      	orrs	r2, r1
 8000b12:	619a      	str	r2, [r3, #24]
 8000b14:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_UART_MspInit+0x98>)
 8000b16:	699a      	ldr	r2, [r3, #24]
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	01db      	lsls	r3, r3, #7
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_UART_MspInit+0x98>)
 8000b24:	695a      	ldr	r2, [r3, #20]
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <HAL_UART_MspInit+0x98>)
 8000b28:	2180      	movs	r1, #128	@ 0x80
 8000b2a:	0289      	lsls	r1, r1, #10
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <HAL_UART_MspInit+0x98>)
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	029b      	lsls	r3, r3, #10
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	22c0      	movs	r2, #192	@ 0xc0
 8000b42:	00d2      	lsls	r2, r2, #3
 8000b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	0021      	movs	r1, r4
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2203      	movs	r2, #3
 8000b58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	187a      	adds	r2, r7, r1
 8000b62:	2390      	movs	r3, #144	@ 0x90
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fbfb 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b00b      	add	sp, #44	@ 0x2c
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	40013800 	.word	0x40013800
 8000b7c:	40021000 	.word	0x40021000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f8b2 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	@ (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f003 fb48 	bl	8004278 <__errno>
 8000be8:	0003      	movs	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	425b      	negs	r3, r3
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	18d2      	adds	r2, r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <_sbrk+0x64>)
 8000c04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b006      	add	sp, #24
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20002000 	.word	0x20002000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	20000310 	.word	0x20000310
 8000c1c:	20000460 	.word	0x20000460

08000c20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c2c:	480d      	ldr	r0, [pc, #52]	@ (8000c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c30:	f7ff fff6 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	@ (8000c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <LoopForever+0xe>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c78 <LoopForever+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c5a:	f003 fb13 	bl	8004284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5e:	f7ff fbb1 	bl	80003c4 <main>

08000c62 <LoopForever>:

LoopForever:
    b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   r0, =_estack
 8000c64:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c70:	08004c04 	.word	0x08004c04
  ldr r2, =_sbss
 8000c74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c78:	20000460 	.word	0x20000460

08000c7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_IRQHandler>
	...

08000c80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <HAL_Init+0x24>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_Init+0x24>)
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f809 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c96:	f7ff fe1f 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	40022000 	.word	0x40022000

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_InitTick+0x5c>)
 8000cb2:	681c      	ldr	r4, [r3, #0]
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_InitTick+0x60>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	0019      	movs	r1, r3
 8000cba:	23fa      	movs	r3, #250	@ 0xfa
 8000cbc:	0098      	lsls	r0, r3, #2
 8000cbe:	f7ff fa35 	bl	800012c <__udivsi3>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	0019      	movs	r1, r3
 8000cc6:	0020      	movs	r0, r4
 8000cc8:	f7ff fa30 	bl	800012c <__udivsi3>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fb3b 	bl	800134a <HAL_SYSTICK_Config>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e00f      	b.n	8000cfc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d80b      	bhi.n	8000cfa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	425b      	negs	r3, r3
 8000ce8:	2200      	movs	r2, #0
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 fb18 	bl	8001320 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_InitTick+0x64>)
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b003      	add	sp, #12
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <HAL_IncTick+0x1c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	001a      	movs	r2, r3
 8000d1a:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	18d2      	adds	r2, r2, r3
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000314 	.word	0x20000314

08000d34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b02      	ldr	r3, [pc, #8]	@ (8000d44 <HAL_GetTick+0x10>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	20000314 	.word	0x20000314

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff fff0 	bl	8000d34 <HAL_GetTick>
 8000d54:	0003      	movs	r3, r0
 8000d56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	d005      	beq.n	8000d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_Delay+0x44>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	001a      	movs	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	189b      	adds	r3, r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	f7ff ffe0 	bl	8000d34 <HAL_GetTick>
 8000d74:	0002      	movs	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8f7      	bhi.n	8000d70 <HAL_Delay+0x28>
  {
  }
}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008

08000d90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e125      	b.n	8000ffa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10a      	bne.n	8000dcc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2234      	movs	r2, #52	@ 0x34
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff fdaa 	bl	8000920 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d000      	beq.n	8000dd8 <HAL_ADC_Init+0x48>
 8000dd6:	e103      	b.n	8000fe0 <HAL_ADC_Init+0x250>
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d000      	beq.n	8000de4 <HAL_ADC_Init+0x54>
 8000de2:	e0fd      	b.n	8000fe0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2204      	movs	r2, #4
 8000dec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000dee:	d000      	beq.n	8000df2 <HAL_ADC_Init+0x62>
 8000df0:	e0f6      	b.n	8000fe0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000df6:	4a83      	ldr	r2, [pc, #524]	@ (8001004 <HAL_ADC_Init+0x274>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d112      	bne.n	8000e36 <HAL_ADC_Init+0xa6>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d009      	beq.n	8000e32 <HAL_ADC_Init+0xa2>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	2380      	movs	r3, #128	@ 0x80
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	401a      	ands	r2, r3
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d101      	bne.n	8000e36 <HAL_ADC_Init+0xa6>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_ADC_Init+0xa8>
 8000e36:	2300      	movs	r3, #0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d116      	bne.n	8000e6a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2218      	movs	r2, #24
 8000e44:	4393      	bics	r3, r2
 8000e46:	0019      	movs	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	0899      	lsrs	r1, r3, #2
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4964      	ldr	r1, [pc, #400]	@ (8001008 <HAL_ADC_Init+0x278>)
 8000e76:	400a      	ands	r2, r1
 8000e78:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7e1b      	ldrb	r3, [r3, #24]
 8000e7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e5b      	ldrb	r3, [r3, #25]
 8000e84:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e86:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7e9b      	ldrb	r3, [r3, #26]
 8000e8c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d002      	beq.n	8000e9e <HAL_ADC_Init+0x10e>
 8000e98:	2380      	movs	r3, #128	@ 0x80
 8000e9a:	015b      	lsls	r3, r3, #5
 8000e9c:	e000      	b.n	8000ea0 <HAL_ADC_Init+0x110>
 8000e9e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ea0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ea6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d101      	bne.n	8000eb4 <HAL_ADC_Init+0x124>
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	e000      	b.n	8000eb6 <HAL_ADC_Init+0x126>
 8000eb4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000eb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2124      	movs	r1, #36	@ 0x24
 8000ebc:	5c5b      	ldrb	r3, [r3, r1]
 8000ebe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ec0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7edb      	ldrb	r3, [r3, #27]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d115      	bne.n	8000efc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7e9b      	ldrb	r3, [r3, #26]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	2280      	movs	r2, #128	@ 0x80
 8000edc:	0252      	lsls	r2, r2, #9
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	e00b      	b.n	8000efc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ee8:	2220      	movs	r2, #32
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69da      	ldr	r2, [r3, #28]
 8000f00:	23c2      	movs	r3, #194	@ 0xc2
 8000f02:	33ff      	adds	r3, #255	@ 0xff
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d007      	beq.n	8000f18 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f10:	4313      	orrs	r3, r2
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68d9      	ldr	r1, [r3, #12]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	055b      	lsls	r3, r3, #21
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d01b      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d017      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d013      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d00f      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d00b      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d007      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f60:	2b06      	cmp	r3, #6
 8000f62:	d003      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	d112      	bne.n	8000f92 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2107      	movs	r1, #7
 8000f78:	438a      	bics	r2, r1
 8000f7a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6959      	ldr	r1, [r3, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f86:	2207      	movs	r2, #7
 8000f88:	401a      	ands	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a1c      	ldr	r2, [pc, #112]	@ (800100c <HAL_ADC_Init+0x27c>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d10b      	bne.n	8000fba <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fac:	2203      	movs	r2, #3
 8000fae:	4393      	bics	r3, r2
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fb8:	e01c      	b.n	8000ff4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fbe:	2212      	movs	r2, #18
 8000fc0:	4393      	bics	r3, r2
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fce:	2201      	movs	r2, #1
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fde:	e009      	b.n	8000ff4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	781b      	ldrb	r3, [r3, #0]
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	fffffefd 	.word	0xfffffefd
 8001008:	fffe0219 	.word	0xfffe0219
 800100c:	833fffe7 	.word	0x833fffe7

08001010 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101a:	230f      	movs	r3, #15
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	055b      	lsls	r3, r3, #21
 800102e:	429a      	cmp	r2, r3
 8001030:	d011      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001036:	2b01      	cmp	r3, #1
 8001038:	d00d      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800103e:	2b02      	cmp	r3, #2
 8001040:	d009      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001046:	2b03      	cmp	r3, #3
 8001048:	d005      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104e:	2b04      	cmp	r3, #4
 8001050:	d001      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2234      	movs	r2, #52	@ 0x34
 800105a:	5c9b      	ldrb	r3, [r3, r2]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x54>
 8001060:	2302      	movs	r3, #2
 8001062:	e0bb      	b.n	80011dc <HAL_ADC_ConfigChannel+0x1cc>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2234      	movs	r2, #52	@ 0x34
 8001068:	2101      	movs	r1, #1
 800106a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2204      	movs	r2, #4
 8001074:	4013      	ands	r3, r2
 8001076:	d000      	beq.n	800107a <HAL_ADC_ConfigChannel+0x6a>
 8001078:	e09f      	b.n	80011ba <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a59      	ldr	r2, [pc, #356]	@ (80011e4 <HAL_ADC_ConfigChannel+0x1d4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d100      	bne.n	8001086 <HAL_ADC_ConfigChannel+0x76>
 8001084:	e077      	b.n	8001176 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	409a      	lsls	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010a0:	2380      	movs	r3, #128	@ 0x80
 80010a2:	055b      	lsls	r3, r3, #21
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d037      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d033      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d02f      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d02b      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d027      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d023      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	d01f      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010dc:	2b07      	cmp	r3, #7
 80010de:	d01b      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	2107      	movs	r1, #7
 80010ec:	400b      	ands	r3, r1
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d012      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2107      	movs	r1, #7
 80010fe:	438a      	bics	r2, r1
 8001100:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6959      	ldr	r1, [r3, #20]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2207      	movs	r2, #7
 800110e:	401a      	ands	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b10      	cmp	r3, #16
 800111e:	d003      	beq.n	8001128 <HAL_ADC_ConfigChannel+0x118>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b11      	cmp	r3, #17
 8001126:	d152      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001128:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <HAL_ADC_ConfigChannel+0x1d8>)
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b10      	cmp	r3, #16
 8001132:	d102      	bne.n	800113a <HAL_ADC_ConfigChannel+0x12a>
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	041b      	lsls	r3, r3, #16
 8001138:	e001      	b.n	800113e <HAL_ADC_ConfigChannel+0x12e>
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	03db      	lsls	r3, r3, #15
 800113e:	4a2a      	ldr	r2, [pc, #168]	@ (80011e8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001140:	430b      	orrs	r3, r1
 8001142:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b10      	cmp	r3, #16
 800114a:	d140      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <HAL_ADC_ConfigChannel+0x1dc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4927      	ldr	r1, [pc, #156]	@ (80011f0 <HAL_ADC_ConfigChannel+0x1e0>)
 8001152:	0018      	movs	r0, r3
 8001154:	f7fe ffea 	bl	800012c <__udivsi3>
 8001158:	0003      	movs	r3, r0
 800115a:	001a      	movs	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	189b      	adds	r3, r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001166:	e002      	b.n	800116e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3b01      	subs	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f9      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x158>
 8001174:	e02b      	b.n	80011ce <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	4099      	lsls	r1, r3
 8001184:	000b      	movs	r3, r1
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b10      	cmp	r3, #16
 8001196:	d003      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0x190>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b11      	cmp	r3, #17
 800119e:	d116      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <HAL_ADC_ConfigChannel+0x1d8>)
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b10      	cmp	r3, #16
 80011aa:	d101      	bne.n	80011b0 <HAL_ADC_ConfigChannel+0x1a0>
 80011ac:	4a11      	ldr	r2, [pc, #68]	@ (80011f4 <HAL_ADC_ConfigChannel+0x1e4>)
 80011ae:	e000      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x1a2>
 80011b0:	4a11      	ldr	r2, [pc, #68]	@ (80011f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_ADC_ConfigChannel+0x1d8>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e009      	b.n	80011ce <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011be:	2220      	movs	r2, #32
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2234      	movs	r2, #52	@ 0x34
 80011d2:	2100      	movs	r1, #0
 80011d4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80011d6:	230f      	movs	r3, #15
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	781b      	ldrb	r3, [r3, #0]
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b004      	add	sp, #16
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	00001001 	.word	0x00001001
 80011e8:	40012708 	.word	0x40012708
 80011ec:	20000000 	.word	0x20000000
 80011f0:	000f4240 	.word	0x000f4240
 80011f4:	ff7fffff 	.word	0xff7fffff
 80011f8:	ffbfffff 	.word	0xffbfffff

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001210:	d828      	bhi.n	8001264 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001212:	4a2f      	ldr	r2, [pc, #188]	@ (80012d0 <__NVIC_SetPriority+0xd4>)
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b25b      	sxtb	r3, r3
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	33c0      	adds	r3, #192	@ 0xc0
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	589b      	ldr	r3, [r3, r2]
 8001222:	1dfa      	adds	r2, r7, #7
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	0011      	movs	r1, r2
 8001228:	2203      	movs	r2, #3
 800122a:	400a      	ands	r2, r1
 800122c:	00d2      	lsls	r2, r2, #3
 800122e:	21ff      	movs	r1, #255	@ 0xff
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	43d2      	mvns	r2, r2
 8001236:	401a      	ands	r2, r3
 8001238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	22ff      	movs	r2, #255	@ 0xff
 8001240:	401a      	ands	r2, r3
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	2303      	movs	r3, #3
 800124a:	4003      	ands	r3, r0
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001250:	481f      	ldr	r0, [pc, #124]	@ (80012d0 <__NVIC_SetPriority+0xd4>)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b25b      	sxtb	r3, r3
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	430a      	orrs	r2, r1
 800125c:	33c0      	adds	r3, #192	@ 0xc0
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001262:	e031      	b.n	80012c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	4a1b      	ldr	r2, [pc, #108]	@ (80012d4 <__NVIC_SetPriority+0xd8>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0019      	movs	r1, r3
 800126c:	230f      	movs	r3, #15
 800126e:	400b      	ands	r3, r1
 8001270:	3b08      	subs	r3, #8
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3306      	adds	r3, #6
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	3304      	adds	r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	1dfa      	adds	r2, r7, #7
 8001280:	7812      	ldrb	r2, [r2, #0]
 8001282:	0011      	movs	r1, r2
 8001284:	2203      	movs	r2, #3
 8001286:	400a      	ands	r2, r1
 8001288:	00d2      	lsls	r2, r2, #3
 800128a:	21ff      	movs	r1, #255	@ 0xff
 800128c:	4091      	lsls	r1, r2
 800128e:	000a      	movs	r2, r1
 8001290:	43d2      	mvns	r2, r2
 8001292:	401a      	ands	r2, r3
 8001294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	22ff      	movs	r2, #255	@ 0xff
 800129c:	401a      	ands	r2, r3
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	0018      	movs	r0, r3
 80012a4:	2303      	movs	r3, #3
 80012a6:	4003      	ands	r3, r0
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <__NVIC_SetPriority+0xd8>)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	001c      	movs	r4, r3
 80012b4:	230f      	movs	r3, #15
 80012b6:	4023      	ands	r3, r4
 80012b8:	3b08      	subs	r3, #8
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	430a      	orrs	r2, r1
 80012be:	3306      	adds	r3, #6
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	18c3      	adds	r3, r0, r3
 80012c4:	3304      	adds	r3, #4
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	46c0      	nop			@ (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b003      	add	sp, #12
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	045b      	lsls	r3, r3, #17
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d301      	bcc.n	80012f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ec:	2301      	movs	r3, #1
 80012ee:	e010      	b.n	8001312 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <SysTick_Config+0x44>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	3a01      	subs	r2, #1
 80012f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f8:	2301      	movs	r3, #1
 80012fa:	425b      	negs	r3, r3
 80012fc:	2103      	movs	r1, #3
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff ff7c 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <SysTick_Config+0x44>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	@ (800131c <SysTick_Config+0x44>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	210f      	movs	r1, #15
 800132c:	187b      	adds	r3, r7, r1
 800132e:	1c02      	adds	r2, r0, #0
 8001330:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	187b      	adds	r3, r7, r1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b25b      	sxtb	r3, r3
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff ffbf 	bl	80012d8 <SysTick_Config>
 800135a:	0003      	movs	r3, r0
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e14f      	b.n	8001614 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4091      	lsls	r1, r2
 800137e:	000a      	movs	r2, r1
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d100      	bne.n	800138c <HAL_GPIO_Init+0x28>
 800138a:	e140      	b.n	800160e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	4013      	ands	r3, r2
 8001394:	2b01      	cmp	r3, #1
 8001396:	d005      	beq.n	80013a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2203      	movs	r2, #3
 800139e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d130      	bne.n	8001406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	409a      	lsls	r2, r3
 80013c6:	0013      	movs	r3, r2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013da:	2201      	movs	r2, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	43da      	mvns	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	2201      	movs	r2, #1
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	4013      	ands	r3, r2
 800140e:	2b03      	cmp	r3, #3
 8001410:	d017      	beq.n	8001442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2203      	movs	r2, #3
 8001448:	4013      	ands	r3, r2
 800144a:	2b02      	cmp	r3, #2
 800144c:	d123      	bne.n	8001496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	58d3      	ldr	r3, [r2, r3]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2207      	movs	r2, #7
 8001460:	4013      	ands	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	43da      	mvns	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2107      	movs	r1, #7
 800147a:	400b      	ands	r3, r1
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	409a      	lsls	r2, r3
 8001480:	0013      	movs	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	6939      	ldr	r1, [r7, #16]
 8001494:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	401a      	ands	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	409a      	lsls	r2, r3
 80014bc:	0013      	movs	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	23c0      	movs	r3, #192	@ 0xc0
 80014d0:	029b      	lsls	r3, r3, #10
 80014d2:	4013      	ands	r3, r2
 80014d4:	d100      	bne.n	80014d8 <HAL_GPIO_Init+0x174>
 80014d6:	e09a      	b.n	800160e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d8:	4b54      	ldr	r3, [pc, #336]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80014da:	699a      	ldr	r2, [r3, #24]
 80014dc:	4b53      	ldr	r3, [pc, #332]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80014de:	2101      	movs	r1, #1
 80014e0:	430a      	orrs	r2, r1
 80014e2:	619a      	str	r2, [r3, #24]
 80014e4:	4b51      	ldr	r3, [pc, #324]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4013      	ands	r3, r2
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001630 <HAL_GPIO_Init+0x2cc>)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	589b      	ldr	r3, [r3, r2]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2203      	movs	r2, #3
 8001502:	4013      	ands	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	409a      	lsls	r2, r3
 800150a:	0013      	movs	r3, r2
 800150c:	43da      	mvns	r2, r3
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	2390      	movs	r3, #144	@ 0x90
 8001518:	05db      	lsls	r3, r3, #23
 800151a:	429a      	cmp	r2, r3
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0x1e2>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a44      	ldr	r2, [pc, #272]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d00d      	beq.n	8001542 <HAL_GPIO_Init+0x1de>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a43      	ldr	r2, [pc, #268]	@ (8001638 <HAL_GPIO_Init+0x2d4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d007      	beq.n	800153e <HAL_GPIO_Init+0x1da>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a42      	ldr	r2, [pc, #264]	@ (800163c <HAL_GPIO_Init+0x2d8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_GPIO_Init+0x1d6>
 8001536:	2303      	movs	r3, #3
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x1e4>
 800153a:	2305      	movs	r3, #5
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x1e4>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x1e4>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x1e4>
 8001546:	2300      	movs	r3, #0
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	2103      	movs	r1, #3
 800154c:	400a      	ands	r2, r1
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001558:	4935      	ldr	r1, [pc, #212]	@ (8001630 <HAL_GPIO_Init+0x2cc>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <HAL_GPIO_Init+0x2dc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43da      	mvns	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	035b      	lsls	r3, r3, #13
 800157e:	4013      	ands	r3, r2
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800158a:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <HAL_GPIO_Init+0x2dc>)
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001590:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <HAL_GPIO_Init+0x2dc>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43da      	mvns	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	039b      	lsls	r3, r3, #14
 80015a8:	4013      	ands	r3, r2
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015b4:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <HAL_GPIO_Init+0x2dc>)
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <HAL_GPIO_Init+0x2dc>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43da      	mvns	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	2380      	movs	r3, #128	@ 0x80
 80015d0:	029b      	lsls	r3, r3, #10
 80015d2:	4013      	ands	r3, r2
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <HAL_GPIO_Init+0x2dc>)
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015e4:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <HAL_GPIO_Init+0x2dc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43da      	mvns	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	4013      	ands	r3, r2
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001608:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <HAL_GPIO_Init+0x2dc>)
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	40da      	lsrs	r2, r3
 800161c:	1e13      	subs	r3, r2, #0
 800161e:	d000      	beq.n	8001622 <HAL_GPIO_Init+0x2be>
 8001620:	e6a8      	b.n	8001374 <HAL_GPIO_Init+0x10>
  } 
}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b006      	add	sp, #24
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000
 8001634:	48000400 	.word	0x48000400
 8001638:	48000800 	.word	0x48000800
 800163c:	48000c00 	.word	0x48000c00
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	0008      	movs	r0, r1
 800164e:	0011      	movs	r1, r2
 8001650:	1cbb      	adds	r3, r7, #2
 8001652:	1c02      	adds	r2, r0, #0
 8001654:	801a      	strh	r2, [r3, #0]
 8001656:	1c7b      	adds	r3, r7, #1
 8001658:	1c0a      	adds	r2, r1, #0
 800165a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	1c7b      	adds	r3, r7, #1
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001664:	1cbb      	adds	r3, r7, #2
 8001666:	881a      	ldrh	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800166c:	e003      	b.n	8001676 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166e:	1cbb      	adds	r3, r7, #2
 8001670:	881a      	ldrh	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	000a      	movs	r2, r1
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001692:	1cbb      	adds	r3, r7, #2
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	041a      	lsls	r2, r3, #16
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	1cb9      	adds	r1, r7, #2
 80016a2:	8809      	ldrh	r1, [r1, #0]
 80016a4:	400b      	ands	r3, r1
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
}
 80016ac:	46c0      	nop			@ (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e08f      	b.n	80017e6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2241      	movs	r2, #65	@ 0x41
 80016ca:	5c9b      	ldrb	r3, [r3, r2]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d107      	bne.n	80016e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2240      	movs	r2, #64	@ 0x40
 80016d6:	2100      	movs	r1, #0
 80016d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff f965 	bl	80009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2241      	movs	r2, #65	@ 0x41
 80016e6:	2124      	movs	r1, #36	@ 0x24
 80016e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	438a      	bics	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	493b      	ldr	r1, [pc, #236]	@ (80017f0 <HAL_I2C_Init+0x13c>)
 8001704:	400a      	ands	r2, r1
 8001706:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4938      	ldr	r1, [pc, #224]	@ (80017f4 <HAL_I2C_Init+0x140>)
 8001714:	400a      	ands	r2, r1
 8001716:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	0209      	lsls	r1, r1, #8
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e007      	b.n	8001742 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2184      	movs	r1, #132	@ 0x84
 800173c:	0209      	lsls	r1, r1, #8
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d109      	bne.n	800175e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2180      	movs	r1, #128	@ 0x80
 8001756:	0109      	lsls	r1, r1, #4
 8001758:	430a      	orrs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	e007      	b.n	800176e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4923      	ldr	r1, [pc, #140]	@ (80017f8 <HAL_I2C_Init+0x144>)
 800176a:	400a      	ands	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4920      	ldr	r1, [pc, #128]	@ (80017fc <HAL_I2C_Init+0x148>)
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	491a      	ldr	r1, [pc, #104]	@ (80017f4 <HAL_I2C_Init+0x140>)
 800178a:	400a      	ands	r2, r1
 800178c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	431a      	orrs	r2, r3
 8001798:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69d9      	ldr	r1, [r3, #28]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1a      	ldr	r2, [r3, #32]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2101      	movs	r1, #1
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2241      	movs	r2, #65	@ 0x41
 80017d2:	2120      	movs	r1, #32
 80017d4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2242      	movs	r2, #66	@ 0x42
 80017e0:	2100      	movs	r1, #0
 80017e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	f0ffffff 	.word	0xf0ffffff
 80017f4:	ffff7fff 	.word	0xffff7fff
 80017f8:	fffff7ff 	.word	0xfffff7ff
 80017fc:	02008000 	.word	0x02008000

08001800 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	@ 0x24
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	000c      	movs	r4, r1
 800180a:	0010      	movs	r0, r2
 800180c:	0019      	movs	r1, r3
 800180e:	230a      	movs	r3, #10
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	1c22      	adds	r2, r4, #0
 8001814:	801a      	strh	r2, [r3, #0]
 8001816:	2308      	movs	r3, #8
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	1c02      	adds	r2, r0, #0
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	1dbb      	adds	r3, r7, #6
 8001820:	1c0a      	adds	r2, r1, #0
 8001822:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2241      	movs	r2, #65	@ 0x41
 8001828:	5c9b      	ldrb	r3, [r3, r2]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b20      	cmp	r3, #32
 800182e:	d000      	beq.n	8001832 <HAL_I2C_Mem_Read+0x32>
 8001830:	e110      	b.n	8001a54 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <HAL_I2C_Mem_Read+0x42>
 8001838:	232c      	movs	r3, #44	@ 0x2c
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d105      	bne.n	800184e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2280      	movs	r2, #128	@ 0x80
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e103      	b.n	8001a56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2240      	movs	r2, #64	@ 0x40
 8001852:	5c9b      	ldrb	r3, [r3, r2]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_I2C_Mem_Read+0x5c>
 8001858:	2302      	movs	r3, #2
 800185a:	e0fc      	b.n	8001a56 <HAL_I2C_Mem_Read+0x256>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2240      	movs	r2, #64	@ 0x40
 8001860:	2101      	movs	r1, #1
 8001862:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001864:	f7ff fa66 	bl	8000d34 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	0219      	lsls	r1, r3, #8
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2319      	movs	r3, #25
 8001878:	2201      	movs	r2, #1
 800187a:	f000 f979 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0e7      	b.n	8001a56 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2241      	movs	r2, #65	@ 0x41
 800188a:	2122      	movs	r1, #34	@ 0x22
 800188c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2242      	movs	r2, #66	@ 0x42
 8001892:	2140      	movs	r1, #64	@ 0x40
 8001894:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	222c      	movs	r2, #44	@ 0x2c
 80018a6:	18ba      	adds	r2, r7, r2
 80018a8:	8812      	ldrh	r2, [r2, #0]
 80018aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018b2:	1dbb      	adds	r3, r7, #6
 80018b4:	881c      	ldrh	r4, [r3, #0]
 80018b6:	2308      	movs	r3, #8
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	230a      	movs	r3, #10
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	8819      	ldrh	r1, [r3, #0]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	0023      	movs	r3, r4
 80018ce:	f000 f8cb 	bl	8001a68 <I2C_RequestMemoryRead>
 80018d2:	1e03      	subs	r3, r0, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2240      	movs	r2, #64	@ 0x40
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0b9      	b.n	8001a56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2bff      	cmp	r3, #255	@ 0xff
 80018ea:	d911      	bls.n	8001910 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2201      	movs	r2, #1
 80018f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	045c      	lsls	r4, r3, #17
 80018fc:	230a      	movs	r3, #10
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	8819      	ldrh	r1, [r3, #0]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	4b56      	ldr	r3, [pc, #344]	@ (8001a60 <HAL_I2C_Mem_Read+0x260>)
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	0023      	movs	r3, r4
 800190a:	f000 fb0b 	bl	8001f24 <I2C_TransferConfig>
 800190e:	e012      	b.n	8001936 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191e:	b2da      	uxtb	r2, r3
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	049c      	lsls	r4, r3, #18
 8001924:	230a      	movs	r3, #10
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	8819      	ldrh	r1, [r3, #0]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a60 <HAL_I2C_Mem_Read+0x260>)
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	0023      	movs	r3, r4
 8001932:	f000 faf7 	bl	8001f24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	0013      	movs	r3, r2
 8001940:	2200      	movs	r2, #0
 8001942:	2104      	movs	r1, #4
 8001944:	f000 f914 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e082      	b.n	8001a56 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001986:	b29b      	uxth	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d03a      	beq.n	8001a02 <HAL_I2C_Mem_Read+0x202>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d136      	bne.n	8001a02 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	0013      	movs	r3, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	2180      	movs	r1, #128	@ 0x80
 80019a2:	f000 f8e5 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e053      	b.n	8001a56 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2bff      	cmp	r3, #255	@ 0xff
 80019b6:	d911      	bls.n	80019dc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	045c      	lsls	r4, r3, #17
 80019c8:	230a      	movs	r3, #10
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	8819      	ldrh	r1, [r3, #0]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	0023      	movs	r3, r4
 80019d6:	f000 faa5 	bl	8001f24 <I2C_TransferConfig>
 80019da:	e012      	b.n	8001a02 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	049c      	lsls	r4, r3, #18
 80019f0:	230a      	movs	r3, #10
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	8819      	ldrh	r1, [r3, #0]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	2300      	movs	r3, #0
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	0023      	movs	r3, r4
 80019fe:	f000 fa91 	bl	8001f24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d194      	bne.n	8001936 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 f94a 	bl	8001cac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a18:	1e03      	subs	r3, r0, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e01a      	b.n	8001a56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2220      	movs	r2, #32
 8001a26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	490c      	ldr	r1, [pc, #48]	@ (8001a64 <HAL_I2C_Mem_Read+0x264>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2241      	movs	r2, #65	@ 0x41
 8001a3c:	2120      	movs	r1, #32
 8001a3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2242      	movs	r2, #66	@ 0x42
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2240      	movs	r2, #64	@ 0x40
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e000      	b.n	8001a56 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
  }
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b007      	add	sp, #28
 8001a5c:	bd90      	pop	{r4, r7, pc}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	80002400 	.word	0x80002400
 8001a64:	fe00e800 	.word	0xfe00e800

08001a68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	000c      	movs	r4, r1
 8001a72:	0010      	movs	r0, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	250a      	movs	r5, #10
 8001a78:	197b      	adds	r3, r7, r5
 8001a7a:	1c22      	adds	r2, r4, #0
 8001a7c:	801a      	strh	r2, [r3, #0]
 8001a7e:	2308      	movs	r3, #8
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	1c02      	adds	r2, r0, #0
 8001a84:	801a      	strh	r2, [r3, #0]
 8001a86:	1dbb      	adds	r3, r7, #6
 8001a88:	1c0a      	adds	r2, r1, #0
 8001a8a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a8c:	1dbb      	adds	r3, r7, #6
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	197b      	adds	r3, r7, r5
 8001a94:	8819      	ldrh	r1, [r3, #0]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <I2C_RequestMemoryRead+0xc0>)
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f000 fa41 	bl	8001f24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 f8b9 	bl	8001c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e033      	b.n	8001b1e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001abe:	2308      	movs	r3, #8
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
 8001acc:	e019      	b.n	8001b02 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ace:	2308      	movs	r3, #8
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae2:	6a39      	ldr	r1, [r7, #32]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 f89a 	bl	8001c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d001      	beq.n	8001af4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e014      	b.n	8001b1e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001af4:	2308      	movs	r3, #8
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b02:	6a3a      	ldr	r2, [r7, #32]
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	0013      	movs	r3, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2140      	movs	r1, #64	@ 0x40
 8001b10:	f000 f82e 	bl	8001b70 <I2C_WaitOnFlagUntilTimeout>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d001      	beq.n	8001b1c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bdb0      	pop	{r4, r5, r7, pc}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	80002000 	.word	0x80002000

08001b2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d103      	bne.n	8001b4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2201      	movs	r2, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d007      	beq.n	8001b68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2101      	movs	r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	619a      	str	r2, [r3, #24]
  }
}
 8001b68:	46c0      	nop			@ (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b80:	e03a      	b.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 f8d3 	bl	8001d34 <I2C_IsErrorOccurred>
 8001b8e:	1e03      	subs	r3, r0, #0
 8001b90:	d001      	beq.n	8001b96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e040      	b.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	d02d      	beq.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9c:	f7ff f8ca 	bl	8000d34 <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d302      	bcc.n	8001bb2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d122      	bne.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	425a      	negs	r2, r3
 8001bc2:	4153      	adcs	r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d113      	bne.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2241      	movs	r2, #65	@ 0x41
 8001be0:	2120      	movs	r1, #32
 8001be2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2242      	movs	r2, #66	@ 0x42
 8001be8:	2100      	movs	r1, #0
 8001bea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2240      	movs	r2, #64	@ 0x40
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e00f      	b.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4013      	ands	r3, r2
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	425a      	negs	r2, r3
 8001c08:	4153      	adcs	r3, r2
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d0b5      	beq.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c2c:	e032      	b.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	0018      	movs	r0, r3
 8001c36:	f000 f87d 	bl	8001d34 <I2C_IsErrorOccurred>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d001      	beq.n	8001c42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e030      	b.n	8001ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3301      	adds	r3, #1
 8001c46:	d025      	beq.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c48:	f7ff f874 	bl	8000d34 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d302      	bcc.n	8001c5e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11a      	bne.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d013      	beq.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c70:	2220      	movs	r2, #32
 8001c72:	431a      	orrs	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2241      	movs	r2, #65	@ 0x41
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2242      	movs	r2, #66	@ 0x42
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2240      	movs	r2, #64	@ 0x40
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e007      	b.n	8001ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d1c5      	bne.n	8001c2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b004      	add	sp, #16
 8001caa:	bd80      	pop	{r7, pc}

08001cac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb8:	e02f      	b.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f000 f837 	bl	8001d34 <I2C_IsErrorOccurred>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e02d      	b.n	8001d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cce:	f7ff f831 	bl	8000d34 <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d302      	bcc.n	8001ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d11a      	bne.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2220      	movs	r2, #32
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d013      	beq.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2241      	movs	r2, #65	@ 0x41
 8001d02:	2120      	movs	r1, #32
 8001d04:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2242      	movs	r2, #66	@ 0x42
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2240      	movs	r2, #64	@ 0x40
 8001d12:	2100      	movs	r1, #0
 8001d14:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e007      	b.n	8001d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2220      	movs	r2, #32
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d1c8      	bne.n	8001cba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2327      	movs	r3, #39	@ 0x27
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <I2C_IsErrorOccurred+0x2e>
 8001d60:	e079      	b.n	8001e56 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2210      	movs	r2, #16
 8001d68:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d6a:	e057      	b.n	8001e1c <I2C_IsErrorOccurred+0xe8>
 8001d6c:	2227      	movs	r2, #39	@ 0x27
 8001d6e:	18bb      	adds	r3, r7, r2
 8001d70:	18ba      	adds	r2, r7, r2
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	d04f      	beq.n	8001e1c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d7c:	f7fe ffda 	bl	8000d34 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d302      	bcc.n	8001d92 <I2C_IsErrorOccurred+0x5e>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d144      	bne.n	8001e1c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	01db      	lsls	r3, r3, #7
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001da0:	2013      	movs	r0, #19
 8001da2:	183b      	adds	r3, r7, r0
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	2142      	movs	r1, #66	@ 0x42
 8001da8:	5c52      	ldrb	r2, [r2, r1]
 8001daa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	401a      	ands	r2, r3
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d126      	bne.n	8001e0e <I2C_IsErrorOccurred+0xda>
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	2380      	movs	r3, #128	@ 0x80
 8001dc4:	01db      	lsls	r3, r3, #7
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d021      	beq.n	8001e0e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001dca:	183b      	adds	r3, r7, r0
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d01d      	beq.n	8001e0e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	01c9      	lsls	r1, r1, #7
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001de4:	f7fe ffa6 	bl	8000d34 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dec:	e00f      	b.n	8001e0e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001dee:	f7fe ffa1 	bl	8000d34 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b19      	cmp	r3, #25
 8001dfa:	d908      	bls.n	8001e0e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	4313      	orrs	r3, r2
 8001e02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e04:	2327      	movs	r3, #39	@ 0x27
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]

              break;
 8001e0c:	e006      	b.n	8001e1c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2220      	movs	r2, #32
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d1e8      	bne.n	8001dee <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2220      	movs	r2, #32
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d004      	beq.n	8001e34 <I2C_IsErrorOccurred+0x100>
 8001e2a:	2327      	movs	r3, #39	@ 0x27
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d09b      	beq.n	8001d6c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e34:	2327      	movs	r3, #39	@ 0x27
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d103      	bne.n	8001e46 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2220      	movs	r2, #32
 8001e44:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e4e:	2327      	movs	r3, #39	@ 0x27
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	2380      	movs	r3, #128	@ 0x80
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	d00c      	beq.n	8001e82 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2280      	movs	r2, #128	@ 0x80
 8001e76:	0052      	lsls	r2, r2, #1
 8001e78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e7a:	2327      	movs	r3, #39	@ 0x27
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d00c      	beq.n	8001ea6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	2208      	movs	r2, #8
 8001e90:	4313      	orrs	r3, r2
 8001e92:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2280      	movs	r2, #128	@ 0x80
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e9e:	2327      	movs	r3, #39	@ 0x27
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d00c      	beq.n	8001eca <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ec2:	2327      	movs	r3, #39	@ 0x27
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001eca:	2327      	movs	r3, #39	@ 0x27
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01d      	beq.n	8001f10 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff fe28 	bl	8001b2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	490e      	ldr	r1, [pc, #56]	@ (8001f20 <I2C_IsErrorOccurred+0x1ec>)
 8001ee8:	400a      	ands	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2241      	movs	r2, #65	@ 0x41
 8001efc:	2120      	movs	r1, #32
 8001efe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2242      	movs	r2, #66	@ 0x42
 8001f04:	2100      	movs	r1, #0
 8001f06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2240      	movs	r2, #64	@ 0x40
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001f10:	2327      	movs	r3, #39	@ 0x27
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	781b      	ldrb	r3, [r3, #0]
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b00a      	add	sp, #40	@ 0x28
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	fe00e800 	.word	0xfe00e800

08001f24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	0008      	movs	r0, r1
 8001f2e:	0011      	movs	r1, r2
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	240a      	movs	r4, #10
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	1c02      	adds	r2, r0, #0
 8001f38:	801a      	strh	r2, [r3, #0]
 8001f3a:	2009      	movs	r0, #9
 8001f3c:	183b      	adds	r3, r7, r0
 8001f3e:	1c0a      	adds	r2, r1, #0
 8001f40:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	059b      	lsls	r3, r3, #22
 8001f48:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f4a:	183b      	adds	r3, r7, r0
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	0419      	lsls	r1, r3, #16
 8001f50:	23ff      	movs	r3, #255	@ 0xff
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f56:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f6e:	0d51      	lsrs	r1, r2, #21
 8001f70:	2280      	movs	r2, #128	@ 0x80
 8001f72:	00d2      	lsls	r2, r2, #3
 8001f74:	400a      	ands	r2, r1
 8001f76:	4907      	ldr	r1, [pc, #28]	@ (8001f94 <I2C_TransferConfig+0x70>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	43d2      	mvns	r2, r2
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	0011      	movs	r1, r2
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b007      	add	sp, #28
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	03ff63ff 	.word	0x03ff63ff

08001f98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2241      	movs	r2, #65	@ 0x41
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d138      	bne.n	8002020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2240      	movs	r2, #64	@ 0x40
 8001fb2:	5c9b      	ldrb	r3, [r3, r2]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e032      	b.n	8002022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2240      	movs	r2, #64	@ 0x40
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2241      	movs	r2, #65	@ 0x41
 8001fc8:	2124      	movs	r1, #36	@ 0x24
 8001fca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4911      	ldr	r1, [pc, #68]	@ (800202c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6819      	ldr	r1, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2101      	movs	r1, #1
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2241      	movs	r2, #65	@ 0x41
 8002010:	2120      	movs	r1, #32
 8002012:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2240      	movs	r2, #64	@ 0x40
 8002018:	2100      	movs	r1, #0
 800201a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
  }
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b002      	add	sp, #8
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	ffffefff 	.word	0xffffefff

08002030 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2241      	movs	r2, #65	@ 0x41
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	d139      	bne.n	80020ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2240      	movs	r2, #64	@ 0x40
 800204a:	5c9b      	ldrb	r3, [r3, r2]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002050:	2302      	movs	r3, #2
 8002052:	e033      	b.n	80020bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2240      	movs	r2, #64	@ 0x40
 8002058:	2101      	movs	r1, #1
 800205a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2241      	movs	r2, #65	@ 0x41
 8002060:	2124      	movs	r1, #36	@ 0x24
 8002062:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	438a      	bics	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a11      	ldr	r2, [pc, #68]	@ (80020c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2241      	movs	r2, #65	@ 0x41
 80020aa:	2120      	movs	r1, #32
 80020ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2240      	movs	r2, #64	@ 0x40
 80020b2:	2100      	movs	r1, #0
 80020b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020ba:	2302      	movs	r3, #2
  }
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	fffff0ff 	.word	0xfffff0ff

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e301      	b.n	80026de <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2201      	movs	r2, #1
 80020e0:	4013      	ands	r3, r2
 80020e2:	d100      	bne.n	80020e6 <HAL_RCC_OscConfig+0x1e>
 80020e4:	e08d      	b.n	8002202 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020e6:	4bc3      	ldr	r3, [pc, #780]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	220c      	movs	r2, #12
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d00e      	beq.n	8002110 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f2:	4bc0      	ldr	r3, [pc, #768]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	220c      	movs	r2, #12
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d116      	bne.n	800212c <HAL_RCC_OscConfig+0x64>
 80020fe:	4bbd      	ldr	r3, [pc, #756]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	025b      	lsls	r3, r3, #9
 8002106:	401a      	ands	r2, r3
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	025b      	lsls	r3, r3, #9
 800210c:	429a      	cmp	r2, r3
 800210e:	d10d      	bne.n	800212c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	4bb8      	ldr	r3, [pc, #736]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_RCC_OscConfig+0x56>
 800211c:	e070      	b.n	8002200 <HAL_RCC_OscConfig+0x138>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d000      	beq.n	8002128 <HAL_RCC_OscConfig+0x60>
 8002126:	e06b      	b.n	8002200 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e2d8      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x7c>
 8002134:	4baf      	ldr	r3, [pc, #700]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4bae      	ldr	r3, [pc, #696]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800213a:	2180      	movs	r1, #128	@ 0x80
 800213c:	0249      	lsls	r1, r1, #9
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e02f      	b.n	80021a4 <HAL_RCC_OscConfig+0xdc>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10c      	bne.n	8002166 <HAL_RCC_OscConfig+0x9e>
 800214c:	4ba9      	ldr	r3, [pc, #676]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4ba8      	ldr	r3, [pc, #672]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002152:	49a9      	ldr	r1, [pc, #676]	@ (80023f8 <HAL_RCC_OscConfig+0x330>)
 8002154:	400a      	ands	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	4ba6      	ldr	r3, [pc, #664]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4ba5      	ldr	r3, [pc, #660]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800215e:	49a7      	ldr	r1, [pc, #668]	@ (80023fc <HAL_RCC_OscConfig+0x334>)
 8002160:	400a      	ands	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e01e      	b.n	80021a4 <HAL_RCC_OscConfig+0xdc>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b05      	cmp	r3, #5
 800216c:	d10e      	bne.n	800218c <HAL_RCC_OscConfig+0xc4>
 800216e:	4ba1      	ldr	r3, [pc, #644]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4ba0      	ldr	r3, [pc, #640]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	02c9      	lsls	r1, r1, #11
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	4b9d      	ldr	r3, [pc, #628]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b9c      	ldr	r3, [pc, #624]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002182:	2180      	movs	r1, #128	@ 0x80
 8002184:	0249      	lsls	r1, r1, #9
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xdc>
 800218c:	4b99      	ldr	r3, [pc, #612]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b98      	ldr	r3, [pc, #608]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002192:	4999      	ldr	r1, [pc, #612]	@ (80023f8 <HAL_RCC_OscConfig+0x330>)
 8002194:	400a      	ands	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	4b96      	ldr	r3, [pc, #600]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b95      	ldr	r3, [pc, #596]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800219e:	4997      	ldr	r1, [pc, #604]	@ (80023fc <HAL_RCC_OscConfig+0x334>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d014      	beq.n	80021d6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fdc2 	bl	8000d34 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b6:	f7fe fdbd 	bl	8000d34 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	@ 0x64
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e28a      	b.n	80026de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c8:	4b8a      	ldr	r3, [pc, #552]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	029b      	lsls	r3, r3, #10
 80021d0:	4013      	ands	r3, r2
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0xee>
 80021d4:	e015      	b.n	8002202 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fdad 	bl	8000d34 <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e0:	f7fe fda8 	bl	8000d34 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	@ 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e275      	b.n	80026de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	4b80      	ldr	r3, [pc, #512]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	029b      	lsls	r3, r3, #10
 80021fa:	4013      	ands	r3, r2
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x118>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	d100      	bne.n	800220e <HAL_RCC_OscConfig+0x146>
 800220c:	e069      	b.n	80022e2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800220e:	4b79      	ldr	r3, [pc, #484]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	220c      	movs	r2, #12
 8002214:	4013      	ands	r3, r2
 8002216:	d00b      	beq.n	8002230 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002218:	4b76      	ldr	r3, [pc, #472]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	220c      	movs	r2, #12
 800221e:	4013      	ands	r3, r2
 8002220:	2b08      	cmp	r3, #8
 8002222:	d11c      	bne.n	800225e <HAL_RCC_OscConfig+0x196>
 8002224:	4b73      	ldr	r3, [pc, #460]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	4013      	ands	r3, r2
 800222e:	d116      	bne.n	800225e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002230:	4b70      	ldr	r3, [pc, #448]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2202      	movs	r2, #2
 8002236:	4013      	ands	r3, r2
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x17e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e24b      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b6b      	ldr	r3, [pc, #428]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	22f8      	movs	r2, #248	@ 0xf8
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00da      	lsls	r2, r3, #3
 8002256:	4b67      	ldr	r3, [pc, #412]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225c:	e041      	b.n	80022e2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d024      	beq.n	80022b0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002266:	4b63      	ldr	r3, [pc, #396]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b62      	ldr	r3, [pc, #392]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800226c:	2101      	movs	r1, #1
 800226e:	430a      	orrs	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe fd5f 	bl	8000d34 <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227c:	f7fe fd5a 	bl	8000d34 <HAL_GetTick>
 8002280:	0002      	movs	r2, r0
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e227      	b.n	80026de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	4b59      	ldr	r3, [pc, #356]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2202      	movs	r2, #2
 8002294:	4013      	ands	r3, r2
 8002296:	d0f1      	beq.n	800227c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b56      	ldr	r3, [pc, #344]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	22f8      	movs	r2, #248	@ 0xf8
 800229e:	4393      	bics	r3, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00da      	lsls	r2, r3, #3
 80022a8:	4b52      	ldr	r3, [pc, #328]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e018      	b.n	80022e2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b0:	4b50      	ldr	r3, [pc, #320]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b4f      	ldr	r3, [pc, #316]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	438a      	bics	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fd3a 	bl	8000d34 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c6:	f7fe fd35 	bl	8000d34 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e202      	b.n	80026de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d8:	4b46      	ldr	r3, [pc, #280]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2202      	movs	r2, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	d1f1      	bne.n	80022c6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2208      	movs	r2, #8
 80022e8:	4013      	ands	r3, r2
 80022ea:	d036      	beq.n	800235a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d019      	beq.n	8002328 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f4:	4b3f      	ldr	r3, [pc, #252]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80022f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022f8:	4b3e      	ldr	r3, [pc, #248]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80022fa:	2101      	movs	r1, #1
 80022fc:	430a      	orrs	r2, r1
 80022fe:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7fe fd18 	bl	8000d34 <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230a:	f7fe fd13 	bl	8000d34 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1e0      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231c:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	2202      	movs	r2, #2
 8002322:	4013      	ands	r3, r2
 8002324:	d0f1      	beq.n	800230a <HAL_RCC_OscConfig+0x242>
 8002326:	e018      	b.n	800235a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002328:	4b32      	ldr	r3, [pc, #200]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800232a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800232c:	4b31      	ldr	r3, [pc, #196]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800232e:	2101      	movs	r1, #1
 8002330:	438a      	bics	r2, r1
 8002332:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7fe fcfe 	bl	8000d34 <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233e:	f7fe fcf9 	bl	8000d34 <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1c6      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b28      	ldr	r3, [pc, #160]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d1f1      	bne.n	800233e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2204      	movs	r2, #4
 8002360:	4013      	ands	r3, r2
 8002362:	d100      	bne.n	8002366 <HAL_RCC_OscConfig+0x29e>
 8002364:	e0b4      	b.n	80024d0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	201f      	movs	r0, #31
 8002368:	183b      	adds	r3, r7, r0
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	055b      	lsls	r3, r3, #21
 8002376:	4013      	ands	r3, r2
 8002378:	d110      	bne.n	800239c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b1e      	ldr	r3, [pc, #120]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	4b1d      	ldr	r3, [pc, #116]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 8002380:	2180      	movs	r1, #128	@ 0x80
 8002382:	0549      	lsls	r1, r1, #21
 8002384:	430a      	orrs	r2, r1
 8002386:	61da      	str	r2, [r3, #28]
 8002388:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002396:	183b      	adds	r3, r7, r0
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <HAL_RCC_OscConfig+0x338>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	d11a      	bne.n	80023de <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a8:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <HAL_RCC_OscConfig+0x338>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <HAL_RCC_OscConfig+0x338>)
 80023ae:	2180      	movs	r1, #128	@ 0x80
 80023b0:	0049      	lsls	r1, r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fcbd 	bl	8000d34 <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c0:	f7fe fcb8 	bl	8000d34 <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	@ 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e185      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_RCC_OscConfig+0x338>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	@ 0x80
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10e      	bne.n	8002404 <HAL_RCC_OscConfig+0x33c>
 80023e6:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	4b02      	ldr	r3, [pc, #8]	@ (80023f4 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	621a      	str	r2, [r3, #32]
 80023f2:	e035      	b.n	8002460 <HAL_RCC_OscConfig+0x398>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	fffeffff 	.word	0xfffeffff
 80023fc:	fffbffff 	.word	0xfffbffff
 8002400:	40007000 	.word	0x40007000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x35e>
 800240c:	4bb6      	ldr	r3, [pc, #728]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800240e:	6a1a      	ldr	r2, [r3, #32]
 8002410:	4bb5      	ldr	r3, [pc, #724]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002412:	2101      	movs	r1, #1
 8002414:	438a      	bics	r2, r1
 8002416:	621a      	str	r2, [r3, #32]
 8002418:	4bb3      	ldr	r3, [pc, #716]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	4bb2      	ldr	r3, [pc, #712]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800241e:	2104      	movs	r1, #4
 8002420:	438a      	bics	r2, r1
 8002422:	621a      	str	r2, [r3, #32]
 8002424:	e01c      	b.n	8002460 <HAL_RCC_OscConfig+0x398>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b05      	cmp	r3, #5
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x380>
 800242e:	4bae      	ldr	r3, [pc, #696]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002430:	6a1a      	ldr	r2, [r3, #32]
 8002432:	4bad      	ldr	r3, [pc, #692]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002434:	2104      	movs	r1, #4
 8002436:	430a      	orrs	r2, r1
 8002438:	621a      	str	r2, [r3, #32]
 800243a:	4bab      	ldr	r3, [pc, #684]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800243c:	6a1a      	ldr	r2, [r3, #32]
 800243e:	4baa      	ldr	r3, [pc, #680]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002440:	2101      	movs	r1, #1
 8002442:	430a      	orrs	r2, r1
 8002444:	621a      	str	r2, [r3, #32]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0x398>
 8002448:	4ba7      	ldr	r3, [pc, #668]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	4ba6      	ldr	r3, [pc, #664]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800244e:	2101      	movs	r1, #1
 8002450:	438a      	bics	r2, r1
 8002452:	621a      	str	r2, [r3, #32]
 8002454:	4ba4      	ldr	r3, [pc, #656]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002456:	6a1a      	ldr	r2, [r3, #32]
 8002458:	4ba3      	ldr	r3, [pc, #652]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800245a:	2104      	movs	r1, #4
 800245c:	438a      	bics	r2, r1
 800245e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d014      	beq.n	8002492 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002468:	f7fe fc64 	bl	8000d34 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002470:	e009      	b.n	8002486 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fc5f 	bl	8000d34 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	4a9b      	ldr	r2, [pc, #620]	@ (80026ec <HAL_RCC_OscConfig+0x624>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e12b      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	4b98      	ldr	r3, [pc, #608]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	2202      	movs	r2, #2
 800248c:	4013      	ands	r3, r2
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x3aa>
 8002490:	e013      	b.n	80024ba <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe fc4f 	bl	8000d34 <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249a:	e009      	b.n	80024b0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7fe fc4a 	bl	8000d34 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	4a91      	ldr	r2, [pc, #580]	@ (80026ec <HAL_RCC_OscConfig+0x624>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e116      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	4b8d      	ldr	r3, [pc, #564]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ba:	231f      	movs	r3, #31
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b88      	ldr	r3, [pc, #544]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80024c6:	69da      	ldr	r2, [r3, #28]
 80024c8:	4b87      	ldr	r3, [pc, #540]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80024ca:	4989      	ldr	r1, [pc, #548]	@ (80026f0 <HAL_RCC_OscConfig+0x628>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2210      	movs	r2, #16
 80024d6:	4013      	ands	r3, r2
 80024d8:	d063      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d12a      	bne.n	8002538 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024e2:	4b81      	ldr	r3, [pc, #516]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80024e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024e6:	4b80      	ldr	r3, [pc, #512]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80024e8:	2104      	movs	r1, #4
 80024ea:	430a      	orrs	r2, r1
 80024ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80024ee:	4b7e      	ldr	r3, [pc, #504]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80024f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f2:	4b7d      	ldr	r3, [pc, #500]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	430a      	orrs	r2, r1
 80024f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fc1b 	bl	8000d34 <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002504:	f7fe fc16 	bl	8000d34 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0e3      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002516:	4b74      	ldr	r3, [pc, #464]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d0f1      	beq.n	8002504 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002520:	4b71      	ldr	r3, [pc, #452]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002524:	22f8      	movs	r2, #248	@ 0xf8
 8002526:	4393      	bics	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	00da      	lsls	r2, r3, #3
 8002530:	4b6d      	ldr	r3, [pc, #436]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002532:	430a      	orrs	r2, r1
 8002534:	635a      	str	r2, [r3, #52]	@ 0x34
 8002536:	e034      	b.n	80025a2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	3305      	adds	r3, #5
 800253e:	d111      	bne.n	8002564 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002540:	4b69      	ldr	r3, [pc, #420]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002544:	4b68      	ldr	r3, [pc, #416]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002546:	2104      	movs	r1, #4
 8002548:	438a      	bics	r2, r1
 800254a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800254c:	4b66      	ldr	r3, [pc, #408]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800254e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002550:	22f8      	movs	r2, #248	@ 0xf8
 8002552:	4393      	bics	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	00da      	lsls	r2, r3, #3
 800255c:	4b62      	ldr	r3, [pc, #392]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800255e:	430a      	orrs	r2, r1
 8002560:	635a      	str	r2, [r3, #52]	@ 0x34
 8002562:	e01e      	b.n	80025a2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002564:	4b60      	ldr	r3, [pc, #384]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002568:	4b5f      	ldr	r3, [pc, #380]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800256a:	2104      	movs	r1, #4
 800256c:	430a      	orrs	r2, r1
 800256e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002570:	4b5d      	ldr	r3, [pc, #372]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002574:	4b5c      	ldr	r3, [pc, #368]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002576:	2101      	movs	r1, #1
 8002578:	438a      	bics	r2, r1
 800257a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7fe fbda 	bl	8000d34 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002586:	f7fe fbd5 	bl	8000d34 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0a2      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002598:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800259a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259c:	2202      	movs	r2, #2
 800259e:	4013      	ands	r3, r2
 80025a0:	d1f1      	bne.n	8002586 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d100      	bne.n	80025ac <HAL_RCC_OscConfig+0x4e4>
 80025aa:	e097      	b.n	80026dc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ac:	4b4e      	ldr	r3, [pc, #312]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	220c      	movs	r2, #12
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d100      	bne.n	80025ba <HAL_RCC_OscConfig+0x4f2>
 80025b8:	e06b      	b.n	8002692 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d14c      	bne.n	800265c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b49      	ldr	r3, [pc, #292]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b48      	ldr	r3, [pc, #288]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80025c8:	494a      	ldr	r1, [pc, #296]	@ (80026f4 <HAL_RCC_OscConfig+0x62c>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fbb1 	bl	8000d34 <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fbac 	bl	8000d34 <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e079      	b.n	80026de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	049b      	lsls	r3, r3, #18
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f6:	4b3c      	ldr	r3, [pc, #240]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	220f      	movs	r2, #15
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002604:	4b38      	ldr	r3, [pc, #224]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002606:	430a      	orrs	r2, r1
 8002608:	62da      	str	r2, [r3, #44]	@ 0x2c
 800260a:	4b37      	ldr	r3, [pc, #220]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a3a      	ldr	r2, [pc, #232]	@ (80026f8 <HAL_RCC_OscConfig+0x630>)
 8002610:	4013      	ands	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	431a      	orrs	r2, r3
 800261e:	4b32      	ldr	r3, [pc, #200]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002620:	430a      	orrs	r2, r1
 8002622:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b30      	ldr	r3, [pc, #192]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b2f      	ldr	r3, [pc, #188]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800262a:	2180      	movs	r1, #128	@ 0x80
 800262c:	0449      	lsls	r1, r1, #17
 800262e:	430a      	orrs	r2, r1
 8002630:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fb7f 	bl	8000d34 <HAL_GetTick>
 8002636:	0003      	movs	r3, r0
 8002638:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fb7a 	bl	8000d34 <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e047      	b.n	80026de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264e:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	2380      	movs	r3, #128	@ 0x80
 8002654:	049b      	lsls	r3, r3, #18
 8002656:	4013      	ands	r3, r2
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x574>
 800265a:	e03f      	b.n	80026dc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002662:	4924      	ldr	r1, [pc, #144]	@ (80026f4 <HAL_RCC_OscConfig+0x62c>)
 8002664:	400a      	ands	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fb64 	bl	8000d34 <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe fb5f 	bl	8000d34 <HAL_GetTick>
 8002676:	0002      	movs	r2, r0
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e02c      	b.n	80026de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	4b18      	ldr	r3, [pc, #96]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	049b      	lsls	r3, r3, #18
 800268c:	4013      	ands	r3, r2
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x5aa>
 8002690:	e024      	b.n	80026dc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e01f      	b.n	80026de <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800269e:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026a4:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <HAL_RCC_OscConfig+0x620>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	2380      	movs	r3, #128	@ 0x80
 80026ae:	025b      	lsls	r3, r3, #9
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d10e      	bne.n	80026d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	220f      	movs	r2, #15
 80026be:	401a      	ands	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	23f0      	movs	r3, #240	@ 0xf0
 80026cc:	039b      	lsls	r3, r3, #14
 80026ce:	401a      	ands	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b008      	add	sp, #32
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	40021000 	.word	0x40021000
 80026ec:	00001388 	.word	0x00001388
 80026f0:	efffffff 	.word	0xefffffff
 80026f4:	feffffff 	.word	0xfeffffff
 80026f8:	ffc2ffff 	.word	0xffc2ffff

080026fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0b3      	b.n	8002878 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b5b      	ldr	r3, [pc, #364]	@ (8002880 <HAL_RCC_ClockConfig+0x184>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	4013      	ands	r3, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d911      	bls.n	8002742 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b58      	ldr	r3, [pc, #352]	@ (8002880 <HAL_RCC_ClockConfig+0x184>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	4393      	bics	r3, r2
 8002726:	0019      	movs	r1, r3
 8002728:	4b55      	ldr	r3, [pc, #340]	@ (8002880 <HAL_RCC_ClockConfig+0x184>)
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002730:	4b53      	ldr	r3, [pc, #332]	@ (8002880 <HAL_RCC_ClockConfig+0x184>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2201      	movs	r2, #1
 8002736:	4013      	ands	r3, r2
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e09a      	b.n	8002878 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2202      	movs	r2, #2
 8002748:	4013      	ands	r3, r2
 800274a:	d015      	beq.n	8002778 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2204      	movs	r2, #4
 8002752:	4013      	ands	r3, r2
 8002754:	d006      	beq.n	8002764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002756:	4b4b      	ldr	r3, [pc, #300]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4b4a      	ldr	r3, [pc, #296]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 800275c:	21e0      	movs	r1, #224	@ 0xe0
 800275e:	00c9      	lsls	r1, r1, #3
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b47      	ldr	r3, [pc, #284]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	22f0      	movs	r2, #240	@ 0xf0
 800276a:	4393      	bics	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	4b44      	ldr	r3, [pc, #272]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2201      	movs	r2, #1
 800277e:	4013      	ands	r3, r2
 8002780:	d040      	beq.n	8002804 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	029b      	lsls	r3, r3, #10
 8002792:	4013      	ands	r3, r2
 8002794:	d114      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06e      	b.n	8002878 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	049b      	lsls	r3, r3, #18
 80027aa:	4013      	ands	r3, r2
 80027ac:	d108      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e062      	b.n	8002878 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e05b      	b.n	8002878 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c0:	4b30      	ldr	r3, [pc, #192]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2203      	movs	r2, #3
 80027c6:	4393      	bics	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7fe faae 	bl	8000d34 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027dc:	e009      	b.n	80027f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027de:	f7fe faa9 	bl	8000d34 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	4a27      	ldr	r2, [pc, #156]	@ (8002888 <HAL_RCC_ClockConfig+0x18c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e042      	b.n	8002878 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	220c      	movs	r2, #12
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	429a      	cmp	r2, r3
 8002802:	d1ec      	bne.n	80027de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <HAL_RCC_ClockConfig+0x184>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	4013      	ands	r3, r2
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d211      	bcs.n	8002836 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <HAL_RCC_ClockConfig+0x184>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2201      	movs	r2, #1
 8002818:	4393      	bics	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_RCC_ClockConfig+0x184>)
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002824:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <HAL_RCC_ClockConfig+0x184>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4013      	ands	r3, r2
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e020      	b.n	8002878 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2204      	movs	r2, #4
 800283c:	4013      	ands	r3, r2
 800283e:	d009      	beq.n	8002854 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002840:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a11      	ldr	r2, [pc, #68]	@ (800288c <HAL_RCC_ClockConfig+0x190>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002854:	f000 f820 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002858:	0001      	movs	r1, r0
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <HAL_RCC_ClockConfig+0x188>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	220f      	movs	r2, #15
 8002862:	4013      	ands	r3, r2
 8002864:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <HAL_RCC_ClockConfig+0x194>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	000a      	movs	r2, r1
 800286a:	40da      	lsrs	r2, r3
 800286c:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_RCC_ClockConfig+0x198>)
 800286e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002870:	2003      	movs	r0, #3
 8002872:	f7fe fa19 	bl	8000ca8 <HAL_InitTick>
  
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b004      	add	sp, #16
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	00001388 	.word	0x00001388
 800288c:	fffff8ff 	.word	0xfffff8ff
 8002890:	08004b90 	.word	0x08004b90
 8002894:	20000000 	.word	0x20000000

08002898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028b2:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	220c      	movs	r2, #12
 80028bc:	4013      	ands	r3, r2
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x30>
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x36>
 80028c6:	e02c      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ca:	613b      	str	r3, [r7, #16]
      break;
 80028cc:	e02c      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0c9b      	lsrs	r3, r3, #18
 80028d2:	220f      	movs	r2, #15
 80028d4:	4013      	ands	r3, r2
 80028d6:	4a19      	ldr	r2, [pc, #100]	@ (800293c <HAL_RCC_GetSysClockFreq+0xa4>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028dc:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	220f      	movs	r2, #15
 80028e2:	4013      	ands	r3, r2
 80028e4:	4a16      	ldr	r2, [pc, #88]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xa8>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	025b      	lsls	r3, r3, #9
 80028f0:	4013      	ands	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	4810      	ldr	r0, [pc, #64]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028f8:	f7fd fc18 	bl	800012c <__udivsi3>
 80028fc:	0003      	movs	r3, r0
 80028fe:	001a      	movs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4353      	muls	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e009      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	000a      	movs	r2, r1
 800290c:	0152      	lsls	r2, r2, #5
 800290e:	1a52      	subs	r2, r2, r1
 8002910:	0193      	lsls	r3, r2, #6
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	185b      	adds	r3, r3, r1
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
      break;
 8002920:	e002      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002922:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002924:	613b      	str	r3, [r7, #16]
      break;
 8002926:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002928:	693b      	ldr	r3, [r7, #16]
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b006      	add	sp, #24
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	40021000 	.word	0x40021000
 8002938:	007a1200 	.word	0x007a1200
 800293c:	08004ba8 	.word	0x08004ba8
 8002940:	08004bb8 	.word	0x08004bb8

08002944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002948:	4b02      	ldr	r3, [pc, #8]	@ (8002954 <HAL_RCC_GetHCLKFreq+0x10>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	20000000 	.word	0x20000000

08002958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800295c:	f7ff fff2 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002960:	0001      	movs	r1, r0
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	2207      	movs	r2, #7
 800296a:	4013      	ands	r3, r2
 800296c:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <HAL_RCC_GetPCLK1Freq+0x28>)
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	40d9      	lsrs	r1, r3
 8002972:	000b      	movs	r3, r1
}    
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	40021000 	.word	0x40021000
 8002980:	08004ba0 	.word	0x08004ba0

08002984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	@ 0x80
 800299a:	025b      	lsls	r3, r3, #9
 800299c:	4013      	ands	r3, r2
 800299e:	d100      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029a0:	e08e      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2017      	movs	r0, #23
 80029a4:	183b      	adds	r3, r7, r0
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b57      	ldr	r3, [pc, #348]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	055b      	lsls	r3, r3, #21
 80029b2:	4013      	ands	r3, r2
 80029b4:	d110      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	4b54      	ldr	r3, [pc, #336]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	4b53      	ldr	r3, [pc, #332]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029bc:	2180      	movs	r1, #128	@ 0x80
 80029be:	0549      	lsls	r1, r1, #21
 80029c0:	430a      	orrs	r2, r1
 80029c2:	61da      	str	r2, [r3, #28]
 80029c4:	4b50      	ldr	r3, [pc, #320]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	055b      	lsls	r3, r3, #21
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	183b      	adds	r3, r7, r0
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	d11a      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e4:	4b49      	ldr	r3, [pc, #292]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b48      	ldr	r3, [pc, #288]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029ea:	2180      	movs	r1, #128	@ 0x80
 80029ec:	0049      	lsls	r1, r1, #1
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f2:	f7fe f99f 	bl	8000d34 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	e008      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe f99a 	bl	8000d34 <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e077      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4013      	ands	r3, r2
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a1c:	6a1a      	ldr	r2, [r3, #32]
 8002a1e:	23c0      	movs	r3, #192	@ 0xc0
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d034      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	23c0      	movs	r3, #192	@ 0xc0
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4013      	ands	r3, r2
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d02c      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a3c:	4b32      	ldr	r3, [pc, #200]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4a33      	ldr	r2, [pc, #204]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a46:	4b30      	ldr	r3, [pc, #192]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a4c:	2180      	movs	r1, #128	@ 0x80
 8002a4e:	0249      	lsls	r1, r1, #9
 8002a50:	430a      	orrs	r2, r1
 8002a52:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a54:	4b2c      	ldr	r3, [pc, #176]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a5a:	492e      	ldr	r1, [pc, #184]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a60:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe f961 	bl	8000d34 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	e009      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe f95c 	bl	8000d34 <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	4a25      	ldr	r2, [pc, #148]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e038      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a96:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aaa:	2317      	movs	r3, #23
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aba:	4918      	ldr	r1, [pc, #96]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002abc:	400a      	ands	r2, r1
 8002abe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d009      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aca:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	2203      	movs	r2, #3
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae8:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	2210      	movs	r2, #16
 8002aee:	4393      	bics	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	4b04      	ldr	r3, [pc, #16]	@ (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b006      	add	sp, #24
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	fffffcff 	.word	0xfffffcff
 8002b14:	fffeffff 	.word	0xfffeffff
 8002b18:	00001388 	.word	0x00001388
 8002b1c:	efffffff 	.word	0xefffffff

08002b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0a8      	b.n	8002c84 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	2382      	movs	r3, #130	@ 0x82
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d009      	beq.n	8002b5a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61da      	str	r2, [r3, #28]
 8002b4c:	e005      	b.n	8002b5a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	225d      	movs	r2, #93	@ 0x5d
 8002b64:	5c9b      	ldrb	r3, [r3, r2]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	225c      	movs	r2, #92	@ 0x5c
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7fd ff66 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	225d      	movs	r2, #93	@ 0x5d
 8002b80:	2102      	movs	r1, #2
 8002b82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2140      	movs	r1, #64	@ 0x40
 8002b90:	438a      	bics	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	23e0      	movs	r3, #224	@ 0xe0
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d902      	bls.n	8002ba6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e002      	b.n	8002bac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	015b      	lsls	r3, r3, #5
 8002baa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	23f0      	movs	r3, #240	@ 0xf0
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d008      	beq.n	8002bca <HAL_SPI_Init+0xaa>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	23e0      	movs	r3, #224	@ 0xe0
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d002      	beq.n	8002bca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	2382      	movs	r3, #130	@ 0x82
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	2384      	movs	r3, #132	@ 0x84
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	400b      	ands	r3, r1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2102      	movs	r1, #2
 8002be6:	400b      	ands	r3, r1
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	400b      	ands	r3, r1
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6999      	ldr	r1, [r3, #24]
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	400b      	ands	r3, r1
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2138      	movs	r1, #56	@ 0x38
 8002c06:	400b      	ands	r3, r1
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	2180      	movs	r1, #128	@ 0x80
 8002c10:	400b      	ands	r3, r1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	0011      	movs	r1, r2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	401a      	ands	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	2204      	movs	r2, #4
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	2110      	movs	r1, #16
 8002c38:	400b      	ands	r3, r1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c40:	2108      	movs	r1, #8
 8002c42:	400b      	ands	r3, r1
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68d9      	ldr	r1, [r3, #12]
 8002c4a:	23f0      	movs	r3, #240	@ 0xf0
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	400b      	ands	r3, r1
 8002c50:	431a      	orrs	r2, r3
 8002c52:	0011      	movs	r1, r2
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	2380      	movs	r3, #128	@ 0x80
 8002c58:	015b      	lsls	r3, r3, #5
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4907      	ldr	r1, [pc, #28]	@ (8002c8c <HAL_SPI_Init+0x16c>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	225d      	movs	r2, #93	@ 0x5d
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b004      	add	sp, #16
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	fffff7ff 	.word	0xfffff7ff

08002c90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	1dbb      	adds	r3, r7, #6
 8002c9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ca0:	231f      	movs	r3, #31
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	225c      	movs	r2, #92	@ 0x5c
 8002cac:	5c9b      	ldrb	r3, [r3, r2]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_SPI_Transmit+0x26>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e147      	b.n	8002f46 <HAL_SPI_Transmit+0x2b6>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	225c      	movs	r2, #92	@ 0x5c
 8002cba:	2101      	movs	r1, #1
 8002cbc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cbe:	f7fe f839 	bl	8000d34 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002cc6:	2316      	movs	r3, #22
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	1dba      	adds	r2, r7, #6
 8002ccc:	8812      	ldrh	r2, [r2, #0]
 8002cce:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	225d      	movs	r2, #93	@ 0x5d
 8002cd4:	5c9b      	ldrb	r3, [r3, r2]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d004      	beq.n	8002ce6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002cdc:	231f      	movs	r3, #31
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ce4:	e128      	b.n	8002f38 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_SPI_Transmit+0x64>
 8002cec:	1dbb      	adds	r3, r7, #6
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002cf4:	231f      	movs	r3, #31
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
    goto error;
 8002cfc:	e11c      	b.n	8002f38 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	225d      	movs	r2, #93	@ 0x5d
 8002d02:	2103      	movs	r1, #3
 8002d04:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1dba      	adds	r2, r7, #6
 8002d16:	8812      	ldrh	r2, [r2, #0]
 8002d18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1dba      	adds	r2, r7, #6
 8002d1e:	8812      	ldrh	r2, [r2, #0]
 8002d20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2244      	movs	r2, #68	@ 0x44
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2246      	movs	r2, #70	@ 0x46
 8002d34:	2100      	movs	r1, #0
 8002d36:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d110      	bne.n	8002d72 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2140      	movs	r1, #64	@ 0x40
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2180      	movs	r1, #128	@ 0x80
 8002d6c:	01c9      	lsls	r1, r1, #7
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2240      	movs	r2, #64	@ 0x40
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b40      	cmp	r3, #64	@ 0x40
 8002d7e:	d007      	beq.n	8002d90 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2140      	movs	r1, #64	@ 0x40
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	23e0      	movs	r3, #224	@ 0xe0
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d952      	bls.n	8002e42 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <HAL_SPI_Transmit+0x11e>
 8002da4:	2316      	movs	r3, #22
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d143      	bne.n	8002e36 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	881a      	ldrh	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbe:	1c9a      	adds	r2, r3, #2
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dd2:	e030      	b.n	8002e36 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d112      	bne.n	8002e08 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de6:	881a      	ldrh	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df2:	1c9a      	adds	r2, r3, #2
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e06:	e016      	b.n	8002e36 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e08:	f7fd ff94 	bl	8000d34 <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d802      	bhi.n	8002e1e <HAL_SPI_Transmit+0x18e>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_SPI_Transmit+0x194>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d108      	bne.n	8002e36 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002e24:	231f      	movs	r3, #31
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2203      	movs	r2, #3
 8002e2a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	225d      	movs	r2, #93	@ 0x5d
 8002e30:	2101      	movs	r1, #1
 8002e32:	5499      	strb	r1, [r3, r2]
          goto error;
 8002e34:	e080      	b.n	8002f38 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1c9      	bne.n	8002dd4 <HAL_SPI_Transmit+0x144>
 8002e40:	e053      	b.n	8002eea <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_SPI_Transmit+0x1c4>
 8002e4a:	2316      	movs	r3, #22
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d145      	bne.n	8002ee0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002e7a:	e031      	b.n	8002ee0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d113      	bne.n	8002eb2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330c      	adds	r3, #12
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002eb0:	e016      	b.n	8002ee0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb2:	f7fd ff3f 	bl	8000d34 <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d802      	bhi.n	8002ec8 <HAL_SPI_Transmit+0x238>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	d102      	bne.n	8002ece <HAL_SPI_Transmit+0x23e>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d108      	bne.n	8002ee0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002ece:	231f      	movs	r3, #31
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	225d      	movs	r2, #93	@ 0x5d
 8002eda:	2101      	movs	r1, #1
 8002edc:	5499      	strb	r1, [r3, r2]
          goto error;
 8002ede:	e02b      	b.n	8002f38 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1c8      	bne.n	8002e7c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 fcef 	bl	80038d4 <SPI_EndRxTxTransaction>
 8002ef6:	1e03      	subs	r3, r0, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002f26:	231f      	movs	r3, #31
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e003      	b.n	8002f38 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	225d      	movs	r2, #93	@ 0x5d
 8002f34:	2101      	movs	r1, #1
 8002f36:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	225c      	movs	r2, #92	@ 0x5c
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f40:	231f      	movs	r3, #31
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	781b      	ldrb	r3, [r3, #0]
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b008      	add	sp, #32
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	1dbb      	adds	r3, r7, #6
 8002f5e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f60:	2117      	movs	r1, #23
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	225d      	movs	r2, #93	@ 0x5d
 8002f6c:	5c9b      	ldrb	r3, [r3, r2]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d003      	beq.n	8002f7c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	2202      	movs	r2, #2
 8002f78:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f7a:	e12b      	b.n	80031d4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	2382      	movs	r3, #130	@ 0x82
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d113      	bne.n	8002fb0 <HAL_SPI_Receive+0x60>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10f      	bne.n	8002fb0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	225d      	movs	r2, #93	@ 0x5d
 8002f94:	2104      	movs	r1, #4
 8002f96:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f98:	1dbb      	adds	r3, r7, #6
 8002f9a:	881c      	ldrh	r4, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	0023      	movs	r3, r4
 8002fa8:	f000 f924 	bl	80031f4 <HAL_SPI_TransmitReceive>
 8002fac:	0003      	movs	r3, r0
 8002fae:	e118      	b.n	80031e2 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	225c      	movs	r2, #92	@ 0x5c
 8002fb4:	5c9b      	ldrb	r3, [r3, r2]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_SPI_Receive+0x6e>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e111      	b.n	80031e2 <HAL_SPI_Receive+0x292>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	225c      	movs	r2, #92	@ 0x5c
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc6:	f7fd feb5 	bl	8000d34 <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_SPI_Receive+0x8c>
 8002fd4:	1dbb      	adds	r3, r7, #6
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002fdc:	2317      	movs	r3, #23
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fe4:	e0f6      	b.n	80031d4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	225d      	movs	r2, #93	@ 0x5d
 8002fea:	2104      	movs	r1, #4
 8002fec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1dba      	adds	r2, r7, #6
 8002ffe:	2144      	movs	r1, #68	@ 0x44
 8003000:	8812      	ldrh	r2, [r2, #0]
 8003002:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1dba      	adds	r2, r7, #6
 8003008:	2146      	movs	r1, #70	@ 0x46
 800300a:	8812      	ldrh	r2, [r2, #0]
 800300c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	23e0      	movs	r3, #224	@ 0xe0
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	429a      	cmp	r2, r3
 8003036:	d908      	bls.n	800304a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	496a      	ldr	r1, [pc, #424]	@ (80031ec <HAL_SPI_Receive+0x29c>)
 8003044:	400a      	ands	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	e008      	b.n	800305c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2180      	movs	r1, #128	@ 0x80
 8003056:	0149      	lsls	r1, r1, #5
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	2380      	movs	r3, #128	@ 0x80
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	429a      	cmp	r2, r3
 8003066:	d10f      	bne.n	8003088 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2140      	movs	r1, #64	@ 0x40
 8003074:	438a      	bics	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	495b      	ldr	r1, [pc, #364]	@ (80031f0 <HAL_SPI_Receive+0x2a0>)
 8003084:	400a      	ands	r2, r1
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2240      	movs	r2, #64	@ 0x40
 8003090:	4013      	ands	r3, r2
 8003092:	2b40      	cmp	r3, #64	@ 0x40
 8003094:	d007      	beq.n	80030a6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2140      	movs	r1, #64	@ 0x40
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	23e0      	movs	r3, #224	@ 0xe0
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d900      	bls.n	80030b4 <HAL_SPI_Receive+0x164>
 80030b2:	e071      	b.n	8003198 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030b4:	e035      	b.n	8003122 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d117      	bne.n	80030f4 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	001a      	movs	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2246      	movs	r2, #70	@ 0x46
 80030e4:	5a9b      	ldrh	r3, [r3, r2]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b299      	uxth	r1, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2246      	movs	r2, #70	@ 0x46
 80030f0:	5299      	strh	r1, [r3, r2]
 80030f2:	e016      	b.n	8003122 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f4:	f7fd fe1e 	bl	8000d34 <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d802      	bhi.n	800310a <HAL_SPI_Receive+0x1ba>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_SPI_Receive+0x1c0>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d108      	bne.n	8003122 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003110:	2317      	movs	r3, #23
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2203      	movs	r2, #3
 8003116:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	225d      	movs	r2, #93	@ 0x5d
 800311c:	2101      	movs	r1, #1
 800311e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003120:	e058      	b.n	80031d4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2246      	movs	r2, #70	@ 0x46
 8003126:	5a9b      	ldrh	r3, [r3, r2]
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1c3      	bne.n	80030b6 <HAL_SPI_Receive+0x166>
 800312e:	e039      	b.n	80031a4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2201      	movs	r2, #1
 8003138:	4013      	ands	r3, r2
 800313a:	2b01      	cmp	r3, #1
 800313c:	d115      	bne.n	800316a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	b292      	uxth	r2, r2
 800314a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	1c9a      	adds	r2, r3, #2
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2246      	movs	r2, #70	@ 0x46
 800315a:	5a9b      	ldrh	r3, [r3, r2]
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b299      	uxth	r1, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2246      	movs	r2, #70	@ 0x46
 8003166:	5299      	strh	r1, [r3, r2]
 8003168:	e016      	b.n	8003198 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800316a:	f7fd fde3 	bl	8000d34 <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d802      	bhi.n	8003180 <HAL_SPI_Receive+0x230>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	d102      	bne.n	8003186 <HAL_SPI_Receive+0x236>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8003186:	2317      	movs	r3, #23
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2203      	movs	r2, #3
 800318c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	225d      	movs	r2, #93	@ 0x5d
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]
          goto error;
 8003196:	e01d      	b.n	80031d4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2246      	movs	r2, #70	@ 0x46
 800319c:	5a9b      	ldrh	r3, [r3, r2]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1c5      	bne.n	8003130 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 fb34 	bl	8003818 <SPI_EndRxTransaction>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d002      	beq.n	80031ba <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80031c2:	2317      	movs	r3, #23
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e003      	b.n	80031d4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	225d      	movs	r2, #93	@ 0x5d
 80031d0:	2101      	movs	r1, #1
 80031d2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	225c      	movs	r2, #92	@ 0x5c
 80031d8:	2100      	movs	r1, #0
 80031da:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80031dc:	2317      	movs	r3, #23
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	781b      	ldrb	r3, [r3, #0]
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b007      	add	sp, #28
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	ffffefff 	.word	0xffffefff
 80031f0:	ffffbfff 	.word	0xffffbfff

080031f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	@ 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	001a      	movs	r2, r3
 8003202:	1cbb      	adds	r3, r7, #2
 8003204:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800320a:	2323      	movs	r3, #35	@ 0x23
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	225c      	movs	r2, #92	@ 0x5c
 8003216:	5c9b      	ldrb	r3, [r3, r2]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x2c>
 800321c:	2302      	movs	r3, #2
 800321e:	e1c4      	b.n	80035aa <HAL_SPI_TransmitReceive+0x3b6>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	225c      	movs	r2, #92	@ 0x5c
 8003224:	2101      	movs	r1, #1
 8003226:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003228:	f7fd fd84 	bl	8000d34 <HAL_GetTick>
 800322c:	0003      	movs	r3, r0
 800322e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003230:	201b      	movs	r0, #27
 8003232:	183b      	adds	r3, r7, r0
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	215d      	movs	r1, #93	@ 0x5d
 8003238:	5c52      	ldrb	r2, [r2, r1]
 800323a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003242:	2312      	movs	r3, #18
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	1cba      	adds	r2, r7, #2
 8003248:	8812      	ldrh	r2, [r2, #0]
 800324a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800324c:	183b      	adds	r3, r7, r0
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d011      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x84>
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	2382      	movs	r3, #130	@ 0x82
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	429a      	cmp	r2, r3
 800325c:	d107      	bne.n	800326e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_SPI_TransmitReceive+0x7a>
 8003266:	183b      	adds	r3, r7, r0
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d004      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800326e:	2323      	movs	r3, #35	@ 0x23
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
    goto error;
 8003276:	e191      	b.n	800359c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d006      	beq.n	800328c <HAL_SPI_TransmitReceive+0x98>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_SPI_TransmitReceive+0x98>
 8003284:	1cbb      	adds	r3, r7, #2
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d104      	bne.n	8003296 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800328c:	2323      	movs	r3, #35	@ 0x23
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
    goto error;
 8003294:	e182      	b.n	800359c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	225d      	movs	r2, #93	@ 0x5d
 800329a:	5c9b      	ldrb	r3, [r3, r2]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d003      	beq.n	80032aa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	225d      	movs	r2, #93	@ 0x5d
 80032a6:	2105      	movs	r1, #5
 80032a8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1cba      	adds	r2, r7, #2
 80032ba:	2146      	movs	r1, #70	@ 0x46
 80032bc:	8812      	ldrh	r2, [r2, #0]
 80032be:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1cba      	adds	r2, r7, #2
 80032c4:	2144      	movs	r1, #68	@ 0x44
 80032c6:	8812      	ldrh	r2, [r2, #0]
 80032c8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1cba      	adds	r2, r7, #2
 80032d4:	8812      	ldrh	r2, [r2, #0]
 80032d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1cba      	adds	r2, r7, #2
 80032dc:	8812      	ldrh	r2, [r2, #0]
 80032de:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	23e0      	movs	r3, #224	@ 0xe0
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d908      	bls.n	800330a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	49ac      	ldr	r1, [pc, #688]	@ (80035b4 <HAL_SPI_TransmitReceive+0x3c0>)
 8003304:	400a      	ands	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	e008      	b.n	800331c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2180      	movs	r1, #128	@ 0x80
 8003316:	0149      	lsls	r1, r1, #5
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2240      	movs	r2, #64	@ 0x40
 8003324:	4013      	ands	r3, r2
 8003326:	2b40      	cmp	r3, #64	@ 0x40
 8003328:	d007      	beq.n	800333a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2140      	movs	r1, #64	@ 0x40
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	23e0      	movs	r3, #224	@ 0xe0
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	429a      	cmp	r2, r3
 8003344:	d800      	bhi.n	8003348 <HAL_SPI_TransmitReceive+0x154>
 8003346:	e083      	b.n	8003450 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_SPI_TransmitReceive+0x168>
 8003350:	2312      	movs	r3, #18
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d000      	beq.n	800335c <HAL_SPI_TransmitReceive+0x168>
 800335a:	e06d      	b.n	8003438 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	1c9a      	adds	r2, r3, #2
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003380:	e05a      	b.n	8003438 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2202      	movs	r2, #2
 800338a:	4013      	ands	r3, r2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11b      	bne.n	80033c8 <HAL_SPI_TransmitReceive+0x1d4>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_SPI_TransmitReceive+0x1d4>
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	2b01      	cmp	r3, #1
 800339e:	d113      	bne.n	80033c8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	1c9a      	adds	r2, r3, #2
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d11c      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x21c>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2246      	movs	r2, #70	@ 0x46
 80033da:	5a9b      	ldrh	r3, [r3, r2]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	b292      	uxth	r2, r2
 80033ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	1c9a      	adds	r2, r3, #2
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2246      	movs	r2, #70	@ 0x46
 80033fe:	5a9b      	ldrh	r3, [r3, r2]
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b299      	uxth	r1, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2246      	movs	r2, #70	@ 0x46
 800340a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800340c:	2301      	movs	r3, #1
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003410:	f7fd fc90 	bl	8000d34 <HAL_GetTick>
 8003414:	0002      	movs	r2, r0
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341c:	429a      	cmp	r2, r3
 800341e:	d80b      	bhi.n	8003438 <HAL_SPI_TransmitReceive+0x244>
 8003420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003422:	3301      	adds	r3, #1
 8003424:	d008      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003426:	2323      	movs	r3, #35	@ 0x23
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	2203      	movs	r2, #3
 800342c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	225d      	movs	r2, #93	@ 0x5d
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]
        goto error;
 8003436:	e0b1      	b.n	800359c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d19f      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x18e>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2246      	movs	r2, #70	@ 0x46
 8003446:	5a9b      	ldrh	r3, [r3, r2]
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d199      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x18e>
 800344e:	e089      	b.n	8003564 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x270>
 8003458:	2312      	movs	r3, #18
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d000      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x270>
 8003462:	e074      	b.n	800354e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	7812      	ldrb	r2, [r2, #0]
 8003470:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800348a:	e060      	b.n	800354e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2202      	movs	r2, #2
 8003494:	4013      	ands	r3, r2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d11c      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x2e0>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d017      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x2e0>
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d114      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2201      	movs	r2, #1
 80034dc:	4013      	ands	r3, r2
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d11e      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x32c>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2246      	movs	r2, #70	@ 0x46
 80034e6:	5a9b      	ldrh	r3, [r3, r2]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d018      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	001a      	movs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2246      	movs	r2, #70	@ 0x46
 800350e:	5a9b      	ldrh	r3, [r3, r2]
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b299      	uxth	r1, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2246      	movs	r2, #70	@ 0x46
 800351a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800351c:	2301      	movs	r3, #1
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003520:	f7fd fc08 	bl	8000d34 <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352c:	429a      	cmp	r2, r3
 800352e:	d802      	bhi.n	8003536 <HAL_SPI_TransmitReceive+0x342>
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	3301      	adds	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_SPI_TransmitReceive+0x348>
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	2b00      	cmp	r3, #0
 800353a:	d108      	bne.n	800354e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800353c:	2323      	movs	r3, #35	@ 0x23
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	2203      	movs	r2, #3
 8003542:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	225d      	movs	r2, #93	@ 0x5d
 8003548:	2101      	movs	r1, #1
 800354a:	5499      	strb	r1, [r3, r2]
        goto error;
 800354c:	e026      	b.n	800359c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d199      	bne.n	800348c <HAL_SPI_TransmitReceive+0x298>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2246      	movs	r2, #70	@ 0x46
 800355c:	5a9b      	ldrh	r3, [r3, r2]
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d193      	bne.n	800348c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f9b2 	bl	80038d4 <SPI_EndRxTxTransaction>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d006      	beq.n	8003582 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003574:	2323      	movs	r3, #35	@ 0x23
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800358a:	2323      	movs	r3, #35	@ 0x23
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e003      	b.n	800359c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	225d      	movs	r2, #93	@ 0x5d
 8003598:	2101      	movs	r1, #1
 800359a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	225c      	movs	r2, #92	@ 0x5c
 80035a0:	2100      	movs	r1, #0
 80035a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80035a4:	2323      	movs	r3, #35	@ 0x23
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	781b      	ldrb	r3, [r3, #0]
}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b00a      	add	sp, #40	@ 0x28
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	ffffefff 	.word	0xffffefff

080035b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	1dfb      	adds	r3, r7, #7
 80035c6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035c8:	f7fd fbb4 	bl	8000d34 <HAL_GetTick>
 80035cc:	0002      	movs	r2, r0
 80035ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035d8:	f7fd fbac 	bl	8000d34 <HAL_GetTick>
 80035dc:	0003      	movs	r3, r0
 80035de:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035e0:	4b3a      	ldr	r3, [pc, #232]	@ (80036cc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	015b      	lsls	r3, r3, #5
 80035e6:	0d1b      	lsrs	r3, r3, #20
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	4353      	muls	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ee:	e058      	b.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	3301      	adds	r3, #1
 80035f4:	d055      	beq.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035f6:	f7fd fb9d 	bl	8000d34 <HAL_GetTick>
 80035fa:	0002      	movs	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	429a      	cmp	r2, r3
 8003604:	d902      	bls.n	800360c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d142      	bne.n	8003692 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	21e0      	movs	r1, #224	@ 0xe0
 8003618:	438a      	bics	r2, r1
 800361a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	2382      	movs	r3, #130	@ 0x82
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	429a      	cmp	r2, r3
 8003626:	d113      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	2380      	movs	r3, #128	@ 0x80
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	429a      	cmp	r2, r3
 8003632:	d005      	beq.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	2380      	movs	r3, #128	@ 0x80
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	429a      	cmp	r2, r3
 800363e:	d107      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2140      	movs	r1, #64	@ 0x40
 800364c:	438a      	bics	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	019b      	lsls	r3, r3, #6
 8003658:	429a      	cmp	r2, r3
 800365a:	d110      	bne.n	800367e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	491a      	ldr	r1, [pc, #104]	@ (80036d0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003668:	400a      	ands	r2, r1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2180      	movs	r1, #128	@ 0x80
 8003678:	0189      	lsls	r1, r1, #6
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	225d      	movs	r2, #93	@ 0x5d
 8003682:	2101      	movs	r1, #1
 8003684:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	225c      	movs	r2, #92	@ 0x5c
 800368a:	2100      	movs	r1, #0
 800368c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e017      	b.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	3b01      	subs	r3, #1
 80036a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	425a      	negs	r2, r3
 80036b2:	4153      	adcs	r3, r2
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	001a      	movs	r2, r3
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d197      	bne.n	80035f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b008      	add	sp, #32
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	20000000 	.word	0x20000000
 80036d0:	ffffdfff 	.word	0xffffdfff

080036d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	@ 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036e2:	2317      	movs	r3, #23
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036ea:	f7fd fb23 	bl	8000d34 <HAL_GetTick>
 80036ee:	0002      	movs	r2, r0
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	18d3      	adds	r3, r2, r3
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036fa:	f7fd fb1b 	bl	8000d34 <HAL_GetTick>
 80036fe:	0003      	movs	r3, r0
 8003700:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800370a:	4b41      	ldr	r3, [pc, #260]	@ (8003810 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	0013      	movs	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	189b      	adds	r3, r3, r2
 8003714:	00da      	lsls	r2, r3, #3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	0d1b      	lsrs	r3, r3, #20
 800371a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371c:	4353      	muls	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003720:	e068      	b.n	80037f4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	23c0      	movs	r3, #192	@ 0xc0
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	429a      	cmp	r2, r3
 800372a:	d10a      	bne.n	8003742 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d107      	bne.n	8003742 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b2da      	uxtb	r2, r3
 8003738:	2117      	movs	r1, #23
 800373a:	187b      	adds	r3, r7, r1
 800373c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800373e:	187b      	adds	r3, r7, r1
 8003740:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	d055      	beq.n	80037f4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003748:	f7fd faf4 	bl	8000d34 <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003754:	429a      	cmp	r2, r3
 8003756:	d902      	bls.n	800375e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d142      	bne.n	80037e4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	21e0      	movs	r1, #224	@ 0xe0
 800376a:	438a      	bics	r2, r1
 800376c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	2382      	movs	r3, #130	@ 0x82
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	429a      	cmp	r2, r3
 8003778:	d113      	bne.n	80037a2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	429a      	cmp	r2, r3
 8003784:	d005      	beq.n	8003792 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	429a      	cmp	r2, r3
 8003790:	d107      	bne.n	80037a2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2140      	movs	r1, #64	@ 0x40
 800379e:	438a      	bics	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037a6:	2380      	movs	r3, #128	@ 0x80
 80037a8:	019b      	lsls	r3, r3, #6
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d110      	bne.n	80037d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4916      	ldr	r1, [pc, #88]	@ (8003814 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80037ba:	400a      	ands	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2180      	movs	r1, #128	@ 0x80
 80037ca:	0189      	lsls	r1, r1, #6
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	225d      	movs	r2, #93	@ 0x5d
 80037d4:	2101      	movs	r1, #1
 80037d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	225c      	movs	r2, #92	@ 0x5c
 80037dc:	2100      	movs	r1, #0
 80037de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e010      	b.n	8003806 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d18e      	bne.n	8003722 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b00a      	add	sp, #40	@ 0x28
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000000 	.word	0x20000000
 8003814:	ffffdfff 	.word	0xffffdfff

08003818 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	2382      	movs	r3, #130	@ 0x82
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	429a      	cmp	r2, r3
 800382e:	d113      	bne.n	8003858 <SPI_EndRxTransaction+0x40>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	429a      	cmp	r2, r3
 800383a:	d005      	beq.n	8003848 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	429a      	cmp	r2, r3
 8003846:	d107      	bne.n	8003858 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2140      	movs	r1, #64	@ 0x40
 8003854:	438a      	bics	r2, r1
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	0013      	movs	r3, r2
 8003862:	2200      	movs	r2, #0
 8003864:	2180      	movs	r1, #128	@ 0x80
 8003866:	f7ff fea7 	bl	80035b8 <SPI_WaitFlagStateUntilTimeout>
 800386a:	1e03      	subs	r3, r0, #0
 800386c:	d007      	beq.n	800387e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	2220      	movs	r2, #32
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e026      	b.n	80038cc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	2382      	movs	r3, #130	@ 0x82
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	429a      	cmp	r2, r3
 8003888:	d11f      	bne.n	80038ca <SPI_EndRxTransaction+0xb2>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	2380      	movs	r3, #128	@ 0x80
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	429a      	cmp	r2, r3
 8003894:	d005      	beq.n	80038a2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	429a      	cmp	r2, r3
 80038a0:	d113      	bne.n	80038ca <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	23c0      	movs	r3, #192	@ 0xc0
 80038a6:	00d9      	lsls	r1, r3, #3
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	0013      	movs	r3, r2
 80038b0:	2200      	movs	r2, #0
 80038b2:	f7ff ff0f 	bl	80036d4 <SPI_WaitFifoStateUntilTimeout>
 80038b6:	1e03      	subs	r3, r0, #0
 80038b8:	d007      	beq.n	80038ca <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038be:	2220      	movs	r2, #32
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e000      	b.n	80038cc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b004      	add	sp, #16
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	23c0      	movs	r3, #192	@ 0xc0
 80038e4:	0159      	lsls	r1, r3, #5
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	0013      	movs	r3, r2
 80038ee:	2200      	movs	r2, #0
 80038f0:	f7ff fef0 	bl	80036d4 <SPI_WaitFifoStateUntilTimeout>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d007      	beq.n	8003908 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fc:	2220      	movs	r2, #32
 80038fe:	431a      	orrs	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e027      	b.n	8003958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	0013      	movs	r3, r2
 8003912:	2200      	movs	r2, #0
 8003914:	2180      	movs	r1, #128	@ 0x80
 8003916:	f7ff fe4f 	bl	80035b8 <SPI_WaitFlagStateUntilTimeout>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d007      	beq.n	800392e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003922:	2220      	movs	r2, #32
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e014      	b.n	8003958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	23c0      	movs	r3, #192	@ 0xc0
 8003932:	00d9      	lsls	r1, r3, #3
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	0013      	movs	r3, r2
 800393c:	2200      	movs	r2, #0
 800393e:	f7ff fec9 	bl	80036d4 <SPI_WaitFifoStateUntilTimeout>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d007      	beq.n	8003956 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394a:	2220      	movs	r2, #32
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e000      	b.n	8003958 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e044      	b.n	80039fc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d107      	bne.n	800398a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2278      	movs	r2, #120	@ 0x78
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	0018      	movs	r0, r3
 8003986:	f7fd f8ad 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2224      	movs	r2, #36	@ 0x24
 800398e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2101      	movs	r1, #1
 800399c:	438a      	bics	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	0018      	movs	r0, r3
 80039ac:	f000 fa0c 	bl	8003dc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 f8c8 	bl	8003b48 <UART_SetConfig>
 80039b8:	0003      	movs	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e01c      	b.n	80039fc <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	490d      	ldr	r1, [pc, #52]	@ (8003a04 <HAL_UART_Init+0xa4>)
 80039ce:	400a      	ands	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2108      	movs	r1, #8
 80039de:	438a      	bics	r2, r1
 80039e0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2101      	movs	r1, #1
 80039ee:	430a      	orrs	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f000 fa9b 	bl	8003f30 <UART_CheckIdleState>
 80039fa:	0003      	movs	r3, r0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	fffff7ff 	.word	0xfffff7ff

08003a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	@ 0x28
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	1dbb      	adds	r3, r7, #6
 8003a16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d000      	beq.n	8003a22 <HAL_UART_Transmit+0x1a>
 8003a20:	e08c      	b.n	8003b3c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_UART_Transmit+0x28>
 8003a28:	1dbb      	adds	r3, r7, #6
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e084      	b.n	8003b3e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	2380      	movs	r3, #128	@ 0x80
 8003a3a:	015b      	lsls	r3, r3, #5
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d109      	bne.n	8003a54 <HAL_UART_Transmit+0x4c>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d105      	bne.n	8003a54 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d001      	beq.n	8003a54 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e074      	b.n	8003b3e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2284      	movs	r2, #132	@ 0x84
 8003a58:	2100      	movs	r1, #0
 8003a5a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2221      	movs	r2, #33	@ 0x21
 8003a60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a62:	f7fd f967 	bl	8000d34 <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1dba      	adds	r2, r7, #6
 8003a6e:	2150      	movs	r1, #80	@ 0x50
 8003a70:	8812      	ldrh	r2, [r2, #0]
 8003a72:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1dba      	adds	r2, r7, #6
 8003a78:	2152      	movs	r1, #82	@ 0x52
 8003a7a:	8812      	ldrh	r2, [r2, #0]
 8003a7c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	015b      	lsls	r3, r3, #5
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d108      	bne.n	8003a9c <HAL_UART_Transmit+0x94>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e003      	b.n	8003aa4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aa4:	e02f      	b.n	8003b06 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	0013      	movs	r3, r2
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2180      	movs	r1, #128	@ 0x80
 8003ab4:	f000 fae4 	bl	8004080 <UART_WaitOnFlagUntilTimeout>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d004      	beq.n	8003ac6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e03b      	b.n	8003b3e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	05d2      	lsls	r2, r2, #23
 8003ad6:	0dd2      	lsrs	r2, r2, #23
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	3302      	adds	r3, #2
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	e007      	b.n	8003af4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2252      	movs	r2, #82	@ 0x52
 8003af8:	5a9b      	ldrh	r3, [r3, r2]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b299      	uxth	r1, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2252      	movs	r2, #82	@ 0x52
 8003b04:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2252      	movs	r2, #82	@ 0x52
 8003b0a:	5a9b      	ldrh	r3, [r3, r2]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1c9      	bne.n	8003aa6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	0013      	movs	r3, r2
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2140      	movs	r1, #64	@ 0x40
 8003b20:	f000 faae 	bl	8004080 <UART_WaitOnFlagUntilTimeout>
 8003b24:	1e03      	subs	r3, r0, #0
 8003b26:	d004      	beq.n	8003b32 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e005      	b.n	8003b3e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e000      	b.n	8003b3e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b008      	add	sp, #32
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b50:	231e      	movs	r3, #30
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a8d      	ldr	r2, [pc, #564]	@ (8003dac <UART_SetConfig+0x264>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a88      	ldr	r2, [pc, #544]	@ (8003db0 <UART_SetConfig+0x268>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a7f      	ldr	r2, [pc, #508]	@ (8003db4 <UART_SetConfig+0x26c>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a7b      	ldr	r2, [pc, #492]	@ (8003db8 <UART_SetConfig+0x270>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d127      	bne.n	8003c1e <UART_SetConfig+0xd6>
 8003bce:	4b7b      	ldr	r3, [pc, #492]	@ (8003dbc <UART_SetConfig+0x274>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d00d      	beq.n	8003bf6 <UART_SetConfig+0xae>
 8003bda:	d81b      	bhi.n	8003c14 <UART_SetConfig+0xcc>
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d014      	beq.n	8003c0a <UART_SetConfig+0xc2>
 8003be0:	d818      	bhi.n	8003c14 <UART_SetConfig+0xcc>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <UART_SetConfig+0xa4>
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d00a      	beq.n	8003c00 <UART_SetConfig+0xb8>
 8003bea:	e013      	b.n	8003c14 <UART_SetConfig+0xcc>
 8003bec:	231f      	movs	r3, #31
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	e021      	b.n	8003c3a <UART_SetConfig+0xf2>
 8003bf6:	231f      	movs	r3, #31
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e01c      	b.n	8003c3a <UART_SetConfig+0xf2>
 8003c00:	231f      	movs	r3, #31
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	2204      	movs	r2, #4
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e017      	b.n	8003c3a <UART_SetConfig+0xf2>
 8003c0a:	231f      	movs	r3, #31
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	2208      	movs	r2, #8
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e012      	b.n	8003c3a <UART_SetConfig+0xf2>
 8003c14:	231f      	movs	r3, #31
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	2210      	movs	r2, #16
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	e00d      	b.n	8003c3a <UART_SetConfig+0xf2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a67      	ldr	r2, [pc, #412]	@ (8003dc0 <UART_SetConfig+0x278>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d104      	bne.n	8003c32 <UART_SetConfig+0xea>
 8003c28:	231f      	movs	r3, #31
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e003      	b.n	8003c3a <UART_SetConfig+0xf2>
 8003c32:	231f      	movs	r3, #31
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	2210      	movs	r2, #16
 8003c38:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	2380      	movs	r3, #128	@ 0x80
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d15c      	bne.n	8003d00 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003c46:	231f      	movs	r3, #31
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d015      	beq.n	8003c7c <UART_SetConfig+0x134>
 8003c50:	dc18      	bgt.n	8003c84 <UART_SetConfig+0x13c>
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d00d      	beq.n	8003c72 <UART_SetConfig+0x12a>
 8003c56:	dc15      	bgt.n	8003c84 <UART_SetConfig+0x13c>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <UART_SetConfig+0x11a>
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d005      	beq.n	8003c6c <UART_SetConfig+0x124>
 8003c60:	e010      	b.n	8003c84 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c62:	f7fe fe79 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8003c66:	0003      	movs	r3, r0
 8003c68:	61bb      	str	r3, [r7, #24]
        break;
 8003c6a:	e012      	b.n	8003c92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b55      	ldr	r3, [pc, #340]	@ (8003dc4 <UART_SetConfig+0x27c>)
 8003c6e:	61bb      	str	r3, [r7, #24]
        break;
 8003c70:	e00f      	b.n	8003c92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7fe fe11 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8003c76:	0003      	movs	r3, r0
 8003c78:	61bb      	str	r3, [r7, #24]
        break;
 8003c7a:	e00a      	b.n	8003c92 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	61bb      	str	r3, [r7, #24]
        break;
 8003c82:	e006      	b.n	8003c92 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c88:	231e      	movs	r3, #30
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
        break;
 8003c90:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d100      	bne.n	8003c9a <UART_SetConfig+0x152>
 8003c98:	e07a      	b.n	8003d90 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	005a      	lsls	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	085b      	lsrs	r3, r3, #1
 8003ca4:	18d2      	adds	r2, r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	0019      	movs	r1, r3
 8003cac:	0010      	movs	r0, r2
 8003cae:	f7fc fa3d 	bl	800012c <__udivsi3>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d91c      	bls.n	8003cf6 <UART_SetConfig+0x1ae>
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	2380      	movs	r3, #128	@ 0x80
 8003cc0:	025b      	lsls	r3, r3, #9
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d217      	bcs.n	8003cf6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	200e      	movs	r0, #14
 8003ccc:	183b      	adds	r3, r7, r0
 8003cce:	210f      	movs	r1, #15
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2207      	movs	r2, #7
 8003cdc:	4013      	ands	r3, r2
 8003cde:	b299      	uxth	r1, r3
 8003ce0:	183b      	adds	r3, r7, r0
 8003ce2:	183a      	adds	r2, r7, r0
 8003ce4:	8812      	ldrh	r2, [r2, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	183a      	adds	r2, r7, r0
 8003cf0:	8812      	ldrh	r2, [r2, #0]
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	e04c      	b.n	8003d90 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf6:	231e      	movs	r3, #30
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e047      	b.n	8003d90 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d00:	231f      	movs	r3, #31
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d015      	beq.n	8003d36 <UART_SetConfig+0x1ee>
 8003d0a:	dc18      	bgt.n	8003d3e <UART_SetConfig+0x1f6>
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d00d      	beq.n	8003d2c <UART_SetConfig+0x1e4>
 8003d10:	dc15      	bgt.n	8003d3e <UART_SetConfig+0x1f6>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <UART_SetConfig+0x1d4>
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d005      	beq.n	8003d26 <UART_SetConfig+0x1de>
 8003d1a:	e010      	b.n	8003d3e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7fe fe1c 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8003d20:	0003      	movs	r3, r0
 8003d22:	61bb      	str	r3, [r7, #24]
        break;
 8003d24:	e012      	b.n	8003d4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d26:	4b27      	ldr	r3, [pc, #156]	@ (8003dc4 <UART_SetConfig+0x27c>)
 8003d28:	61bb      	str	r3, [r7, #24]
        break;
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2c:	f7fe fdb4 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8003d30:	0003      	movs	r3, r0
 8003d32:	61bb      	str	r3, [r7, #24]
        break;
 8003d34:	e00a      	b.n	8003d4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d36:	2380      	movs	r3, #128	@ 0x80
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	61bb      	str	r3, [r7, #24]
        break;
 8003d3c:	e006      	b.n	8003d4c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d42:	231e      	movs	r3, #30
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
        break;
 8003d4a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01e      	beq.n	8003d90 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	085a      	lsrs	r2, r3, #1
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	18d2      	adds	r2, r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	0019      	movs	r1, r3
 8003d62:	0010      	movs	r0, r2
 8003d64:	f7fc f9e2 	bl	800012c <__udivsi3>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b0f      	cmp	r3, #15
 8003d70:	d90a      	bls.n	8003d88 <UART_SetConfig+0x240>
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	025b      	lsls	r3, r3, #9
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d205      	bcs.n	8003d88 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	e003      	b.n	8003d90 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003d88:	231e      	movs	r3, #30
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d9c:	231e      	movs	r3, #30
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	781b      	ldrb	r3, [r3, #0]
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b008      	add	sp, #32
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	ffff69f3 	.word	0xffff69f3
 8003db0:	ffffcfff 	.word	0xffffcfff
 8003db4:	fffff4ff 	.word	0xfffff4ff
 8003db8:	40013800 	.word	0x40013800
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40004400 	.word	0x40004400
 8003dc4:	007a1200 	.word	0x007a1200

08003dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d00b      	beq.n	8003df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a4a      	ldr	r2, [pc, #296]	@ (8003f0c <UART_AdvFeatureConfig+0x144>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	2201      	movs	r2, #1
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4a43      	ldr	r2, [pc, #268]	@ (8003f10 <UART_AdvFeatureConfig+0x148>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	0019      	movs	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	2202      	movs	r2, #2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a3b      	ldr	r2, [pc, #236]	@ (8003f14 <UART_AdvFeatureConfig+0x14c>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4a34      	ldr	r2, [pc, #208]	@ (8003f18 <UART_AdvFeatureConfig+0x150>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	0019      	movs	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d00b      	beq.n	8003e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4a2c      	ldr	r2, [pc, #176]	@ (8003f1c <UART_AdvFeatureConfig+0x154>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	2220      	movs	r2, #32
 8003e80:	4013      	ands	r3, r2
 8003e82:	d00b      	beq.n	8003e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	4a25      	ldr	r2, [pc, #148]	@ (8003f20 <UART_AdvFeatureConfig+0x158>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	0019      	movs	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	2240      	movs	r2, #64	@ 0x40
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d01d      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <UART_AdvFeatureConfig+0x15c>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ec2:	2380      	movs	r3, #128	@ 0x80
 8003ec4:	035b      	lsls	r3, r3, #13
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10b      	bne.n	8003ee2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4a15      	ldr	r2, [pc, #84]	@ (8003f28 <UART_AdvFeatureConfig+0x160>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	2280      	movs	r2, #128	@ 0x80
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8003f2c <UART_AdvFeatureConfig+0x164>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }
}
 8003f04:	46c0      	nop			@ (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	ffff7fff 	.word	0xffff7fff
 8003f10:	fffdffff 	.word	0xfffdffff
 8003f14:	fffeffff 	.word	0xfffeffff
 8003f18:	fffbffff 	.word	0xfffbffff
 8003f1c:	ffffefff 	.word	0xffffefff
 8003f20:	ffffdfff 	.word	0xffffdfff
 8003f24:	ffefffff 	.word	0xffefffff
 8003f28:	ff9fffff 	.word	0xff9fffff
 8003f2c:	fff7ffff 	.word	0xfff7ffff

08003f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b092      	sub	sp, #72	@ 0x48
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2284      	movs	r2, #132	@ 0x84
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f40:	f7fc fef8 	bl	8000d34 <HAL_GetTick>
 8003f44:	0003      	movs	r3, r0
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2208      	movs	r2, #8
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d12c      	bne.n	8003fb0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	0391      	lsls	r1, r2, #14
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4a46      	ldr	r2, [pc, #280]	@ (8004078 <UART_CheckIdleState+0x148>)
 8003f60:	9200      	str	r2, [sp, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f000 f88c 	bl	8004080 <UART_WaitOnFlagUntilTimeout>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d021      	beq.n	8003fb0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f76:	2301      	movs	r3, #1
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7c:	f383 8810 	msr	PRIMASK, r3
}
 8003f80:	46c0      	nop			@ (mov r8, r8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2180      	movs	r1, #128	@ 0x80
 8003f8e:	438a      	bics	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2278      	movs	r2, #120	@ 0x78
 8003fa8:	2100      	movs	r1, #0
 8003faa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e05f      	b.n	8004070 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d146      	bne.n	800404c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc0:	2280      	movs	r2, #128	@ 0x80
 8003fc2:	03d1      	lsls	r1, r2, #15
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004078 <UART_CheckIdleState+0x148>)
 8003fc8:	9200      	str	r2, [sp, #0]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f000 f858 	bl	8004080 <UART_WaitOnFlagUntilTimeout>
 8003fd0:	1e03      	subs	r3, r0, #0
 8003fd2:	d03b      	beq.n	800404c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fda:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fde:	2301      	movs	r3, #1
 8003fe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f383 8810 	msr	PRIMASK, r3
}
 8003fe8:	46c0      	nop			@ (mov r8, r8)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4921      	ldr	r1, [pc, #132]	@ (800407c <UART_CheckIdleState+0x14c>)
 8003ff6:	400a      	ands	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f383 8810 	msr	PRIMASK, r3
}
 8004004:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004006:	f3ef 8310 	mrs	r3, PRIMASK
 800400a:	61bb      	str	r3, [r7, #24]
  return(result);
 800400c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004010:	2301      	movs	r3, #1
 8004012:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2101      	movs	r1, #1
 8004028:	438a      	bics	r2, r1
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f383 8810 	msr	PRIMASK, r3
}
 8004036:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2280      	movs	r2, #128	@ 0x80
 800403c:	2120      	movs	r1, #32
 800403e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2278      	movs	r2, #120	@ 0x78
 8004044:	2100      	movs	r1, #0
 8004046:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e011      	b.n	8004070 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2280      	movs	r2, #128	@ 0x80
 8004056:	2120      	movs	r1, #32
 8004058:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2278      	movs	r2, #120	@ 0x78
 800406a:	2100      	movs	r1, #0
 800406c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	0018      	movs	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	b010      	add	sp, #64	@ 0x40
 8004076:	bd80      	pop	{r7, pc}
 8004078:	01ffffff 	.word	0x01ffffff
 800407c:	fffffedf 	.word	0xfffffedf

08004080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	1dfb      	adds	r3, r7, #7
 800408e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004090:	e051      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3301      	adds	r3, #1
 8004096:	d04e      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004098:	f7fc fe4c 	bl	8000d34 <HAL_GetTick>
 800409c:	0002      	movs	r2, r0
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d302      	bcc.n	80040ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e051      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2204      	movs	r2, #4
 80040ba:	4013      	ands	r3, r2
 80040bc:	d03b      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0xb6>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b80      	cmp	r3, #128	@ 0x80
 80040c2:	d038      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0xb6>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d035      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	2208      	movs	r2, #8
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d111      	bne.n	80040fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2208      	movs	r2, #8
 80040de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 f83c 	bl	8004160 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2284      	movs	r2, #132	@ 0x84
 80040ec:	2108      	movs	r1, #8
 80040ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2278      	movs	r2, #120	@ 0x78
 80040f4:	2100      	movs	r1, #0
 80040f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e02c      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	2380      	movs	r3, #128	@ 0x80
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	401a      	ands	r2, r3
 8004108:	2380      	movs	r3, #128	@ 0x80
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	429a      	cmp	r2, r3
 800410e:	d112      	bne.n	8004136 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2280      	movs	r2, #128	@ 0x80
 8004116:	0112      	lsls	r2, r2, #4
 8004118:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	0018      	movs	r0, r3
 800411e:	f000 f81f 	bl	8004160 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2284      	movs	r2, #132	@ 0x84
 8004126:	2120      	movs	r1, #32
 8004128:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2278      	movs	r2, #120	@ 0x78
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e00f      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	425a      	negs	r2, r3
 8004146:	4153      	adcs	r3, r2
 8004148:	b2db      	uxtb	r3, r3
 800414a:	001a      	movs	r2, r3
 800414c:	1dfb      	adds	r3, r7, #7
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d09e      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b004      	add	sp, #16
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08e      	sub	sp, #56	@ 0x38
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004168:	f3ef 8310 	mrs	r3, PRIMASK
 800416c:	617b      	str	r3, [r7, #20]
  return(result);
 800416e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
 8004172:	2301      	movs	r3, #1
 8004174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	f383 8810 	msr	PRIMASK, r3
}
 800417c:	46c0      	nop			@ (mov r8, r8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4926      	ldr	r1, [pc, #152]	@ (8004224 <UART_EndRxTransfer+0xc4>)
 800418a:	400a      	ands	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419a:	f3ef 8310 	mrs	r3, PRIMASK
 800419e:	623b      	str	r3, [r7, #32]
  return(result);
 80041a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a4:	2301      	movs	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	f383 8810 	msr	PRIMASK, r3
}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2101      	movs	r1, #1
 80041bc:	438a      	bics	r2, r1
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d118      	bne.n	8004206 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d4:	f3ef 8310 	mrs	r3, PRIMASK
 80041d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80041da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041de:	2301      	movs	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f383 8810 	msr	PRIMASK, r3
}
 80041e8:	46c0      	nop			@ (mov r8, r8)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2110      	movs	r1, #16
 80041f6:	438a      	bics	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f383 8810 	msr	PRIMASK, r3
}
 8004204:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2280      	movs	r2, #128	@ 0x80
 800420a:	2120      	movs	r1, #32
 800420c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b00e      	add	sp, #56	@ 0x38
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	fffffedf 	.word	0xfffffedf

08004228 <siprintf>:
 8004228:	b40e      	push	{r1, r2, r3}
 800422a:	b500      	push	{lr}
 800422c:	490b      	ldr	r1, [pc, #44]	@ (800425c <siprintf+0x34>)
 800422e:	b09c      	sub	sp, #112	@ 0x70
 8004230:	ab1d      	add	r3, sp, #116	@ 0x74
 8004232:	9002      	str	r0, [sp, #8]
 8004234:	9006      	str	r0, [sp, #24]
 8004236:	9107      	str	r1, [sp, #28]
 8004238:	9104      	str	r1, [sp, #16]
 800423a:	4809      	ldr	r0, [pc, #36]	@ (8004260 <siprintf+0x38>)
 800423c:	4909      	ldr	r1, [pc, #36]	@ (8004264 <siprintf+0x3c>)
 800423e:	cb04      	ldmia	r3!, {r2}
 8004240:	9105      	str	r1, [sp, #20]
 8004242:	6800      	ldr	r0, [r0, #0]
 8004244:	a902      	add	r1, sp, #8
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	f000 f99e 	bl	8004588 <_svfiprintf_r>
 800424c:	2200      	movs	r2, #0
 800424e:	9b02      	ldr	r3, [sp, #8]
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	b01c      	add	sp, #112	@ 0x70
 8004254:	bc08      	pop	{r3}
 8004256:	b003      	add	sp, #12
 8004258:	4718      	bx	r3
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	7fffffff 	.word	0x7fffffff
 8004260:	2000000c 	.word	0x2000000c
 8004264:	ffff0208 	.word	0xffff0208

08004268 <memset>:
 8004268:	0003      	movs	r3, r0
 800426a:	1882      	adds	r2, r0, r2
 800426c:	4293      	cmp	r3, r2
 800426e:	d100      	bne.n	8004272 <memset+0xa>
 8004270:	4770      	bx	lr
 8004272:	7019      	strb	r1, [r3, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	e7f9      	b.n	800426c <memset+0x4>

08004278 <__errno>:
 8004278:	4b01      	ldr	r3, [pc, #4]	@ (8004280 <__errno+0x8>)
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	4770      	bx	lr
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	2000000c 	.word	0x2000000c

08004284 <__libc_init_array>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	2600      	movs	r6, #0
 8004288:	4c0c      	ldr	r4, [pc, #48]	@ (80042bc <__libc_init_array+0x38>)
 800428a:	4d0d      	ldr	r5, [pc, #52]	@ (80042c0 <__libc_init_array+0x3c>)
 800428c:	1b64      	subs	r4, r4, r5
 800428e:	10a4      	asrs	r4, r4, #2
 8004290:	42a6      	cmp	r6, r4
 8004292:	d109      	bne.n	80042a8 <__libc_init_array+0x24>
 8004294:	2600      	movs	r6, #0
 8004296:	f000 fc65 	bl	8004b64 <_init>
 800429a:	4c0a      	ldr	r4, [pc, #40]	@ (80042c4 <__libc_init_array+0x40>)
 800429c:	4d0a      	ldr	r5, [pc, #40]	@ (80042c8 <__libc_init_array+0x44>)
 800429e:	1b64      	subs	r4, r4, r5
 80042a0:	10a4      	asrs	r4, r4, #2
 80042a2:	42a6      	cmp	r6, r4
 80042a4:	d105      	bne.n	80042b2 <__libc_init_array+0x2e>
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	00b3      	lsls	r3, r6, #2
 80042aa:	58eb      	ldr	r3, [r5, r3]
 80042ac:	4798      	blx	r3
 80042ae:	3601      	adds	r6, #1
 80042b0:	e7ee      	b.n	8004290 <__libc_init_array+0xc>
 80042b2:	00b3      	lsls	r3, r6, #2
 80042b4:	58eb      	ldr	r3, [r5, r3]
 80042b6:	4798      	blx	r3
 80042b8:	3601      	adds	r6, #1
 80042ba:	e7f2      	b.n	80042a2 <__libc_init_array+0x1e>
 80042bc:	08004bfc 	.word	0x08004bfc
 80042c0:	08004bfc 	.word	0x08004bfc
 80042c4:	08004c00 	.word	0x08004c00
 80042c8:	08004bfc 	.word	0x08004bfc

080042cc <__retarget_lock_acquire_recursive>:
 80042cc:	4770      	bx	lr

080042ce <__retarget_lock_release_recursive>:
 80042ce:	4770      	bx	lr

080042d0 <_free_r>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	0005      	movs	r5, r0
 80042d4:	1e0c      	subs	r4, r1, #0
 80042d6:	d010      	beq.n	80042fa <_free_r+0x2a>
 80042d8:	3c04      	subs	r4, #4
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	da00      	bge.n	80042e2 <_free_r+0x12>
 80042e0:	18e4      	adds	r4, r4, r3
 80042e2:	0028      	movs	r0, r5
 80042e4:	f000 f8e0 	bl	80044a8 <__malloc_lock>
 80042e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004360 <_free_r+0x90>)
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <_free_r+0x2c>
 80042f0:	6063      	str	r3, [r4, #4]
 80042f2:	6014      	str	r4, [r2, #0]
 80042f4:	0028      	movs	r0, r5
 80042f6:	f000 f8df 	bl	80044b8 <__malloc_unlock>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	d908      	bls.n	8004312 <_free_r+0x42>
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	1821      	adds	r1, r4, r0
 8004304:	428b      	cmp	r3, r1
 8004306:	d1f3      	bne.n	80042f0 <_free_r+0x20>
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	1809      	adds	r1, r1, r0
 800430e:	6021      	str	r1, [r4, #0]
 8004310:	e7ee      	b.n	80042f0 <_free_r+0x20>
 8004312:	001a      	movs	r2, r3
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <_free_r+0x4e>
 800431a:	42a3      	cmp	r3, r4
 800431c:	d9f9      	bls.n	8004312 <_free_r+0x42>
 800431e:	6811      	ldr	r1, [r2, #0]
 8004320:	1850      	adds	r0, r2, r1
 8004322:	42a0      	cmp	r0, r4
 8004324:	d10b      	bne.n	800433e <_free_r+0x6e>
 8004326:	6820      	ldr	r0, [r4, #0]
 8004328:	1809      	adds	r1, r1, r0
 800432a:	1850      	adds	r0, r2, r1
 800432c:	6011      	str	r1, [r2, #0]
 800432e:	4283      	cmp	r3, r0
 8004330:	d1e0      	bne.n	80042f4 <_free_r+0x24>
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	1841      	adds	r1, r0, r1
 8004338:	6011      	str	r1, [r2, #0]
 800433a:	6053      	str	r3, [r2, #4]
 800433c:	e7da      	b.n	80042f4 <_free_r+0x24>
 800433e:	42a0      	cmp	r0, r4
 8004340:	d902      	bls.n	8004348 <_free_r+0x78>
 8004342:	230c      	movs	r3, #12
 8004344:	602b      	str	r3, [r5, #0]
 8004346:	e7d5      	b.n	80042f4 <_free_r+0x24>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	1821      	adds	r1, r4, r0
 800434c:	428b      	cmp	r3, r1
 800434e:	d103      	bne.n	8004358 <_free_r+0x88>
 8004350:	6819      	ldr	r1, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	1809      	adds	r1, r1, r0
 8004356:	6021      	str	r1, [r4, #0]
 8004358:	6063      	str	r3, [r4, #4]
 800435a:	6054      	str	r4, [r2, #4]
 800435c:	e7ca      	b.n	80042f4 <_free_r+0x24>
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	2000045c 	.word	0x2000045c

08004364 <sbrk_aligned>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4e0f      	ldr	r6, [pc, #60]	@ (80043a4 <sbrk_aligned+0x40>)
 8004368:	000d      	movs	r5, r1
 800436a:	6831      	ldr	r1, [r6, #0]
 800436c:	0004      	movs	r4, r0
 800436e:	2900      	cmp	r1, #0
 8004370:	d102      	bne.n	8004378 <sbrk_aligned+0x14>
 8004372:	f000 fb99 	bl	8004aa8 <_sbrk_r>
 8004376:	6030      	str	r0, [r6, #0]
 8004378:	0029      	movs	r1, r5
 800437a:	0020      	movs	r0, r4
 800437c:	f000 fb94 	bl	8004aa8 <_sbrk_r>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d103      	bne.n	800438c <sbrk_aligned+0x28>
 8004384:	2501      	movs	r5, #1
 8004386:	426d      	negs	r5, r5
 8004388:	0028      	movs	r0, r5
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	2303      	movs	r3, #3
 800438e:	1cc5      	adds	r5, r0, #3
 8004390:	439d      	bics	r5, r3
 8004392:	42a8      	cmp	r0, r5
 8004394:	d0f8      	beq.n	8004388 <sbrk_aligned+0x24>
 8004396:	1a29      	subs	r1, r5, r0
 8004398:	0020      	movs	r0, r4
 800439a:	f000 fb85 	bl	8004aa8 <_sbrk_r>
 800439e:	3001      	adds	r0, #1
 80043a0:	d1f2      	bne.n	8004388 <sbrk_aligned+0x24>
 80043a2:	e7ef      	b.n	8004384 <sbrk_aligned+0x20>
 80043a4:	20000458 	.word	0x20000458

080043a8 <_malloc_r>:
 80043a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043aa:	2203      	movs	r2, #3
 80043ac:	1ccb      	adds	r3, r1, #3
 80043ae:	4393      	bics	r3, r2
 80043b0:	3308      	adds	r3, #8
 80043b2:	0005      	movs	r5, r0
 80043b4:	001f      	movs	r7, r3
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d234      	bcs.n	8004424 <_malloc_r+0x7c>
 80043ba:	270c      	movs	r7, #12
 80043bc:	42b9      	cmp	r1, r7
 80043be:	d833      	bhi.n	8004428 <_malloc_r+0x80>
 80043c0:	0028      	movs	r0, r5
 80043c2:	f000 f871 	bl	80044a8 <__malloc_lock>
 80043c6:	4e37      	ldr	r6, [pc, #220]	@ (80044a4 <_malloc_r+0xfc>)
 80043c8:	6833      	ldr	r3, [r6, #0]
 80043ca:	001c      	movs	r4, r3
 80043cc:	2c00      	cmp	r4, #0
 80043ce:	d12f      	bne.n	8004430 <_malloc_r+0x88>
 80043d0:	0039      	movs	r1, r7
 80043d2:	0028      	movs	r0, r5
 80043d4:	f7ff ffc6 	bl	8004364 <sbrk_aligned>
 80043d8:	0004      	movs	r4, r0
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	d15f      	bne.n	800449e <_malloc_r+0xf6>
 80043de:	6834      	ldr	r4, [r6, #0]
 80043e0:	9400      	str	r4, [sp, #0]
 80043e2:	9b00      	ldr	r3, [sp, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d14a      	bne.n	800447e <_malloc_r+0xd6>
 80043e8:	2c00      	cmp	r4, #0
 80043ea:	d052      	beq.n	8004492 <_malloc_r+0xea>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	0028      	movs	r0, r5
 80043f0:	18e3      	adds	r3, r4, r3
 80043f2:	9900      	ldr	r1, [sp, #0]
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	f000 fb57 	bl	8004aa8 <_sbrk_r>
 80043fa:	9b01      	ldr	r3, [sp, #4]
 80043fc:	4283      	cmp	r3, r0
 80043fe:	d148      	bne.n	8004492 <_malloc_r+0xea>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	0028      	movs	r0, r5
 8004404:	1aff      	subs	r7, r7, r3
 8004406:	0039      	movs	r1, r7
 8004408:	f7ff ffac 	bl	8004364 <sbrk_aligned>
 800440c:	3001      	adds	r0, #1
 800440e:	d040      	beq.n	8004492 <_malloc_r+0xea>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	19db      	adds	r3, r3, r7
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	6833      	ldr	r3, [r6, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	2a00      	cmp	r2, #0
 800441c:	d133      	bne.n	8004486 <_malloc_r+0xde>
 800441e:	9b00      	ldr	r3, [sp, #0]
 8004420:	6033      	str	r3, [r6, #0]
 8004422:	e019      	b.n	8004458 <_malloc_r+0xb0>
 8004424:	2b00      	cmp	r3, #0
 8004426:	dac9      	bge.n	80043bc <_malloc_r+0x14>
 8004428:	230c      	movs	r3, #12
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	2000      	movs	r0, #0
 800442e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004430:	6821      	ldr	r1, [r4, #0]
 8004432:	1bc9      	subs	r1, r1, r7
 8004434:	d420      	bmi.n	8004478 <_malloc_r+0xd0>
 8004436:	290b      	cmp	r1, #11
 8004438:	d90a      	bls.n	8004450 <_malloc_r+0xa8>
 800443a:	19e2      	adds	r2, r4, r7
 800443c:	6027      	str	r7, [r4, #0]
 800443e:	42a3      	cmp	r3, r4
 8004440:	d104      	bne.n	800444c <_malloc_r+0xa4>
 8004442:	6032      	str	r2, [r6, #0]
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	6011      	str	r1, [r2, #0]
 8004448:	6053      	str	r3, [r2, #4]
 800444a:	e005      	b.n	8004458 <_malloc_r+0xb0>
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	e7f9      	b.n	8004444 <_malloc_r+0x9c>
 8004450:	6862      	ldr	r2, [r4, #4]
 8004452:	42a3      	cmp	r3, r4
 8004454:	d10e      	bne.n	8004474 <_malloc_r+0xcc>
 8004456:	6032      	str	r2, [r6, #0]
 8004458:	0028      	movs	r0, r5
 800445a:	f000 f82d 	bl	80044b8 <__malloc_unlock>
 800445e:	0020      	movs	r0, r4
 8004460:	2207      	movs	r2, #7
 8004462:	300b      	adds	r0, #11
 8004464:	1d23      	adds	r3, r4, #4
 8004466:	4390      	bics	r0, r2
 8004468:	1ac2      	subs	r2, r0, r3
 800446a:	4298      	cmp	r0, r3
 800446c:	d0df      	beq.n	800442e <_malloc_r+0x86>
 800446e:	1a1b      	subs	r3, r3, r0
 8004470:	50a3      	str	r3, [r4, r2]
 8004472:	e7dc      	b.n	800442e <_malloc_r+0x86>
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	e7ef      	b.n	8004458 <_malloc_r+0xb0>
 8004478:	0023      	movs	r3, r4
 800447a:	6864      	ldr	r4, [r4, #4]
 800447c:	e7a6      	b.n	80043cc <_malloc_r+0x24>
 800447e:	9c00      	ldr	r4, [sp, #0]
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	e7ad      	b.n	80043e2 <_malloc_r+0x3a>
 8004486:	001a      	movs	r2, r3
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	42a3      	cmp	r3, r4
 800448c:	d1fb      	bne.n	8004486 <_malloc_r+0xde>
 800448e:	2300      	movs	r3, #0
 8004490:	e7da      	b.n	8004448 <_malloc_r+0xa0>
 8004492:	230c      	movs	r3, #12
 8004494:	0028      	movs	r0, r5
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f000 f80e 	bl	80044b8 <__malloc_unlock>
 800449c:	e7c6      	b.n	800442c <_malloc_r+0x84>
 800449e:	6007      	str	r7, [r0, #0]
 80044a0:	e7da      	b.n	8004458 <_malloc_r+0xb0>
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	2000045c 	.word	0x2000045c

080044a8 <__malloc_lock>:
 80044a8:	b510      	push	{r4, lr}
 80044aa:	4802      	ldr	r0, [pc, #8]	@ (80044b4 <__malloc_lock+0xc>)
 80044ac:	f7ff ff0e 	bl	80042cc <__retarget_lock_acquire_recursive>
 80044b0:	bd10      	pop	{r4, pc}
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	20000454 	.word	0x20000454

080044b8 <__malloc_unlock>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4802      	ldr	r0, [pc, #8]	@ (80044c4 <__malloc_unlock+0xc>)
 80044bc:	f7ff ff07 	bl	80042ce <__retarget_lock_release_recursive>
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	20000454 	.word	0x20000454

080044c8 <__ssputs_r>:
 80044c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ca:	688e      	ldr	r6, [r1, #8]
 80044cc:	b085      	sub	sp, #20
 80044ce:	001f      	movs	r7, r3
 80044d0:	000c      	movs	r4, r1
 80044d2:	680b      	ldr	r3, [r1, #0]
 80044d4:	9002      	str	r0, [sp, #8]
 80044d6:	9203      	str	r2, [sp, #12]
 80044d8:	42be      	cmp	r6, r7
 80044da:	d830      	bhi.n	800453e <__ssputs_r+0x76>
 80044dc:	210c      	movs	r1, #12
 80044de:	5e62      	ldrsh	r2, [r4, r1]
 80044e0:	2190      	movs	r1, #144	@ 0x90
 80044e2:	00c9      	lsls	r1, r1, #3
 80044e4:	420a      	tst	r2, r1
 80044e6:	d028      	beq.n	800453a <__ssputs_r+0x72>
 80044e8:	2003      	movs	r0, #3
 80044ea:	6921      	ldr	r1, [r4, #16]
 80044ec:	1a5b      	subs	r3, r3, r1
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	6963      	ldr	r3, [r4, #20]
 80044f2:	4343      	muls	r3, r0
 80044f4:	9801      	ldr	r0, [sp, #4]
 80044f6:	0fdd      	lsrs	r5, r3, #31
 80044f8:	18ed      	adds	r5, r5, r3
 80044fa:	1c7b      	adds	r3, r7, #1
 80044fc:	181b      	adds	r3, r3, r0
 80044fe:	106d      	asrs	r5, r5, #1
 8004500:	42ab      	cmp	r3, r5
 8004502:	d900      	bls.n	8004506 <__ssputs_r+0x3e>
 8004504:	001d      	movs	r5, r3
 8004506:	0552      	lsls	r2, r2, #21
 8004508:	d528      	bpl.n	800455c <__ssputs_r+0x94>
 800450a:	0029      	movs	r1, r5
 800450c:	9802      	ldr	r0, [sp, #8]
 800450e:	f7ff ff4b 	bl	80043a8 <_malloc_r>
 8004512:	1e06      	subs	r6, r0, #0
 8004514:	d02c      	beq.n	8004570 <__ssputs_r+0xa8>
 8004516:	9a01      	ldr	r2, [sp, #4]
 8004518:	6921      	ldr	r1, [r4, #16]
 800451a:	f000 fae2 	bl	8004ae2 <memcpy>
 800451e:	89a2      	ldrh	r2, [r4, #12]
 8004520:	4b18      	ldr	r3, [pc, #96]	@ (8004584 <__ssputs_r+0xbc>)
 8004522:	401a      	ands	r2, r3
 8004524:	2380      	movs	r3, #128	@ 0x80
 8004526:	4313      	orrs	r3, r2
 8004528:	81a3      	strh	r3, [r4, #12]
 800452a:	9b01      	ldr	r3, [sp, #4]
 800452c:	6126      	str	r6, [r4, #16]
 800452e:	18f6      	adds	r6, r6, r3
 8004530:	6026      	str	r6, [r4, #0]
 8004532:	003e      	movs	r6, r7
 8004534:	6165      	str	r5, [r4, #20]
 8004536:	1aed      	subs	r5, r5, r3
 8004538:	60a5      	str	r5, [r4, #8]
 800453a:	42be      	cmp	r6, r7
 800453c:	d900      	bls.n	8004540 <__ssputs_r+0x78>
 800453e:	003e      	movs	r6, r7
 8004540:	0032      	movs	r2, r6
 8004542:	9903      	ldr	r1, [sp, #12]
 8004544:	6820      	ldr	r0, [r4, #0]
 8004546:	f000 fa9b 	bl	8004a80 <memmove>
 800454a:	2000      	movs	r0, #0
 800454c:	68a3      	ldr	r3, [r4, #8]
 800454e:	1b9b      	subs	r3, r3, r6
 8004550:	60a3      	str	r3, [r4, #8]
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	199b      	adds	r3, r3, r6
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	b005      	add	sp, #20
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455c:	002a      	movs	r2, r5
 800455e:	9802      	ldr	r0, [sp, #8]
 8004560:	f000 fac8 	bl	8004af4 <_realloc_r>
 8004564:	1e06      	subs	r6, r0, #0
 8004566:	d1e0      	bne.n	800452a <__ssputs_r+0x62>
 8004568:	6921      	ldr	r1, [r4, #16]
 800456a:	9802      	ldr	r0, [sp, #8]
 800456c:	f7ff feb0 	bl	80042d0 <_free_r>
 8004570:	230c      	movs	r3, #12
 8004572:	2001      	movs	r0, #1
 8004574:	9a02      	ldr	r2, [sp, #8]
 8004576:	4240      	negs	r0, r0
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	89a2      	ldrh	r2, [r4, #12]
 800457c:	3334      	adds	r3, #52	@ 0x34
 800457e:	4313      	orrs	r3, r2
 8004580:	81a3      	strh	r3, [r4, #12]
 8004582:	e7e9      	b.n	8004558 <__ssputs_r+0x90>
 8004584:	fffffb7f 	.word	0xfffffb7f

08004588 <_svfiprintf_r>:
 8004588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458a:	b0a1      	sub	sp, #132	@ 0x84
 800458c:	9003      	str	r0, [sp, #12]
 800458e:	001d      	movs	r5, r3
 8004590:	898b      	ldrh	r3, [r1, #12]
 8004592:	000f      	movs	r7, r1
 8004594:	0016      	movs	r6, r2
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	d511      	bpl.n	80045be <_svfiprintf_r+0x36>
 800459a:	690b      	ldr	r3, [r1, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10e      	bne.n	80045be <_svfiprintf_r+0x36>
 80045a0:	2140      	movs	r1, #64	@ 0x40
 80045a2:	f7ff ff01 	bl	80043a8 <_malloc_r>
 80045a6:	6038      	str	r0, [r7, #0]
 80045a8:	6138      	str	r0, [r7, #16]
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d105      	bne.n	80045ba <_svfiprintf_r+0x32>
 80045ae:	230c      	movs	r3, #12
 80045b0:	9a03      	ldr	r2, [sp, #12]
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	2001      	movs	r0, #1
 80045b6:	4240      	negs	r0, r0
 80045b8:	e0cf      	b.n	800475a <_svfiprintf_r+0x1d2>
 80045ba:	2340      	movs	r3, #64	@ 0x40
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	2300      	movs	r3, #0
 80045c0:	ac08      	add	r4, sp, #32
 80045c2:	6163      	str	r3, [r4, #20]
 80045c4:	3320      	adds	r3, #32
 80045c6:	7663      	strb	r3, [r4, #25]
 80045c8:	3310      	adds	r3, #16
 80045ca:	76a3      	strb	r3, [r4, #26]
 80045cc:	9507      	str	r5, [sp, #28]
 80045ce:	0035      	movs	r5, r6
 80045d0:	782b      	ldrb	r3, [r5, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <_svfiprintf_r+0x52>
 80045d6:	2b25      	cmp	r3, #37	@ 0x25
 80045d8:	d148      	bne.n	800466c <_svfiprintf_r+0xe4>
 80045da:	1bab      	subs	r3, r5, r6
 80045dc:	9305      	str	r3, [sp, #20]
 80045de:	42b5      	cmp	r5, r6
 80045e0:	d00b      	beq.n	80045fa <_svfiprintf_r+0x72>
 80045e2:	0032      	movs	r2, r6
 80045e4:	0039      	movs	r1, r7
 80045e6:	9803      	ldr	r0, [sp, #12]
 80045e8:	f7ff ff6e 	bl	80044c8 <__ssputs_r>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d100      	bne.n	80045f2 <_svfiprintf_r+0x6a>
 80045f0:	e0ae      	b.n	8004750 <_svfiprintf_r+0x1c8>
 80045f2:	6963      	ldr	r3, [r4, #20]
 80045f4:	9a05      	ldr	r2, [sp, #20]
 80045f6:	189b      	adds	r3, r3, r2
 80045f8:	6163      	str	r3, [r4, #20]
 80045fa:	782b      	ldrb	r3, [r5, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d100      	bne.n	8004602 <_svfiprintf_r+0x7a>
 8004600:	e0a6      	b.n	8004750 <_svfiprintf_r+0x1c8>
 8004602:	2201      	movs	r2, #1
 8004604:	2300      	movs	r3, #0
 8004606:	4252      	negs	r2, r2
 8004608:	6062      	str	r2, [r4, #4]
 800460a:	a904      	add	r1, sp, #16
 800460c:	3254      	adds	r2, #84	@ 0x54
 800460e:	1852      	adds	r2, r2, r1
 8004610:	1c6e      	adds	r6, r5, #1
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	60e3      	str	r3, [r4, #12]
 8004616:	60a3      	str	r3, [r4, #8]
 8004618:	7013      	strb	r3, [r2, #0]
 800461a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800461c:	4b54      	ldr	r3, [pc, #336]	@ (8004770 <_svfiprintf_r+0x1e8>)
 800461e:	2205      	movs	r2, #5
 8004620:	0018      	movs	r0, r3
 8004622:	7831      	ldrb	r1, [r6, #0]
 8004624:	9305      	str	r3, [sp, #20]
 8004626:	f000 fa51 	bl	8004acc <memchr>
 800462a:	1c75      	adds	r5, r6, #1
 800462c:	2800      	cmp	r0, #0
 800462e:	d11f      	bne.n	8004670 <_svfiprintf_r+0xe8>
 8004630:	6822      	ldr	r2, [r4, #0]
 8004632:	06d3      	lsls	r3, r2, #27
 8004634:	d504      	bpl.n	8004640 <_svfiprintf_r+0xb8>
 8004636:	2353      	movs	r3, #83	@ 0x53
 8004638:	a904      	add	r1, sp, #16
 800463a:	185b      	adds	r3, r3, r1
 800463c:	2120      	movs	r1, #32
 800463e:	7019      	strb	r1, [r3, #0]
 8004640:	0713      	lsls	r3, r2, #28
 8004642:	d504      	bpl.n	800464e <_svfiprintf_r+0xc6>
 8004644:	2353      	movs	r3, #83	@ 0x53
 8004646:	a904      	add	r1, sp, #16
 8004648:	185b      	adds	r3, r3, r1
 800464a:	212b      	movs	r1, #43	@ 0x2b
 800464c:	7019      	strb	r1, [r3, #0]
 800464e:	7833      	ldrb	r3, [r6, #0]
 8004650:	2b2a      	cmp	r3, #42	@ 0x2a
 8004652:	d016      	beq.n	8004682 <_svfiprintf_r+0xfa>
 8004654:	0035      	movs	r5, r6
 8004656:	2100      	movs	r1, #0
 8004658:	200a      	movs	r0, #10
 800465a:	68e3      	ldr	r3, [r4, #12]
 800465c:	782a      	ldrb	r2, [r5, #0]
 800465e:	1c6e      	adds	r6, r5, #1
 8004660:	3a30      	subs	r2, #48	@ 0x30
 8004662:	2a09      	cmp	r2, #9
 8004664:	d950      	bls.n	8004708 <_svfiprintf_r+0x180>
 8004666:	2900      	cmp	r1, #0
 8004668:	d111      	bne.n	800468e <_svfiprintf_r+0x106>
 800466a:	e017      	b.n	800469c <_svfiprintf_r+0x114>
 800466c:	3501      	adds	r5, #1
 800466e:	e7af      	b.n	80045d0 <_svfiprintf_r+0x48>
 8004670:	9b05      	ldr	r3, [sp, #20]
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	1ac0      	subs	r0, r0, r3
 8004676:	2301      	movs	r3, #1
 8004678:	4083      	lsls	r3, r0
 800467a:	4313      	orrs	r3, r2
 800467c:	002e      	movs	r6, r5
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	e7cc      	b.n	800461c <_svfiprintf_r+0x94>
 8004682:	9b07      	ldr	r3, [sp, #28]
 8004684:	1d19      	adds	r1, r3, #4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	9107      	str	r1, [sp, #28]
 800468a:	2b00      	cmp	r3, #0
 800468c:	db01      	blt.n	8004692 <_svfiprintf_r+0x10a>
 800468e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004690:	e004      	b.n	800469c <_svfiprintf_r+0x114>
 8004692:	425b      	negs	r3, r3
 8004694:	60e3      	str	r3, [r4, #12]
 8004696:	2302      	movs	r3, #2
 8004698:	4313      	orrs	r3, r2
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	782b      	ldrb	r3, [r5, #0]
 800469e:	2b2e      	cmp	r3, #46	@ 0x2e
 80046a0:	d10c      	bne.n	80046bc <_svfiprintf_r+0x134>
 80046a2:	786b      	ldrb	r3, [r5, #1]
 80046a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80046a6:	d134      	bne.n	8004712 <_svfiprintf_r+0x18a>
 80046a8:	9b07      	ldr	r3, [sp, #28]
 80046aa:	3502      	adds	r5, #2
 80046ac:	1d1a      	adds	r2, r3, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	9207      	str	r2, [sp, #28]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da01      	bge.n	80046ba <_svfiprintf_r+0x132>
 80046b6:	2301      	movs	r3, #1
 80046b8:	425b      	negs	r3, r3
 80046ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80046bc:	4e2d      	ldr	r6, [pc, #180]	@ (8004774 <_svfiprintf_r+0x1ec>)
 80046be:	2203      	movs	r2, #3
 80046c0:	0030      	movs	r0, r6
 80046c2:	7829      	ldrb	r1, [r5, #0]
 80046c4:	f000 fa02 	bl	8004acc <memchr>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d006      	beq.n	80046da <_svfiprintf_r+0x152>
 80046cc:	2340      	movs	r3, #64	@ 0x40
 80046ce:	1b80      	subs	r0, r0, r6
 80046d0:	4083      	lsls	r3, r0
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	3501      	adds	r5, #1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	7829      	ldrb	r1, [r5, #0]
 80046dc:	2206      	movs	r2, #6
 80046de:	4826      	ldr	r0, [pc, #152]	@ (8004778 <_svfiprintf_r+0x1f0>)
 80046e0:	1c6e      	adds	r6, r5, #1
 80046e2:	7621      	strb	r1, [r4, #24]
 80046e4:	f000 f9f2 	bl	8004acc <memchr>
 80046e8:	2800      	cmp	r0, #0
 80046ea:	d038      	beq.n	800475e <_svfiprintf_r+0x1d6>
 80046ec:	4b23      	ldr	r3, [pc, #140]	@ (800477c <_svfiprintf_r+0x1f4>)
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d122      	bne.n	8004738 <_svfiprintf_r+0x1b0>
 80046f2:	2207      	movs	r2, #7
 80046f4:	9b07      	ldr	r3, [sp, #28]
 80046f6:	3307      	adds	r3, #7
 80046f8:	4393      	bics	r3, r2
 80046fa:	3308      	adds	r3, #8
 80046fc:	9307      	str	r3, [sp, #28]
 80046fe:	6963      	ldr	r3, [r4, #20]
 8004700:	9a04      	ldr	r2, [sp, #16]
 8004702:	189b      	adds	r3, r3, r2
 8004704:	6163      	str	r3, [r4, #20]
 8004706:	e762      	b.n	80045ce <_svfiprintf_r+0x46>
 8004708:	4343      	muls	r3, r0
 800470a:	0035      	movs	r5, r6
 800470c:	2101      	movs	r1, #1
 800470e:	189b      	adds	r3, r3, r2
 8004710:	e7a4      	b.n	800465c <_svfiprintf_r+0xd4>
 8004712:	2300      	movs	r3, #0
 8004714:	200a      	movs	r0, #10
 8004716:	0019      	movs	r1, r3
 8004718:	3501      	adds	r5, #1
 800471a:	6063      	str	r3, [r4, #4]
 800471c:	782a      	ldrb	r2, [r5, #0]
 800471e:	1c6e      	adds	r6, r5, #1
 8004720:	3a30      	subs	r2, #48	@ 0x30
 8004722:	2a09      	cmp	r2, #9
 8004724:	d903      	bls.n	800472e <_svfiprintf_r+0x1a6>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0c8      	beq.n	80046bc <_svfiprintf_r+0x134>
 800472a:	9109      	str	r1, [sp, #36]	@ 0x24
 800472c:	e7c6      	b.n	80046bc <_svfiprintf_r+0x134>
 800472e:	4341      	muls	r1, r0
 8004730:	0035      	movs	r5, r6
 8004732:	2301      	movs	r3, #1
 8004734:	1889      	adds	r1, r1, r2
 8004736:	e7f1      	b.n	800471c <_svfiprintf_r+0x194>
 8004738:	aa07      	add	r2, sp, #28
 800473a:	9200      	str	r2, [sp, #0]
 800473c:	0021      	movs	r1, r4
 800473e:	003a      	movs	r2, r7
 8004740:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <_svfiprintf_r+0x1f8>)
 8004742:	9803      	ldr	r0, [sp, #12]
 8004744:	e000      	b.n	8004748 <_svfiprintf_r+0x1c0>
 8004746:	bf00      	nop
 8004748:	9004      	str	r0, [sp, #16]
 800474a:	9b04      	ldr	r3, [sp, #16]
 800474c:	3301      	adds	r3, #1
 800474e:	d1d6      	bne.n	80046fe <_svfiprintf_r+0x176>
 8004750:	89bb      	ldrh	r3, [r7, #12]
 8004752:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004754:	065b      	lsls	r3, r3, #25
 8004756:	d500      	bpl.n	800475a <_svfiprintf_r+0x1d2>
 8004758:	e72c      	b.n	80045b4 <_svfiprintf_r+0x2c>
 800475a:	b021      	add	sp, #132	@ 0x84
 800475c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800475e:	aa07      	add	r2, sp, #28
 8004760:	9200      	str	r2, [sp, #0]
 8004762:	0021      	movs	r1, r4
 8004764:	003a      	movs	r2, r7
 8004766:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <_svfiprintf_r+0x1f8>)
 8004768:	9803      	ldr	r0, [sp, #12]
 800476a:	f000 f87b 	bl	8004864 <_printf_i>
 800476e:	e7eb      	b.n	8004748 <_svfiprintf_r+0x1c0>
 8004770:	08004bc8 	.word	0x08004bc8
 8004774:	08004bce 	.word	0x08004bce
 8004778:	08004bd2 	.word	0x08004bd2
 800477c:	00000000 	.word	0x00000000
 8004780:	080044c9 	.word	0x080044c9

08004784 <_printf_common>:
 8004784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004786:	0016      	movs	r6, r2
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	688a      	ldr	r2, [r1, #8]
 800478c:	690b      	ldr	r3, [r1, #16]
 800478e:	000c      	movs	r4, r1
 8004790:	9000      	str	r0, [sp, #0]
 8004792:	4293      	cmp	r3, r2
 8004794:	da00      	bge.n	8004798 <_printf_common+0x14>
 8004796:	0013      	movs	r3, r2
 8004798:	0022      	movs	r2, r4
 800479a:	6033      	str	r3, [r6, #0]
 800479c:	3243      	adds	r2, #67	@ 0x43
 800479e:	7812      	ldrb	r2, [r2, #0]
 80047a0:	2a00      	cmp	r2, #0
 80047a2:	d001      	beq.n	80047a8 <_printf_common+0x24>
 80047a4:	3301      	adds	r3, #1
 80047a6:	6033      	str	r3, [r6, #0]
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	069b      	lsls	r3, r3, #26
 80047ac:	d502      	bpl.n	80047b4 <_printf_common+0x30>
 80047ae:	6833      	ldr	r3, [r6, #0]
 80047b0:	3302      	adds	r3, #2
 80047b2:	6033      	str	r3, [r6, #0]
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	2306      	movs	r3, #6
 80047b8:	0015      	movs	r5, r2
 80047ba:	401d      	ands	r5, r3
 80047bc:	421a      	tst	r2, r3
 80047be:	d027      	beq.n	8004810 <_printf_common+0x8c>
 80047c0:	0023      	movs	r3, r4
 80047c2:	3343      	adds	r3, #67	@ 0x43
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	1e5a      	subs	r2, r3, #1
 80047c8:	4193      	sbcs	r3, r2
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	0692      	lsls	r2, r2, #26
 80047ce:	d430      	bmi.n	8004832 <_printf_common+0xae>
 80047d0:	0022      	movs	r2, r4
 80047d2:	9901      	ldr	r1, [sp, #4]
 80047d4:	9800      	ldr	r0, [sp, #0]
 80047d6:	9d08      	ldr	r5, [sp, #32]
 80047d8:	3243      	adds	r2, #67	@ 0x43
 80047da:	47a8      	blx	r5
 80047dc:	3001      	adds	r0, #1
 80047de:	d025      	beq.n	800482c <_printf_common+0xa8>
 80047e0:	2206      	movs	r2, #6
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	2500      	movs	r5, #0
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d105      	bne.n	80047f8 <_printf_common+0x74>
 80047ec:	6833      	ldr	r3, [r6, #0]
 80047ee:	68e5      	ldr	r5, [r4, #12]
 80047f0:	1aed      	subs	r5, r5, r3
 80047f2:	43eb      	mvns	r3, r5
 80047f4:	17db      	asrs	r3, r3, #31
 80047f6:	401d      	ands	r5, r3
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	6922      	ldr	r2, [r4, #16]
 80047fc:	4293      	cmp	r3, r2
 80047fe:	dd01      	ble.n	8004804 <_printf_common+0x80>
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	18ed      	adds	r5, r5, r3
 8004804:	2600      	movs	r6, #0
 8004806:	42b5      	cmp	r5, r6
 8004808:	d120      	bne.n	800484c <_printf_common+0xc8>
 800480a:	2000      	movs	r0, #0
 800480c:	e010      	b.n	8004830 <_printf_common+0xac>
 800480e:	3501      	adds	r5, #1
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	6832      	ldr	r2, [r6, #0]
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	42ab      	cmp	r3, r5
 8004818:	ddd2      	ble.n	80047c0 <_printf_common+0x3c>
 800481a:	0022      	movs	r2, r4
 800481c:	2301      	movs	r3, #1
 800481e:	9901      	ldr	r1, [sp, #4]
 8004820:	9800      	ldr	r0, [sp, #0]
 8004822:	9f08      	ldr	r7, [sp, #32]
 8004824:	3219      	adds	r2, #25
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	d1f0      	bne.n	800480e <_printf_common+0x8a>
 800482c:	2001      	movs	r0, #1
 800482e:	4240      	negs	r0, r0
 8004830:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004832:	2030      	movs	r0, #48	@ 0x30
 8004834:	18e1      	adds	r1, r4, r3
 8004836:	3143      	adds	r1, #67	@ 0x43
 8004838:	7008      	strb	r0, [r1, #0]
 800483a:	0021      	movs	r1, r4
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	3145      	adds	r1, #69	@ 0x45
 8004840:	7809      	ldrb	r1, [r1, #0]
 8004842:	18a2      	adds	r2, r4, r2
 8004844:	3243      	adds	r2, #67	@ 0x43
 8004846:	3302      	adds	r3, #2
 8004848:	7011      	strb	r1, [r2, #0]
 800484a:	e7c1      	b.n	80047d0 <_printf_common+0x4c>
 800484c:	0022      	movs	r2, r4
 800484e:	2301      	movs	r3, #1
 8004850:	9901      	ldr	r1, [sp, #4]
 8004852:	9800      	ldr	r0, [sp, #0]
 8004854:	9f08      	ldr	r7, [sp, #32]
 8004856:	321a      	adds	r2, #26
 8004858:	47b8      	blx	r7
 800485a:	3001      	adds	r0, #1
 800485c:	d0e6      	beq.n	800482c <_printf_common+0xa8>
 800485e:	3601      	adds	r6, #1
 8004860:	e7d1      	b.n	8004806 <_printf_common+0x82>
	...

08004864 <_printf_i>:
 8004864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004866:	b08b      	sub	sp, #44	@ 0x2c
 8004868:	9206      	str	r2, [sp, #24]
 800486a:	000a      	movs	r2, r1
 800486c:	3243      	adds	r2, #67	@ 0x43
 800486e:	9307      	str	r3, [sp, #28]
 8004870:	9005      	str	r0, [sp, #20]
 8004872:	9203      	str	r2, [sp, #12]
 8004874:	7e0a      	ldrb	r2, [r1, #24]
 8004876:	000c      	movs	r4, r1
 8004878:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800487a:	2a78      	cmp	r2, #120	@ 0x78
 800487c:	d809      	bhi.n	8004892 <_printf_i+0x2e>
 800487e:	2a62      	cmp	r2, #98	@ 0x62
 8004880:	d80b      	bhi.n	800489a <_printf_i+0x36>
 8004882:	2a00      	cmp	r2, #0
 8004884:	d100      	bne.n	8004888 <_printf_i+0x24>
 8004886:	e0bc      	b.n	8004a02 <_printf_i+0x19e>
 8004888:	497b      	ldr	r1, [pc, #492]	@ (8004a78 <_printf_i+0x214>)
 800488a:	9104      	str	r1, [sp, #16]
 800488c:	2a58      	cmp	r2, #88	@ 0x58
 800488e:	d100      	bne.n	8004892 <_printf_i+0x2e>
 8004890:	e090      	b.n	80049b4 <_printf_i+0x150>
 8004892:	0025      	movs	r5, r4
 8004894:	3542      	adds	r5, #66	@ 0x42
 8004896:	702a      	strb	r2, [r5, #0]
 8004898:	e022      	b.n	80048e0 <_printf_i+0x7c>
 800489a:	0010      	movs	r0, r2
 800489c:	3863      	subs	r0, #99	@ 0x63
 800489e:	2815      	cmp	r0, #21
 80048a0:	d8f7      	bhi.n	8004892 <_printf_i+0x2e>
 80048a2:	f7fb fc39 	bl	8000118 <__gnu_thumb1_case_shi>
 80048a6:	0016      	.short	0x0016
 80048a8:	fff6001f 	.word	0xfff6001f
 80048ac:	fff6fff6 	.word	0xfff6fff6
 80048b0:	001ffff6 	.word	0x001ffff6
 80048b4:	fff6fff6 	.word	0xfff6fff6
 80048b8:	fff6fff6 	.word	0xfff6fff6
 80048bc:	003600a1 	.word	0x003600a1
 80048c0:	fff60080 	.word	0xfff60080
 80048c4:	00b2fff6 	.word	0x00b2fff6
 80048c8:	0036fff6 	.word	0x0036fff6
 80048cc:	fff6fff6 	.word	0xfff6fff6
 80048d0:	0084      	.short	0x0084
 80048d2:	0025      	movs	r5, r4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	3542      	adds	r5, #66	@ 0x42
 80048d8:	1d11      	adds	r1, r2, #4
 80048da:	6019      	str	r1, [r3, #0]
 80048dc:	6813      	ldr	r3, [r2, #0]
 80048de:	702b      	strb	r3, [r5, #0]
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0a0      	b.n	8004a26 <_printf_i+0x1c2>
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	6809      	ldr	r1, [r1, #0]
 80048e8:	1d02      	adds	r2, r0, #4
 80048ea:	060d      	lsls	r5, r1, #24
 80048ec:	d50b      	bpl.n	8004906 <_printf_i+0xa2>
 80048ee:	6806      	ldr	r6, [r0, #0]
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	2e00      	cmp	r6, #0
 80048f4:	da03      	bge.n	80048fe <_printf_i+0x9a>
 80048f6:	232d      	movs	r3, #45	@ 0x2d
 80048f8:	9a03      	ldr	r2, [sp, #12]
 80048fa:	4276      	negs	r6, r6
 80048fc:	7013      	strb	r3, [r2, #0]
 80048fe:	4b5e      	ldr	r3, [pc, #376]	@ (8004a78 <_printf_i+0x214>)
 8004900:	270a      	movs	r7, #10
 8004902:	9304      	str	r3, [sp, #16]
 8004904:	e018      	b.n	8004938 <_printf_i+0xd4>
 8004906:	6806      	ldr	r6, [r0, #0]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	0649      	lsls	r1, r1, #25
 800490c:	d5f1      	bpl.n	80048f2 <_printf_i+0x8e>
 800490e:	b236      	sxth	r6, r6
 8004910:	e7ef      	b.n	80048f2 <_printf_i+0x8e>
 8004912:	6808      	ldr	r0, [r1, #0]
 8004914:	6819      	ldr	r1, [r3, #0]
 8004916:	c940      	ldmia	r1!, {r6}
 8004918:	0605      	lsls	r5, r0, #24
 800491a:	d402      	bmi.n	8004922 <_printf_i+0xbe>
 800491c:	0640      	lsls	r0, r0, #25
 800491e:	d500      	bpl.n	8004922 <_printf_i+0xbe>
 8004920:	b2b6      	uxth	r6, r6
 8004922:	6019      	str	r1, [r3, #0]
 8004924:	4b54      	ldr	r3, [pc, #336]	@ (8004a78 <_printf_i+0x214>)
 8004926:	270a      	movs	r7, #10
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	2a6f      	cmp	r2, #111	@ 0x6f
 800492c:	d100      	bne.n	8004930 <_printf_i+0xcc>
 800492e:	3f02      	subs	r7, #2
 8004930:	0023      	movs	r3, r4
 8004932:	2200      	movs	r2, #0
 8004934:	3343      	adds	r3, #67	@ 0x43
 8004936:	701a      	strb	r2, [r3, #0]
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	60a3      	str	r3, [r4, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	db03      	blt.n	8004948 <_printf_i+0xe4>
 8004940:	2104      	movs	r1, #4
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	438a      	bics	r2, r1
 8004946:	6022      	str	r2, [r4, #0]
 8004948:	2e00      	cmp	r6, #0
 800494a:	d102      	bne.n	8004952 <_printf_i+0xee>
 800494c:	9d03      	ldr	r5, [sp, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00c      	beq.n	800496c <_printf_i+0x108>
 8004952:	9d03      	ldr	r5, [sp, #12]
 8004954:	0030      	movs	r0, r6
 8004956:	0039      	movs	r1, r7
 8004958:	f7fb fc6e 	bl	8000238 <__aeabi_uidivmod>
 800495c:	9b04      	ldr	r3, [sp, #16]
 800495e:	3d01      	subs	r5, #1
 8004960:	5c5b      	ldrb	r3, [r3, r1]
 8004962:	702b      	strb	r3, [r5, #0]
 8004964:	0033      	movs	r3, r6
 8004966:	0006      	movs	r6, r0
 8004968:	429f      	cmp	r7, r3
 800496a:	d9f3      	bls.n	8004954 <_printf_i+0xf0>
 800496c:	2f08      	cmp	r7, #8
 800496e:	d109      	bne.n	8004984 <_printf_i+0x120>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	07db      	lsls	r3, r3, #31
 8004974:	d506      	bpl.n	8004984 <_printf_i+0x120>
 8004976:	6862      	ldr	r2, [r4, #4]
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	dc02      	bgt.n	8004984 <_printf_i+0x120>
 800497e:	2330      	movs	r3, #48	@ 0x30
 8004980:	3d01      	subs	r5, #1
 8004982:	702b      	strb	r3, [r5, #0]
 8004984:	9b03      	ldr	r3, [sp, #12]
 8004986:	1b5b      	subs	r3, r3, r5
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	9b07      	ldr	r3, [sp, #28]
 800498c:	0021      	movs	r1, r4
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	9805      	ldr	r0, [sp, #20]
 8004992:	9b06      	ldr	r3, [sp, #24]
 8004994:	aa09      	add	r2, sp, #36	@ 0x24
 8004996:	f7ff fef5 	bl	8004784 <_printf_common>
 800499a:	3001      	adds	r0, #1
 800499c:	d148      	bne.n	8004a30 <_printf_i+0x1cc>
 800499e:	2001      	movs	r0, #1
 80049a0:	4240      	negs	r0, r0
 80049a2:	b00b      	add	sp, #44	@ 0x2c
 80049a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a6:	2220      	movs	r2, #32
 80049a8:	6809      	ldr	r1, [r1, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	6022      	str	r2, [r4, #0]
 80049ae:	2278      	movs	r2, #120	@ 0x78
 80049b0:	4932      	ldr	r1, [pc, #200]	@ (8004a7c <_printf_i+0x218>)
 80049b2:	9104      	str	r1, [sp, #16]
 80049b4:	0021      	movs	r1, r4
 80049b6:	3145      	adds	r1, #69	@ 0x45
 80049b8:	700a      	strb	r2, [r1, #0]
 80049ba:	6819      	ldr	r1, [r3, #0]
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	c940      	ldmia	r1!, {r6}
 80049c0:	0610      	lsls	r0, r2, #24
 80049c2:	d402      	bmi.n	80049ca <_printf_i+0x166>
 80049c4:	0650      	lsls	r0, r2, #25
 80049c6:	d500      	bpl.n	80049ca <_printf_i+0x166>
 80049c8:	b2b6      	uxth	r6, r6
 80049ca:	6019      	str	r1, [r3, #0]
 80049cc:	07d3      	lsls	r3, r2, #31
 80049ce:	d502      	bpl.n	80049d6 <_printf_i+0x172>
 80049d0:	2320      	movs	r3, #32
 80049d2:	4313      	orrs	r3, r2
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	d001      	beq.n	80049de <_printf_i+0x17a>
 80049da:	2710      	movs	r7, #16
 80049dc:	e7a8      	b.n	8004930 <_printf_i+0xcc>
 80049de:	2220      	movs	r2, #32
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	4393      	bics	r3, r2
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	e7f8      	b.n	80049da <_printf_i+0x176>
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	680d      	ldr	r5, [r1, #0]
 80049ec:	1d10      	adds	r0, r2, #4
 80049ee:	6949      	ldr	r1, [r1, #20]
 80049f0:	6018      	str	r0, [r3, #0]
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	062e      	lsls	r6, r5, #24
 80049f6:	d501      	bpl.n	80049fc <_printf_i+0x198>
 80049f8:	6019      	str	r1, [r3, #0]
 80049fa:	e002      	b.n	8004a02 <_printf_i+0x19e>
 80049fc:	066d      	lsls	r5, r5, #25
 80049fe:	d5fb      	bpl.n	80049f8 <_printf_i+0x194>
 8004a00:	8019      	strh	r1, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	9d03      	ldr	r5, [sp, #12]
 8004a06:	6123      	str	r3, [r4, #16]
 8004a08:	e7bf      	b.n	800498a <_printf_i+0x126>
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	1d11      	adds	r1, r2, #4
 8004a0e:	6019      	str	r1, [r3, #0]
 8004a10:	6815      	ldr	r5, [r2, #0]
 8004a12:	2100      	movs	r1, #0
 8004a14:	0028      	movs	r0, r5
 8004a16:	6862      	ldr	r2, [r4, #4]
 8004a18:	f000 f858 	bl	8004acc <memchr>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d001      	beq.n	8004a24 <_printf_i+0x1c0>
 8004a20:	1b40      	subs	r0, r0, r5
 8004a22:	6060      	str	r0, [r4, #4]
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	6123      	str	r3, [r4, #16]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9a03      	ldr	r2, [sp, #12]
 8004a2c:	7013      	strb	r3, [r2, #0]
 8004a2e:	e7ac      	b.n	800498a <_printf_i+0x126>
 8004a30:	002a      	movs	r2, r5
 8004a32:	6923      	ldr	r3, [r4, #16]
 8004a34:	9906      	ldr	r1, [sp, #24]
 8004a36:	9805      	ldr	r0, [sp, #20]
 8004a38:	9d07      	ldr	r5, [sp, #28]
 8004a3a:	47a8      	blx	r5
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d0ae      	beq.n	800499e <_printf_i+0x13a>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	079b      	lsls	r3, r3, #30
 8004a44:	d415      	bmi.n	8004a72 <_printf_i+0x20e>
 8004a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a48:	68e0      	ldr	r0, [r4, #12]
 8004a4a:	4298      	cmp	r0, r3
 8004a4c:	daa9      	bge.n	80049a2 <_printf_i+0x13e>
 8004a4e:	0018      	movs	r0, r3
 8004a50:	e7a7      	b.n	80049a2 <_printf_i+0x13e>
 8004a52:	0022      	movs	r2, r4
 8004a54:	2301      	movs	r3, #1
 8004a56:	9906      	ldr	r1, [sp, #24]
 8004a58:	9805      	ldr	r0, [sp, #20]
 8004a5a:	9e07      	ldr	r6, [sp, #28]
 8004a5c:	3219      	adds	r2, #25
 8004a5e:	47b0      	blx	r6
 8004a60:	3001      	adds	r0, #1
 8004a62:	d09c      	beq.n	800499e <_printf_i+0x13a>
 8004a64:	3501      	adds	r5, #1
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	dcf0      	bgt.n	8004a52 <_printf_i+0x1ee>
 8004a70:	e7e9      	b.n	8004a46 <_printf_i+0x1e2>
 8004a72:	2500      	movs	r5, #0
 8004a74:	e7f7      	b.n	8004a66 <_printf_i+0x202>
 8004a76:	46c0      	nop			@ (mov r8, r8)
 8004a78:	08004bd9 	.word	0x08004bd9
 8004a7c:	08004bea 	.word	0x08004bea

08004a80 <memmove>:
 8004a80:	b510      	push	{r4, lr}
 8004a82:	4288      	cmp	r0, r1
 8004a84:	d806      	bhi.n	8004a94 <memmove+0x14>
 8004a86:	2300      	movs	r3, #0
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d008      	beq.n	8004a9e <memmove+0x1e>
 8004a8c:	5ccc      	ldrb	r4, [r1, r3]
 8004a8e:	54c4      	strb	r4, [r0, r3]
 8004a90:	3301      	adds	r3, #1
 8004a92:	e7f9      	b.n	8004a88 <memmove+0x8>
 8004a94:	188b      	adds	r3, r1, r2
 8004a96:	4298      	cmp	r0, r3
 8004a98:	d2f5      	bcs.n	8004a86 <memmove+0x6>
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	d200      	bcs.n	8004aa0 <memmove+0x20>
 8004a9e:	bd10      	pop	{r4, pc}
 8004aa0:	5c8b      	ldrb	r3, [r1, r2]
 8004aa2:	5483      	strb	r3, [r0, r2]
 8004aa4:	e7f9      	b.n	8004a9a <memmove+0x1a>
	...

08004aa8 <_sbrk_r>:
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	b570      	push	{r4, r5, r6, lr}
 8004aac:	4d06      	ldr	r5, [pc, #24]	@ (8004ac8 <_sbrk_r+0x20>)
 8004aae:	0004      	movs	r4, r0
 8004ab0:	0008      	movs	r0, r1
 8004ab2:	602b      	str	r3, [r5, #0]
 8004ab4:	f7fc f87e 	bl	8000bb4 <_sbrk>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d103      	bne.n	8004ac4 <_sbrk_r+0x1c>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d000      	beq.n	8004ac4 <_sbrk_r+0x1c>
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	20000450 	.word	0x20000450

08004acc <memchr>:
 8004acc:	b2c9      	uxtb	r1, r1
 8004ace:	1882      	adds	r2, r0, r2
 8004ad0:	4290      	cmp	r0, r2
 8004ad2:	d101      	bne.n	8004ad8 <memchr+0xc>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	4770      	bx	lr
 8004ad8:	7803      	ldrb	r3, [r0, #0]
 8004ada:	428b      	cmp	r3, r1
 8004adc:	d0fb      	beq.n	8004ad6 <memchr+0xa>
 8004ade:	3001      	adds	r0, #1
 8004ae0:	e7f6      	b.n	8004ad0 <memchr+0x4>

08004ae2 <memcpy>:
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d100      	bne.n	8004aec <memcpy+0xa>
 8004aea:	bd10      	pop	{r4, pc}
 8004aec:	5ccc      	ldrb	r4, [r1, r3]
 8004aee:	54c4      	strb	r4, [r0, r3]
 8004af0:	3301      	adds	r3, #1
 8004af2:	e7f8      	b.n	8004ae6 <memcpy+0x4>

08004af4 <_realloc_r>:
 8004af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004af6:	0006      	movs	r6, r0
 8004af8:	000c      	movs	r4, r1
 8004afa:	0015      	movs	r5, r2
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d105      	bne.n	8004b0c <_realloc_r+0x18>
 8004b00:	0011      	movs	r1, r2
 8004b02:	f7ff fc51 	bl	80043a8 <_malloc_r>
 8004b06:	0004      	movs	r4, r0
 8004b08:	0020      	movs	r0, r4
 8004b0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	d103      	bne.n	8004b18 <_realloc_r+0x24>
 8004b10:	f7ff fbde 	bl	80042d0 <_free_r>
 8004b14:	2400      	movs	r4, #0
 8004b16:	e7f7      	b.n	8004b08 <_realloc_r+0x14>
 8004b18:	f000 f81b 	bl	8004b52 <_malloc_usable_size_r>
 8004b1c:	0007      	movs	r7, r0
 8004b1e:	4285      	cmp	r5, r0
 8004b20:	d802      	bhi.n	8004b28 <_realloc_r+0x34>
 8004b22:	0843      	lsrs	r3, r0, #1
 8004b24:	42ab      	cmp	r3, r5
 8004b26:	d3ef      	bcc.n	8004b08 <_realloc_r+0x14>
 8004b28:	0029      	movs	r1, r5
 8004b2a:	0030      	movs	r0, r6
 8004b2c:	f7ff fc3c 	bl	80043a8 <_malloc_r>
 8004b30:	9001      	str	r0, [sp, #4]
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d0ee      	beq.n	8004b14 <_realloc_r+0x20>
 8004b36:	002a      	movs	r2, r5
 8004b38:	42bd      	cmp	r5, r7
 8004b3a:	d900      	bls.n	8004b3e <_realloc_r+0x4a>
 8004b3c:	003a      	movs	r2, r7
 8004b3e:	0021      	movs	r1, r4
 8004b40:	9801      	ldr	r0, [sp, #4]
 8004b42:	f7ff ffce 	bl	8004ae2 <memcpy>
 8004b46:	0021      	movs	r1, r4
 8004b48:	0030      	movs	r0, r6
 8004b4a:	f7ff fbc1 	bl	80042d0 <_free_r>
 8004b4e:	9c01      	ldr	r4, [sp, #4]
 8004b50:	e7da      	b.n	8004b08 <_realloc_r+0x14>

08004b52 <_malloc_usable_size_r>:
 8004b52:	1f0b      	subs	r3, r1, #4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	1f18      	subs	r0, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	da01      	bge.n	8004b60 <_malloc_usable_size_r+0xe>
 8004b5c:	580b      	ldr	r3, [r1, r0]
 8004b5e:	18c0      	adds	r0, r0, r3
 8004b60:	4770      	bx	lr
	...

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
