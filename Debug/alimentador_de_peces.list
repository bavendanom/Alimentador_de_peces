
alimentador_de_peces.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08009da8  08009da8  0000ada8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1c0  0800a1c0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1c0  0800a1c0  0000c1d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1c0  0800a1c0  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1c0  0800a1c0  0000b1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1c4  0800a1c4  0000b1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a1c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200001d4  0800a39c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  0800a39c  0000c668  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a2e  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad2  00000000  00000000  0001fc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00022700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed3  00000000  00000000  000239d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cba  00000000  00000000  000248a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f85  00000000  00000000  0003755d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d453  00000000  00000000  0004f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc935  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005610  00000000  00000000  000bc978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000c1f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009d90 	.word	0x08009d90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08009d90 	.word	0x08009d90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff69 	bl	8001314 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fea9 	bl	80011a4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff5b 	bl	8001314 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff51 	bl	8001314 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fed3 	bl	800122c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fec9 	bl	800122c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 ff2a 	bl	80023b8 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fdf0 	bl	80023b8 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fae0 	bl	800024c <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faca 	bl	800024c <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa6d 	bl	800024c <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa60 	bl	800024c <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 fabb 	bl	80023b8 <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 fa9a 	bl	80023b8 <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	08009dd8 	.word	0x08009dd8
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f9cd 	bl	80023b8 <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f9bb 	bl	80023b8 <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 ff10 	bl	80023b8 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 feec 	bl	80023b8 <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fd75 	bl	80023b8 <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fd63 	bl	80023b8 <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fcab 	bl	80023b8 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fb63 	bl	80023b8 <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_dcmpun>:
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	46c6      	mov	lr, r8
 80020c4:	031e      	lsls	r6, r3, #12
 80020c6:	0b36      	lsrs	r6, r6, #12
 80020c8:	46b0      	mov	r8, r6
 80020ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020cc:	030c      	lsls	r4, r1, #12
 80020ce:	004d      	lsls	r5, r1, #1
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	b500      	push	{lr}
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d6d      	lsrs	r5, r5, #21
 80020d8:	0d7f      	lsrs	r7, r7, #21
 80020da:	42b5      	cmp	r5, r6
 80020dc:	d00b      	beq.n	80020f6 <__aeabi_dcmpun+0x36>
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	428f      	cmp	r7, r1
 80020e4:	d104      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020e6:	4646      	mov	r6, r8
 80020e8:	4316      	orrs	r6, r2
 80020ea:	0030      	movs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bc80      	pop	{r7}
 80020f2:	46b8      	mov	r8, r7
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	4304      	orrs	r4, r0
 80020f8:	2001      	movs	r0, #1
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d1f8      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020fe:	e7ee      	b.n	80020de <__aeabi_dcmpun+0x1e>
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2iz>:
 8002104:	000b      	movs	r3, r1
 8002106:	0002      	movs	r2, r0
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4d16      	ldr	r5, [pc, #88]	@ (8002164 <__aeabi_d2iz+0x60>)
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	b082      	sub	sp, #8
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d49      	lsrs	r1, r1, #21
 800211c:	0fde      	lsrs	r6, r3, #31
 800211e:	42a9      	cmp	r1, r5
 8002120:	dd04      	ble.n	800212c <__aeabi_d2iz+0x28>
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <__aeabi_d2iz+0x64>)
 8002124:	4281      	cmp	r1, r0
 8002126:	dd03      	ble.n	8002130 <__aeabi_d2iz+0x2c>
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <__aeabi_d2iz+0x68>)
 800212a:	18f0      	adds	r0, r6, r3
 800212c:	b002      	add	sp, #8
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	2080      	movs	r0, #128	@ 0x80
 8002132:	0340      	lsls	r0, r0, #13
 8002134:	4320      	orrs	r0, r4
 8002136:	4c0e      	ldr	r4, [pc, #56]	@ (8002170 <__aeabi_d2iz+0x6c>)
 8002138:	1a64      	subs	r4, r4, r1
 800213a:	2c1f      	cmp	r4, #31
 800213c:	dd08      	ble.n	8002150 <__aeabi_d2iz+0x4c>
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <__aeabi_d2iz+0x70>)
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	40d8      	lsrs	r0, r3
 8002144:	0003      	movs	r3, r0
 8002146:	4258      	negs	r0, r3
 8002148:	2e00      	cmp	r6, #0
 800214a:	d1ef      	bne.n	800212c <__aeabi_d2iz+0x28>
 800214c:	0018      	movs	r0, r3
 800214e:	e7ed      	b.n	800212c <__aeabi_d2iz+0x28>
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <__aeabi_d2iz+0x74>)
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	469c      	mov	ip, r3
 8002156:	0003      	movs	r3, r0
 8002158:	4461      	add	r1, ip
 800215a:	408b      	lsls	r3, r1
 800215c:	40e2      	lsrs	r2, r4
 800215e:	4313      	orrs	r3, r2
 8002160:	e7f1      	b.n	8002146 <__aeabi_d2iz+0x42>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	000003fe 	.word	0x000003fe
 8002168:	0000041d 	.word	0x0000041d
 800216c:	7fffffff 	.word	0x7fffffff
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	fffffbed 	.word	0xfffffbed

0800217c <__aeabi_i2d>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	2800      	cmp	r0, #0
 8002180:	d016      	beq.n	80021b0 <__aeabi_i2d+0x34>
 8002182:	17c3      	asrs	r3, r0, #31
 8002184:	18c5      	adds	r5, r0, r3
 8002186:	405d      	eors	r5, r3
 8002188:	0fc4      	lsrs	r4, r0, #31
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f914 	bl	80023b8 <__clzsi2>
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <__aeabi_i2d+0x58>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	280a      	cmp	r0, #10
 800219a:	dc14      	bgt.n	80021c6 <__aeabi_i2d+0x4a>
 800219c:	0002      	movs	r2, r0
 800219e:	002e      	movs	r6, r5
 80021a0:	3215      	adds	r2, #21
 80021a2:	4096      	lsls	r6, r2
 80021a4:	220b      	movs	r2, #11
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	40d5      	lsrs	r5, r2
 80021aa:	032d      	lsls	r5, r5, #12
 80021ac:	0b2d      	lsrs	r5, r5, #12
 80021ae:	e003      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021b0:	2400      	movs	r4, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2500      	movs	r5, #0
 80021b6:	2600      	movs	r6, #0
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	432b      	orrs	r3, r5
 80021bc:	07e4      	lsls	r4, r4, #31
 80021be:	4323      	orrs	r3, r4
 80021c0:	0030      	movs	r0, r6
 80021c2:	0019      	movs	r1, r3
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	380b      	subs	r0, #11
 80021c8:	4085      	lsls	r5, r0
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	2600      	movs	r6, #0
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	e7f2      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	0000041e 	.word	0x0000041e

080021d8 <__aeabi_ui2d>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	1e04      	subs	r4, r0, #0
 80021dc:	d010      	beq.n	8002200 <__aeabi_ui2d+0x28>
 80021de:	f000 f8eb 	bl	80023b8 <__clzsi2>
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <__aeabi_ui2d+0x44>)
 80021e4:	1a1b      	subs	r3, r3, r0
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	280a      	cmp	r0, #10
 80021ec:	dc0f      	bgt.n	800220e <__aeabi_ui2d+0x36>
 80021ee:	220b      	movs	r2, #11
 80021f0:	0021      	movs	r1, r4
 80021f2:	1a12      	subs	r2, r2, r0
 80021f4:	40d1      	lsrs	r1, r2
 80021f6:	3015      	adds	r0, #21
 80021f8:	030a      	lsls	r2, r1, #12
 80021fa:	4084      	lsls	r4, r0
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	e001      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4313      	orrs	r3, r2
 8002208:	0020      	movs	r0, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd10      	pop	{r4, pc}
 800220e:	0022      	movs	r2, r4
 8002210:	380b      	subs	r0, #11
 8002212:	4082      	lsls	r2, r0
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	2400      	movs	r4, #0
 8002218:	0b12      	lsrs	r2, r2, #12
 800221a:	e7f3      	b.n	8002204 <__aeabi_ui2d+0x2c>
 800221c:	0000041e 	.word	0x0000041e

08002220 <__aeabi_f2d>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	0242      	lsls	r2, r0, #9
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	0fc4      	lsrs	r4, r0, #31
 8002228:	20fe      	movs	r0, #254	@ 0xfe
 800222a:	0e1b      	lsrs	r3, r3, #24
 800222c:	1c59      	adds	r1, r3, #1
 800222e:	0a55      	lsrs	r5, r2, #9
 8002230:	4208      	tst	r0, r1
 8002232:	d00c      	beq.n	800224e <__aeabi_f2d+0x2e>
 8002234:	21e0      	movs	r1, #224	@ 0xe0
 8002236:	0089      	lsls	r1, r1, #2
 8002238:	468c      	mov	ip, r1
 800223a:	076d      	lsls	r5, r5, #29
 800223c:	0b12      	lsrs	r2, r2, #12
 800223e:	4463      	add	r3, ip
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	4313      	orrs	r3, r2
 8002244:	07e4      	lsls	r4, r4, #31
 8002246:	4323      	orrs	r3, r4
 8002248:	0028      	movs	r0, r5
 800224a:	0019      	movs	r1, r3
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	2b00      	cmp	r3, #0
 8002250:	d114      	bne.n	800227c <__aeabi_f2d+0x5c>
 8002252:	2d00      	cmp	r5, #0
 8002254:	d01b      	beq.n	800228e <__aeabi_f2d+0x6e>
 8002256:	0028      	movs	r0, r5
 8002258:	f000 f8ae 	bl	80023b8 <__clzsi2>
 800225c:	280a      	cmp	r0, #10
 800225e:	dc1c      	bgt.n	800229a <__aeabi_f2d+0x7a>
 8002260:	230b      	movs	r3, #11
 8002262:	002a      	movs	r2, r5
 8002264:	1a1b      	subs	r3, r3, r0
 8002266:	40da      	lsrs	r2, r3
 8002268:	0003      	movs	r3, r0
 800226a:	3315      	adds	r3, #21
 800226c:	409d      	lsls	r5, r3
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <__aeabi_f2d+0x88>)
 8002270:	0312      	lsls	r2, r2, #12
 8002272:	1a1b      	subs	r3, r3, r0
 8002274:	055b      	lsls	r3, r3, #21
 8002276:	0b12      	lsrs	r2, r2, #12
 8002278:	0d5b      	lsrs	r3, r3, #21
 800227a:	e7e1      	b.n	8002240 <__aeabi_f2d+0x20>
 800227c:	2d00      	cmp	r5, #0
 800227e:	d009      	beq.n	8002294 <__aeabi_f2d+0x74>
 8002280:	0b13      	lsrs	r3, r2, #12
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	0312      	lsls	r2, r2, #12
 8002286:	431a      	orrs	r2, r3
 8002288:	076d      	lsls	r5, r5, #29
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <__aeabi_f2d+0x8c>)
 800228c:	e7d8      	b.n	8002240 <__aeabi_f2d+0x20>
 800228e:	2300      	movs	r3, #0
 8002290:	2200      	movs	r2, #0
 8002292:	e7d5      	b.n	8002240 <__aeabi_f2d+0x20>
 8002294:	2200      	movs	r2, #0
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <__aeabi_f2d+0x8c>)
 8002298:	e7d2      	b.n	8002240 <__aeabi_f2d+0x20>
 800229a:	0003      	movs	r3, r0
 800229c:	002a      	movs	r2, r5
 800229e:	3b0b      	subs	r3, #11
 80022a0:	409a      	lsls	r2, r3
 80022a2:	2500      	movs	r5, #0
 80022a4:	e7e3      	b.n	800226e <__aeabi_f2d+0x4e>
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	00000389 	.word	0x00000389
 80022ac:	000007ff 	.word	0x000007ff

080022b0 <__aeabi_d2f>:
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	004b      	lsls	r3, r1, #1
 80022b4:	030f      	lsls	r7, r1, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	4c3b      	ldr	r4, [pc, #236]	@ (80023a8 <__aeabi_d2f+0xf8>)
 80022ba:	0f45      	lsrs	r5, r0, #29
 80022bc:	b083      	sub	sp, #12
 80022be:	0a7f      	lsrs	r7, r7, #9
 80022c0:	1c5e      	adds	r6, r3, #1
 80022c2:	432f      	orrs	r7, r5
 80022c4:	9000      	str	r0, [sp, #0]
 80022c6:	9101      	str	r1, [sp, #4]
 80022c8:	0fca      	lsrs	r2, r1, #31
 80022ca:	00c5      	lsls	r5, r0, #3
 80022cc:	4226      	tst	r6, r4
 80022ce:	d00b      	beq.n	80022e8 <__aeabi_d2f+0x38>
 80022d0:	4936      	ldr	r1, [pc, #216]	@ (80023ac <__aeabi_d2f+0xfc>)
 80022d2:	185c      	adds	r4, r3, r1
 80022d4:	2cfe      	cmp	r4, #254	@ 0xfe
 80022d6:	dd13      	ble.n	8002300 <__aeabi_d2f+0x50>
 80022d8:	20ff      	movs	r0, #255	@ 0xff
 80022da:	2300      	movs	r3, #0
 80022dc:	05c0      	lsls	r0, r0, #23
 80022de:	4318      	orrs	r0, r3
 80022e0:	07d2      	lsls	r2, r2, #31
 80022e2:	4310      	orrs	r0, r2
 80022e4:	b003      	add	sp, #12
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <__aeabi_d2f+0x42>
 80022ec:	2000      	movs	r0, #0
 80022ee:	2300      	movs	r3, #0
 80022f0:	e7f4      	b.n	80022dc <__aeabi_d2f+0x2c>
 80022f2:	433d      	orrs	r5, r7
 80022f4:	d0f0      	beq.n	80022d8 <__aeabi_d2f+0x28>
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	03db      	lsls	r3, r3, #15
 80022fa:	20ff      	movs	r0, #255	@ 0xff
 80022fc:	433b      	orrs	r3, r7
 80022fe:	e7ed      	b.n	80022dc <__aeabi_d2f+0x2c>
 8002300:	2c00      	cmp	r4, #0
 8002302:	dd14      	ble.n	800232e <__aeabi_d2f+0x7e>
 8002304:	9b00      	ldr	r3, [sp, #0]
 8002306:	00ff      	lsls	r7, r7, #3
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	4183      	sbcs	r3, r0
 800230e:	0f69      	lsrs	r1, r5, #29
 8002310:	433b      	orrs	r3, r7
 8002312:	430b      	orrs	r3, r1
 8002314:	0759      	lsls	r1, r3, #29
 8002316:	d041      	beq.n	800239c <__aeabi_d2f+0xec>
 8002318:	210f      	movs	r1, #15
 800231a:	4019      	ands	r1, r3
 800231c:	2904      	cmp	r1, #4
 800231e:	d028      	beq.n	8002372 <__aeabi_d2f+0xc2>
 8002320:	3304      	adds	r3, #4
 8002322:	0159      	lsls	r1, r3, #5
 8002324:	d525      	bpl.n	8002372 <__aeabi_d2f+0xc2>
 8002326:	3401      	adds	r4, #1
 8002328:	2300      	movs	r3, #0
 800232a:	b2e0      	uxtb	r0, r4
 800232c:	e7d6      	b.n	80022dc <__aeabi_d2f+0x2c>
 800232e:	0021      	movs	r1, r4
 8002330:	3117      	adds	r1, #23
 8002332:	dbdb      	blt.n	80022ec <__aeabi_d2f+0x3c>
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	201e      	movs	r0, #30
 8002338:	0409      	lsls	r1, r1, #16
 800233a:	4339      	orrs	r1, r7
 800233c:	1b00      	subs	r0, r0, r4
 800233e:	281f      	cmp	r0, #31
 8002340:	dd1b      	ble.n	800237a <__aeabi_d2f+0xca>
 8002342:	2602      	movs	r6, #2
 8002344:	4276      	negs	r6, r6
 8002346:	1b34      	subs	r4, r6, r4
 8002348:	000e      	movs	r6, r1
 800234a:	40e6      	lsrs	r6, r4
 800234c:	0034      	movs	r4, r6
 800234e:	2820      	cmp	r0, #32
 8002350:	d004      	beq.n	800235c <__aeabi_d2f+0xac>
 8002352:	4817      	ldr	r0, [pc, #92]	@ (80023b0 <__aeabi_d2f+0x100>)
 8002354:	4684      	mov	ip, r0
 8002356:	4463      	add	r3, ip
 8002358:	4099      	lsls	r1, r3
 800235a:	430d      	orrs	r5, r1
 800235c:	002b      	movs	r3, r5
 800235e:	1e59      	subs	r1, r3, #1
 8002360:	418b      	sbcs	r3, r1
 8002362:	4323      	orrs	r3, r4
 8002364:	0759      	lsls	r1, r3, #29
 8002366:	d015      	beq.n	8002394 <__aeabi_d2f+0xe4>
 8002368:	210f      	movs	r1, #15
 800236a:	2400      	movs	r4, #0
 800236c:	4019      	ands	r1, r3
 800236e:	2904      	cmp	r1, #4
 8002370:	d117      	bne.n	80023a2 <__aeabi_d2f+0xf2>
 8002372:	019b      	lsls	r3, r3, #6
 8002374:	0a5b      	lsrs	r3, r3, #9
 8002376:	b2e0      	uxtb	r0, r4
 8002378:	e7b0      	b.n	80022dc <__aeabi_d2f+0x2c>
 800237a:	4c0e      	ldr	r4, [pc, #56]	@ (80023b4 <__aeabi_d2f+0x104>)
 800237c:	191c      	adds	r4, r3, r4
 800237e:	002b      	movs	r3, r5
 8002380:	40a5      	lsls	r5, r4
 8002382:	40c3      	lsrs	r3, r0
 8002384:	40a1      	lsls	r1, r4
 8002386:	1e68      	subs	r0, r5, #1
 8002388:	4185      	sbcs	r5, r0
 800238a:	4329      	orrs	r1, r5
 800238c:	430b      	orrs	r3, r1
 800238e:	2400      	movs	r4, #0
 8002390:	0759      	lsls	r1, r3, #29
 8002392:	d1c1      	bne.n	8002318 <__aeabi_d2f+0x68>
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	2000      	movs	r0, #0
 8002398:	0a5b      	lsrs	r3, r3, #9
 800239a:	e79f      	b.n	80022dc <__aeabi_d2f+0x2c>
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	b2e0      	uxtb	r0, r4
 80023a0:	e79c      	b.n	80022dc <__aeabi_d2f+0x2c>
 80023a2:	3304      	adds	r3, #4
 80023a4:	e7e5      	b.n	8002372 <__aeabi_d2f+0xc2>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	000007fe 	.word	0x000007fe
 80023ac:	fffffc80 	.word	0xfffffc80
 80023b0:	fffffca2 	.word	0xfffffca2
 80023b4:	fffffc82 	.word	0xfffffc82

080023b8 <__clzsi2>:
 80023b8:	211c      	movs	r1, #28
 80023ba:	2301      	movs	r3, #1
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	4298      	cmp	r0, r3
 80023c0:	d301      	bcc.n	80023c6 <__clzsi2+0xe>
 80023c2:	0c00      	lsrs	r0, r0, #16
 80023c4:	3910      	subs	r1, #16
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	4298      	cmp	r0, r3
 80023ca:	d301      	bcc.n	80023d0 <__clzsi2+0x18>
 80023cc:	0a00      	lsrs	r0, r0, #8
 80023ce:	3908      	subs	r1, #8
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	4298      	cmp	r0, r3
 80023d4:	d301      	bcc.n	80023da <__clzsi2+0x22>
 80023d6:	0900      	lsrs	r0, r0, #4
 80023d8:	3904      	subs	r1, #4
 80023da:	a202      	add	r2, pc, #8	@ (adr r2, 80023e4 <__clzsi2+0x2c>)
 80023dc:	5c10      	ldrb	r0, [r2, r0]
 80023de:	1840      	adds	r0, r0, r1
 80023e0:	4770      	bx	lr
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	02020304 	.word	0x02020304
 80023e8:	01010101 	.word	0x01010101
	...

080023f4 <Flash_read_identification_id>:
extern SPI_HandleTypeDef hspi2;



void Flash_read_identification_id()
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
	uint8_t spiBuf[5];

	spiBuf[0] = READ_ID;
 80023fa:	003b      	movs	r3, r7
 80023fc:	224b      	movs	r2, #75	@ 0x4b
 80023fe:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = 0;
 8002400:	003b      	movs	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	705a      	strb	r2, [r3, #1]
	spiBuf[2] = 0;
 8002406:	003b      	movs	r3, r7
 8002408:	2200      	movs	r2, #0
 800240a:	709a      	strb	r2, [r3, #2]
	spiBuf[3] = 0;
 800240c:	003b      	movs	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	70da      	strb	r2, [r3, #3]
	spiBuf[4] = 0;
 8002412:	003b      	movs	r3, r7
 8002414:	2200      	movs	r2, #0
 8002416:	711a      	strb	r2, [r3, #4]

	//Put CSN low

	flash_csn(0);
 8002418:	2000      	movs	r0, #0
 800241a:	f000 f819 	bl	8002450 <flash_csn>
	//Transmit register address

	HAL_SPI_Transmit(&hspi2, &spiBuf[0], 5, 1000);
 800241e:	23fa      	movs	r3, #250	@ 0xfa
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	0039      	movs	r1, r7
 8002424:	4808      	ldr	r0, [pc, #32]	@ (8002448 <Flash_read_identification_id+0x54>)
 8002426:	2205      	movs	r2, #5
 8002428:	f003 f804 	bl	8005434 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, &read_flash_Byte[0], 8, 1000);
 800242c:	23fa      	movs	r3, #250	@ 0xfa
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4906      	ldr	r1, [pc, #24]	@ (800244c <Flash_read_identification_id+0x58>)
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <Flash_read_identification_id+0x54>)
 8002434:	2208      	movs	r2, #8
 8002436:	f003 f95d 	bl	80056f4 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 f808 	bl	8002450 <flash_csn>
}
 8002440:	46c0      	nop			@ (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000390 	.word	0x20000390
 800244c:	200001f0 	.word	0x200001f0

08002450 <flash_csn>:


void flash_csn( uint8_t val){
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	0002      	movs	r2, r0
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	701a      	strb	r2, [r3, #0]
	if ( val == 0 )
 800245c:	1dfb      	adds	r3, r7, #7
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d107      	bne.n	8002474 <flash_csn+0x24>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	4808      	ldr	r0, [pc, #32]	@ (800248c <flash_csn+0x3c>)
 800246a:	2200      	movs	r2, #0
 800246c:	0019      	movs	r1, r3
 800246e:	f001 fcba 	bl	8003de6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);

}
 8002472:	e006      	b.n	8002482 <flash_csn+0x32>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	4804      	ldr	r0, [pc, #16]	@ (800248c <flash_csn+0x3c>)
 800247a:	2201      	movs	r2, #1
 800247c:	0019      	movs	r1, r3
 800247e:	f001 fcb2 	bl	8003de6 <HAL_GPIO_WritePin>
}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b002      	add	sp, #8
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	48000400 	.word	0x48000400

08002490 <bcdToDec>:
uint8_t decToBcd(int val) {
    return (uint8_t)((val / 10 * 16) + (val % 10));
}

// Implementación de conversión BCD a decimal
int bcdToDec(uint8_t val) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	0002      	movs	r2, r0
 8002498:	1dfb      	adds	r3, r7, #7
 800249a:	701a      	strb	r2, [r3, #0]
    return (int)((val / 16 * 10) + (val % 16));
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	001a      	movs	r2, r3
 80024a6:	0013      	movs	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	0019      	movs	r1, r3
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	220f      	movs	r2, #15
 80024b6:	4013      	ands	r3, r2
 80024b8:	18cb      	adds	r3, r1, r3
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <Get_Time>:
    };
    HAL_I2C_Mem_Write(&hi2c2, DS1307_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

// Función para leer el tiempo
void Get_Time(void) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af04      	add	r7, sp, #16
    uint8_t get_time[7];
    HAL_I2C_Mem_Read(&hi2c2, DS1307_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80024ca:	4828      	ldr	r0, [pc, #160]	@ (800256c <Get_Time+0xa8>)
 80024cc:	23fa      	movs	r3, #250	@ 0xfa
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	2307      	movs	r3, #7
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	003b      	movs	r3, r7
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	2200      	movs	r2, #0
 80024de:	21d0      	movs	r1, #208	@ 0xd0
 80024e0:	f001 fd60 	bl	8003fa4 <HAL_I2C_Mem_Read>
    time.seconds = bcdToDec(get_time[0]);
 80024e4:	003b      	movs	r3, r7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff ffd1 	bl	8002490 <bcdToDec>
 80024ee:	0003      	movs	r3, r0
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <Get_Time+0xac>)
 80024f4:	701a      	strb	r2, [r3, #0]
    time.minutes = bcdToDec(get_time[1]);
 80024f6:	003b      	movs	r3, r7
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7ff ffc8 	bl	8002490 <bcdToDec>
 8002500:	0003      	movs	r3, r0
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <Get_Time+0xac>)
 8002506:	705a      	strb	r2, [r3, #1]
    time.hour = bcdToDec(get_time[2]);
 8002508:	003b      	movs	r3, r7
 800250a:	789b      	ldrb	r3, [r3, #2]
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff ffbf 	bl	8002490 <bcdToDec>
 8002512:	0003      	movs	r3, r0
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <Get_Time+0xac>)
 8002518:	709a      	strb	r2, [r3, #2]
    time.dayofweek = bcdToDec(get_time[3]);
 800251a:	003b      	movs	r3, r7
 800251c:	78db      	ldrb	r3, [r3, #3]
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff ffb6 	bl	8002490 <bcdToDec>
 8002524:	0003      	movs	r3, r0
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <Get_Time+0xac>)
 800252a:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcdToDec(get_time[4]);
 800252c:	003b      	movs	r3, r7
 800252e:	791b      	ldrb	r3, [r3, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff ffad 	bl	8002490 <bcdToDec>
 8002536:	0003      	movs	r3, r0
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <Get_Time+0xac>)
 800253c:	711a      	strb	r2, [r3, #4]
    time.month = bcdToDec(get_time[5]);
 800253e:	003b      	movs	r3, r7
 8002540:	795b      	ldrb	r3, [r3, #5]
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff ffa4 	bl	8002490 <bcdToDec>
 8002548:	0003      	movs	r3, r0
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <Get_Time+0xac>)
 800254e:	715a      	strb	r2, [r3, #5]
    time.year = bcdToDec(get_time[6]);
 8002550:	003b      	movs	r3, r7
 8002552:	799b      	ldrb	r3, [r3, #6]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff ff9b 	bl	8002490 <bcdToDec>
 800255a:	0003      	movs	r3, r0
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <Get_Time+0xac>)
 8002560:	719a      	strb	r2, [r3, #6]
}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b002      	add	sp, #8
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	2000033c 	.word	0x2000033c
 8002570:	200002f0 	.word	0x200002f0

08002574 <Set_Pin_Input>:
uint8_t Presence;
uint8_t Temp_byte1;
uint8_t Temp_byte2;
uint8_t size_to_send;

void Set_Pin_Input (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	000a      	movs	r2, r1
 800257e:	1cbb      	adds	r3, r7, #2
 8002580:	801a      	strh	r2, [r3, #0]
	//HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002582:	240c      	movs	r4, #12
 8002584:	193b      	adds	r3, r7, r4
 8002586:	0018      	movs	r0, r3
 8002588:	2314      	movs	r3, #20
 800258a:	001a      	movs	r2, r3
 800258c:	2100      	movs	r1, #0
 800258e:	f005 fa8d 	bl	8007aac <memset>
	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002592:	1cbb      	adds	r3, r7, #2
 8002594:	881a      	ldrh	r2, [r3, #0]
 8002596:	193b      	adds	r3, r7, r4
 8002598:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259a:	193b      	adds	r3, r7, r4
 800259c:	2200      	movs	r2, #0
 800259e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	2201      	movs	r2, #1
 80025a4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80025a6:	193a      	adds	r2, r7, r4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	0011      	movs	r1, r2
 80025ac:	0018      	movs	r0, r3
 80025ae:	f001 fa8d 	bl	8003acc <HAL_GPIO_Init>
}
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b009      	add	sp, #36	@ 0x24
 80025b8:	bd90      	pop	{r4, r7, pc}

080025ba <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 80025ba:	b590      	push	{r4, r7, lr}
 80025bc:	b089      	sub	sp, #36	@ 0x24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	000a      	movs	r2, r1
 80025c4:	1cbb      	adds	r3, r7, #2
 80025c6:	801a      	strh	r2, [r3, #0]
	//HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	240c      	movs	r4, #12
 80025ca:	193b      	adds	r3, r7, r4
 80025cc:	0018      	movs	r0, r3
 80025ce:	2314      	movs	r3, #20
 80025d0:	001a      	movs	r2, r3
 80025d2:	2100      	movs	r1, #0
 80025d4:	f005 fa6a 	bl	8007aac <memset>
	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_Pin;
 80025d8:	1cbb      	adds	r3, r7, #2
 80025da:	881a      	ldrh	r2, [r3, #0]
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e0:	193b      	adds	r3, r7, r4
 80025e2:	2201      	movs	r2, #1
 80025e4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	193b      	adds	r3, r7, r4
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80025ec:	193a      	adds	r2, r7, r4
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	0011      	movs	r1, r2
 80025f2:	0018      	movs	r0, r3
 80025f4:	f001 fa6a 	bl	8003acc <HAL_GPIO_Init>
}
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b009      	add	sp, #36	@ 0x24
 80025fe:	bd90      	pop	{r4, r7, pc}

08002600 <delay>:


void delay (uint16_t us)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	0002      	movs	r2, r0
 8002608:	1dbb      	adds	r3, r7, #6
 800260a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800260c:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <delay+0x30>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2200      	movs	r2, #0
 8002612:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <delay+0x30>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800261c:	1dbb      	adds	r3, r7, #6
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d3f8      	bcc.n	8002616 <delay+0x16>
}
 8002624:	46c0      	nop			@ (mov r8, r8)
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	200003f4 	.word	0x200003f4

08002634 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800263a:	1dfb      	adds	r3, r7, #7
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);   // set the pin as output
 8002640:	2390      	movs	r3, #144	@ 0x90
 8002642:	05db      	lsls	r3, r3, #23
 8002644:	2108      	movs	r1, #8
 8002646:	0018      	movs	r0, r3
 8002648:	f7ff ffb7 	bl	80025ba <Set_Pin_Output>
	HAL_GPIO_WritePin (Temperature_sensor_GPIO_Port, Temperature_sensor_Pin, 0);  // pull the pin low
 800264c:	2390      	movs	r3, #144	@ 0x90
 800264e:	05db      	lsls	r3, r3, #23
 8002650:	2200      	movs	r2, #0
 8002652:	2108      	movs	r1, #8
 8002654:	0018      	movs	r0, r3
 8002656:	f001 fbc6 	bl	8003de6 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 800265a:	23f0      	movs	r3, #240	@ 0xf0
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	0018      	movs	r0, r3
 8002660:	f7ff ffce 	bl	8002600 <delay>

	Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);    // set the pin as input
 8002664:	2390      	movs	r3, #144	@ 0x90
 8002666:	05db      	lsls	r3, r3, #23
 8002668:	2108      	movs	r1, #8
 800266a:	0018      	movs	r0, r3
 800266c:	f7ff ff82 	bl	8002574 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8002670:	2050      	movs	r0, #80	@ 0x50
 8002672:	f7ff ffc5 	bl	8002600 <delay>

	if (!(HAL_GPIO_ReadPin (Temperature_sensor_GPIO_Port, Temperature_sensor_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8002676:	2390      	movs	r3, #144	@ 0x90
 8002678:	05db      	lsls	r3, r3, #23
 800267a:	2108      	movs	r1, #8
 800267c:	0018      	movs	r0, r3
 800267e:	f001 fb95 	bl	8003dac <HAL_GPIO_ReadPin>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d103      	bne.n	800268e <DS18B20_Start+0x5a>
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e002      	b.n	8002694 <DS18B20_Start+0x60>
	else Response = 0;
 800268e:	1dfb      	adds	r3, r7, #7
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]

	delay (400); // 480 us delay totally.
 8002694:	23c8      	movs	r3, #200	@ 0xc8
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff ffb1 	bl	8002600 <delay>

	return Response;
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	781b      	ldrb	r3, [r3, #0]
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b002      	add	sp, #8
 80026a8:	bd80      	pop	{r7, pc}

080026aa <DS18B20_Write>:
void DS18B20_Write (uint8_t data)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	0002      	movs	r2, r0
 80026b2:	1dfb      	adds	r3, r7, #7
 80026b4:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);  // set as output
 80026b6:	2390      	movs	r3, #144	@ 0x90
 80026b8:	05db      	lsls	r3, r3, #23
 80026ba:	2108      	movs	r1, #8
 80026bc:	0018      	movs	r0, r3
 80026be:	f7ff ff7c 	bl	80025ba <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e03a      	b.n	800273e <DS18B20_Write+0x94>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80026c8:	1dfb      	adds	r3, r7, #7
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	411a      	asrs	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	2201      	movs	r2, #1
 80026d4:	4013      	ands	r3, r2
 80026d6:	d019      	beq.n	800270c <DS18B20_Write+0x62>
		{
			// write 1

			Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);  // set as output
 80026d8:	2390      	movs	r3, #144	@ 0x90
 80026da:	05db      	lsls	r3, r3, #23
 80026dc:	2108      	movs	r1, #8
 80026de:	0018      	movs	r0, r3
 80026e0:	f7ff ff6b 	bl	80025ba <Set_Pin_Output>
			HAL_GPIO_WritePin (Temperature_sensor_GPIO_Port, Temperature_sensor_Pin, 0);  // pull the pin LOW
 80026e4:	2390      	movs	r3, #144	@ 0x90
 80026e6:	05db      	lsls	r3, r3, #23
 80026e8:	2200      	movs	r2, #0
 80026ea:	2108      	movs	r1, #8
 80026ec:	0018      	movs	r0, r3
 80026ee:	f001 fb7a 	bl	8003de6 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7ff ff84 	bl	8002600 <delay>

			Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);  // set as input
 80026f8:	2390      	movs	r3, #144	@ 0x90
 80026fa:	05db      	lsls	r3, r3, #23
 80026fc:	2108      	movs	r1, #8
 80026fe:	0018      	movs	r0, r3
 8002700:	f7ff ff38 	bl	8002574 <Set_Pin_Input>
			delay (60);  // wait for 60 us
 8002704:	203c      	movs	r0, #60	@ 0x3c
 8002706:	f7ff ff7b 	bl	8002600 <delay>
 800270a:	e015      	b.n	8002738 <DS18B20_Write+0x8e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);
 800270c:	2390      	movs	r3, #144	@ 0x90
 800270e:	05db      	lsls	r3, r3, #23
 8002710:	2108      	movs	r1, #8
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff ff51 	bl	80025ba <Set_Pin_Output>
			HAL_GPIO_WritePin (Temperature_sensor_GPIO_Port, Temperature_sensor_Pin, 0);  // pull the pin LOW
 8002718:	2390      	movs	r3, #144	@ 0x90
 800271a:	05db      	lsls	r3, r3, #23
 800271c:	2200      	movs	r2, #0
 800271e:	2108      	movs	r1, #8
 8002720:	0018      	movs	r0, r3
 8002722:	f001 fb60 	bl	8003de6 <HAL_GPIO_WritePin>
			delay (60);  // wait for 60 us
 8002726:	203c      	movs	r0, #60	@ 0x3c
 8002728:	f7ff ff6a 	bl	8002600 <delay>

			Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);
 800272c:	2390      	movs	r3, #144	@ 0x90
 800272e:	05db      	lsls	r3, r3, #23
 8002730:	2108      	movs	r1, #8
 8002732:	0018      	movs	r0, r3
 8002734:	f7ff ff1e 	bl	8002574 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3301      	adds	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b07      	cmp	r3, #7
 8002742:	ddc1      	ble.n	80026c8 <DS18B20_Write+0x1e>
		}
	}
}
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b004      	add	sp, #16
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <convert_temperature>:
float convert_temperature(uint8_t byte_1, uint8_t byte_2 ){
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	0002      	movs	r2, r0
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	1dbb      	adds	r3, r7, #6
 800275e:	1c0a      	adds	r2, r1, #0
 8002760:	701a      	strb	r2, [r3, #0]
	uint16_t tempval = byte_2 << 8 | byte_1;
 8002762:	1dbb      	adds	r3, r7, #6
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	b21a      	sxth	r2, r3
 800276a:	1dfb      	adds	r3, r7, #7
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b21b      	sxth	r3, r3
 8002770:	4313      	orrs	r3, r2
 8002772:	b21a      	sxth	r2, r3
 8002774:	210e      	movs	r1, #14
 8002776:	187b      	adds	r3, r7, r1
 8002778:	801a      	strh	r2, [r3, #0]
	float result_temp = (128.0 / 2048)*tempval;
 800277a:	187b      	adds	r3, r7, r1
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff fcfc 	bl	800217c <__aeabi_i2d>
 8002784:	2200      	movs	r2, #0
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <convert_temperature+0x58>)
 8002788:	f7fe fe36 	bl	80013f8 <__aeabi_dmul>
 800278c:	0002      	movs	r2, r0
 800278e:	000b      	movs	r3, r1
 8002790:	0010      	movs	r0, r2
 8002792:	0019      	movs	r1, r3
 8002794:	f7ff fd8c 	bl	80022b0 <__aeabi_d2f>
 8002798:	1c03      	adds	r3, r0, #0
 800279a:	60bb      	str	r3, [r7, #8]

	return  result_temp;
 800279c:	68bb      	ldr	r3, [r7, #8]

}
 800279e:	1c18      	adds	r0, r3, #0
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b004      	add	sp, #16
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	3fb00000 	.word	0x3fb00000

080027ac <DS18B20_Read>:
uint8_t DS18B20_Read (void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
	Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);
 80027b8:	2390      	movs	r3, #144	@ 0x90
 80027ba:	05db      	lsls	r3, r3, #23
 80027bc:	2108      	movs	r1, #8
 80027be:	0018      	movs	r0, r3
 80027c0:	f7ff fed8 	bl	8002574 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	e032      	b.n	8002830 <DS18B20_Read+0x84>
	{
		Set_Pin_Output(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);;   // set as output
 80027ca:	2390      	movs	r3, #144	@ 0x90
 80027cc:	05db      	lsls	r3, r3, #23
 80027ce:	2108      	movs	r1, #8
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7ff fef2 	bl	80025ba <Set_Pin_Output>

		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, 0);  // pull the data pin LOW
 80027d6:	2390      	movs	r3, #144	@ 0x90
 80027d8:	05db      	lsls	r3, r3, #23
 80027da:	2200      	movs	r2, #0
 80027dc:	2108      	movs	r1, #8
 80027de:	0018      	movs	r0, r3
 80027e0:	f001 fb01 	bl	8003de6 <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 80027e4:	2002      	movs	r0, #2
 80027e6:	f7ff ff0b 	bl	8002600 <delay>

		Set_Pin_Input(Temperature_sensor_GPIO_Port, Temperature_sensor_Pin);  // set as input
 80027ea:	2390      	movs	r3, #144	@ 0x90
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	2108      	movs	r1, #8
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7ff febf 	bl	8002574 <Set_Pin_Input>
		delay (5);  // wait for 2 us
 80027f6:	2005      	movs	r0, #5
 80027f8:	f7ff ff02 	bl	8002600 <delay>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3))  // if the pin is HIGH
 80027fc:	2390      	movs	r3, #144	@ 0x90
 80027fe:	05db      	lsls	r3, r3, #23
 8002800:	2108      	movs	r1, #8
 8002802:	0018      	movs	r0, r3
 8002804:	f001 fad2 	bl	8003dac <HAL_GPIO_ReadPin>
 8002808:	1e03      	subs	r3, r0, #0
 800280a:	d00b      	beq.n	8002824 <DS18B20_Read+0x78>
		{
			value |= 1<<i;  // read = 1
 800280c:	2201      	movs	r2, #1
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	409a      	lsls	r2, r3
 8002812:	0013      	movs	r3, r2
 8002814:	b25a      	sxtb	r2, r3
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b25b      	sxtb	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	b25a      	sxtb	r2, r3
 8002820:	1dfb      	adds	r3, r7, #7
 8002822:	701a      	strb	r2, [r3, #0]
		}
		delay (60);  // wait for 60 us
 8002824:	203c      	movs	r0, #60	@ 0x3c
 8002826:	f7ff feeb 	bl	8002600 <delay>
	for (int i=0;i<8;i++)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b07      	cmp	r3, #7
 8002834:	ddc9      	ble.n	80027ca <DS18B20_Read+0x1e>
	}
	return value;
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b002      	add	sp, #8
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <DS18B20_ReadTemperature>:

float DS18B20_ReadTemperature() {
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
	Presence = DS18B20_Start();
 800284a:	f7ff fef3 	bl	8002634 <DS18B20_Start>
 800284e:	0003      	movs	r3, r0
 8002850:	001a      	movs	r2, r3
 8002852:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <DS18B20_ReadTemperature+0x84>)
 8002854:	701a      	strb	r2, [r3, #0]
	HAL_Delay (1);
 8002856:	2001      	movs	r0, #1
 8002858:	f000 fe2a 	bl	80034b0 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 800285c:	20cc      	movs	r0, #204	@ 0xcc
 800285e:	f7ff ff24 	bl	80026aa <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 8002862:	2044      	movs	r0, #68	@ 0x44
 8002864:	f7ff ff21 	bl	80026aa <DS18B20_Write>
	HAL_Delay (800);
 8002868:	23c8      	movs	r3, #200	@ 0xc8
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	0018      	movs	r0, r3
 800286e:	f000 fe1f 	bl	80034b0 <HAL_Delay>

	Presence = DS18B20_Start ();
 8002872:	f7ff fedf 	bl	8002634 <DS18B20_Start>
 8002876:	0003      	movs	r3, r0
 8002878:	001a      	movs	r2, r3
 800287a:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <DS18B20_ReadTemperature+0x84>)
 800287c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800287e:	2001      	movs	r0, #1
 8002880:	f000 fe16 	bl	80034b0 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 8002884:	20cc      	movs	r0, #204	@ 0xcc
 8002886:	f7ff ff10 	bl	80026aa <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 800288a:	20be      	movs	r0, #190	@ 0xbe
 800288c:	f7ff ff0d 	bl	80026aa <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 8002890:	f7ff ff8c 	bl	80027ac <DS18B20_Read>
 8002894:	0003      	movs	r3, r0
 8002896:	001a      	movs	r2, r3
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <DS18B20_ReadTemperature+0x88>)
 800289a:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 800289c:	f7ff ff86 	bl	80027ac <DS18B20_Read>
 80028a0:	0003      	movs	r3, r0
 80028a2:	001a      	movs	r2, r3
 80028a4:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <DS18B20_ReadTemperature+0x8c>)
 80028a6:	701a      	strb	r2, [r3, #0]

	//HAL_UART_Transmit(&huart1,(uint8_t *) "read \r\n", 9, 1000);
	//size_to_send = sprintf( transmit_text, "presence %d el primer %d y el segundo %d \r\n", Presence,Temp_byte1,Temp_byte2);
	//transmit_text[size_to_send] = '\0';
	//HAL_UART_Transmit(&huart1, (uint8_t *)transmit_text, size_to_send, 1000);
	float temp_dec = convert_temperature(Temp_byte1 , Temp_byte2);
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <DS18B20_ReadTemperature+0x88>)
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <DS18B20_ReadTemperature+0x8c>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	0019      	movs	r1, r3
 80028b2:	0010      	movs	r0, r2
 80028b4:	f7ff ff4c 	bl	8002750 <convert_temperature>
 80028b8:	1c03      	adds	r3, r0, #0
 80028ba:	607b      	str	r3, [r7, #4]
	//size_to_send = sprintf( transmit_text, "result temperature %.2f\r\n", temp_dec );
	//transmit_text[size_to_send] = '\0';
	//HAL_UART_Transmit(&huart1, (uint8_t *)transmit_text, size_to_send, 1000);
	return temp_dec;
 80028bc:	687b      	ldr	r3, [r7, #4]
}
 80028be:	1c18      	adds	r0, r3, #0
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b002      	add	sp, #8
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	200002f7 	.word	0x200002f7
 80028cc:	200002f8 	.word	0x200002f8
 80028d0:	200002f9 	.word	0x200002f9

080028d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028da:	f000 fd85 	bl	80033e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028de:	f000 f891 	bl	8002a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e2:	f000 fa59 	bl	8002d98 <MX_GPIO_Init>
  MX_ADC_Init();
 80028e6:	f000 f8f5 	bl	8002ad4 <MX_ADC_Init>
  MX_I2C2_Init();
 80028ea:	f000 f94f 	bl	8002b8c <MX_I2C2_Init>
  MX_SPI2_Init();
 80028ee:	f000 f98d 	bl	8002c0c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80028f2:	f000 fa21 	bl	8002d38 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80028f6:	f000 f9c7 	bl	8002c88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80028fa:	4b3b      	ldr	r3, [pc, #236]	@ (80029e8 <main+0x114>)
 80028fc:	0018      	movs	r0, r3
 80028fe:	f003 fc51 	bl	80061a4 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Flash_read_identification_id();
 8002902:	f7ff fd77 	bl	80023f4 <Flash_read_identification_id>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	Get_Time();
 8002906:	f7ff fddd 	bl	80024c4 <Get_Time>
	sprintf(buffer, "%02d:%02d:%02d\r\n", time.hour, time.minutes, time.seconds);
 800290a:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <main+0x118>)
 800290c:	789b      	ldrb	r3, [r3, #2]
 800290e:	001a      	movs	r2, r3
 8002910:	4b36      	ldr	r3, [pc, #216]	@ (80029ec <main+0x118>)
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	001c      	movs	r4, r3
 8002916:	4b35      	ldr	r3, [pc, #212]	@ (80029ec <main+0x118>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	4935      	ldr	r1, [pc, #212]	@ (80029f0 <main+0x11c>)
 800291c:	4835      	ldr	r0, [pc, #212]	@ (80029f4 <main+0x120>)
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	0023      	movs	r3, r4
 8002922:	f005 f857 	bl	80079d4 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer, strlen(buffer), 100);
 8002926:	4b33      	ldr	r3, [pc, #204]	@ (80029f4 <main+0x120>)
 8002928:	0018      	movs	r0, r3
 800292a:	f7fd fbed 	bl	8000108 <strlen>
 800292e:	0003      	movs	r3, r0
 8002930:	b29a      	uxth	r2, r3
 8002932:	4930      	ldr	r1, [pc, #192]	@ (80029f4 <main+0x120>)
 8002934:	4830      	ldr	r0, [pc, #192]	@ (80029f8 <main+0x124>)
 8002936:	2364      	movs	r3, #100	@ 0x64
 8002938:	f003 ff16 	bl	8006768 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800293c:	23fa      	movs	r3, #250	@ 0xfa
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	0018      	movs	r0, r3
 8002942:	f000 fdb5 	bl	80034b0 <HAL_Delay>
//	size_to_send = sprintf( transmit_text, "presence %d el primer %d y el segundo %d \r\n", Presence,Temp_byte1,Temp_byte2);
//	transmit_text[size_to_send] = '\0';
//	HAL_UART_Transmit(&huart1, (uint8_t *)transmit_text, size_to_send, 1000);
//	temp_dec = convert_temperature(Temp_byte1 , Temp_byte2);

	float temperature = DS18B20_ReadTemperature();
 8002946:	f7ff ff7d 	bl	8002844 <DS18B20_ReadTemperature>
 800294a:	1c03      	adds	r3, r0, #0
 800294c:	607b      	str	r3, [r7, #4]
	size_to_send = sprintf( transmit_text, "result temperature %.2f\r\n", temperature);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff fc66 	bl	8002220 <__aeabi_f2d>
 8002954:	0002      	movs	r2, r0
 8002956:	000b      	movs	r3, r1
 8002958:	4928      	ldr	r1, [pc, #160]	@ (80029fc <main+0x128>)
 800295a:	4829      	ldr	r0, [pc, #164]	@ (8002a00 <main+0x12c>)
 800295c:	f005 f83a 	bl	80079d4 <siprintf>
 8002960:	0002      	movs	r2, r0
 8002962:	1cfb      	adds	r3, r7, #3
 8002964:	701a      	strb	r2, [r3, #0]
	transmit_text[size_to_send] = '\0';
 8002966:	1cfb      	adds	r3, r7, #3
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4a25      	ldr	r2, [pc, #148]	@ (8002a00 <main+0x12c>)
 800296c:	2100      	movs	r1, #0
 800296e:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart1, (uint8_t *)transmit_text, size_to_send, 1000);
 8002970:	1cfb      	adds	r3, r7, #3
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b29a      	uxth	r2, r3
 8002976:	23fa      	movs	r3, #250	@ 0xfa
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4921      	ldr	r1, [pc, #132]	@ (8002a00 <main+0x12c>)
 800297c:	481e      	ldr	r0, [pc, #120]	@ (80029f8 <main+0x124>)
 800297e:	f003 fef3 	bl	8006768 <HAL_UART_Transmit>

	HAL_Delay(1000);
 8002982:	23fa      	movs	r3, #250	@ 0xfa
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	0018      	movs	r0, r3
 8002988:	f000 fd92 	bl	80034b0 <HAL_Delay>


	HAL_GPIO_TogglePin(Alerta_voltaje_min_GPIO_Port, Alerta_voltaje_min_Pin);
 800298c:	2390      	movs	r3, #144	@ 0x90
 800298e:	05db      	lsls	r3, r3, #23
 8002990:	2140      	movs	r1, #64	@ 0x40
 8002992:	0018      	movs	r0, r3
 8002994:	f001 fa44 	bl	8003e20 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8002998:	23fa      	movs	r3, #250	@ 0xfa
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	0018      	movs	r0, r3
 800299e:	f000 fd87 	bl	80034b0 <HAL_Delay>
	HAL_GPIO_TogglePin(RGB_R_GPIO_Port, RGB_R_Pin);
 80029a2:	2390      	movs	r3, #144	@ 0x90
 80029a4:	05db      	lsls	r3, r3, #23
 80029a6:	2101      	movs	r1, #1
 80029a8:	0018      	movs	r0, r3
 80029aa:	f001 fa39 	bl	8003e20 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80029ae:	23fa      	movs	r3, #250	@ 0xfa
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fd7c 	bl	80034b0 <HAL_Delay>
	HAL_GPIO_TogglePin(RGB_G_GPIO_Port, RGB_G_Pin);
 80029b8:	2390      	movs	r3, #144	@ 0x90
 80029ba:	05db      	lsls	r3, r3, #23
 80029bc:	2102      	movs	r1, #2
 80029be:	0018      	movs	r0, r3
 80029c0:	f001 fa2e 	bl	8003e20 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80029c4:	23fa      	movs	r3, #250	@ 0xfa
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 fd71 	bl	80034b0 <HAL_Delay>
	HAL_GPIO_TogglePin(RGB_B_GPIO_Port, RGB_B_Pin);
 80029ce:	2390      	movs	r3, #144	@ 0x90
 80029d0:	05db      	lsls	r3, r3, #23
 80029d2:	2104      	movs	r1, #4
 80029d4:	0018      	movs	r0, r3
 80029d6:	f001 fa23 	bl	8003e20 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80029da:	23fa      	movs	r3, #250	@ 0xfa
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 fd66 	bl	80034b0 <HAL_Delay>
  {
 80029e4:	46c0      	nop			@ (mov r8, r8)
 80029e6:	e78e      	b.n	8002906 <main+0x32>
 80029e8:	200003f4 	.word	0x200003f4
 80029ec:	200002f0 	.word	0x200002f0
 80029f0:	08009da8 	.word	0x08009da8
 80029f4:	20000504 	.word	0x20000504
 80029f8:	2000043c 	.word	0x2000043c
 80029fc:	08009dbc 	.word	0x08009dbc
 8002a00:	200004c4 	.word	0x200004c4

08002a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b095      	sub	sp, #84	@ 0x54
 8002a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a0a:	2420      	movs	r4, #32
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	0018      	movs	r0, r3
 8002a10:	2330      	movs	r3, #48	@ 0x30
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f005 f849 	bl	8007aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	0018      	movs	r0, r3
 8002a20:	2310      	movs	r3, #16
 8002a22:	001a      	movs	r2, r3
 8002a24:	2100      	movs	r1, #0
 8002a26:	f005 f841 	bl	8007aac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a2a:	003b      	movs	r3, r7
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	2310      	movs	r3, #16
 8002a30:	001a      	movs	r2, r3
 8002a32:	2100      	movs	r1, #0
 8002a34:	f005 f83a 	bl	8007aac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002a38:	0021      	movs	r1, r4
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2212      	movs	r2, #18
 8002a3e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	2201      	movs	r2, #1
 8002a44:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	2201      	movs	r2, #1
 8002a4a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2210      	movs	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2210      	movs	r2, #16
 8002a56:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2200      	movs	r2, #0
 8002a62:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	22a0      	movs	r2, #160	@ 0xa0
 8002a68:	0392      	lsls	r2, r2, #14
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2200      	movs	r2, #0
 8002a70:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	0018      	movs	r0, r3
 8002a76:	f001 fef9 	bl	800486c <HAL_RCC_OscConfig>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d001      	beq.n	8002a82 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002a7e:	f000 fa31 	bl	8002ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a82:	2110      	movs	r1, #16
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	2207      	movs	r2, #7
 8002a88:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f002 f9fd 	bl	8004ea0 <HAL_RCC_ClockConfig>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d001      	beq.n	8002aae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002aaa:	f000 fa1b 	bl	8002ee4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002aae:	003b      	movs	r3, r7
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002ab4:	003b      	movs	r3, r7
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aba:	003b      	movs	r3, r7
 8002abc:	0018      	movs	r0, r3
 8002abe:	f002 fb33 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d001      	beq.n	8002aca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002ac6:	f000 fa0d 	bl	8002ee4 <Error_Handler>
  }
}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b015      	add	sp, #84	@ 0x54
 8002ad0:	bd90      	pop	{r4, r7, pc}
	...

08002ad4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	0018      	movs	r0, r3
 8002ade:	230c      	movs	r3, #12
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	f004 ffe2 	bl	8007aac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002ae8:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002aea:	4a27      	ldr	r2, [pc, #156]	@ (8002b88 <MX_ADC_Init+0xb4>)
 8002aec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002aee:	4b25      	ldr	r3, [pc, #148]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002af4:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002afa:	4b22      	ldr	r3, [pc, #136]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b06:	4b1f      	ldr	r3, [pc, #124]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b08:	2204      	movs	r2, #4
 8002b0a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002b12:	4b1c      	ldr	r3, [pc, #112]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002b18:	4b1a      	ldr	r3, [pc, #104]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002b1e:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b24:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b26:	22c2      	movs	r2, #194	@ 0xc2
 8002b28:	32ff      	adds	r2, #255	@ 0xff
 8002b2a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002b32:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b34:	2224      	movs	r2, #36	@ 0x24
 8002b36:	2100      	movs	r1, #0
 8002b38:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b3a:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002b40:	4b10      	ldr	r3, [pc, #64]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 fcd8 	bl	80034f8 <HAL_ADC_Init>
 8002b48:	1e03      	subs	r3, r0, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002b4c:	f000 f9ca 	bl	8002ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	2204      	movs	r2, #4
 8002b54:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	2280      	movs	r2, #128	@ 0x80
 8002b5a:	0152      	lsls	r2, r2, #5
 8002b5c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2280      	movs	r2, #128	@ 0x80
 8002b62:	0552      	lsls	r2, r2, #21
 8002b64:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b66:	1d3a      	adds	r2, r7, #4
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <MX_ADC_Init+0xb0>)
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f000 fe03 	bl	8003778 <HAL_ADC_ConfigChannel>
 8002b72:	1e03      	subs	r3, r0, #0
 8002b74:	d001      	beq.n	8002b7a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002b76:	f000 f9b5 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b004      	add	sp, #16
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	200002fc 	.word	0x200002fc
 8002b88:	40012400 	.word	0x40012400

08002b8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002b92:	4a1c      	ldr	r2, [pc, #112]	@ (8002c04 <MX_I2C2_Init+0x78>)
 8002b94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 8002b96:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002b98:	4a1b      	ldr	r2, [pc, #108]	@ (8002c08 <MX_I2C2_Init+0x7c>)
 8002b9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002b9c:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ba2:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ba8:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002bae:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bba:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f001 f945 	bl	8003e58 <HAL_I2C_Init>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002bd2:	f000 f987 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002bd8:	2100      	movs	r1, #0
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f001 fdae 	bl	800473c <HAL_I2CEx_ConfigAnalogFilter>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d001      	beq.n	8002be8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002be4:	f000 f97e 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <MX_I2C2_Init+0x74>)
 8002bea:	2100      	movs	r1, #0
 8002bec:	0018      	movs	r0, r3
 8002bee:	f001 fdf1 	bl	80047d4 <HAL_I2CEx_ConfigDigitalFilter>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002bf6:	f000 f975 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	2000033c 	.word	0x2000033c
 8002c04:	40005800 	.word	0x40005800
 8002c08:	10805d88 	.word	0x10805d88

08002c0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c12:	4a1c      	ldr	r2, [pc, #112]	@ (8002c84 <MX_SPI2_Init+0x78>)
 8002c14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c18:	2282      	movs	r2, #130	@ 0x82
 8002c1a:	0052      	lsls	r2, r2, #1
 8002c1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c1e:	4b18      	ldr	r3, [pc, #96]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c24:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c26:	22e0      	movs	r2, #224	@ 0xe0
 8002c28:	00d2      	lsls	r2, r2, #3
 8002c2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c32:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c3a:	2280      	movs	r2, #128	@ 0x80
 8002c3c:	0092      	lsls	r2, r2, #2
 8002c3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002c40:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c42:	2228      	movs	r2, #40	@ 0x28
 8002c44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c52:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c5e:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c66:	2208      	movs	r2, #8
 8002c68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <MX_SPI2_Init+0x74>)
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f002 fb29 	bl	80052c4 <HAL_SPI_Init>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c76:	f000 f935 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000390 	.word	0x20000390
 8002c84:	40003800 	.word	0x40003800

08002c88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c8e:	2308      	movs	r3, #8
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	0018      	movs	r0, r3
 8002c94:	2310      	movs	r3, #16
 8002c96:	001a      	movs	r2, r3
 8002c98:	2100      	movs	r1, #0
 8002c9a:	f004 ff07 	bl	8007aac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c9e:	003b      	movs	r3, r7
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	f004 ff00 	bl	8007aac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cac:	4b1f      	ldr	r3, [pc, #124]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002cae:	4a20      	ldr	r2, [pc, #128]	@ (8002d30 <MX_TIM1_Init+0xa8>)
 8002cb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002cb4:	222f      	movs	r2, #47	@ 0x2f
 8002cb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d34 <MX_TIM1_Init+0xac>)
 8002cc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc4:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cca:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd0:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f003 fa13 	bl	8006104 <HAL_TIM_Base_Init>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002ce2:	f000 f8ff 	bl	8002ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce6:	2108      	movs	r1, #8
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	2280      	movs	r2, #128	@ 0x80
 8002cec:	0152      	lsls	r2, r2, #5
 8002cee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cf0:	187a      	adds	r2, r7, r1
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002cf4:	0011      	movs	r1, r2
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f003 fa98 	bl	800622c <HAL_TIM_ConfigClockSource>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002d00:	f000 f8f0 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d04:	003b      	movs	r3, r7
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0a:	003b      	movs	r3, r7
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d10:	003a      	movs	r2, r7
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <MX_TIM1_Init+0xa4>)
 8002d14:	0011      	movs	r1, r2
 8002d16:	0018      	movs	r0, r3
 8002d18:	f003 fc7a 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002d20:	f000 f8e0 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d24:	46c0      	nop			@ (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b006      	add	sp, #24
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200003f4 	.word	0x200003f4
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	0000fffe 	.word	0x0000fffe

08002d38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d3e:	4a15      	ldr	r2, [pc, #84]	@ (8002d94 <MX_USART1_UART_Init+0x5c>)
 8002d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d42:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d44:	22e1      	movs	r2, #225	@ 0xe1
 8002d46:	0252      	lsls	r2, r2, #9
 8002d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4a:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d5e:	220c      	movs	r2, #12
 8002d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d62:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d68:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d74:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <MX_USART1_UART_Init+0x58>)
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f003 fc9f 	bl	80066c0 <HAL_UART_Init>
 8002d82:	1e03      	subs	r3, r0, #0
 8002d84:	d001      	beq.n	8002d8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d86:	f000 f8ad 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	2000043c 	.word	0x2000043c
 8002d94:	40013800 	.word	0x40013800

08002d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b08b      	sub	sp, #44	@ 0x2c
 8002d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9e:	2414      	movs	r4, #20
 8002da0:	193b      	adds	r3, r7, r4
 8002da2:	0018      	movs	r0, r3
 8002da4:	2314      	movs	r3, #20
 8002da6:	001a      	movs	r2, r3
 8002da8:	2100      	movs	r1, #0
 8002daa:	f004 fe7f 	bl	8007aac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dae:	4b4b      	ldr	r3, [pc, #300]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	4b4a      	ldr	r3, [pc, #296]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002db4:	2180      	movs	r1, #128	@ 0x80
 8002db6:	0309      	lsls	r1, r1, #12
 8002db8:	430a      	orrs	r2, r1
 8002dba:	615a      	str	r2, [r3, #20]
 8002dbc:	4b47      	ldr	r3, [pc, #284]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	031b      	lsls	r3, r3, #12
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dca:	4b44      	ldr	r3, [pc, #272]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002dd0:	2180      	movs	r1, #128	@ 0x80
 8002dd2:	03c9      	lsls	r1, r1, #15
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	615a      	str	r2, [r3, #20]
 8002dd8:	4b40      	ldr	r3, [pc, #256]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	03db      	lsls	r3, r3, #15
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	4b3d      	ldr	r3, [pc, #244]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	4b3c      	ldr	r3, [pc, #240]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002dec:	2180      	movs	r1, #128	@ 0x80
 8002dee:	0289      	lsls	r1, r1, #10
 8002df0:	430a      	orrs	r2, r1
 8002df2:	615a      	str	r2, [r3, #20]
 8002df4:	4b39      	ldr	r3, [pc, #228]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	4b36      	ldr	r3, [pc, #216]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	4b35      	ldr	r3, [pc, #212]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002e08:	2180      	movs	r1, #128	@ 0x80
 8002e0a:	02c9      	lsls	r1, r1, #11
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	615a      	str	r2, [r3, #20]
 8002e10:	4b32      	ldr	r3, [pc, #200]	@ (8002edc <MX_GPIO_Init+0x144>)
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	02db      	lsls	r3, r3, #11
 8002e18:	4013      	ands	r3, r2
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_R_Pin|RGB_G_Pin|RGB_B_Pin|Temperature_sensor_Pin
 8002e1e:	2390      	movs	r3, #144	@ 0x90
 8002e20:	05db      	lsls	r3, r3, #23
 8002e22:	2200      	movs	r2, #0
 8002e24:	214f      	movs	r1, #79	@ 0x4f
 8002e26:	0018      	movs	r0, r3
 8002e28:	f000 ffdd 	bl	8003de6 <HAL_GPIO_WritePin>
                          |Alerta_voltaje_min_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	015b      	lsls	r3, r3, #5
 8002e30:	482b      	ldr	r0, [pc, #172]	@ (8002ee0 <MX_GPIO_Init+0x148>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	0019      	movs	r1, r3
 8002e36:	f000 ffd6 	bl	8003de6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_R_Pin RGB_G_Pin RGB_B_Pin Temperature_sensor_Pin
                           Alerta_voltaje_min_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin|Temperature_sensor_Pin
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	224f      	movs	r2, #79	@ 0x4f
 8002e3e:	601a      	str	r2, [r3, #0]
                          |Alerta_voltaje_min_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e40:	193b      	adds	r3, r7, r4
 8002e42:	2201      	movs	r2, #1
 8002e44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	193b      	adds	r3, r7, r4
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e52:	193a      	adds	r2, r7, r4
 8002e54:	2390      	movs	r3, #144	@ 0x90
 8002e56:	05db      	lsls	r3, r3, #23
 8002e58:	0011      	movs	r1, r2
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fe36 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002e60:	0021      	movs	r1, r4
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2280      	movs	r2, #128	@ 0x80
 8002e66:	0152      	lsls	r2, r2, #5
 8002e68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6a:	000c      	movs	r4, r1
 8002e6c:	193b      	adds	r3, r7, r4
 8002e6e:	2201      	movs	r2, #1
 8002e70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	193b      	adds	r3, r7, r4
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	193b      	adds	r3, r7, r4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002e7e:	193b      	adds	r3, r7, r4
 8002e80:	4a17      	ldr	r2, [pc, #92]	@ (8002ee0 <MX_GPIO_Init+0x148>)
 8002e82:	0019      	movs	r1, r3
 8002e84:	0010      	movs	r0, r2
 8002e86:	f000 fe21 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_control_Pin */
  GPIO_InitStruct.Pin = Motor_control_Pin;
 8002e8a:	193b      	adds	r3, r7, r4
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e90:	193b      	adds	r3, r7, r4
 8002e92:	2202      	movs	r2, #2
 8002e94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	193b      	adds	r3, r7, r4
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	193b      	adds	r3, r7, r4
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(Motor_control_GPIO_Port, &GPIO_InitStruct);
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <MX_GPIO_Init+0x148>)
 8002eac:	0019      	movs	r1, r3
 8002eae:	0010      	movs	r0, r2
 8002eb0:	f000 fe0c 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton_1_Pin Boton_2_Pin */
  GPIO_InitStruct.Pin = Boton_1_Pin|Boton_2_Pin;
 8002eb4:	0021      	movs	r1, r4
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	22c0      	movs	r2, #192	@ 0xc0
 8002eba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	187b      	adds	r3, r7, r1
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <MX_GPIO_Init+0x148>)
 8002ecc:	0019      	movs	r1, r3
 8002ece:	0010      	movs	r0, r2
 8002ed0:	f000 fdfc 	bl	8003acc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ed4:	46c0      	nop			@ (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b00b      	add	sp, #44	@ 0x2c
 8002eda:	bd90      	pop	{r4, r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	48000400 	.word	0x48000400

08002ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee8:	b672      	cpsid	i
}
 8002eea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	e7fd      	b.n	8002eec <Error_Handler+0x8>

08002ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <HAL_MspInit+0x44>)
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <HAL_MspInit+0x44>)
 8002efc:	2101      	movs	r1, #1
 8002efe:	430a      	orrs	r2, r1
 8002f00:	619a      	str	r2, [r3, #24]
 8002f02:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <HAL_MspInit+0x44>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <HAL_MspInit+0x44>)
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <HAL_MspInit+0x44>)
 8002f14:	2180      	movs	r1, #128	@ 0x80
 8002f16:	0549      	lsls	r1, r1, #21
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	61da      	str	r2, [r3, #28]
 8002f1c:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <HAL_MspInit+0x44>)
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	055b      	lsls	r3, r3, #21
 8002f24:	4013      	ands	r3, r2
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f2a:	46c0      	nop			@ (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b08b      	sub	sp, #44	@ 0x2c
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	2414      	movs	r4, #20
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	0018      	movs	r0, r3
 8002f46:	2314      	movs	r3, #20
 8002f48:	001a      	movs	r2, r3
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	f004 fdae 	bl	8007aac <memset>
  if(hadc->Instance==ADC1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	@ (8002fbc <HAL_ADC_MspInit+0x84>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d12b      	bne.n	8002fb2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f5a:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <HAL_ADC_MspInit+0x88>)
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	4b18      	ldr	r3, [pc, #96]	@ (8002fc0 <HAL_ADC_MspInit+0x88>)
 8002f60:	2180      	movs	r1, #128	@ 0x80
 8002f62:	0089      	lsls	r1, r1, #2
 8002f64:	430a      	orrs	r2, r1
 8002f66:	619a      	str	r2, [r3, #24]
 8002f68:	4b15      	ldr	r3, [pc, #84]	@ (8002fc0 <HAL_ADC_MspInit+0x88>)
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f76:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <HAL_ADC_MspInit+0x88>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <HAL_ADC_MspInit+0x88>)
 8002f7c:	2180      	movs	r1, #128	@ 0x80
 8002f7e:	0289      	lsls	r1, r1, #10
 8002f80:	430a      	orrs	r2, r1
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <HAL_ADC_MspInit+0x88>)
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	2380      	movs	r3, #128	@ 0x80
 8002f8a:	029b      	lsls	r3, r3, #10
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = Voltage_measure_Pin;
 8002f92:	193b      	adds	r3, r7, r4
 8002f94:	2210      	movs	r2, #16
 8002f96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f98:	193b      	adds	r3, r7, r4
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	193b      	adds	r3, r7, r4
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Voltage_measure_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	193a      	adds	r2, r7, r4
 8002fa6:	2390      	movs	r3, #144	@ 0x90
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	0011      	movs	r1, r2
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 fd8d 	bl	8003acc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b00b      	add	sp, #44	@ 0x2c
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	40012400 	.word	0x40012400
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b08b      	sub	sp, #44	@ 0x2c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	2414      	movs	r4, #20
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	2314      	movs	r3, #20
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	f004 fd68 	bl	8007aac <memset>
  if(hi2c->Instance==I2C2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8003054 <HAL_I2C_MspInit+0x90>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d132      	bne.n	800304c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8003058 <HAL_I2C_MspInit+0x94>)
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <HAL_I2C_MspInit+0x94>)
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	02c9      	lsls	r1, r1, #11
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	615a      	str	r2, [r3, #20]
 8002ff4:	4b18      	ldr	r3, [pc, #96]	@ (8003058 <HAL_I2C_MspInit+0x94>)
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	02db      	lsls	r3, r3, #11
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003002:	193b      	adds	r3, r7, r4
 8003004:	22c0      	movs	r2, #192	@ 0xc0
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800300a:	0021      	movs	r1, r4
 800300c:	187b      	adds	r3, r7, r1
 800300e:	2212      	movs	r2, #18
 8003010:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	187b      	adds	r3, r7, r1
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003018:	187b      	adds	r3, r7, r1
 800301a:	2203      	movs	r2, #3
 800301c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800301e:	187b      	adds	r3, r7, r1
 8003020:	2201      	movs	r2, #1
 8003022:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003024:	187b      	adds	r3, r7, r1
 8003026:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <HAL_I2C_MspInit+0x98>)
 8003028:	0019      	movs	r1, r3
 800302a:	0010      	movs	r0, r2
 800302c:	f000 fd4e 	bl	8003acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003030:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <HAL_I2C_MspInit+0x94>)
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <HAL_I2C_MspInit+0x94>)
 8003036:	2180      	movs	r1, #128	@ 0x80
 8003038:	03c9      	lsls	r1, r1, #15
 800303a:	430a      	orrs	r2, r1
 800303c:	61da      	str	r2, [r3, #28]
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_I2C_MspInit+0x94>)
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	2380      	movs	r3, #128	@ 0x80
 8003044:	03db      	lsls	r3, r3, #15
 8003046:	4013      	ands	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800304c:	46c0      	nop			@ (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b00b      	add	sp, #44	@ 0x2c
 8003052:	bd90      	pop	{r4, r7, pc}
 8003054:	40005800 	.word	0x40005800
 8003058:	40021000 	.word	0x40021000
 800305c:	48000400 	.word	0x48000400

08003060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b08b      	sub	sp, #44	@ 0x2c
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	2414      	movs	r4, #20
 800306a:	193b      	adds	r3, r7, r4
 800306c:	0018      	movs	r0, r3
 800306e:	2314      	movs	r3, #20
 8003070:	001a      	movs	r2, r3
 8003072:	2100      	movs	r1, #0
 8003074:	f004 fd1a 	bl	8007aac <memset>
  if(hspi->Instance==SPI2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1c      	ldr	r2, [pc, #112]	@ (80030f0 <HAL_SPI_MspInit+0x90>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d132      	bne.n	80030e8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003082:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <HAL_SPI_MspInit+0x94>)
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <HAL_SPI_MspInit+0x94>)
 8003088:	2180      	movs	r1, #128	@ 0x80
 800308a:	01c9      	lsls	r1, r1, #7
 800308c:	430a      	orrs	r2, r1
 800308e:	61da      	str	r2, [r3, #28]
 8003090:	4b18      	ldr	r3, [pc, #96]	@ (80030f4 <HAL_SPI_MspInit+0x94>)
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	2380      	movs	r3, #128	@ 0x80
 8003096:	01db      	lsls	r3, r3, #7
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <HAL_SPI_MspInit+0x94>)
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <HAL_SPI_MspInit+0x94>)
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	02c9      	lsls	r1, r1, #11
 80030a8:	430a      	orrs	r2, r1
 80030aa:	615a      	str	r2, [r3, #20]
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <HAL_SPI_MspInit+0x94>)
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	2380      	movs	r3, #128	@ 0x80
 80030b2:	02db      	lsls	r3, r3, #11
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	22e0      	movs	r2, #224	@ 0xe0
 80030be:	0212      	lsls	r2, r2, #8
 80030c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	0021      	movs	r1, r4
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	2202      	movs	r2, #2
 80030c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	2203      	movs	r2, #3
 80030d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	2200      	movs	r2, #0
 80030da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	4a06      	ldr	r2, [pc, #24]	@ (80030f8 <HAL_SPI_MspInit+0x98>)
 80030e0:	0019      	movs	r1, r3
 80030e2:	0010      	movs	r0, r2
 80030e4:	f000 fcf2 	bl	8003acc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b00b      	add	sp, #44	@ 0x2c
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	40003800 	.word	0x40003800
 80030f4:	40021000 	.word	0x40021000
 80030f8:	48000400 	.word	0x48000400

080030fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0a      	ldr	r2, [pc, #40]	@ (8003134 <HAL_TIM_Base_MspInit+0x38>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d10d      	bne.n	800312a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800310e:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <HAL_TIM_Base_MspInit+0x3c>)
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <HAL_TIM_Base_MspInit+0x3c>)
 8003114:	2180      	movs	r1, #128	@ 0x80
 8003116:	0109      	lsls	r1, r1, #4
 8003118:	430a      	orrs	r2, r1
 800311a:	619a      	str	r2, [r3, #24]
 800311c:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_TIM_Base_MspInit+0x3c>)
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	2380      	movs	r3, #128	@ 0x80
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b08b      	sub	sp, #44	@ 0x2c
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	2414      	movs	r4, #20
 8003146:	193b      	adds	r3, r7, r4
 8003148:	0018      	movs	r0, r3
 800314a:	2314      	movs	r3, #20
 800314c:	001a      	movs	r2, r3
 800314e:	2100      	movs	r1, #0
 8003150:	f004 fcac 	bl	8007aac <memset>
  if(huart->Instance==USART1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1d      	ldr	r2, [pc, #116]	@ (80031d0 <HAL_UART_MspInit+0x94>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d133      	bne.n	80031c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800315e:	4b1d      	ldr	r3, [pc, #116]	@ (80031d4 <HAL_UART_MspInit+0x98>)
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	4b1c      	ldr	r3, [pc, #112]	@ (80031d4 <HAL_UART_MspInit+0x98>)
 8003164:	2180      	movs	r1, #128	@ 0x80
 8003166:	01c9      	lsls	r1, r1, #7
 8003168:	430a      	orrs	r2, r1
 800316a:	619a      	str	r2, [r3, #24]
 800316c:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <HAL_UART_MspInit+0x98>)
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	2380      	movs	r3, #128	@ 0x80
 8003172:	01db      	lsls	r3, r3, #7
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317a:	4b16      	ldr	r3, [pc, #88]	@ (80031d4 <HAL_UART_MspInit+0x98>)
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <HAL_UART_MspInit+0x98>)
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	0289      	lsls	r1, r1, #10
 8003184:	430a      	orrs	r2, r1
 8003186:	615a      	str	r2, [r3, #20]
 8003188:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <HAL_UART_MspInit+0x98>)
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	029b      	lsls	r3, r3, #10
 8003190:	4013      	ands	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003196:	193b      	adds	r3, r7, r4
 8003198:	22c0      	movs	r2, #192	@ 0xc0
 800319a:	00d2      	lsls	r2, r2, #3
 800319c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	0021      	movs	r1, r4
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	2202      	movs	r2, #2
 80031a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	187b      	adds	r3, r7, r1
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	2203      	movs	r2, #3
 80031b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	2201      	movs	r2, #1
 80031b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	187a      	adds	r2, r7, r1
 80031ba:	2390      	movs	r3, #144	@ 0x90
 80031bc:	05db      	lsls	r3, r3, #23
 80031be:	0011      	movs	r1, r2
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 fc83 	bl	8003acc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b00b      	add	sp, #44	@ 0x2c
 80031cc:	bd90      	pop	{r4, r7, pc}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	40013800 	.word	0x40013800
 80031d4:	40021000 	.word	0x40021000

080031d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	e7fd      	b.n	80031dc <NMI_Handler+0x4>

080031e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	e7fd      	b.n	80031e4 <HardFault_Handler+0x4>

080031e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031ec:	46c0      	nop			@ (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003200:	f000 f93a 	bl	8003478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003204:	46c0      	nop			@ (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	af00      	add	r7, sp, #0
  return 1;
 800320e:	2301      	movs	r3, #1
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <_kill>:

int _kill(int pid, int sig)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003220:	f004 fc9e 	bl	8007b60 <__errno>
 8003224:	0003      	movs	r3, r0
 8003226:	2216      	movs	r2, #22
 8003228:	601a      	str	r2, [r3, #0]
  return -1;
 800322a:	2301      	movs	r3, #1
 800322c:	425b      	negs	r3, r3
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b002      	add	sp, #8
 8003234:	bd80      	pop	{r7, pc}

08003236 <_exit>:

void _exit (int status)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800323e:	2301      	movs	r3, #1
 8003240:	425a      	negs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0011      	movs	r1, r2
 8003246:	0018      	movs	r0, r3
 8003248:	f7ff ffe5 	bl	8003216 <_kill>
  while (1) {}    /* Make sure we hang here */
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	e7fd      	b.n	800324c <_exit+0x16>

08003250 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e00a      	b.n	8003278 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003262:	e000      	b.n	8003266 <_read+0x16>
 8003264:	bf00      	nop
 8003266:	0001      	movs	r1, r0
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	60ba      	str	r2, [r7, #8]
 800326e:	b2ca      	uxtb	r2, r1
 8003270:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	3301      	adds	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	dbf0      	blt.n	8003262 <_read+0x12>
  }

  return len;
 8003280:	687b      	ldr	r3, [r7, #4]
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b006      	add	sp, #24
 8003288:	bd80      	pop	{r7, pc}

0800328a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e009      	b.n	80032b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	60ba      	str	r2, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	0018      	movs	r0, r3
 80032a6:	e000      	b.n	80032aa <_write+0x20>
 80032a8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	3301      	adds	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	dbf1      	blt.n	800329c <_write+0x12>
  }
  return len;
 80032b8:	687b      	ldr	r3, [r7, #4]
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_close>:

int _close(int file)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	425b      	negs	r3, r3
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b002      	add	sp, #8
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2280      	movs	r2, #128	@ 0x80
 80032e4:	0192      	lsls	r2, r2, #6
 80032e6:	605a      	str	r2, [r3, #4]
  return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_isatty>:

int _isatty(int file)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003310:	2300      	movs	r3, #0
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003324:	4a14      	ldr	r2, [pc, #80]	@ (8003378 <_sbrk+0x5c>)
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <_sbrk+0x60>)
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003330:	4b13      	ldr	r3, [pc, #76]	@ (8003380 <_sbrk+0x64>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003338:	4b11      	ldr	r3, [pc, #68]	@ (8003380 <_sbrk+0x64>)
 800333a:	4a12      	ldr	r2, [pc, #72]	@ (8003384 <_sbrk+0x68>)
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <_sbrk+0x64>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	18d3      	adds	r3, r2, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d207      	bcs.n	800335c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800334c:	f004 fc08 	bl	8007b60 <__errno>
 8003350:	0003      	movs	r3, r0
 8003352:	220c      	movs	r2, #12
 8003354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003356:	2301      	movs	r3, #1
 8003358:	425b      	negs	r3, r3
 800335a:	e009      	b.n	8003370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800335c:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <_sbrk+0x64>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003362:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <_sbrk+0x64>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	18d2      	adds	r2, r2, r3
 800336a:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <_sbrk+0x64>)
 800336c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b006      	add	sp, #24
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20002000 	.word	0x20002000
 800337c:	00000400 	.word	0x00000400
 8003380:	20000514 	.word	0x20000514
 8003384:	20000668 	.word	0x20000668

08003388 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003394:	480d      	ldr	r0, [pc, #52]	@ (80033cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003396:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003398:	f7ff fff6 	bl	8003388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800339c:	480c      	ldr	r0, [pc, #48]	@ (80033d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800339e:	490d      	ldr	r1, [pc, #52]	@ (80033d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033a0:	4a0d      	ldr	r2, [pc, #52]	@ (80033d8 <LoopForever+0xe>)
  movs r3, #0
 80033a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a4:	e002      	b.n	80033ac <LoopCopyDataInit>

080033a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033aa:	3304      	adds	r3, #4

080033ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b0:	d3f9      	bcc.n	80033a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033b2:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80033b4:	4c0a      	ldr	r4, [pc, #40]	@ (80033e0 <LoopForever+0x16>)
  movs r3, #0
 80033b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b8:	e001      	b.n	80033be <LoopFillZerobss>

080033ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033bc:	3204      	adds	r2, #4

080033be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c0:	d3fb      	bcc.n	80033ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033c2:	f004 fbd3 	bl	8007b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033c6:	f7ff fa85 	bl	80028d4 <main>

080033ca <LoopForever>:

LoopForever:
    b LoopForever
 80033ca:	e7fe      	b.n	80033ca <LoopForever>
  ldr   r0, =_estack
 80033cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80033d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80033d8:	0800a1c8 	.word	0x0800a1c8
  ldr r2, =_sbss
 80033dc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80033e0:	20000668 	.word	0x20000668

080033e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033e4:	e7fe      	b.n	80033e4 <ADC1_IRQHandler>
	...

080033e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ec:	4b07      	ldr	r3, [pc, #28]	@ (800340c <HAL_Init+0x24>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_Init+0x24>)
 80033f2:	2110      	movs	r1, #16
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80033f8:	2003      	movs	r0, #3
 80033fa:	f000 f809 	bl	8003410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033fe:	f7ff fd77 	bl	8002ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	40022000 	.word	0x40022000

08003410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003418:	4b14      	ldr	r3, [pc, #80]	@ (800346c <HAL_InitTick+0x5c>)
 800341a:	681c      	ldr	r4, [r3, #0]
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <HAL_InitTick+0x60>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	0019      	movs	r1, r3
 8003422:	23fa      	movs	r3, #250	@ 0xfa
 8003424:	0098      	lsls	r0, r3, #2
 8003426:	f7fc fe8b 	bl	8000140 <__udivsi3>
 800342a:	0003      	movs	r3, r0
 800342c:	0019      	movs	r1, r3
 800342e:	0020      	movs	r0, r4
 8003430:	f7fc fe86 	bl	8000140 <__udivsi3>
 8003434:	0003      	movs	r3, r0
 8003436:	0018      	movs	r0, r3
 8003438:	f000 fb3b 	bl	8003ab2 <HAL_SYSTICK_Config>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d001      	beq.n	8003444 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e00f      	b.n	8003464 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d80b      	bhi.n	8003462 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	2301      	movs	r3, #1
 800344e:	425b      	negs	r3, r3
 8003450:	2200      	movs	r2, #0
 8003452:	0018      	movs	r0, r3
 8003454:	f000 fb18 	bl	8003a88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_InitTick+0x64>)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b003      	add	sp, #12
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	20000000 	.word	0x20000000
 8003470:	20000008 	.word	0x20000008
 8003474:	20000004 	.word	0x20000004

08003478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_IncTick+0x1c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	001a      	movs	r2, r3
 8003482:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <HAL_IncTick+0x20>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	18d2      	adds	r2, r2, r3
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_IncTick+0x20>)
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	46c0      	nop			@ (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	20000008 	.word	0x20000008
 8003498:	20000518 	.word	0x20000518

0800349c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  return uwTick;
 80034a0:	4b02      	ldr	r3, [pc, #8]	@ (80034ac <HAL_GetTick+0x10>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	20000518 	.word	0x20000518

080034b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b8:	f7ff fff0 	bl	800349c <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3301      	adds	r3, #1
 80034c8:	d005      	beq.n	80034d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ca:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <HAL_Delay+0x44>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	001a      	movs	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	f7ff ffe0 	bl	800349c <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d8f7      	bhi.n	80034d8 <HAL_Delay+0x28>
  {
  }
}
 80034e8:	46c0      	nop			@ (mov r8, r8)
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	20000008 	.word	0x20000008

080034f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003500:	230f      	movs	r3, #15
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e125      	b.n	8003762 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2234      	movs	r2, #52	@ 0x34
 8003528:	2100      	movs	r1, #0
 800352a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff fd02 	bl	8002f38 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	2210      	movs	r2, #16
 800353a:	4013      	ands	r3, r2
 800353c:	d000      	beq.n	8003540 <HAL_ADC_Init+0x48>
 800353e:	e103      	b.n	8003748 <HAL_ADC_Init+0x250>
 8003540:	230f      	movs	r3, #15
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d000      	beq.n	800354c <HAL_ADC_Init+0x54>
 800354a:	e0fd      	b.n	8003748 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2204      	movs	r2, #4
 8003554:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003556:	d000      	beq.n	800355a <HAL_ADC_Init+0x62>
 8003558:	e0f6      	b.n	8003748 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	4a83      	ldr	r2, [pc, #524]	@ (800376c <HAL_ADC_Init+0x274>)
 8003560:	4013      	ands	r3, r2
 8003562:	2202      	movs	r2, #2
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2203      	movs	r2, #3
 8003572:	4013      	ands	r3, r2
 8003574:	2b01      	cmp	r3, #1
 8003576:	d112      	bne.n	800359e <HAL_ADC_Init+0xa6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2201      	movs	r2, #1
 8003580:	4013      	ands	r3, r2
 8003582:	2b01      	cmp	r3, #1
 8003584:	d009      	beq.n	800359a <HAL_ADC_Init+0xa2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	401a      	ands	r2, r3
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	429a      	cmp	r2, r3
 8003598:	d101      	bne.n	800359e <HAL_ADC_Init+0xa6>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_ADC_Init+0xa8>
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d116      	bne.n	80035d2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2218      	movs	r2, #24
 80035ac:	4393      	bics	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	0899      	lsrs	r1, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4964      	ldr	r1, [pc, #400]	@ (8003770 <HAL_ADC_Init+0x278>)
 80035de:	400a      	ands	r2, r1
 80035e0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7e1b      	ldrb	r3, [r3, #24]
 80035e6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7e5b      	ldrb	r3, [r3, #25]
 80035ec:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7e9b      	ldrb	r3, [r3, #26]
 80035f4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80035f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d002      	beq.n	8003606 <HAL_ADC_Init+0x10e>
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	015b      	lsls	r3, r3, #5
 8003604:	e000      	b.n	8003608 <HAL_ADC_Init+0x110>
 8003606:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003608:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800360e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d101      	bne.n	800361c <HAL_ADC_Init+0x124>
 8003618:	2304      	movs	r3, #4
 800361a:	e000      	b.n	800361e <HAL_ADC_Init+0x126>
 800361c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800361e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2124      	movs	r1, #36	@ 0x24
 8003624:	5c5b      	ldrb	r3, [r3, r1]
 8003626:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003628:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4313      	orrs	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7edb      	ldrb	r3, [r3, #27]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d115      	bne.n	8003664 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7e9b      	ldrb	r3, [r3, #26]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2280      	movs	r2, #128	@ 0x80
 8003644:	0252      	lsls	r2, r2, #9
 8003646:	4313      	orrs	r3, r2
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	e00b      	b.n	8003664 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003650:	2220      	movs	r2, #32
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	2201      	movs	r2, #1
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	23c2      	movs	r3, #194	@ 0xc2
 800366a:	33ff      	adds	r3, #255	@ 0xff
 800366c:	429a      	cmp	r2, r3
 800366e:	d007      	beq.n	8003680 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003678:	4313      	orrs	r3, r2
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4313      	orrs	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68d9      	ldr	r1, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	430a      	orrs	r2, r1
 800368e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003694:	2380      	movs	r3, #128	@ 0x80
 8003696:	055b      	lsls	r3, r3, #21
 8003698:	429a      	cmp	r2, r3
 800369a:	d01b      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d017      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d013      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d00f      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d00b      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d007      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d003      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	2b07      	cmp	r3, #7
 80036d2:	d112      	bne.n	80036fa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2107      	movs	r1, #7
 80036e0:	438a      	bics	r2, r1
 80036e2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6959      	ldr	r1, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	2207      	movs	r2, #7
 80036f0:	401a      	ands	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a1c      	ldr	r2, [pc, #112]	@ (8003774 <HAL_ADC_Init+0x27c>)
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	d10b      	bne.n	8003722 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	2203      	movs	r2, #3
 8003716:	4393      	bics	r3, r2
 8003718:	2201      	movs	r2, #1
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003720:	e01c      	b.n	800375c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003726:	2212      	movs	r2, #18
 8003728:	4393      	bics	r3, r2
 800372a:	2210      	movs	r2, #16
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003736:	2201      	movs	r2, #1
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800373e:	230f      	movs	r3, #15
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003746:	e009      	b.n	800375c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	2210      	movs	r2, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003754:	230f      	movs	r3, #15
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800375c:	230f      	movs	r3, #15
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	781b      	ldrb	r3, [r3, #0]
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	fffffefd 	.word	0xfffffefd
 8003770:	fffe0219 	.word	0xfffe0219
 8003774:	833fffe7 	.word	0x833fffe7

08003778 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003782:	230f      	movs	r3, #15
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003792:	2380      	movs	r3, #128	@ 0x80
 8003794:	055b      	lsls	r3, r3, #21
 8003796:	429a      	cmp	r2, r3
 8003798:	d011      	beq.n	80037be <HAL_ADC_ConfigChannel+0x46>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d00d      	beq.n	80037be <HAL_ADC_ConfigChannel+0x46>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d009      	beq.n	80037be <HAL_ADC_ConfigChannel+0x46>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d005      	beq.n	80037be <HAL_ADC_ConfigChannel+0x46>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d001      	beq.n	80037be <HAL_ADC_ConfigChannel+0x46>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2234      	movs	r2, #52	@ 0x34
 80037c2:	5c9b      	ldrb	r3, [r3, r2]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x54>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e0bb      	b.n	8003944 <HAL_ADC_ConfigChannel+0x1cc>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2234      	movs	r2, #52	@ 0x34
 80037d0:	2101      	movs	r1, #1
 80037d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2204      	movs	r2, #4
 80037dc:	4013      	ands	r3, r2
 80037de:	d000      	beq.n	80037e2 <HAL_ADC_ConfigChannel+0x6a>
 80037e0:	e09f      	b.n	8003922 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a59      	ldr	r2, [pc, #356]	@ (800394c <HAL_ADC_ConfigChannel+0x1d4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d100      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x76>
 80037ec:	e077      	b.n	80038de <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2201      	movs	r2, #1
 80037fa:	409a      	lsls	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003808:	2380      	movs	r3, #128	@ 0x80
 800380a:	055b      	lsls	r3, r3, #21
 800380c:	429a      	cmp	r2, r3
 800380e:	d037      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x108>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d033      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x108>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	2b02      	cmp	r3, #2
 800381e:	d02f      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x108>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	2b03      	cmp	r3, #3
 8003826:	d02b      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x108>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	2b04      	cmp	r3, #4
 800382e:	d027      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x108>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	2b05      	cmp	r3, #5
 8003836:	d023      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x108>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383c:	2b06      	cmp	r3, #6
 800383e:	d01f      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x108>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	2b07      	cmp	r3, #7
 8003846:	d01b      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2107      	movs	r1, #7
 8003854:	400b      	ands	r3, r1
 8003856:	429a      	cmp	r2, r3
 8003858:	d012      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2107      	movs	r1, #7
 8003866:	438a      	bics	r2, r1
 8003868:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6959      	ldr	r1, [r3, #20]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2207      	movs	r2, #7
 8003876:	401a      	ands	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b10      	cmp	r3, #16
 8003886:	d003      	beq.n	8003890 <HAL_ADC_ConfigChannel+0x118>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b11      	cmp	r3, #17
 800388e:	d152      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003890:	4b2f      	ldr	r3, [pc, #188]	@ (8003950 <HAL_ADC_ConfigChannel+0x1d8>)
 8003892:	6819      	ldr	r1, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b10      	cmp	r3, #16
 800389a:	d102      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x12a>
 800389c:	2380      	movs	r3, #128	@ 0x80
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	e001      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x12e>
 80038a2:	2380      	movs	r3, #128	@ 0x80
 80038a4:	03db      	lsls	r3, r3, #15
 80038a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003950 <HAL_ADC_ConfigChannel+0x1d8>)
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d140      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038b4:	4b27      	ldr	r3, [pc, #156]	@ (8003954 <HAL_ADC_ConfigChannel+0x1dc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4927      	ldr	r1, [pc, #156]	@ (8003958 <HAL_ADC_ConfigChannel+0x1e0>)
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7fc fc40 	bl	8000140 <__udivsi3>
 80038c0:	0003      	movs	r3, r0
 80038c2:	001a      	movs	r2, r3
 80038c4:	0013      	movs	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	189b      	adds	r3, r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038ce:	e002      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f9      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x158>
 80038dc:	e02b      	b.n	8003936 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2101      	movs	r1, #1
 80038ea:	4099      	lsls	r1, r3
 80038ec:	000b      	movs	r3, r1
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	400a      	ands	r2, r1
 80038f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d003      	beq.n	8003908 <HAL_ADC_ConfigChannel+0x190>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b11      	cmp	r3, #17
 8003906:	d116      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <HAL_ADC_ConfigChannel+0x1d8>)
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b10      	cmp	r3, #16
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x1a0>
 8003914:	4a11      	ldr	r2, [pc, #68]	@ (800395c <HAL_ADC_ConfigChannel+0x1e4>)
 8003916:	e000      	b.n	800391a <HAL_ADC_ConfigChannel+0x1a2>
 8003918:	4a11      	ldr	r2, [pc, #68]	@ (8003960 <HAL_ADC_ConfigChannel+0x1e8>)
 800391a:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <HAL_ADC_ConfigChannel+0x1d8>)
 800391c:	400a      	ands	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e009      	b.n	8003936 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	2220      	movs	r2, #32
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800392e:	230f      	movs	r3, #15
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2234      	movs	r2, #52	@ 0x34
 800393a:	2100      	movs	r1, #0
 800393c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800393e:	230f      	movs	r3, #15
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	781b      	ldrb	r3, [r3, #0]
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b004      	add	sp, #16
 800394a:	bd80      	pop	{r7, pc}
 800394c:	00001001 	.word	0x00001001
 8003950:	40012708 	.word	0x40012708
 8003954:	20000000 	.word	0x20000000
 8003958:	000f4240 	.word	0x000f4240
 800395c:	ff7fffff 	.word	0xff7fffff
 8003960:	ffbfffff 	.word	0xffbfffff

08003964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	0002      	movs	r2, r0
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	1dfb      	adds	r3, r7, #7
 8003970:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003972:	1dfb      	adds	r3, r7, #7
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b7f      	cmp	r3, #127	@ 0x7f
 8003978:	d828      	bhi.n	80039cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800397a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a38 <__NVIC_SetPriority+0xd4>)
 800397c:	1dfb      	adds	r3, r7, #7
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b25b      	sxtb	r3, r3
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	33c0      	adds	r3, #192	@ 0xc0
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	589b      	ldr	r3, [r3, r2]
 800398a:	1dfa      	adds	r2, r7, #7
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	0011      	movs	r1, r2
 8003990:	2203      	movs	r2, #3
 8003992:	400a      	ands	r2, r1
 8003994:	00d2      	lsls	r2, r2, #3
 8003996:	21ff      	movs	r1, #255	@ 0xff
 8003998:	4091      	lsls	r1, r2
 800399a:	000a      	movs	r2, r1
 800399c:	43d2      	mvns	r2, r2
 800399e:	401a      	ands	r2, r3
 80039a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	019b      	lsls	r3, r3, #6
 80039a6:	22ff      	movs	r2, #255	@ 0xff
 80039a8:	401a      	ands	r2, r3
 80039aa:	1dfb      	adds	r3, r7, #7
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	0018      	movs	r0, r3
 80039b0:	2303      	movs	r3, #3
 80039b2:	4003      	ands	r3, r0
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039b8:	481f      	ldr	r0, [pc, #124]	@ (8003a38 <__NVIC_SetPriority+0xd4>)
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b25b      	sxtb	r3, r3
 80039c0:	089b      	lsrs	r3, r3, #2
 80039c2:	430a      	orrs	r2, r1
 80039c4:	33c0      	adds	r3, #192	@ 0xc0
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039ca:	e031      	b.n	8003a30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039cc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a3c <__NVIC_SetPriority+0xd8>)
 80039ce:	1dfb      	adds	r3, r7, #7
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	0019      	movs	r1, r3
 80039d4:	230f      	movs	r3, #15
 80039d6:	400b      	ands	r3, r1
 80039d8:	3b08      	subs	r3, #8
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3306      	adds	r3, #6
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	18d3      	adds	r3, r2, r3
 80039e2:	3304      	adds	r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	1dfa      	adds	r2, r7, #7
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	0011      	movs	r1, r2
 80039ec:	2203      	movs	r2, #3
 80039ee:	400a      	ands	r2, r1
 80039f0:	00d2      	lsls	r2, r2, #3
 80039f2:	21ff      	movs	r1, #255	@ 0xff
 80039f4:	4091      	lsls	r1, r2
 80039f6:	000a      	movs	r2, r1
 80039f8:	43d2      	mvns	r2, r2
 80039fa:	401a      	ands	r2, r3
 80039fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	22ff      	movs	r2, #255	@ 0xff
 8003a04:	401a      	ands	r2, r3
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	4003      	ands	r3, r0
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a14:	4809      	ldr	r0, [pc, #36]	@ (8003a3c <__NVIC_SetPriority+0xd8>)
 8003a16:	1dfb      	adds	r3, r7, #7
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	001c      	movs	r4, r3
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	4023      	ands	r3, r4
 8003a20:	3b08      	subs	r3, #8
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	430a      	orrs	r2, r1
 8003a26:	3306      	adds	r3, #6
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	18c3      	adds	r3, r0, r3
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	601a      	str	r2, [r3, #0]
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b003      	add	sp, #12
 8003a36:	bd90      	pop	{r4, r7, pc}
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1e5a      	subs	r2, r3, #1
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	045b      	lsls	r3, r3, #17
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d301      	bcc.n	8003a58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a54:	2301      	movs	r3, #1
 8003a56:	e010      	b.n	8003a7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a58:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <SysTick_Config+0x44>)
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a60:	2301      	movs	r3, #1
 8003a62:	425b      	negs	r3, r3
 8003a64:	2103      	movs	r1, #3
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff ff7c 	bl	8003964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <SysTick_Config+0x44>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a72:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <SysTick_Config+0x44>)
 8003a74:	2207      	movs	r2, #7
 8003a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b002      	add	sp, #8
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	e000e010 	.word	0xe000e010

08003a88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	210f      	movs	r1, #15
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b25b      	sxtb	r3, r3
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7ff ff5d 	bl	8003964 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b004      	add	sp, #16
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f7ff ffbf 	bl	8003a40 <SysTick_Config>
 8003ac2:	0003      	movs	r3, r0
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b002      	add	sp, #8
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ada:	e14f      	b.n	8003d7c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4091      	lsls	r1, r2
 8003ae6:	000a      	movs	r2, r1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d100      	bne.n	8003af4 <HAL_GPIO_Init+0x28>
 8003af2:	e140      	b.n	8003d76 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2203      	movs	r2, #3
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d005      	beq.n	8003b0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2203      	movs	r2, #3
 8003b06:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d130      	bne.n	8003b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	0013      	movs	r3, r2
 8003b1c:	43da      	mvns	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	0013      	movs	r3, r2
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b42:	2201      	movs	r2, #1
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	409a      	lsls	r2, r3
 8003b48:	0013      	movs	r3, r2
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	2201      	movs	r2, #1
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	0013      	movs	r3, r2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2203      	movs	r2, #3
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d017      	beq.n	8003baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2203      	movs	r2, #3
 8003b86:	409a      	lsls	r2, r3
 8003b88:	0013      	movs	r3, r2
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d123      	bne.n	8003bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	08da      	lsrs	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3208      	adds	r2, #8
 8003bbe:	0092      	lsls	r2, r2, #2
 8003bc0:	58d3      	ldr	r3, [r2, r3]
 8003bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2207      	movs	r2, #7
 8003bc8:	4013      	ands	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	220f      	movs	r2, #15
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	0013      	movs	r3, r2
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2107      	movs	r1, #7
 8003be2:	400b      	ands	r3, r1
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	409a      	lsls	r2, r3
 8003be8:	0013      	movs	r3, r2
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	08da      	lsrs	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3208      	adds	r2, #8
 8003bf8:	0092      	lsls	r2, r2, #2
 8003bfa:	6939      	ldr	r1, [r7, #16]
 8003bfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	0013      	movs	r3, r2
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	409a      	lsls	r2, r3
 8003c24:	0013      	movs	r3, r2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	23c0      	movs	r3, #192	@ 0xc0
 8003c38:	029b      	lsls	r3, r3, #10
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d100      	bne.n	8003c40 <HAL_GPIO_Init+0x174>
 8003c3e:	e09a      	b.n	8003d76 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c40:	4b54      	ldr	r3, [pc, #336]	@ (8003d94 <HAL_GPIO_Init+0x2c8>)
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	4b53      	ldr	r3, [pc, #332]	@ (8003d94 <HAL_GPIO_Init+0x2c8>)
 8003c46:	2101      	movs	r1, #1
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	619a      	str	r2, [r3, #24]
 8003c4c:	4b51      	ldr	r3, [pc, #324]	@ (8003d94 <HAL_GPIO_Init+0x2c8>)
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2201      	movs	r2, #1
 8003c52:	4013      	ands	r3, r2
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c58:	4a4f      	ldr	r2, [pc, #316]	@ (8003d98 <HAL_GPIO_Init+0x2cc>)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	589b      	ldr	r3, [r3, r2]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	220f      	movs	r2, #15
 8003c70:	409a      	lsls	r2, r3
 8003c72:	0013      	movs	r3, r2
 8003c74:	43da      	mvns	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	2390      	movs	r3, #144	@ 0x90
 8003c80:	05db      	lsls	r3, r3, #23
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d013      	beq.n	8003cae <HAL_GPIO_Init+0x1e2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a44      	ldr	r2, [pc, #272]	@ (8003d9c <HAL_GPIO_Init+0x2d0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00d      	beq.n	8003caa <HAL_GPIO_Init+0x1de>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a43      	ldr	r2, [pc, #268]	@ (8003da0 <HAL_GPIO_Init+0x2d4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d007      	beq.n	8003ca6 <HAL_GPIO_Init+0x1da>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a42      	ldr	r2, [pc, #264]	@ (8003da4 <HAL_GPIO_Init+0x2d8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_GPIO_Init+0x1d6>
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e006      	b.n	8003cb0 <HAL_GPIO_Init+0x1e4>
 8003ca2:	2305      	movs	r3, #5
 8003ca4:	e004      	b.n	8003cb0 <HAL_GPIO_Init+0x1e4>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e002      	b.n	8003cb0 <HAL_GPIO_Init+0x1e4>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_GPIO_Init+0x1e4>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	2103      	movs	r1, #3
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	0092      	lsls	r2, r2, #2
 8003cb8:	4093      	lsls	r3, r2
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cc0:	4935      	ldr	r1, [pc, #212]	@ (8003d98 <HAL_GPIO_Init+0x2cc>)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cce:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <HAL_GPIO_Init+0x2dc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	2380      	movs	r3, #128	@ 0x80
 8003ce4:	035b      	lsls	r3, r3, #13
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8003da8 <HAL_GPIO_Init+0x2dc>)
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8003da8 <HAL_GPIO_Init+0x2dc>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	43da      	mvns	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	2380      	movs	r3, #128	@ 0x80
 8003d0e:	039b      	lsls	r3, r3, #14
 8003d10:	4013      	ands	r3, r2
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d1c:	4b22      	ldr	r3, [pc, #136]	@ (8003da8 <HAL_GPIO_Init+0x2dc>)
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003d22:	4b21      	ldr	r3, [pc, #132]	@ (8003da8 <HAL_GPIO_Init+0x2dc>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	2380      	movs	r3, #128	@ 0x80
 8003d38:	029b      	lsls	r3, r3, #10
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d46:	4b18      	ldr	r3, [pc, #96]	@ (8003da8 <HAL_GPIO_Init+0x2dc>)
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003d4c:	4b16      	ldr	r3, [pc, #88]	@ (8003da8 <HAL_GPIO_Init+0x2dc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	43da      	mvns	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	025b      	lsls	r3, r3, #9
 8003d64:	4013      	ands	r3, r2
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d70:	4b0d      	ldr	r3, [pc, #52]	@ (8003da8 <HAL_GPIO_Init+0x2dc>)
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	40da      	lsrs	r2, r3
 8003d84:	1e13      	subs	r3, r2, #0
 8003d86:	d000      	beq.n	8003d8a <HAL_GPIO_Init+0x2be>
 8003d88:	e6a8      	b.n	8003adc <HAL_GPIO_Init+0x10>
  } 
}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	46c0      	nop			@ (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b006      	add	sp, #24
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40010000 	.word	0x40010000
 8003d9c:	48000400 	.word	0x48000400
 8003da0:	48000800 	.word	0x48000800
 8003da4:	48000c00 	.word	0x48000c00
 8003da8:	40010400 	.word	0x40010400

08003dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	000a      	movs	r2, r1
 8003db6:	1cbb      	adds	r3, r7, #2
 8003db8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	1cba      	adds	r2, r7, #2
 8003dc0:	8812      	ldrh	r2, [r2, #0]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003dc6:	230f      	movs	r3, #15
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e003      	b.n	8003dd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dd0:	230f      	movs	r3, #15
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003dd8:	230f      	movs	r3, #15
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	781b      	ldrb	r3, [r3, #0]
  }
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b004      	add	sp, #16
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	0008      	movs	r0, r1
 8003df0:	0011      	movs	r1, r2
 8003df2:	1cbb      	adds	r3, r7, #2
 8003df4:	1c02      	adds	r2, r0, #0
 8003df6:	801a      	strh	r2, [r3, #0]
 8003df8:	1c7b      	adds	r3, r7, #1
 8003dfa:	1c0a      	adds	r2, r1, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dfe:	1c7b      	adds	r3, r7, #1
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e06:	1cbb      	adds	r3, r7, #2
 8003e08:	881a      	ldrh	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e0e:	e003      	b.n	8003e18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e10:	1cbb      	adds	r3, r7, #2
 8003e12:	881a      	ldrh	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	000a      	movs	r2, r1
 8003e2a:	1cbb      	adds	r3, r7, #2
 8003e2c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e34:	1cbb      	adds	r3, r7, #2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	041a      	lsls	r2, r3, #16
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	1cb9      	adds	r1, r7, #2
 8003e44:	8809      	ldrh	r1, [r1, #0]
 8003e46:	400b      	ands	r3, r1
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	619a      	str	r2, [r3, #24]
}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e08f      	b.n	8003f8a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2241      	movs	r2, #65	@ 0x41
 8003e6e:	5c9b      	ldrb	r3, [r3, r2]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2240      	movs	r2, #64	@ 0x40
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7ff f89f 	bl	8002fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2241      	movs	r2, #65	@ 0x41
 8003e8a:	2124      	movs	r1, #36	@ 0x24
 8003e8c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	438a      	bics	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	493b      	ldr	r1, [pc, #236]	@ (8003f94 <HAL_I2C_Init+0x13c>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4938      	ldr	r1, [pc, #224]	@ (8003f98 <HAL_I2C_Init+0x140>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d108      	bne.n	8003ed6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2180      	movs	r1, #128	@ 0x80
 8003ece:	0209      	lsls	r1, r1, #8
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	e007      	b.n	8003ee6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2184      	movs	r1, #132	@ 0x84
 8003ee0:	0209      	lsls	r1, r1, #8
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d109      	bne.n	8003f02 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2180      	movs	r1, #128	@ 0x80
 8003efa:	0109      	lsls	r1, r1, #4
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e007      	b.n	8003f12 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4923      	ldr	r1, [pc, #140]	@ (8003f9c <HAL_I2C_Init+0x144>)
 8003f0e:	400a      	ands	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4920      	ldr	r1, [pc, #128]	@ (8003fa0 <HAL_I2C_Init+0x148>)
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	491a      	ldr	r1, [pc, #104]	@ (8003f98 <HAL_I2C_Init+0x140>)
 8003f2e:	400a      	ands	r2, r1
 8003f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69d9      	ldr	r1, [r3, #28]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2101      	movs	r1, #1
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2241      	movs	r2, #65	@ 0x41
 8003f76:	2120      	movs	r1, #32
 8003f78:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2242      	movs	r2, #66	@ 0x42
 8003f84:	2100      	movs	r1, #0
 8003f86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b002      	add	sp, #8
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	f0ffffff 	.word	0xf0ffffff
 8003f98:	ffff7fff 	.word	0xffff7fff
 8003f9c:	fffff7ff 	.word	0xfffff7ff
 8003fa0:	02008000 	.word	0x02008000

08003fa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b590      	push	{r4, r7, lr}
 8003fa6:	b089      	sub	sp, #36	@ 0x24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	000c      	movs	r4, r1
 8003fae:	0010      	movs	r0, r2
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	230a      	movs	r3, #10
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	1c22      	adds	r2, r4, #0
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	2308      	movs	r3, #8
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	1c02      	adds	r2, r0, #0
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	1dbb      	adds	r3, r7, #6
 8003fc4:	1c0a      	adds	r2, r1, #0
 8003fc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2241      	movs	r2, #65	@ 0x41
 8003fcc:	5c9b      	ldrb	r3, [r3, r2]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d000      	beq.n	8003fd6 <HAL_I2C_Mem_Read+0x32>
 8003fd4:	e110      	b.n	80041f8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <HAL_I2C_Mem_Read+0x42>
 8003fdc:	232c      	movs	r3, #44	@ 0x2c
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2280      	movs	r2, #128	@ 0x80
 8003fea:	0092      	lsls	r2, r2, #2
 8003fec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e103      	b.n	80041fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2240      	movs	r2, #64	@ 0x40
 8003ff6:	5c9b      	ldrb	r3, [r3, r2]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2C_Mem_Read+0x5c>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0fc      	b.n	80041fa <HAL_I2C_Mem_Read+0x256>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2240      	movs	r2, #64	@ 0x40
 8004004:	2101      	movs	r1, #1
 8004006:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004008:	f7ff fa48 	bl	800349c <HAL_GetTick>
 800400c:	0003      	movs	r3, r0
 800400e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	0219      	lsls	r1, r3, #8
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	2319      	movs	r3, #25
 800401c:	2201      	movs	r2, #1
 800401e:	f000 f979 	bl	8004314 <I2C_WaitOnFlagUntilTimeout>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0e7      	b.n	80041fa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2241      	movs	r2, #65	@ 0x41
 800402e:	2122      	movs	r1, #34	@ 0x22
 8004030:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2242      	movs	r2, #66	@ 0x42
 8004036:	2140      	movs	r1, #64	@ 0x40
 8004038:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004044:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	222c      	movs	r2, #44	@ 0x2c
 800404a:	18ba      	adds	r2, r7, r2
 800404c:	8812      	ldrh	r2, [r2, #0]
 800404e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004056:	1dbb      	adds	r3, r7, #6
 8004058:	881c      	ldrh	r4, [r3, #0]
 800405a:	2308      	movs	r3, #8
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	881a      	ldrh	r2, [r3, #0]
 8004060:	230a      	movs	r3, #10
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	8819      	ldrh	r1, [r3, #0]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	0023      	movs	r3, r4
 8004072:	f000 f8cb 	bl	800420c <I2C_RequestMemoryRead>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d005      	beq.n	8004086 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2240      	movs	r2, #64	@ 0x40
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0b9      	b.n	80041fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	2bff      	cmp	r3, #255	@ 0xff
 800408e:	d911      	bls.n	80040b4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409a:	b2da      	uxtb	r2, r3
 800409c:	2380      	movs	r3, #128	@ 0x80
 800409e:	045c      	lsls	r4, r3, #17
 80040a0:	230a      	movs	r3, #10
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	8819      	ldrh	r1, [r3, #0]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	4b56      	ldr	r3, [pc, #344]	@ (8004204 <HAL_I2C_Mem_Read+0x260>)
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	0023      	movs	r3, r4
 80040ae:	f000 fb0b 	bl	80046c8 <I2C_TransferConfig>
 80040b2:	e012      	b.n	80040da <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	049c      	lsls	r4, r3, #18
 80040c8:	230a      	movs	r3, #10
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	8819      	ldrh	r1, [r3, #0]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004204 <HAL_I2C_Mem_Read+0x260>)
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	0023      	movs	r3, r4
 80040d6:	f000 faf7 	bl	80046c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	0013      	movs	r3, r2
 80040e4:	2200      	movs	r2, #0
 80040e6:	2104      	movs	r1, #4
 80040e8:	f000 f914 	bl	8004314 <I2C_WaitOnFlagUntilTimeout>
 80040ec:	1e03      	subs	r3, r0, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e082      	b.n	80041fa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d03a      	beq.n	80041a6 <HAL_I2C_Mem_Read+0x202>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d136      	bne.n	80041a6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	0013      	movs	r3, r2
 8004142:	2200      	movs	r2, #0
 8004144:	2180      	movs	r1, #128	@ 0x80
 8004146:	f000 f8e5 	bl	8004314 <I2C_WaitOnFlagUntilTimeout>
 800414a:	1e03      	subs	r3, r0, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e053      	b.n	80041fa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	2bff      	cmp	r3, #255	@ 0xff
 800415a:	d911      	bls.n	8004180 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	b2da      	uxtb	r2, r3
 8004168:	2380      	movs	r3, #128	@ 0x80
 800416a:	045c      	lsls	r4, r3, #17
 800416c:	230a      	movs	r3, #10
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	8819      	ldrh	r1, [r3, #0]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	2300      	movs	r3, #0
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	0023      	movs	r3, r4
 800417a:	f000 faa5 	bl	80046c8 <I2C_TransferConfig>
 800417e:	e012      	b.n	80041a6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418e:	b2da      	uxtb	r2, r3
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	049c      	lsls	r4, r3, #18
 8004194:	230a      	movs	r3, #10
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	8819      	ldrh	r1, [r3, #0]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	2300      	movs	r3, #0
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	0023      	movs	r3, r4
 80041a2:	f000 fa91 	bl	80046c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d194      	bne.n	80040da <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	0018      	movs	r0, r3
 80041b8:	f000 f94a 	bl	8004450 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041bc:	1e03      	subs	r3, r0, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e01a      	b.n	80041fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2220      	movs	r2, #32
 80041ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	490c      	ldr	r1, [pc, #48]	@ (8004208 <HAL_I2C_Mem_Read+0x264>)
 80041d8:	400a      	ands	r2, r1
 80041da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2241      	movs	r2, #65	@ 0x41
 80041e0:	2120      	movs	r1, #32
 80041e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2242      	movs	r2, #66	@ 0x42
 80041e8:	2100      	movs	r1, #0
 80041ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2240      	movs	r2, #64	@ 0x40
 80041f0:	2100      	movs	r1, #0
 80041f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b007      	add	sp, #28
 8004200:	bd90      	pop	{r4, r7, pc}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	80002400 	.word	0x80002400
 8004208:	fe00e800 	.word	0xfe00e800

0800420c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800420c:	b5b0      	push	{r4, r5, r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	000c      	movs	r4, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	250a      	movs	r5, #10
 800421c:	197b      	adds	r3, r7, r5
 800421e:	1c22      	adds	r2, r4, #0
 8004220:	801a      	strh	r2, [r3, #0]
 8004222:	2308      	movs	r3, #8
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	1c02      	adds	r2, r0, #0
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	1dbb      	adds	r3, r7, #6
 800422c:	1c0a      	adds	r2, r1, #0
 800422e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004230:	1dbb      	adds	r3, r7, #6
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	197b      	adds	r3, r7, r5
 8004238:	8819      	ldrh	r1, [r3, #0]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <I2C_RequestMemoryRead+0xc0>)
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2300      	movs	r3, #0
 8004242:	f000 fa41 	bl	80046c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004248:	6a39      	ldr	r1, [r7, #32]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	0018      	movs	r0, r3
 800424e:	f000 f8b9 	bl	80043c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004252:	1e03      	subs	r3, r0, #0
 8004254:	d001      	beq.n	800425a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e033      	b.n	80042c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800425a:	1dbb      	adds	r3, r7, #6
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004262:	2308      	movs	r3, #8
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004270:	e019      	b.n	80042a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004272:	2308      	movs	r3, #8
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	b29b      	uxth	r3, r3
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004286:	6a39      	ldr	r1, [r7, #32]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	0018      	movs	r0, r3
 800428c:	f000 f89a 	bl	80043c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d001      	beq.n	8004298 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e014      	b.n	80042c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004298:	2308      	movs	r3, #8
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042a6:	6a3a      	ldr	r2, [r7, #32]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	0013      	movs	r3, r2
 80042b0:	2200      	movs	r2, #0
 80042b2:	2140      	movs	r1, #64	@ 0x40
 80042b4:	f000 f82e 	bl	8004314 <I2C_WaitOnFlagUntilTimeout>
 80042b8:	1e03      	subs	r3, r0, #0
 80042ba:	d001      	beq.n	80042c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	0018      	movs	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b004      	add	sp, #16
 80042c8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	80002000 	.word	0x80002000

080042d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2202      	movs	r2, #2
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d103      	bne.n	80042ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2201      	movs	r2, #1
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d007      	beq.n	800430c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	430a      	orrs	r2, r1
 800430a:	619a      	str	r2, [r3, #24]
  }
}
 800430c:	46c0      	nop			@ (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	1dfb      	adds	r3, r7, #7
 8004322:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004324:	e03a      	b.n	800439c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	6839      	ldr	r1, [r7, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	0018      	movs	r0, r3
 800432e:	f000 f8d3 	bl	80044d8 <I2C_IsErrorOccurred>
 8004332:	1e03      	subs	r3, r0, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e040      	b.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	d02d      	beq.n	800439c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7ff f8ac 	bl	800349c <HAL_GetTick>
 8004344:	0002      	movs	r2, r0
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d122      	bne.n	800439c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	4013      	ands	r3, r2
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	425a      	negs	r2, r3
 8004366:	4153      	adcs	r3, r2
 8004368:	b2db      	uxtb	r3, r3
 800436a:	001a      	movs	r2, r3
 800436c:	1dfb      	adds	r3, r7, #7
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d113      	bne.n	800439c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004378:	2220      	movs	r2, #32
 800437a:	431a      	orrs	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2241      	movs	r2, #65	@ 0x41
 8004384:	2120      	movs	r1, #32
 8004386:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2242      	movs	r2, #66	@ 0x42
 800438c:	2100      	movs	r1, #0
 800438e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2240      	movs	r2, #64	@ 0x40
 8004394:	2100      	movs	r1, #0
 8004396:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e00f      	b.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	425a      	negs	r2, r3
 80043ac:	4153      	adcs	r3, r2
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	001a      	movs	r2, r3
 80043b2:	1dfb      	adds	r3, r7, #7
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d0b5      	beq.n	8004326 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b004      	add	sp, #16
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043d0:	e032      	b.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	0018      	movs	r0, r3
 80043da:	f000 f87d 	bl	80044d8 <I2C_IsErrorOccurred>
 80043de:	1e03      	subs	r3, r0, #0
 80043e0:	d001      	beq.n	80043e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e030      	b.n	8004448 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	3301      	adds	r3, #1
 80043ea:	d025      	beq.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ec:	f7ff f856 	bl	800349c <HAL_GetTick>
 80043f0:	0002      	movs	r2, r0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d302      	bcc.n	8004402 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11a      	bne.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2202      	movs	r2, #2
 800440a:	4013      	ands	r3, r2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d013      	beq.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004414:	2220      	movs	r2, #32
 8004416:	431a      	orrs	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2241      	movs	r2, #65	@ 0x41
 8004420:	2120      	movs	r1, #32
 8004422:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2242      	movs	r2, #66	@ 0x42
 8004428:	2100      	movs	r1, #0
 800442a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2240      	movs	r2, #64	@ 0x40
 8004430:	2100      	movs	r1, #0
 8004432:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e007      	b.n	8004448 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2202      	movs	r2, #2
 8004440:	4013      	ands	r3, r2
 8004442:	2b02      	cmp	r3, #2
 8004444:	d1c5      	bne.n	80043d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	b004      	add	sp, #16
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800445c:	e02f      	b.n	80044be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	0018      	movs	r0, r3
 8004466:	f000 f837 	bl	80044d8 <I2C_IsErrorOccurred>
 800446a:	1e03      	subs	r3, r0, #0
 800446c:	d001      	beq.n	8004472 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e02d      	b.n	80044ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7ff f813 	bl	800349c <HAL_GetTick>
 8004476:	0002      	movs	r2, r0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11a      	bne.n	80044be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2220      	movs	r2, #32
 8004490:	4013      	ands	r3, r2
 8004492:	2b20      	cmp	r3, #32
 8004494:	d013      	beq.n	80044be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	2220      	movs	r2, #32
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2241      	movs	r2, #65	@ 0x41
 80044a6:	2120      	movs	r1, #32
 80044a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2242      	movs	r2, #66	@ 0x42
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2240      	movs	r2, #64	@ 0x40
 80044b6:	2100      	movs	r1, #0
 80044b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e007      	b.n	80044ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2220      	movs	r2, #32
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d1c8      	bne.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b004      	add	sp, #16
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	@ 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e4:	2327      	movs	r3, #39	@ 0x27
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	2200      	movs	r2, #0
 80044ea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2210      	movs	r2, #16
 8004500:	4013      	ands	r3, r2
 8004502:	d100      	bne.n	8004506 <I2C_IsErrorOccurred+0x2e>
 8004504:	e079      	b.n	80045fa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2210      	movs	r2, #16
 800450c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800450e:	e057      	b.n	80045c0 <I2C_IsErrorOccurred+0xe8>
 8004510:	2227      	movs	r2, #39	@ 0x27
 8004512:	18bb      	adds	r3, r7, r2
 8004514:	18ba      	adds	r2, r7, r2
 8004516:	7812      	ldrb	r2, [r2, #0]
 8004518:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3301      	adds	r3, #1
 800451e:	d04f      	beq.n	80045c0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004520:	f7fe ffbc 	bl	800349c <HAL_GetTick>
 8004524:	0002      	movs	r2, r0
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <I2C_IsErrorOccurred+0x5e>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d144      	bne.n	80045c0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	2380      	movs	r3, #128	@ 0x80
 800453e:	01db      	lsls	r3, r3, #7
 8004540:	4013      	ands	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004544:	2013      	movs	r0, #19
 8004546:	183b      	adds	r3, r7, r0
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	2142      	movs	r1, #66	@ 0x42
 800454c:	5c52      	ldrb	r2, [r2, r1]
 800454e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	2380      	movs	r3, #128	@ 0x80
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	401a      	ands	r2, r3
 800455c:	2380      	movs	r3, #128	@ 0x80
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	429a      	cmp	r2, r3
 8004562:	d126      	bne.n	80045b2 <I2C_IsErrorOccurred+0xda>
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	01db      	lsls	r3, r3, #7
 800456a:	429a      	cmp	r2, r3
 800456c:	d021      	beq.n	80045b2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800456e:	183b      	adds	r3, r7, r0
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b20      	cmp	r3, #32
 8004574:	d01d      	beq.n	80045b2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2180      	movs	r1, #128	@ 0x80
 8004582:	01c9      	lsls	r1, r1, #7
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004588:	f7fe ff88 	bl	800349c <HAL_GetTick>
 800458c:	0003      	movs	r3, r0
 800458e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004590:	e00f      	b.n	80045b2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004592:	f7fe ff83 	bl	800349c <HAL_GetTick>
 8004596:	0002      	movs	r2, r0
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b19      	cmp	r3, #25
 800459e:	d908      	bls.n	80045b2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	2220      	movs	r2, #32
 80045a4:	4313      	orrs	r3, r2
 80045a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045a8:	2327      	movs	r3, #39	@ 0x27
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]

              break;
 80045b0:	e006      	b.n	80045c0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2220      	movs	r2, #32
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d1e8      	bne.n	8004592 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2220      	movs	r2, #32
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d004      	beq.n	80045d8 <I2C_IsErrorOccurred+0x100>
 80045ce:	2327      	movs	r3, #39	@ 0x27
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d09b      	beq.n	8004510 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045d8:	2327      	movs	r3, #39	@ 0x27
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2220      	movs	r2, #32
 80045e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	2204      	movs	r2, #4
 80045ee:	4313      	orrs	r3, r2
 80045f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045f2:	2327      	movs	r3, #39	@ 0x27
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	2380      	movs	r3, #128	@ 0x80
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	4013      	ands	r3, r2
 800460a:	d00c      	beq.n	8004626 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2201      	movs	r2, #1
 8004610:	4313      	orrs	r3, r2
 8004612:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2280      	movs	r2, #128	@ 0x80
 800461a:	0052      	lsls	r2, r2, #1
 800461c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800461e:	2327      	movs	r3, #39	@ 0x27
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	2380      	movs	r3, #128	@ 0x80
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4013      	ands	r3, r2
 800462e:	d00c      	beq.n	800464a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2208      	movs	r2, #8
 8004634:	4313      	orrs	r3, r2
 8004636:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2280      	movs	r2, #128	@ 0x80
 800463e:	00d2      	lsls	r2, r2, #3
 8004640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004642:	2327      	movs	r3, #39	@ 0x27
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	2380      	movs	r3, #128	@ 0x80
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4013      	ands	r3, r2
 8004652:	d00c      	beq.n	800466e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2202      	movs	r2, #2
 8004658:	4313      	orrs	r3, r2
 800465a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2280      	movs	r2, #128	@ 0x80
 8004662:	0092      	lsls	r2, r2, #2
 8004664:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004666:	2327      	movs	r3, #39	@ 0x27
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800466e:	2327      	movs	r3, #39	@ 0x27
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01d      	beq.n	80046b4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	0018      	movs	r0, r3
 800467c:	f7ff fe28 	bl	80042d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	490e      	ldr	r1, [pc, #56]	@ (80046c4 <I2C_IsErrorOccurred+0x1ec>)
 800468c:	400a      	ands	r2, r1
 800468e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	431a      	orrs	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2241      	movs	r2, #65	@ 0x41
 80046a0:	2120      	movs	r1, #32
 80046a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2242      	movs	r2, #66	@ 0x42
 80046a8:	2100      	movs	r1, #0
 80046aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2240      	movs	r2, #64	@ 0x40
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80046b4:	2327      	movs	r3, #39	@ 0x27
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	781b      	ldrb	r3, [r3, #0]
}
 80046ba:	0018      	movs	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	b00a      	add	sp, #40	@ 0x28
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	fe00e800 	.word	0xfe00e800

080046c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	0008      	movs	r0, r1
 80046d2:	0011      	movs	r1, r2
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	240a      	movs	r4, #10
 80046d8:	193b      	adds	r3, r7, r4
 80046da:	1c02      	adds	r2, r0, #0
 80046dc:	801a      	strh	r2, [r3, #0]
 80046de:	2009      	movs	r0, #9
 80046e0:	183b      	adds	r3, r7, r0
 80046e2:	1c0a      	adds	r2, r1, #0
 80046e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046e6:	193b      	adds	r3, r7, r4
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	059b      	lsls	r3, r3, #22
 80046ec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046ee:	183b      	adds	r3, r7, r0
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	0419      	lsls	r1, r3, #16
 80046f4:	23ff      	movs	r3, #255	@ 0xff
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046fa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	4313      	orrs	r3, r2
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004712:	0d51      	lsrs	r1, r2, #21
 8004714:	2280      	movs	r2, #128	@ 0x80
 8004716:	00d2      	lsls	r2, r2, #3
 8004718:	400a      	ands	r2, r1
 800471a:	4907      	ldr	r1, [pc, #28]	@ (8004738 <I2C_TransferConfig+0x70>)
 800471c:	430a      	orrs	r2, r1
 800471e:	43d2      	mvns	r2, r2
 8004720:	401a      	ands	r2, r3
 8004722:	0011      	movs	r1, r2
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b007      	add	sp, #28
 8004734:	bd90      	pop	{r4, r7, pc}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	03ff63ff 	.word	0x03ff63ff

0800473c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2241      	movs	r2, #65	@ 0x41
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b20      	cmp	r3, #32
 8004750:	d138      	bne.n	80047c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2240      	movs	r2, #64	@ 0x40
 8004756:	5c9b      	ldrb	r3, [r3, r2]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800475c:	2302      	movs	r3, #2
 800475e:	e032      	b.n	80047c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2240      	movs	r2, #64	@ 0x40
 8004764:	2101      	movs	r1, #1
 8004766:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2241      	movs	r2, #65	@ 0x41
 800476c:	2124      	movs	r1, #36	@ 0x24
 800476e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2101      	movs	r1, #1
 800477c:	438a      	bics	r2, r1
 800477e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4911      	ldr	r1, [pc, #68]	@ (80047d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800478c:	400a      	ands	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2101      	movs	r1, #1
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2241      	movs	r2, #65	@ 0x41
 80047b4:	2120      	movs	r1, #32
 80047b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2240      	movs	r2, #64	@ 0x40
 80047bc:	2100      	movs	r1, #0
 80047be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b002      	add	sp, #8
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	ffffefff 	.word	0xffffefff

080047d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2241      	movs	r2, #65	@ 0x41
 80047e2:	5c9b      	ldrb	r3, [r3, r2]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d139      	bne.n	800485e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2240      	movs	r2, #64	@ 0x40
 80047ee:	5c9b      	ldrb	r3, [r3, r2]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e033      	b.n	8004860 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2240      	movs	r2, #64	@ 0x40
 80047fc:	2101      	movs	r1, #1
 80047fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2241      	movs	r2, #65	@ 0x41
 8004804:	2124      	movs	r1, #36	@ 0x24
 8004806:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2101      	movs	r1, #1
 8004814:	438a      	bics	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a11      	ldr	r2, [pc, #68]	@ (8004868 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2101      	movs	r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2241      	movs	r2, #65	@ 0x41
 800484e:	2120      	movs	r1, #32
 8004850:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2240      	movs	r2, #64	@ 0x40
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	b004      	add	sp, #16
 8004866:	bd80      	pop	{r7, pc}
 8004868:	fffff0ff 	.word	0xfffff0ff

0800486c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e301      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2201      	movs	r2, #1
 8004884:	4013      	ands	r3, r2
 8004886:	d100      	bne.n	800488a <HAL_RCC_OscConfig+0x1e>
 8004888:	e08d      	b.n	80049a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800488a:	4bc3      	ldr	r3, [pc, #780]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	220c      	movs	r2, #12
 8004890:	4013      	ands	r3, r2
 8004892:	2b04      	cmp	r3, #4
 8004894:	d00e      	beq.n	80048b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004896:	4bc0      	ldr	r3, [pc, #768]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	220c      	movs	r2, #12
 800489c:	4013      	ands	r3, r2
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d116      	bne.n	80048d0 <HAL_RCC_OscConfig+0x64>
 80048a2:	4bbd      	ldr	r3, [pc, #756]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	025b      	lsls	r3, r3, #9
 80048aa:	401a      	ands	r2, r3
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	025b      	lsls	r3, r3, #9
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d10d      	bne.n	80048d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	4bb8      	ldr	r3, [pc, #736]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	2380      	movs	r3, #128	@ 0x80
 80048ba:	029b      	lsls	r3, r3, #10
 80048bc:	4013      	ands	r3, r2
 80048be:	d100      	bne.n	80048c2 <HAL_RCC_OscConfig+0x56>
 80048c0:	e070      	b.n	80049a4 <HAL_RCC_OscConfig+0x138>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d000      	beq.n	80048cc <HAL_RCC_OscConfig+0x60>
 80048ca:	e06b      	b.n	80049a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e2d8      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x7c>
 80048d8:	4baf      	ldr	r3, [pc, #700]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4bae      	ldr	r3, [pc, #696]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80048de:	2180      	movs	r1, #128	@ 0x80
 80048e0:	0249      	lsls	r1, r1, #9
 80048e2:	430a      	orrs	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e02f      	b.n	8004948 <HAL_RCC_OscConfig+0xdc>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10c      	bne.n	800490a <HAL_RCC_OscConfig+0x9e>
 80048f0:	4ba9      	ldr	r3, [pc, #676]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4ba8      	ldr	r3, [pc, #672]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80048f6:	49a9      	ldr	r1, [pc, #676]	@ (8004b9c <HAL_RCC_OscConfig+0x330>)
 80048f8:	400a      	ands	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	4ba6      	ldr	r3, [pc, #664]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4ba5      	ldr	r3, [pc, #660]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004902:	49a7      	ldr	r1, [pc, #668]	@ (8004ba0 <HAL_RCC_OscConfig+0x334>)
 8004904:	400a      	ands	r2, r1
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	e01e      	b.n	8004948 <HAL_RCC_OscConfig+0xdc>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b05      	cmp	r3, #5
 8004910:	d10e      	bne.n	8004930 <HAL_RCC_OscConfig+0xc4>
 8004912:	4ba1      	ldr	r3, [pc, #644]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4ba0      	ldr	r3, [pc, #640]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004918:	2180      	movs	r1, #128	@ 0x80
 800491a:	02c9      	lsls	r1, r1, #11
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	4b9d      	ldr	r3, [pc, #628]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b9c      	ldr	r3, [pc, #624]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004926:	2180      	movs	r1, #128	@ 0x80
 8004928:	0249      	lsls	r1, r1, #9
 800492a:	430a      	orrs	r2, r1
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0xdc>
 8004930:	4b99      	ldr	r3, [pc, #612]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	4b98      	ldr	r3, [pc, #608]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004936:	4999      	ldr	r1, [pc, #612]	@ (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004938:	400a      	ands	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	4b96      	ldr	r3, [pc, #600]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b95      	ldr	r3, [pc, #596]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004942:	4997      	ldr	r1, [pc, #604]	@ (8004ba0 <HAL_RCC_OscConfig+0x334>)
 8004944:	400a      	ands	r2, r1
 8004946:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d014      	beq.n	800497a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fe fda4 	bl	800349c <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800495a:	f7fe fd9f 	bl	800349c <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b64      	cmp	r3, #100	@ 0x64
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e28a      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496c:	4b8a      	ldr	r3, [pc, #552]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	2380      	movs	r3, #128	@ 0x80
 8004972:	029b      	lsls	r3, r3, #10
 8004974:	4013      	ands	r3, r2
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0xee>
 8004978:	e015      	b.n	80049a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497a:	f7fe fd8f 	bl	800349c <HAL_GetTick>
 800497e:	0003      	movs	r3, r0
 8004980:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004984:	f7fe fd8a 	bl	800349c <HAL_GetTick>
 8004988:	0002      	movs	r2, r0
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	@ 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e275      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	4b80      	ldr	r3, [pc, #512]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2380      	movs	r3, #128	@ 0x80
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	4013      	ands	r3, r2
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x118>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2202      	movs	r2, #2
 80049ac:	4013      	ands	r3, r2
 80049ae:	d100      	bne.n	80049b2 <HAL_RCC_OscConfig+0x146>
 80049b0:	e069      	b.n	8004a86 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80049b2:	4b79      	ldr	r3, [pc, #484]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	220c      	movs	r2, #12
 80049b8:	4013      	ands	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049bc:	4b76      	ldr	r3, [pc, #472]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	220c      	movs	r2, #12
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d11c      	bne.n	8004a02 <HAL_RCC_OscConfig+0x196>
 80049c8:	4b73      	ldr	r3, [pc, #460]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	025b      	lsls	r3, r3, #9
 80049d0:	4013      	ands	r3, r2
 80049d2:	d116      	bne.n	8004a02 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d4:	4b70      	ldr	r3, [pc, #448]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2202      	movs	r2, #2
 80049da:	4013      	ands	r3, r2
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x17e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e24b      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	4b6b      	ldr	r3, [pc, #428]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	22f8      	movs	r2, #248	@ 0xf8
 80049f0:	4393      	bics	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	00da      	lsls	r2, r3, #3
 80049fa:	4b67      	ldr	r3, [pc, #412]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 80049fc:	430a      	orrs	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a00:	e041      	b.n	8004a86 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d024      	beq.n	8004a54 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a0a:	4b63      	ldr	r3, [pc, #396]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b62      	ldr	r3, [pc, #392]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a10:	2101      	movs	r1, #1
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7fe fd41 	bl	800349c <HAL_GetTick>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fe fd3c 	bl	800349c <HAL_GetTick>
 8004a24:	0002      	movs	r2, r0
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e227      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	4b59      	ldr	r3, [pc, #356]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2202      	movs	r2, #2
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d0f1      	beq.n	8004a20 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3c:	4b56      	ldr	r3, [pc, #344]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	22f8      	movs	r2, #248	@ 0xf8
 8004a42:	4393      	bics	r3, r2
 8004a44:	0019      	movs	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	00da      	lsls	r2, r3, #3
 8004a4c:	4b52      	ldr	r3, [pc, #328]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e018      	b.n	8004a86 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a54:	4b50      	ldr	r3, [pc, #320]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b4f      	ldr	r3, [pc, #316]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	438a      	bics	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fe fd1c 	bl	800349c <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a6a:	f7fe fd17 	bl	800349c <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e202      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7c:	4b46      	ldr	r3, [pc, #280]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2202      	movs	r2, #2
 8004a82:	4013      	ands	r3, r2
 8004a84:	d1f1      	bne.n	8004a6a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d036      	beq.n	8004afe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a98:	4b3f      	ldr	r3, [pc, #252]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fe fcfa 	bl	800349c <HAL_GetTick>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aae:	f7fe fcf5 	bl	800349c <HAL_GetTick>
 8004ab2:	0002      	movs	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e1e0      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac0:	4b35      	ldr	r3, [pc, #212]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d0f1      	beq.n	8004aae <HAL_RCC_OscConfig+0x242>
 8004aca:	e018      	b.n	8004afe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004acc:	4b32      	ldr	r3, [pc, #200]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ad0:	4b31      	ldr	r3, [pc, #196]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad8:	f7fe fce0 	bl	800349c <HAL_GetTick>
 8004adc:	0003      	movs	r3, r0
 8004ade:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae2:	f7fe fcdb 	bl	800349c <HAL_GetTick>
 8004ae6:	0002      	movs	r2, r0
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e1c6      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	4b28      	ldr	r3, [pc, #160]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	2202      	movs	r2, #2
 8004afa:	4013      	ands	r3, r2
 8004afc:	d1f1      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2204      	movs	r2, #4
 8004b04:	4013      	ands	r3, r2
 8004b06:	d100      	bne.n	8004b0a <HAL_RCC_OscConfig+0x29e>
 8004b08:	e0b4      	b.n	8004c74 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0a:	201f      	movs	r0, #31
 8004b0c:	183b      	adds	r3, r7, r0
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	4b21      	ldr	r3, [pc, #132]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	2380      	movs	r3, #128	@ 0x80
 8004b18:	055b      	lsls	r3, r3, #21
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d110      	bne.n	8004b40 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004b20:	69da      	ldr	r2, [r3, #28]
 8004b22:	4b1d      	ldr	r3, [pc, #116]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004b24:	2180      	movs	r1, #128	@ 0x80
 8004b26:	0549      	lsls	r1, r1, #21
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	61da      	str	r2, [r3, #28]
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	055b      	lsls	r3, r3, #21
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b3a:	183b      	adds	r3, r7, r0
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	4b18      	ldr	r3, [pc, #96]	@ (8004ba4 <HAL_RCC_OscConfig+0x338>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	2380      	movs	r3, #128	@ 0x80
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d11a      	bne.n	8004b82 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <HAL_RCC_OscConfig+0x338>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b14      	ldr	r3, [pc, #80]	@ (8004ba4 <HAL_RCC_OscConfig+0x338>)
 8004b52:	2180      	movs	r1, #128	@ 0x80
 8004b54:	0049      	lsls	r1, r1, #1
 8004b56:	430a      	orrs	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5a:	f7fe fc9f 	bl	800349c <HAL_GetTick>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b64:	f7fe fc9a 	bl	800349c <HAL_GetTick>
 8004b68:	0002      	movs	r2, r0
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	@ 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e185      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <HAL_RCC_OscConfig+0x338>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	2380      	movs	r3, #128	@ 0x80
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10e      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x33c>
 8004b8a:	4b03      	ldr	r3, [pc, #12]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	4b02      	ldr	r3, [pc, #8]	@ (8004b98 <HAL_RCC_OscConfig+0x32c>)
 8004b90:	2101      	movs	r1, #1
 8004b92:	430a      	orrs	r2, r1
 8004b94:	621a      	str	r2, [r3, #32]
 8004b96:	e035      	b.n	8004c04 <HAL_RCC_OscConfig+0x398>
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	fffeffff 	.word	0xfffeffff
 8004ba0:	fffbffff 	.word	0xfffbffff
 8004ba4:	40007000 	.word	0x40007000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10c      	bne.n	8004bca <HAL_RCC_OscConfig+0x35e>
 8004bb0:	4bb6      	ldr	r3, [pc, #728]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	4bb5      	ldr	r3, [pc, #724]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	438a      	bics	r2, r1
 8004bba:	621a      	str	r2, [r3, #32]
 8004bbc:	4bb3      	ldr	r3, [pc, #716]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	4bb2      	ldr	r3, [pc, #712]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bc2:	2104      	movs	r1, #4
 8004bc4:	438a      	bics	r2, r1
 8004bc6:	621a      	str	r2, [r3, #32]
 8004bc8:	e01c      	b.n	8004c04 <HAL_RCC_OscConfig+0x398>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCC_OscConfig+0x380>
 8004bd2:	4bae      	ldr	r3, [pc, #696]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	4bad      	ldr	r3, [pc, #692]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bd8:	2104      	movs	r1, #4
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	621a      	str	r2, [r3, #32]
 8004bde:	4bab      	ldr	r3, [pc, #684]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	4baa      	ldr	r3, [pc, #680]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004be4:	2101      	movs	r1, #1
 8004be6:	430a      	orrs	r2, r1
 8004be8:	621a      	str	r2, [r3, #32]
 8004bea:	e00b      	b.n	8004c04 <HAL_RCC_OscConfig+0x398>
 8004bec:	4ba7      	ldr	r3, [pc, #668]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	4ba6      	ldr	r3, [pc, #664]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	438a      	bics	r2, r1
 8004bf6:	621a      	str	r2, [r3, #32]
 8004bf8:	4ba4      	ldr	r3, [pc, #656]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bfa:	6a1a      	ldr	r2, [r3, #32]
 8004bfc:	4ba3      	ldr	r3, [pc, #652]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004bfe:	2104      	movs	r1, #4
 8004c00:	438a      	bics	r2, r1
 8004c02:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d014      	beq.n	8004c36 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fe fc46 	bl	800349c <HAL_GetTick>
 8004c10:	0003      	movs	r3, r0
 8004c12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c14:	e009      	b.n	8004c2a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fe fc41 	bl	800349c <HAL_GetTick>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	4a9b      	ldr	r2, [pc, #620]	@ (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e12b      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2a:	4b98      	ldr	r3, [pc, #608]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	4013      	ands	r3, r2
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x3aa>
 8004c34:	e013      	b.n	8004c5e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c36:	f7fe fc31 	bl	800349c <HAL_GetTick>
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3e:	e009      	b.n	8004c54 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c40:	f7fe fc2c 	bl	800349c <HAL_GetTick>
 8004c44:	0002      	movs	r2, r0
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	4a91      	ldr	r2, [pc, #580]	@ (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e116      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c54:	4b8d      	ldr	r3, [pc, #564]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c5e:	231f      	movs	r3, #31
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d105      	bne.n	8004c74 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c68:	4b88      	ldr	r3, [pc, #544]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	4b87      	ldr	r3, [pc, #540]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004c6e:	4989      	ldr	r1, [pc, #548]	@ (8004e94 <HAL_RCC_OscConfig+0x628>)
 8004c70:	400a      	ands	r2, r1
 8004c72:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d063      	beq.n	8004d46 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d12a      	bne.n	8004cdc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c86:	4b81      	ldr	r3, [pc, #516]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c8a:	4b80      	ldr	r3, [pc, #512]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004c92:	4b7e      	ldr	r3, [pc, #504]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004c94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c96:	4b7d      	ldr	r3, [pc, #500]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004c98:	2101      	movs	r1, #1
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9e:	f7fe fbfd 	bl	800349c <HAL_GetTick>
 8004ca2:	0003      	movs	r3, r0
 8004ca4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ca8:	f7fe fbf8 	bl	800349c <HAL_GetTick>
 8004cac:	0002      	movs	r2, r0
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e0e3      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004cba:	4b74      	ldr	r3, [pc, #464]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d0f1      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004cc4:	4b71      	ldr	r3, [pc, #452]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc8:	22f8      	movs	r2, #248	@ 0xf8
 8004cca:	4393      	bics	r3, r2
 8004ccc:	0019      	movs	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	00da      	lsls	r2, r3, #3
 8004cd4:	4b6d      	ldr	r3, [pc, #436]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004cda:	e034      	b.n	8004d46 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	3305      	adds	r3, #5
 8004ce2:	d111      	bne.n	8004d08 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004ce4:	4b69      	ldr	r3, [pc, #420]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce8:	4b68      	ldr	r3, [pc, #416]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004cea:	2104      	movs	r1, #4
 8004cec:	438a      	bics	r2, r1
 8004cee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004cf0:	4b66      	ldr	r3, [pc, #408]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf4:	22f8      	movs	r2, #248	@ 0xf8
 8004cf6:	4393      	bics	r3, r2
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	00da      	lsls	r2, r3, #3
 8004d00:	4b62      	ldr	r3, [pc, #392]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d02:	430a      	orrs	r2, r1
 8004d04:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d06:	e01e      	b.n	8004d46 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d08:	4b60      	ldr	r3, [pc, #384]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0c:	4b5f      	ldr	r3, [pc, #380]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d0e:	2104      	movs	r1, #4
 8004d10:	430a      	orrs	r2, r1
 8004d12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d14:	4b5d      	ldr	r3, [pc, #372]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d18:	4b5c      	ldr	r3, [pc, #368]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	438a      	bics	r2, r1
 8004d1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d20:	f7fe fbbc 	bl	800349c <HAL_GetTick>
 8004d24:	0003      	movs	r3, r0
 8004d26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d2a:	f7fe fbb7 	bl	800349c <HAL_GetTick>
 8004d2e:	0002      	movs	r2, r0
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e0a2      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d3c:	4b53      	ldr	r3, [pc, #332]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d40:	2202      	movs	r2, #2
 8004d42:	4013      	ands	r3, r2
 8004d44:	d1f1      	bne.n	8004d2a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d100      	bne.n	8004d50 <HAL_RCC_OscConfig+0x4e4>
 8004d4e:	e097      	b.n	8004e80 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d50:	4b4e      	ldr	r3, [pc, #312]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	220c      	movs	r2, #12
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d100      	bne.n	8004d5e <HAL_RCC_OscConfig+0x4f2>
 8004d5c:	e06b      	b.n	8004e36 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d14c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	4b49      	ldr	r3, [pc, #292]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b48      	ldr	r3, [pc, #288]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d6c:	494a      	ldr	r1, [pc, #296]	@ (8004e98 <HAL_RCC_OscConfig+0x62c>)
 8004d6e:	400a      	ands	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fe fb93 	bl	800349c <HAL_GetTick>
 8004d76:	0003      	movs	r3, r0
 8004d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fe fb8e 	bl	800349c <HAL_GetTick>
 8004d80:	0002      	movs	r2, r0
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e079      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	2380      	movs	r3, #128	@ 0x80
 8004d94:	049b      	lsls	r3, r3, #18
 8004d96:	4013      	ands	r3, r2
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	220f      	movs	r2, #15
 8004da0:	4393      	bics	r3, r2
 8004da2:	0019      	movs	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da8:	4b38      	ldr	r3, [pc, #224]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004daa:	430a      	orrs	r2, r1
 8004dac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dae:	4b37      	ldr	r3, [pc, #220]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4a3a      	ldr	r2, [pc, #232]	@ (8004e9c <HAL_RCC_OscConfig+0x630>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	0019      	movs	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	4b32      	ldr	r3, [pc, #200]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc8:	4b30      	ldr	r3, [pc, #192]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004dce:	2180      	movs	r1, #128	@ 0x80
 8004dd0:	0449      	lsls	r1, r1, #17
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd6:	f7fe fb61 	bl	800349c <HAL_GetTick>
 8004dda:	0003      	movs	r3, r0
 8004ddc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fe fb5c 	bl	800349c <HAL_GetTick>
 8004de4:	0002      	movs	r2, r0
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e047      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004df2:	4b26      	ldr	r3, [pc, #152]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	049b      	lsls	r3, r3, #18
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x574>
 8004dfe:	e03f      	b.n	8004e80 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e00:	4b22      	ldr	r3, [pc, #136]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4b21      	ldr	r3, [pc, #132]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004e06:	4924      	ldr	r1, [pc, #144]	@ (8004e98 <HAL_RCC_OscConfig+0x62c>)
 8004e08:	400a      	ands	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fe fb46 	bl	800349c <HAL_GetTick>
 8004e10:	0003      	movs	r3, r0
 8004e12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fe fb41 	bl	800349c <HAL_GetTick>
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e02c      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e28:	4b18      	ldr	r3, [pc, #96]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2380      	movs	r3, #128	@ 0x80
 8004e2e:	049b      	lsls	r3, r3, #18
 8004e30:	4013      	ands	r3, r2
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x5aa>
 8004e34:	e024      	b.n	8004e80 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e01f      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004e42:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004e48:	4b10      	ldr	r3, [pc, #64]	@ (8004e8c <HAL_RCC_OscConfig+0x620>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	2380      	movs	r3, #128	@ 0x80
 8004e52:	025b      	lsls	r3, r3, #9
 8004e54:	401a      	ands	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d10e      	bne.n	8004e7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	220f      	movs	r2, #15
 8004e62:	401a      	ands	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d107      	bne.n	8004e7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	23f0      	movs	r3, #240	@ 0xf0
 8004e70:	039b      	lsls	r3, r3, #14
 8004e72:	401a      	ands	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	0018      	movs	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b008      	add	sp, #32
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	00001388 	.word	0x00001388
 8004e94:	efffffff 	.word	0xefffffff
 8004e98:	feffffff 	.word	0xfeffffff
 8004e9c:	ffc2ffff 	.word	0xffc2ffff

08004ea0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0b3      	b.n	800501c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8005024 <HAL_RCC_ClockConfig+0x184>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4013      	ands	r3, r2
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d911      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b58      	ldr	r3, [pc, #352]	@ (8005024 <HAL_RCC_ClockConfig+0x184>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	4393      	bics	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	4b55      	ldr	r3, [pc, #340]	@ (8005024 <HAL_RCC_ClockConfig+0x184>)
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed4:	4b53      	ldr	r3, [pc, #332]	@ (8005024 <HAL_RCC_ClockConfig+0x184>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4013      	ands	r3, r2
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e09a      	b.n	800501c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2202      	movs	r2, #2
 8004eec:	4013      	ands	r3, r2
 8004eee:	d015      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d006      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004efa:	4b4b      	ldr	r3, [pc, #300]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	4b4a      	ldr	r3, [pc, #296]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004f00:	21e0      	movs	r1, #224	@ 0xe0
 8004f02:	00c9      	lsls	r1, r1, #3
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f08:	4b47      	ldr	r3, [pc, #284]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	22f0      	movs	r2, #240	@ 0xf0
 8004f0e:	4393      	bics	r3, r2
 8004f10:	0019      	movs	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	4b44      	ldr	r3, [pc, #272]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2201      	movs	r2, #1
 8004f22:	4013      	ands	r3, r2
 8004f24:	d040      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	029b      	lsls	r3, r3, #10
 8004f36:	4013      	ands	r3, r2
 8004f38:	d114      	bne.n	8004f64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e06e      	b.n	800501c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f46:	4b38      	ldr	r3, [pc, #224]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2380      	movs	r3, #128	@ 0x80
 8004f4c:	049b      	lsls	r3, r3, #18
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d108      	bne.n	8004f64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e062      	b.n	800501c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f56:	4b34      	ldr	r3, [pc, #208]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e05b      	b.n	800501c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f64:	4b30      	ldr	r3, [pc, #192]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2203      	movs	r2, #3
 8004f6a:	4393      	bics	r3, r2
 8004f6c:	0019      	movs	r1, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	4b2d      	ldr	r3, [pc, #180]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004f74:	430a      	orrs	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f78:	f7fe fa90 	bl	800349c <HAL_GetTick>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f80:	e009      	b.n	8004f96 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f82:	f7fe fa8b 	bl	800349c <HAL_GetTick>
 8004f86:	0002      	movs	r2, r0
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	4a27      	ldr	r2, [pc, #156]	@ (800502c <HAL_RCC_ClockConfig+0x18c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e042      	b.n	800501c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f96:	4b24      	ldr	r3, [pc, #144]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	220c      	movs	r2, #12
 8004f9c:	401a      	ands	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1ec      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8005024 <HAL_RCC_ClockConfig+0x184>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	4013      	ands	r3, r2
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d211      	bcs.n	8004fda <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <HAL_RCC_ClockConfig+0x184>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4393      	bics	r3, r2
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	4b18      	ldr	r3, [pc, #96]	@ (8005024 <HAL_RCC_ClockConfig+0x184>)
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc8:	4b16      	ldr	r3, [pc, #88]	@ (8005024 <HAL_RCC_ClockConfig+0x184>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d001      	beq.n	8004fda <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e020      	b.n	800501c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2204      	movs	r2, #4
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe4:	4b10      	ldr	r3, [pc, #64]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	4a11      	ldr	r2, [pc, #68]	@ (8005030 <HAL_RCC_ClockConfig+0x190>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	0019      	movs	r1, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ff8:	f000 f820 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8004ffc:	0001      	movs	r1, r0
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8005028 <HAL_RCC_ClockConfig+0x188>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	220f      	movs	r2, #15
 8005006:	4013      	ands	r3, r2
 8005008:	4a0a      	ldr	r2, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x194>)
 800500a:	5cd3      	ldrb	r3, [r2, r3]
 800500c:	000a      	movs	r2, r1
 800500e:	40da      	lsrs	r2, r3
 8005010:	4b09      	ldr	r3, [pc, #36]	@ (8005038 <HAL_RCC_ClockConfig+0x198>)
 8005012:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005014:	2003      	movs	r0, #3
 8005016:	f7fe f9fb 	bl	8003410 <HAL_InitTick>
  
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	0018      	movs	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	b004      	add	sp, #16
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40022000 	.word	0x40022000
 8005028:	40021000 	.word	0x40021000
 800502c:	00001388 	.word	0x00001388
 8005030:	fffff8ff 	.word	0xfffff8ff
 8005034:	08009e18 	.word	0x08009e18
 8005038:	20000000 	.word	0x20000000

0800503c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	2300      	movs	r3, #0
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005056:	4b20      	ldr	r3, [pc, #128]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	220c      	movs	r2, #12
 8005060:	4013      	ands	r3, r2
 8005062:	2b04      	cmp	r3, #4
 8005064:	d002      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x30>
 8005066:	2b08      	cmp	r3, #8
 8005068:	d003      	beq.n	8005072 <HAL_RCC_GetSysClockFreq+0x36>
 800506a:	e02c      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800506c:	4b1b      	ldr	r3, [pc, #108]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800506e:	613b      	str	r3, [r7, #16]
      break;
 8005070:	e02c      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	0c9b      	lsrs	r3, r3, #18
 8005076:	220f      	movs	r2, #15
 8005078:	4013      	ands	r3, r2
 800507a:	4a19      	ldr	r2, [pc, #100]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800507c:	5cd3      	ldrb	r3, [r2, r3]
 800507e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005080:	4b15      	ldr	r3, [pc, #84]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	220f      	movs	r2, #15
 8005086:	4013      	ands	r3, r2
 8005088:	4a16      	ldr	r2, [pc, #88]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800508a:	5cd3      	ldrb	r3, [r2, r3]
 800508c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	025b      	lsls	r3, r3, #9
 8005094:	4013      	ands	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	4810      	ldr	r0, [pc, #64]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800509c:	f7fb f850 	bl	8000140 <__udivsi3>
 80050a0:	0003      	movs	r3, r0
 80050a2:	001a      	movs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4353      	muls	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e009      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	000a      	movs	r2, r1
 80050b0:	0152      	lsls	r2, r2, #5
 80050b2:	1a52      	subs	r2, r2, r1
 80050b4:	0193      	lsls	r3, r2, #6
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	185b      	adds	r3, r3, r1
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	613b      	str	r3, [r7, #16]
      break;
 80050c4:	e002      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050c6:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xa0>)
 80050c8:	613b      	str	r3, [r7, #16]
      break;
 80050ca:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80050cc:	693b      	ldr	r3, [r7, #16]
}
 80050ce:	0018      	movs	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b006      	add	sp, #24
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	40021000 	.word	0x40021000
 80050dc:	007a1200 	.word	0x007a1200
 80050e0:	08009e30 	.word	0x08009e30
 80050e4:	08009e40 	.word	0x08009e40

080050e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ec:	4b02      	ldr	r3, [pc, #8]	@ (80050f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	20000000 	.word	0x20000000

080050fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005100:	f7ff fff2 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005104:	0001      	movs	r1, r0
 8005106:	4b06      	ldr	r3, [pc, #24]	@ (8005120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	2207      	movs	r2, #7
 800510e:	4013      	ands	r3, r2
 8005110:	4a04      	ldr	r2, [pc, #16]	@ (8005124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005112:	5cd3      	ldrb	r3, [r2, r3]
 8005114:	40d9      	lsrs	r1, r3
 8005116:	000b      	movs	r3, r1
}    
 8005118:	0018      	movs	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	46c0      	nop			@ (mov r8, r8)
 8005120:	40021000 	.word	0x40021000
 8005124:	08009e28 	.word	0x08009e28

08005128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	2380      	movs	r3, #128	@ 0x80
 800513e:	025b      	lsls	r3, r3, #9
 8005140:	4013      	ands	r3, r2
 8005142:	d100      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005144:	e08e      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005146:	2017      	movs	r0, #23
 8005148:	183b      	adds	r3, r7, r0
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800514e:	4b57      	ldr	r3, [pc, #348]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005150:	69da      	ldr	r2, [r3, #28]
 8005152:	2380      	movs	r3, #128	@ 0x80
 8005154:	055b      	lsls	r3, r3, #21
 8005156:	4013      	ands	r3, r2
 8005158:	d110      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800515a:	4b54      	ldr	r3, [pc, #336]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800515c:	69da      	ldr	r2, [r3, #28]
 800515e:	4b53      	ldr	r3, [pc, #332]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005160:	2180      	movs	r1, #128	@ 0x80
 8005162:	0549      	lsls	r1, r1, #21
 8005164:	430a      	orrs	r2, r1
 8005166:	61da      	str	r2, [r3, #28]
 8005168:	4b50      	ldr	r3, [pc, #320]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	2380      	movs	r3, #128	@ 0x80
 800516e:	055b      	lsls	r3, r3, #21
 8005170:	4013      	ands	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]
 8005174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005176:	183b      	adds	r3, r7, r0
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517c:	4b4c      	ldr	r3, [pc, #304]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	2380      	movs	r3, #128	@ 0x80
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	4013      	ands	r3, r2
 8005186:	d11a      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005188:	4b49      	ldr	r3, [pc, #292]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4b48      	ldr	r3, [pc, #288]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800518e:	2180      	movs	r1, #128	@ 0x80
 8005190:	0049      	lsls	r1, r1, #1
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005196:	f7fe f981 	bl	800349c <HAL_GetTick>
 800519a:	0003      	movs	r3, r0
 800519c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519e:	e008      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a0:	f7fe f97c 	bl	800349c <HAL_GetTick>
 80051a4:	0002      	movs	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	@ 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e077      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b2:	4b3f      	ldr	r3, [pc, #252]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4013      	ands	r3, r2
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051be:	4b3b      	ldr	r3, [pc, #236]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051c0:	6a1a      	ldr	r2, [r3, #32]
 80051c2:	23c0      	movs	r3, #192	@ 0xc0
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4013      	ands	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d034      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	23c0      	movs	r3, #192	@ 0xc0
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4013      	ands	r3, r2
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d02c      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051e0:	4b32      	ldr	r3, [pc, #200]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	4a33      	ldr	r2, [pc, #204]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051ea:	4b30      	ldr	r3, [pc, #192]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	4b2f      	ldr	r3, [pc, #188]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051f0:	2180      	movs	r1, #128	@ 0x80
 80051f2:	0249      	lsls	r1, r1, #9
 80051f4:	430a      	orrs	r2, r1
 80051f6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051f8:	4b2c      	ldr	r3, [pc, #176]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051fa:	6a1a      	ldr	r2, [r3, #32]
 80051fc:	4b2b      	ldr	r3, [pc, #172]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051fe:	492e      	ldr	r1, [pc, #184]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005200:	400a      	ands	r2, r1
 8005202:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005204:	4b29      	ldr	r3, [pc, #164]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	4013      	ands	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005212:	f7fe f943 	bl	800349c <HAL_GetTick>
 8005216:	0003      	movs	r3, r0
 8005218:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521a:	e009      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521c:	f7fe f93e 	bl	800349c <HAL_GetTick>
 8005220:	0002      	movs	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	4a25      	ldr	r2, [pc, #148]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e038      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005230:	4b1e      	ldr	r3, [pc, #120]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	2202      	movs	r2, #2
 8005236:	4013      	ands	r3, r2
 8005238:	d0f0      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800523a:	4b1c      	ldr	r3, [pc, #112]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	4a1d      	ldr	r2, [pc, #116]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005240:	4013      	ands	r3, r2
 8005242:	0019      	movs	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	4b18      	ldr	r3, [pc, #96]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800524a:	430a      	orrs	r2, r1
 800524c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800524e:	2317      	movs	r3, #23
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d105      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005258:	4b14      	ldr	r3, [pc, #80]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	4b13      	ldr	r3, [pc, #76]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800525e:	4918      	ldr	r1, [pc, #96]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005260:	400a      	ands	r2, r1
 8005262:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2201      	movs	r2, #1
 800526a:	4013      	ands	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800526e:	4b0f      	ldr	r3, [pc, #60]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005272:	2203      	movs	r2, #3
 8005274:	4393      	bics	r3, r2
 8005276:	0019      	movs	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	4b0b      	ldr	r3, [pc, #44]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800527e:	430a      	orrs	r2, r1
 8005280:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2220      	movs	r2, #32
 8005288:	4013      	ands	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800528c:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	2210      	movs	r2, #16
 8005292:	4393      	bics	r3, r2
 8005294:	0019      	movs	r1, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800529c:	430a      	orrs	r2, r1
 800529e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	0018      	movs	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b006      	add	sp, #24
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	40021000 	.word	0x40021000
 80052b0:	40007000 	.word	0x40007000
 80052b4:	fffffcff 	.word	0xfffffcff
 80052b8:	fffeffff 	.word	0xfffeffff
 80052bc:	00001388 	.word	0x00001388
 80052c0:	efffffff 	.word	0xefffffff

080052c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e0a8      	b.n	8005428 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	2382      	movs	r3, #130	@ 0x82
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d009      	beq.n	80052fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	61da      	str	r2, [r3, #28]
 80052f0:	e005      	b.n	80052fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	225d      	movs	r2, #93	@ 0x5d
 8005308:	5c9b      	ldrb	r3, [r3, r2]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d107      	bne.n	8005320 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	225c      	movs	r2, #92	@ 0x5c
 8005314:	2100      	movs	r1, #0
 8005316:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0018      	movs	r0, r3
 800531c:	f7fd fea0 	bl	8003060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	225d      	movs	r2, #93	@ 0x5d
 8005324:	2102      	movs	r1, #2
 8005326:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2140      	movs	r1, #64	@ 0x40
 8005334:	438a      	bics	r2, r1
 8005336:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	23e0      	movs	r3, #224	@ 0xe0
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	429a      	cmp	r2, r3
 8005342:	d902      	bls.n	800534a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e002      	b.n	8005350 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800534a:	2380      	movs	r3, #128	@ 0x80
 800534c:	015b      	lsls	r3, r3, #5
 800534e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	23f0      	movs	r3, #240	@ 0xf0
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	429a      	cmp	r2, r3
 800535a:	d008      	beq.n	800536e <HAL_SPI_Init+0xaa>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	23e0      	movs	r3, #224	@ 0xe0
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	429a      	cmp	r2, r3
 8005366:	d002      	beq.n	800536e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	2382      	movs	r3, #130	@ 0x82
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	401a      	ands	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6899      	ldr	r1, [r3, #8]
 800537c:	2384      	movs	r3, #132	@ 0x84
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	400b      	ands	r3, r1
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2102      	movs	r1, #2
 800538a:	400b      	ands	r3, r1
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	2101      	movs	r1, #1
 8005394:	400b      	ands	r3, r1
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6999      	ldr	r1, [r3, #24]
 800539c:	2380      	movs	r3, #128	@ 0x80
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	400b      	ands	r3, r1
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	2138      	movs	r1, #56	@ 0x38
 80053aa:	400b      	ands	r3, r1
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	2180      	movs	r1, #128	@ 0x80
 80053b4:	400b      	ands	r3, r1
 80053b6:	431a      	orrs	r2, r3
 80053b8:	0011      	movs	r1, r2
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053be:	2380      	movs	r3, #128	@ 0x80
 80053c0:	019b      	lsls	r3, r3, #6
 80053c2:	401a      	ands	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	2204      	movs	r2, #4
 80053d4:	401a      	ands	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	2110      	movs	r1, #16
 80053dc:	400b      	ands	r3, r1
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e4:	2108      	movs	r1, #8
 80053e6:	400b      	ands	r3, r1
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68d9      	ldr	r1, [r3, #12]
 80053ee:	23f0      	movs	r3, #240	@ 0xf0
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	400b      	ands	r3, r1
 80053f4:	431a      	orrs	r2, r3
 80053f6:	0011      	movs	r1, r2
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	015b      	lsls	r3, r3, #5
 80053fe:	401a      	ands	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4907      	ldr	r1, [pc, #28]	@ (8005430 <HAL_SPI_Init+0x16c>)
 8005414:	400a      	ands	r2, r1
 8005416:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	225d      	movs	r2, #93	@ 0x5d
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	0018      	movs	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	b004      	add	sp, #16
 800542e:	bd80      	pop	{r7, pc}
 8005430:	fffff7ff 	.word	0xfffff7ff

08005434 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	1dbb      	adds	r3, r7, #6
 8005442:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005444:	231f      	movs	r3, #31
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	225c      	movs	r2, #92	@ 0x5c
 8005450:	5c9b      	ldrb	r3, [r3, r2]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_SPI_Transmit+0x26>
 8005456:	2302      	movs	r3, #2
 8005458:	e147      	b.n	80056ea <HAL_SPI_Transmit+0x2b6>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	225c      	movs	r2, #92	@ 0x5c
 800545e:	2101      	movs	r1, #1
 8005460:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005462:	f7fe f81b 	bl	800349c <HAL_GetTick>
 8005466:	0003      	movs	r3, r0
 8005468:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800546a:	2316      	movs	r3, #22
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	1dba      	adds	r2, r7, #6
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	225d      	movs	r2, #93	@ 0x5d
 8005478:	5c9b      	ldrb	r3, [r3, r2]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d004      	beq.n	800548a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005480:	231f      	movs	r3, #31
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	2202      	movs	r2, #2
 8005486:	701a      	strb	r2, [r3, #0]
    goto error;
 8005488:	e128      	b.n	80056dc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_SPI_Transmit+0x64>
 8005490:	1dbb      	adds	r3, r7, #6
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005498:	231f      	movs	r3, #31
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
    goto error;
 80054a0:	e11c      	b.n	80056dc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	225d      	movs	r2, #93	@ 0x5d
 80054a6:	2103      	movs	r1, #3
 80054a8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	1dba      	adds	r2, r7, #6
 80054ba:	8812      	ldrh	r2, [r2, #0]
 80054bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1dba      	adds	r2, r7, #6
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2244      	movs	r2, #68	@ 0x44
 80054d0:	2100      	movs	r1, #0
 80054d2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2246      	movs	r2, #70	@ 0x46
 80054d8:	2100      	movs	r1, #0
 80054da:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	2380      	movs	r3, #128	@ 0x80
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d110      	bne.n	8005516 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2140      	movs	r1, #64	@ 0x40
 8005500:	438a      	bics	r2, r1
 8005502:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2180      	movs	r1, #128	@ 0x80
 8005510:	01c9      	lsls	r1, r1, #7
 8005512:	430a      	orrs	r2, r1
 8005514:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2240      	movs	r2, #64	@ 0x40
 800551e:	4013      	ands	r3, r2
 8005520:	2b40      	cmp	r3, #64	@ 0x40
 8005522:	d007      	beq.n	8005534 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2140      	movs	r1, #64	@ 0x40
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	23e0      	movs	r3, #224	@ 0xe0
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	429a      	cmp	r2, r3
 800553e:	d952      	bls.n	80055e6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d004      	beq.n	8005552 <HAL_SPI_Transmit+0x11e>
 8005548:	2316      	movs	r3, #22
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d143      	bne.n	80055da <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005556:	881a      	ldrh	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005562:	1c9a      	adds	r2, r3, #2
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005576:	e030      	b.n	80055da <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2202      	movs	r2, #2
 8005580:	4013      	ands	r3, r2
 8005582:	2b02      	cmp	r3, #2
 8005584:	d112      	bne.n	80055ac <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	881a      	ldrh	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005596:	1c9a      	adds	r2, r3, #2
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055aa:	e016      	b.n	80055da <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ac:	f7fd ff76 	bl	800349c <HAL_GetTick>
 80055b0:	0002      	movs	r2, r0
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d802      	bhi.n	80055c2 <HAL_SPI_Transmit+0x18e>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	3301      	adds	r3, #1
 80055c0:	d102      	bne.n	80055c8 <HAL_SPI_Transmit+0x194>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d108      	bne.n	80055da <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80055c8:	231f      	movs	r3, #31
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	2203      	movs	r2, #3
 80055ce:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	225d      	movs	r2, #93	@ 0x5d
 80055d4:	2101      	movs	r1, #1
 80055d6:	5499      	strb	r1, [r3, r2]
          goto error;
 80055d8:	e080      	b.n	80056dc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1c9      	bne.n	8005578 <HAL_SPI_Transmit+0x144>
 80055e4:	e053      	b.n	800568e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <HAL_SPI_Transmit+0x1c4>
 80055ee:	2316      	movs	r3, #22
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d145      	bne.n	8005684 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	7812      	ldrb	r2, [r2, #0]
 8005604:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800561e:	e031      	b.n	8005684 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2202      	movs	r2, #2
 8005628:	4013      	ands	r3, r2
 800562a:	2b02      	cmp	r3, #2
 800562c:	d113      	bne.n	8005656 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005654:	e016      	b.n	8005684 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005656:	f7fd ff21 	bl	800349c <HAL_GetTick>
 800565a:	0002      	movs	r2, r0
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d802      	bhi.n	800566c <HAL_SPI_Transmit+0x238>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	d102      	bne.n	8005672 <HAL_SPI_Transmit+0x23e>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d108      	bne.n	8005684 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005672:	231f      	movs	r3, #31
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	2203      	movs	r2, #3
 8005678:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	225d      	movs	r2, #93	@ 0x5d
 800567e:	2101      	movs	r1, #1
 8005680:	5499      	strb	r1, [r3, r2]
          goto error;
 8005682:	e02b      	b.n	80056dc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1c8      	bne.n	8005620 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	0018      	movs	r0, r3
 8005696:	f000 fcef 	bl	8006078 <SPI_EndRxTxTransaction>
 800569a:	1e03      	subs	r3, r0, #0
 800569c:	d002      	beq.n	80056a4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80056ca:	231f      	movs	r3, #31
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	2201      	movs	r2, #1
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e003      	b.n	80056dc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	225d      	movs	r2, #93	@ 0x5d
 80056d8:	2101      	movs	r1, #1
 80056da:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	225c      	movs	r2, #92	@ 0x5c
 80056e0:	2100      	movs	r1, #0
 80056e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80056e4:	231f      	movs	r3, #31
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	781b      	ldrb	r3, [r3, #0]
}
 80056ea:	0018      	movs	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b008      	add	sp, #32
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b089      	sub	sp, #36	@ 0x24
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	1dbb      	adds	r3, r7, #6
 8005702:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005704:	2117      	movs	r1, #23
 8005706:	187b      	adds	r3, r7, r1
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	225d      	movs	r2, #93	@ 0x5d
 8005710:	5c9b      	ldrb	r3, [r3, r2]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	d003      	beq.n	8005720 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8005718:	187b      	adds	r3, r7, r1
 800571a:	2202      	movs	r2, #2
 800571c:	701a      	strb	r2, [r3, #0]
    goto error;
 800571e:	e12b      	b.n	8005978 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	2382      	movs	r3, #130	@ 0x82
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	429a      	cmp	r2, r3
 800572a:	d113      	bne.n	8005754 <HAL_SPI_Receive+0x60>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10f      	bne.n	8005754 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	225d      	movs	r2, #93	@ 0x5d
 8005738:	2104      	movs	r1, #4
 800573a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800573c:	1dbb      	adds	r3, r7, #6
 800573e:	881c      	ldrh	r4, [r3, #0]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	0023      	movs	r3, r4
 800574c:	f000 f924 	bl	8005998 <HAL_SPI_TransmitReceive>
 8005750:	0003      	movs	r3, r0
 8005752:	e118      	b.n	8005986 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	225c      	movs	r2, #92	@ 0x5c
 8005758:	5c9b      	ldrb	r3, [r3, r2]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_SPI_Receive+0x6e>
 800575e:	2302      	movs	r3, #2
 8005760:	e111      	b.n	8005986 <HAL_SPI_Receive+0x292>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	225c      	movs	r2, #92	@ 0x5c
 8005766:	2101      	movs	r1, #1
 8005768:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800576a:	f7fd fe97 	bl	800349c <HAL_GetTick>
 800576e:	0003      	movs	r3, r0
 8005770:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_SPI_Receive+0x8c>
 8005778:	1dbb      	adds	r3, r7, #6
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005780:	2317      	movs	r3, #23
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	2201      	movs	r2, #1
 8005786:	701a      	strb	r2, [r3, #0]
    goto error;
 8005788:	e0f6      	b.n	8005978 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	225d      	movs	r2, #93	@ 0x5d
 800578e:	2104      	movs	r1, #4
 8005790:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1dba      	adds	r2, r7, #6
 80057a2:	2144      	movs	r1, #68	@ 0x44
 80057a4:	8812      	ldrh	r2, [r2, #0]
 80057a6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1dba      	adds	r2, r7, #6
 80057ac:	2146      	movs	r1, #70	@ 0x46
 80057ae:	8812      	ldrh	r2, [r2, #0]
 80057b0:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	23e0      	movs	r3, #224	@ 0xe0
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	429a      	cmp	r2, r3
 80057da:	d908      	bls.n	80057ee <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	496a      	ldr	r1, [pc, #424]	@ (8005990 <HAL_SPI_Receive+0x29c>)
 80057e8:	400a      	ands	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
 80057ec:	e008      	b.n	8005800 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2180      	movs	r1, #128	@ 0x80
 80057fa:	0149      	lsls	r1, r1, #5
 80057fc:	430a      	orrs	r2, r1
 80057fe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	2380      	movs	r3, #128	@ 0x80
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	429a      	cmp	r2, r3
 800580a:	d10f      	bne.n	800582c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2140      	movs	r1, #64	@ 0x40
 8005818:	438a      	bics	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	495b      	ldr	r1, [pc, #364]	@ (8005994 <HAL_SPI_Receive+0x2a0>)
 8005828:	400a      	ands	r2, r1
 800582a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2240      	movs	r2, #64	@ 0x40
 8005834:	4013      	ands	r3, r2
 8005836:	2b40      	cmp	r3, #64	@ 0x40
 8005838:	d007      	beq.n	800584a <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2140      	movs	r1, #64	@ 0x40
 8005846:	430a      	orrs	r2, r1
 8005848:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	23e0      	movs	r3, #224	@ 0xe0
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	429a      	cmp	r2, r3
 8005854:	d900      	bls.n	8005858 <HAL_SPI_Receive+0x164>
 8005856:	e071      	b.n	800593c <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005858:	e035      	b.n	80058c6 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2201      	movs	r2, #1
 8005862:	4013      	ands	r3, r2
 8005864:	2b01      	cmp	r3, #1
 8005866:	d117      	bne.n	8005898 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	001a      	movs	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2246      	movs	r2, #70	@ 0x46
 8005888:	5a9b      	ldrh	r3, [r3, r2]
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b299      	uxth	r1, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2246      	movs	r2, #70	@ 0x46
 8005894:	5299      	strh	r1, [r3, r2]
 8005896:	e016      	b.n	80058c6 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005898:	f7fd fe00 	bl	800349c <HAL_GetTick>
 800589c:	0002      	movs	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d802      	bhi.n	80058ae <HAL_SPI_Receive+0x1ba>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	3301      	adds	r3, #1
 80058ac:	d102      	bne.n	80058b4 <HAL_SPI_Receive+0x1c0>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d108      	bne.n	80058c6 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80058b4:	2317      	movs	r3, #23
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	2203      	movs	r2, #3
 80058ba:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	225d      	movs	r2, #93	@ 0x5d
 80058c0:	2101      	movs	r1, #1
 80058c2:	5499      	strb	r1, [r3, r2]
          goto error;
 80058c4:	e058      	b.n	8005978 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2246      	movs	r2, #70	@ 0x46
 80058ca:	5a9b      	ldrh	r3, [r3, r2]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1c3      	bne.n	800585a <HAL_SPI_Receive+0x166>
 80058d2:	e039      	b.n	8005948 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2201      	movs	r2, #1
 80058dc:	4013      	ands	r3, r2
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d115      	bne.n	800590e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	b292      	uxth	r2, r2
 80058ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f4:	1c9a      	adds	r2, r3, #2
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2246      	movs	r2, #70	@ 0x46
 80058fe:	5a9b      	ldrh	r3, [r3, r2]
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b299      	uxth	r1, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2246      	movs	r2, #70	@ 0x46
 800590a:	5299      	strh	r1, [r3, r2]
 800590c:	e016      	b.n	800593c <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800590e:	f7fd fdc5 	bl	800349c <HAL_GetTick>
 8005912:	0002      	movs	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d802      	bhi.n	8005924 <HAL_SPI_Receive+0x230>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	d102      	bne.n	800592a <HAL_SPI_Receive+0x236>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800592a:	2317      	movs	r3, #23
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	2203      	movs	r2, #3
 8005930:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	225d      	movs	r2, #93	@ 0x5d
 8005936:	2101      	movs	r1, #1
 8005938:	5499      	strb	r1, [r3, r2]
          goto error;
 800593a:	e01d      	b.n	8005978 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2246      	movs	r2, #70	@ 0x46
 8005940:	5a9b      	ldrh	r3, [r3, r2]
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1c5      	bne.n	80058d4 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	0018      	movs	r0, r3
 8005950:	f000 fb34 	bl	8005fbc <SPI_EndRxTransaction>
 8005954:	1e03      	subs	r3, r0, #0
 8005956:	d002      	beq.n	800595e <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8005966:	2317      	movs	r3, #23
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	e003      	b.n	8005978 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	225d      	movs	r2, #93	@ 0x5d
 8005974:	2101      	movs	r1, #1
 8005976:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	225c      	movs	r2, #92	@ 0x5c
 800597c:	2100      	movs	r1, #0
 800597e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005980:	2317      	movs	r3, #23
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	781b      	ldrb	r3, [r3, #0]
}
 8005986:	0018      	movs	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	b007      	add	sp, #28
 800598c:	bd90      	pop	{r4, r7, pc}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	ffffefff 	.word	0xffffefff
 8005994:	ffffbfff 	.word	0xffffbfff

08005998 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	@ 0x28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	001a      	movs	r2, r3
 80059a6:	1cbb      	adds	r3, r7, #2
 80059a8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059aa:	2301      	movs	r3, #1
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059ae:	2323      	movs	r3, #35	@ 0x23
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	225c      	movs	r2, #92	@ 0x5c
 80059ba:	5c9b      	ldrb	r3, [r3, r2]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x2c>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e1c4      	b.n	8005d4e <HAL_SPI_TransmitReceive+0x3b6>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	225c      	movs	r2, #92	@ 0x5c
 80059c8:	2101      	movs	r1, #1
 80059ca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059cc:	f7fd fd66 	bl	800349c <HAL_GetTick>
 80059d0:	0003      	movs	r3, r0
 80059d2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059d4:	201b      	movs	r0, #27
 80059d6:	183b      	adds	r3, r7, r0
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	215d      	movs	r1, #93	@ 0x5d
 80059dc:	5c52      	ldrb	r2, [r2, r1]
 80059de:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80059e6:	2312      	movs	r3, #18
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	1cba      	adds	r2, r7, #2
 80059ec:	8812      	ldrh	r2, [r2, #0]
 80059ee:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059f0:	183b      	adds	r3, r7, r0
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d011      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x84>
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	2382      	movs	r3, #130	@ 0x82
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d107      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x7a>
 8005a0a:	183b      	adds	r3, r7, r0
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d004      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005a12:	2323      	movs	r3, #35	@ 0x23
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	2202      	movs	r2, #2
 8005a18:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a1a:	e191      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d006      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x98>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x98>
 8005a28:	1cbb      	adds	r3, r7, #2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005a30:	2323      	movs	r3, #35	@ 0x23
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a38:	e182      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	225d      	movs	r2, #93	@ 0x5d
 8005a3e:	5c9b      	ldrb	r3, [r3, r2]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d003      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	225d      	movs	r2, #93	@ 0x5d
 8005a4a:	2105      	movs	r1, #5
 8005a4c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1cba      	adds	r2, r7, #2
 8005a5e:	2146      	movs	r1, #70	@ 0x46
 8005a60:	8812      	ldrh	r2, [r2, #0]
 8005a62:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1cba      	adds	r2, r7, #2
 8005a68:	2144      	movs	r1, #68	@ 0x44
 8005a6a:	8812      	ldrh	r2, [r2, #0]
 8005a6c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	1cba      	adds	r2, r7, #2
 8005a78:	8812      	ldrh	r2, [r2, #0]
 8005a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	1cba      	adds	r2, r7, #2
 8005a80:	8812      	ldrh	r2, [r2, #0]
 8005a82:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	23e0      	movs	r3, #224	@ 0xe0
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d908      	bls.n	8005aae <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	49ac      	ldr	r1, [pc, #688]	@ (8005d58 <HAL_SPI_TransmitReceive+0x3c0>)
 8005aa8:	400a      	ands	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
 8005aac:	e008      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2180      	movs	r1, #128	@ 0x80
 8005aba:	0149      	lsls	r1, r1, #5
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2240      	movs	r2, #64	@ 0x40
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b40      	cmp	r3, #64	@ 0x40
 8005acc:	d007      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2140      	movs	r1, #64	@ 0x40
 8005ada:	430a      	orrs	r2, r1
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	23e0      	movs	r3, #224	@ 0xe0
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d800      	bhi.n	8005aec <HAL_SPI_TransmitReceive+0x154>
 8005aea:	e083      	b.n	8005bf4 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_SPI_TransmitReceive+0x168>
 8005af4:	2312      	movs	r3, #18
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d000      	beq.n	8005b00 <HAL_SPI_TransmitReceive+0x168>
 8005afe:	e06d      	b.n	8005bdc <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b04:	881a      	ldrh	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	1c9a      	adds	r2, r3, #2
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b24:	e05a      	b.n	8005bdc <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d11b      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x1d4>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d016      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x1d4>
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d113      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	881a      	ldrh	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	1c9a      	adds	r2, r3, #2
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2201      	movs	r2, #1
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d11c      	bne.n	8005bb4 <HAL_SPI_TransmitReceive+0x21c>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2246      	movs	r2, #70	@ 0x46
 8005b7e:	5a9b      	ldrh	r3, [r3, r2]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d016      	beq.n	8005bb4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b90:	b292      	uxth	r2, r2
 8005b92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b98:	1c9a      	adds	r2, r3, #2
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2246      	movs	r2, #70	@ 0x46
 8005ba2:	5a9b      	ldrh	r3, [r3, r2]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b299      	uxth	r1, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2246      	movs	r2, #70	@ 0x46
 8005bae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bb4:	f7fd fc72 	bl	800349c <HAL_GetTick>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d80b      	bhi.n	8005bdc <HAL_SPI_TransmitReceive+0x244>
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	d008      	beq.n	8005bdc <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8005bca:	2323      	movs	r3, #35	@ 0x23
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	2203      	movs	r2, #3
 8005bd0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	225d      	movs	r2, #93	@ 0x5d
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	5499      	strb	r1, [r3, r2]
        goto error;
 8005bda:	e0b1      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d19f      	bne.n	8005b26 <HAL_SPI_TransmitReceive+0x18e>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2246      	movs	r2, #70	@ 0x46
 8005bea:	5a9b      	ldrh	r3, [r3, r2]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d199      	bne.n	8005b26 <HAL_SPI_TransmitReceive+0x18e>
 8005bf2:	e089      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x270>
 8005bfc:	2312      	movs	r3, #18
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d000      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x270>
 8005c06:	e074      	b.n	8005cf2 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	7812      	ldrb	r2, [r2, #0]
 8005c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c2e:	e060      	b.n	8005cf2 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2202      	movs	r2, #2
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d11c      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x2e0>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x2e0>
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d114      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d11e      	bne.n	8005cc4 <HAL_SPI_TransmitReceive+0x32c>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2246      	movs	r2, #70	@ 0x46
 8005c8a:	5a9b      	ldrh	r3, [r3, r2]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d018      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	001a      	movs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2246      	movs	r2, #70	@ 0x46
 8005cb2:	5a9b      	ldrh	r3, [r3, r2]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b299      	uxth	r1, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2246      	movs	r2, #70	@ 0x46
 8005cbe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cc4:	f7fd fbea 	bl	800349c <HAL_GetTick>
 8005cc8:	0002      	movs	r2, r0
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d802      	bhi.n	8005cda <HAL_SPI_TransmitReceive+0x342>
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	d102      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x348>
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d108      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8005ce0:	2323      	movs	r3, #35	@ 0x23
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	225d      	movs	r2, #93	@ 0x5d
 8005cec:	2101      	movs	r1, #1
 8005cee:	5499      	strb	r1, [r3, r2]
        goto error;
 8005cf0:	e026      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d199      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x298>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2246      	movs	r2, #70	@ 0x46
 8005d00:	5a9b      	ldrh	r3, [r3, r2]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d193      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f000 f9b2 	bl	8006078 <SPI_EndRxTxTransaction>
 8005d14:	1e03      	subs	r3, r0, #0
 8005d16:	d006      	beq.n	8005d26 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005d18:	2323      	movs	r3, #35	@ 0x23
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8005d2e:	2323      	movs	r3, #35	@ 0x23
 8005d30:	18fb      	adds	r3, r7, r3
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e003      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	225d      	movs	r2, #93	@ 0x5d
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	225c      	movs	r2, #92	@ 0x5c
 8005d44:	2100      	movs	r1, #0
 8005d46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d48:	2323      	movs	r3, #35	@ 0x23
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	781b      	ldrb	r3, [r3, #0]
}
 8005d4e:	0018      	movs	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	b00a      	add	sp, #40	@ 0x28
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	46c0      	nop			@ (mov r8, r8)
 8005d58:	ffffefff 	.word	0xffffefff

08005d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	1dfb      	adds	r3, r7, #7
 8005d6a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d6c:	f7fd fb96 	bl	800349c <HAL_GetTick>
 8005d70:	0002      	movs	r2, r0
 8005d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	18d3      	adds	r3, r2, r3
 8005d7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d7c:	f7fd fb8e 	bl	800349c <HAL_GetTick>
 8005d80:	0003      	movs	r3, r0
 8005d82:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d84:	4b3a      	ldr	r3, [pc, #232]	@ (8005e70 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	015b      	lsls	r3, r3, #5
 8005d8a:	0d1b      	lsrs	r3, r3, #20
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	4353      	muls	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d92:	e058      	b.n	8005e46 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	3301      	adds	r3, #1
 8005d98:	d055      	beq.n	8005e46 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d9a:	f7fd fb7f 	bl	800349c <HAL_GetTick>
 8005d9e:	0002      	movs	r2, r0
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d902      	bls.n	8005db0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d142      	bne.n	8005e36 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	21e0      	movs	r1, #224	@ 0xe0
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	2382      	movs	r3, #130	@ 0x82
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d113      	bne.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	2380      	movs	r3, #128	@ 0x80
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d005      	beq.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	2380      	movs	r3, #128	@ 0x80
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d107      	bne.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2140      	movs	r1, #64	@ 0x40
 8005df0:	438a      	bics	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005df8:	2380      	movs	r3, #128	@ 0x80
 8005dfa:	019b      	lsls	r3, r3, #6
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d110      	bne.n	8005e22 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	491a      	ldr	r1, [pc, #104]	@ (8005e74 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005e0c:	400a      	ands	r2, r1
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2180      	movs	r1, #128	@ 0x80
 8005e1c:	0189      	lsls	r1, r1, #6
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	225d      	movs	r2, #93	@ 0x5d
 8005e26:	2101      	movs	r1, #1
 8005e28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	225c      	movs	r2, #92	@ 0x5c
 8005e2e:	2100      	movs	r1, #0
 8005e30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e017      	b.n	8005e66 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	425a      	negs	r2, r3
 8005e56:	4153      	adcs	r3, r2
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	001a      	movs	r2, r3
 8005e5c:	1dfb      	adds	r3, r7, #7
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d197      	bne.n	8005d94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	0018      	movs	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b008      	add	sp, #32
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	20000000 	.word	0x20000000
 8005e74:	ffffdfff 	.word	0xffffdfff

08005e78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	@ 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e86:	2317      	movs	r3, #23
 8005e88:	18fb      	adds	r3, r7, r3
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e8e:	f7fd fb05 	bl	800349c <HAL_GetTick>
 8005e92:	0002      	movs	r2, r0
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	18d3      	adds	r3, r2, r3
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005e9e:	f7fd fafd 	bl	800349c <HAL_GetTick>
 8005ea2:	0003      	movs	r3, r0
 8005ea4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005eae:	4b41      	ldr	r3, [pc, #260]	@ (8005fb4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	0013      	movs	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	189b      	adds	r3, r3, r2
 8005eb8:	00da      	lsls	r2, r3, #3
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	0d1b      	lsrs	r3, r3, #20
 8005ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec0:	4353      	muls	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ec4:	e068      	b.n	8005f98 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	23c0      	movs	r3, #192	@ 0xc0
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d10a      	bne.n	8005ee6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	2117      	movs	r1, #23
 8005ede:	187b      	adds	r3, r7, r1
 8005ee0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ee2:	187b      	adds	r3, r7, r1
 8005ee4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	d055      	beq.n	8005f98 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eec:	f7fd fad6 	bl	800349c <HAL_GetTick>
 8005ef0:	0002      	movs	r2, r0
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d902      	bls.n	8005f02 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d142      	bne.n	8005f88 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	21e0      	movs	r1, #224	@ 0xe0
 8005f0e:	438a      	bics	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	2382      	movs	r3, #130	@ 0x82
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d113      	bne.n	8005f46 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	2380      	movs	r3, #128	@ 0x80
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d005      	beq.n	8005f36 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	2380      	movs	r3, #128	@ 0x80
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d107      	bne.n	8005f46 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2140      	movs	r1, #64	@ 0x40
 8005f42:	438a      	bics	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f4a:	2380      	movs	r3, #128	@ 0x80
 8005f4c:	019b      	lsls	r3, r3, #6
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d110      	bne.n	8005f74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4916      	ldr	r1, [pc, #88]	@ (8005fb8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005f5e:	400a      	ands	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2180      	movs	r1, #128	@ 0x80
 8005f6e:	0189      	lsls	r1, r1, #6
 8005f70:	430a      	orrs	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	225d      	movs	r2, #93	@ 0x5d
 8005f78:	2101      	movs	r1, #1
 8005f7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	225c      	movs	r2, #92	@ 0x5c
 8005f80:	2100      	movs	r1, #0
 8005f82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e010      	b.n	8005faa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d18e      	bne.n	8005ec6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	0018      	movs	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b00a      	add	sp, #40	@ 0x28
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	20000000 	.word	0x20000000
 8005fb8:	ffffdfff 	.word	0xffffdfff

08005fbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	2382      	movs	r3, #130	@ 0x82
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d113      	bne.n	8005ffc <SPI_EndRxTransaction+0x40>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d005      	beq.n	8005fec <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d107      	bne.n	8005ffc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2140      	movs	r1, #64	@ 0x40
 8005ff8:	438a      	bics	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	0013      	movs	r3, r2
 8006006:	2200      	movs	r2, #0
 8006008:	2180      	movs	r1, #128	@ 0x80
 800600a:	f7ff fea7 	bl	8005d5c <SPI_WaitFlagStateUntilTimeout>
 800600e:	1e03      	subs	r3, r0, #0
 8006010:	d007      	beq.n	8006022 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006016:	2220      	movs	r2, #32
 8006018:	431a      	orrs	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e026      	b.n	8006070 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	2382      	movs	r3, #130	@ 0x82
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	429a      	cmp	r2, r3
 800602c:	d11f      	bne.n	800606e <SPI_EndRxTransaction+0xb2>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	2380      	movs	r3, #128	@ 0x80
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	429a      	cmp	r2, r3
 8006038:	d005      	beq.n	8006046 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	2380      	movs	r3, #128	@ 0x80
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	429a      	cmp	r2, r3
 8006044:	d113      	bne.n	800606e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	23c0      	movs	r3, #192	@ 0xc0
 800604a:	00d9      	lsls	r1, r3, #3
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	0013      	movs	r3, r2
 8006054:	2200      	movs	r2, #0
 8006056:	f7ff ff0f 	bl	8005e78 <SPI_WaitFifoStateUntilTimeout>
 800605a:	1e03      	subs	r3, r0, #0
 800605c:	d007      	beq.n	800606e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006062:	2220      	movs	r2, #32
 8006064:	431a      	orrs	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e000      	b.n	8006070 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	0018      	movs	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	b004      	add	sp, #16
 8006076:	bd80      	pop	{r7, pc}

08006078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	23c0      	movs	r3, #192	@ 0xc0
 8006088:	0159      	lsls	r1, r3, #5
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	0013      	movs	r3, r2
 8006092:	2200      	movs	r2, #0
 8006094:	f7ff fef0 	bl	8005e78 <SPI_WaitFifoStateUntilTimeout>
 8006098:	1e03      	subs	r3, r0, #0
 800609a:	d007      	beq.n	80060ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a0:	2220      	movs	r2, #32
 80060a2:	431a      	orrs	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e027      	b.n	80060fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	0013      	movs	r3, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	2180      	movs	r1, #128	@ 0x80
 80060ba:	f7ff fe4f 	bl	8005d5c <SPI_WaitFlagStateUntilTimeout>
 80060be:	1e03      	subs	r3, r0, #0
 80060c0:	d007      	beq.n	80060d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c6:	2220      	movs	r2, #32
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e014      	b.n	80060fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	23c0      	movs	r3, #192	@ 0xc0
 80060d6:	00d9      	lsls	r1, r3, #3
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	0013      	movs	r3, r2
 80060e0:	2200      	movs	r2, #0
 80060e2:	f7ff fec9 	bl	8005e78 <SPI_WaitFifoStateUntilTimeout>
 80060e6:	1e03      	subs	r3, r0, #0
 80060e8:	d007      	beq.n	80060fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ee:	2220      	movs	r2, #32
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e000      	b.n	80060fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b004      	add	sp, #16
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e042      	b.n	800619c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	223d      	movs	r2, #61	@ 0x3d
 800611a:	5c9b      	ldrb	r3, [r3, r2]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d107      	bne.n	8006132 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	223c      	movs	r2, #60	@ 0x3c
 8006126:	2100      	movs	r1, #0
 8006128:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	0018      	movs	r0, r3
 800612e:	f7fc ffe5 	bl	80030fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	223d      	movs	r2, #61	@ 0x3d
 8006136:	2102      	movs	r1, #2
 8006138:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	0019      	movs	r1, r3
 8006144:	0010      	movs	r0, r2
 8006146:	f000 f945 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2246      	movs	r2, #70	@ 0x46
 800614e:	2101      	movs	r1, #1
 8006150:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	223e      	movs	r2, #62	@ 0x3e
 8006156:	2101      	movs	r1, #1
 8006158:	5499      	strb	r1, [r3, r2]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	223f      	movs	r2, #63	@ 0x3f
 800615e:	2101      	movs	r1, #1
 8006160:	5499      	strb	r1, [r3, r2]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2240      	movs	r2, #64	@ 0x40
 8006166:	2101      	movs	r1, #1
 8006168:	5499      	strb	r1, [r3, r2]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2241      	movs	r2, #65	@ 0x41
 800616e:	2101      	movs	r1, #1
 8006170:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2242      	movs	r2, #66	@ 0x42
 8006176:	2101      	movs	r1, #1
 8006178:	5499      	strb	r1, [r3, r2]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2243      	movs	r2, #67	@ 0x43
 800617e:	2101      	movs	r1, #1
 8006180:	5499      	strb	r1, [r3, r2]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2244      	movs	r2, #68	@ 0x44
 8006186:	2101      	movs	r1, #1
 8006188:	5499      	strb	r1, [r3, r2]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2245      	movs	r2, #69	@ 0x45
 800618e:	2101      	movs	r1, #1
 8006190:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	223d      	movs	r2, #61	@ 0x3d
 8006196:	2101      	movs	r1, #1
 8006198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	0018      	movs	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	b002      	add	sp, #8
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	223d      	movs	r2, #61	@ 0x3d
 80061b0:	5c9b      	ldrb	r3, [r3, r2]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e02d      	b.n	8006218 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	223d      	movs	r2, #61	@ 0x3d
 80061c0:	2102      	movs	r1, #2
 80061c2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a15      	ldr	r2, [pc, #84]	@ (8006220 <HAL_TIM_Base_Start+0x7c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_TIM_Base_Start+0x3e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a14      	ldr	r2, [pc, #80]	@ (8006224 <HAL_TIM_Base_Start+0x80>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_TIM_Base_Start+0x3e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a12      	ldr	r2, [pc, #72]	@ (8006228 <HAL_TIM_Base_Start+0x84>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d111      	bne.n	8006206 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2207      	movs	r2, #7
 80061ea:	4013      	ands	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b06      	cmp	r3, #6
 80061f2:	d010      	beq.n	8006216 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2101      	movs	r1, #1
 8006200:	430a      	orrs	r2, r1
 8006202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006204:	e007      	b.n	8006216 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2101      	movs	r1, #1
 8006212:	430a      	orrs	r2, r1
 8006214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	0018      	movs	r0, r3
 800621a:	46bd      	mov	sp, r7
 800621c:	b004      	add	sp, #16
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40000400 	.word	0x40000400
 8006228:	40014000 	.word	0x40014000

0800622c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006236:	230f      	movs	r3, #15
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	223c      	movs	r2, #60	@ 0x3c
 8006242:	5c9b      	ldrb	r3, [r3, r2]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_TIM_ConfigClockSource+0x20>
 8006248:	2302      	movs	r3, #2
 800624a:	e0bc      	b.n	80063c6 <HAL_TIM_ConfigClockSource+0x19a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	223c      	movs	r2, #60	@ 0x3c
 8006250:	2101      	movs	r1, #1
 8006252:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	223d      	movs	r2, #61	@ 0x3d
 8006258:	2102      	movs	r1, #2
 800625a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2277      	movs	r2, #119	@ 0x77
 8006268:	4393      	bics	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4a58      	ldr	r2, [pc, #352]	@ (80063d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006270:	4013      	ands	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2280      	movs	r2, #128	@ 0x80
 8006282:	0192      	lsls	r2, r2, #6
 8006284:	4293      	cmp	r3, r2
 8006286:	d040      	beq.n	800630a <HAL_TIM_ConfigClockSource+0xde>
 8006288:	2280      	movs	r2, #128	@ 0x80
 800628a:	0192      	lsls	r2, r2, #6
 800628c:	4293      	cmp	r3, r2
 800628e:	d900      	bls.n	8006292 <HAL_TIM_ConfigClockSource+0x66>
 8006290:	e088      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
 8006292:	2280      	movs	r2, #128	@ 0x80
 8006294:	0152      	lsls	r2, r2, #5
 8006296:	4293      	cmp	r3, r2
 8006298:	d100      	bne.n	800629c <HAL_TIM_ConfigClockSource+0x70>
 800629a:	e088      	b.n	80063ae <HAL_TIM_ConfigClockSource+0x182>
 800629c:	2280      	movs	r2, #128	@ 0x80
 800629e:	0152      	lsls	r2, r2, #5
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d900      	bls.n	80062a6 <HAL_TIM_ConfigClockSource+0x7a>
 80062a4:	e07e      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
 80062a6:	2b70      	cmp	r3, #112	@ 0x70
 80062a8:	d018      	beq.n	80062dc <HAL_TIM_ConfigClockSource+0xb0>
 80062aa:	d900      	bls.n	80062ae <HAL_TIM_ConfigClockSource+0x82>
 80062ac:	e07a      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
 80062ae:	2b60      	cmp	r3, #96	@ 0x60
 80062b0:	d04f      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x126>
 80062b2:	d900      	bls.n	80062b6 <HAL_TIM_ConfigClockSource+0x8a>
 80062b4:	e076      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
 80062b6:	2b50      	cmp	r3, #80	@ 0x50
 80062b8:	d03b      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x106>
 80062ba:	d900      	bls.n	80062be <HAL_TIM_ConfigClockSource+0x92>
 80062bc:	e072      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
 80062be:	2b40      	cmp	r3, #64	@ 0x40
 80062c0:	d057      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0x146>
 80062c2:	d900      	bls.n	80062c6 <HAL_TIM_ConfigClockSource+0x9a>
 80062c4:	e06e      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
 80062c6:	2b30      	cmp	r3, #48	@ 0x30
 80062c8:	d063      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x166>
 80062ca:	d86b      	bhi.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d060      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x166>
 80062d0:	d868      	bhi.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d05d      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x166>
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d05b      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x166>
 80062da:	e063      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062ec:	f000 f970 	bl	80065d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2277      	movs	r2, #119	@ 0x77
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	609a      	str	r2, [r3, #8]
      break;
 8006308:	e052      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	f000 f959 	bl	80065d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2180      	movs	r1, #128	@ 0x80
 800632a:	01c9      	lsls	r1, r1, #7
 800632c:	430a      	orrs	r2, r1
 800632e:	609a      	str	r2, [r3, #8]
      break;
 8006330:	e03e      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	001a      	movs	r2, r3
 8006340:	f000 f8cc 	bl	80064dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2150      	movs	r1, #80	@ 0x50
 800634a:	0018      	movs	r0, r3
 800634c:	f000 f926 	bl	800659c <TIM_ITRx_SetConfig>
      break;
 8006350:	e02e      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800635e:	001a      	movs	r2, r3
 8006360:	f000 f8ea 	bl	8006538 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2160      	movs	r1, #96	@ 0x60
 800636a:	0018      	movs	r0, r3
 800636c:	f000 f916 	bl	800659c <TIM_ITRx_SetConfig>
      break;
 8006370:	e01e      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637e:	001a      	movs	r2, r3
 8006380:	f000 f8ac 	bl	80064dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2140      	movs	r1, #64	@ 0x40
 800638a:	0018      	movs	r0, r3
 800638c:	f000 f906 	bl	800659c <TIM_ITRx_SetConfig>
      break;
 8006390:	e00e      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	0019      	movs	r1, r3
 800639c:	0010      	movs	r0, r2
 800639e:	f000 f8fd 	bl	800659c <TIM_ITRx_SetConfig>
      break;
 80063a2:	e005      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80063a4:	230f      	movs	r3, #15
 80063a6:	18fb      	adds	r3, r7, r3
 80063a8:	2201      	movs	r2, #1
 80063aa:	701a      	strb	r2, [r3, #0]
      break;
 80063ac:	e000      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80063ae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	223d      	movs	r2, #61	@ 0x3d
 80063b4:	2101      	movs	r1, #1
 80063b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	223c      	movs	r2, #60	@ 0x3c
 80063bc:	2100      	movs	r1, #0
 80063be:	5499      	strb	r1, [r3, r2]

  return status;
 80063c0:	230f      	movs	r3, #15
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	781b      	ldrb	r3, [r3, #0]
}
 80063c6:	0018      	movs	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	b004      	add	sp, #16
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	46c0      	nop			@ (mov r8, r8)
 80063d0:	ffff00ff 	.word	0xffff00ff

080063d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a36      	ldr	r2, [pc, #216]	@ (80064c0 <TIM_Base_SetConfig+0xec>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_Base_SetConfig+0x20>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a35      	ldr	r2, [pc, #212]	@ (80064c4 <TIM_Base_SetConfig+0xf0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d108      	bne.n	8006406 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2270      	movs	r2, #112	@ 0x70
 80063f8:	4393      	bics	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2d      	ldr	r2, [pc, #180]	@ (80064c0 <TIM_Base_SetConfig+0xec>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <TIM_Base_SetConfig+0x62>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2c      	ldr	r2, [pc, #176]	@ (80064c4 <TIM_Base_SetConfig+0xf0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00f      	beq.n	8006436 <TIM_Base_SetConfig+0x62>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2b      	ldr	r2, [pc, #172]	@ (80064c8 <TIM_Base_SetConfig+0xf4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00b      	beq.n	8006436 <TIM_Base_SetConfig+0x62>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2a      	ldr	r2, [pc, #168]	@ (80064cc <TIM_Base_SetConfig+0xf8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <TIM_Base_SetConfig+0x62>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a29      	ldr	r2, [pc, #164]	@ (80064d0 <TIM_Base_SetConfig+0xfc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_Base_SetConfig+0x62>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a28      	ldr	r2, [pc, #160]	@ (80064d4 <TIM_Base_SetConfig+0x100>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d108      	bne.n	8006448 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4a27      	ldr	r2, [pc, #156]	@ (80064d8 <TIM_Base_SetConfig+0x104>)
 800643a:	4013      	ands	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2280      	movs	r2, #128	@ 0x80
 800644c:	4393      	bics	r3, r2
 800644e:	001a      	movs	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a13      	ldr	r2, [pc, #76]	@ (80064c0 <TIM_Base_SetConfig+0xec>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_Base_SetConfig+0xba>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a14      	ldr	r2, [pc, #80]	@ (80064cc <TIM_Base_SetConfig+0xf8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <TIM_Base_SetConfig+0xba>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a13      	ldr	r2, [pc, #76]	@ (80064d0 <TIM_Base_SetConfig+0xfc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_Base_SetConfig+0xba>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a12      	ldr	r2, [pc, #72]	@ (80064d4 <TIM_Base_SetConfig+0x100>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d103      	bne.n	8006496 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	691a      	ldr	r2, [r3, #16]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2201      	movs	r2, #1
 80064a2:	4013      	ands	r3, r2
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d106      	bne.n	80064b6 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2201      	movs	r2, #1
 80064ae:	4393      	bics	r3, r2
 80064b0:	001a      	movs	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	611a      	str	r2, [r3, #16]
  }
}
 80064b6:	46c0      	nop			@ (mov r8, r8)
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b004      	add	sp, #16
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	46c0      	nop			@ (mov r8, r8)
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40002000 	.word	0x40002000
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40014400 	.word	0x40014400
 80064d4:	40014800 	.word	0x40014800
 80064d8:	fffffcff 	.word	0xfffffcff

080064dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	2201      	movs	r2, #1
 80064f4:	4393      	bics	r3, r2
 80064f6:	001a      	movs	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	22f0      	movs	r2, #240	@ 0xf0
 8006506:	4393      	bics	r3, r2
 8006508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	220a      	movs	r2, #10
 8006518:	4393      	bics	r3, r2
 800651a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	46c0      	nop			@ (mov r8, r8)
 8006532:	46bd      	mov	sp, r7
 8006534:	b006      	add	sp, #24
 8006536:	bd80      	pop	{r7, pc}

08006538 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	2210      	movs	r2, #16
 8006550:	4393      	bics	r3, r2
 8006552:	001a      	movs	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4a0d      	ldr	r2, [pc, #52]	@ (8006598 <TIM_TI2_ConfigInputStage+0x60>)
 8006562:	4013      	ands	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	031b      	lsls	r3, r3, #12
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	22a0      	movs	r2, #160	@ 0xa0
 8006574:	4393      	bics	r3, r2
 8006576:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	46c0      	nop			@ (mov r8, r8)
 8006590:	46bd      	mov	sp, r7
 8006592:	b006      	add	sp, #24
 8006594:	bd80      	pop	{r7, pc}
 8006596:	46c0      	nop			@ (mov r8, r8)
 8006598:	ffff0fff 	.word	0xffff0fff

0800659c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2270      	movs	r2, #112	@ 0x70
 80065b0:	4393      	bics	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	2207      	movs	r2, #7
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	609a      	str	r2, [r3, #8]
}
 80065c6:	46c0      	nop			@ (mov r8, r8)
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b004      	add	sp, #16
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4a09      	ldr	r2, [pc, #36]	@ (800660c <TIM_ETR_SetConfig+0x3c>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	609a      	str	r2, [r3, #8]
}
 8006604:	46c0      	nop			@ (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b006      	add	sp, #24
 800660a:	bd80      	pop	{r7, pc}
 800660c:	ffff00ff 	.word	0xffff00ff

08006610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	223c      	movs	r2, #60	@ 0x3c
 800661e:	5c9b      	ldrb	r3, [r3, r2]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006624:	2302      	movs	r3, #2
 8006626:	e041      	b.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	223c      	movs	r2, #60	@ 0x3c
 800662c:	2101      	movs	r1, #1
 800662e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	223d      	movs	r2, #61	@ 0x3d
 8006634:	2102      	movs	r1, #2
 8006636:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2270      	movs	r2, #112	@ 0x70
 800664c:	4393      	bics	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a13      	ldr	r2, [pc, #76]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a11      	ldr	r2, [pc, #68]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a10      	ldr	r2, [pc, #64]	@ (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10c      	bne.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2280      	movs	r2, #128	@ 0x80
 8006684:	4393      	bics	r3, r2
 8006686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	4313      	orrs	r3, r2
 8006690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	223d      	movs	r2, #61	@ 0x3d
 800669e:	2101      	movs	r1, #1
 80066a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	223c      	movs	r2, #60	@ 0x3c
 80066a6:	2100      	movs	r1, #0
 80066a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	0018      	movs	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b004      	add	sp, #16
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40014000 	.word	0x40014000

080066c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e044      	b.n	800675c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d107      	bne.n	80066ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2278      	movs	r2, #120	@ 0x78
 80066de:	2100      	movs	r1, #0
 80066e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	0018      	movs	r0, r3
 80066e6:	f7fc fd29 	bl	800313c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2224      	movs	r2, #36	@ 0x24
 80066ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2101      	movs	r1, #1
 80066fc:	438a      	bics	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	0018      	movs	r0, r3
 800670c:	f000 fa0c 	bl	8006b28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	0018      	movs	r0, r3
 8006714:	f000 f8c8 	bl	80068a8 <UART_SetConfig>
 8006718:	0003      	movs	r3, r0
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e01c      	b.n	800675c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	490d      	ldr	r1, [pc, #52]	@ (8006764 <HAL_UART_Init+0xa4>)
 800672e:	400a      	ands	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2108      	movs	r1, #8
 800673e:	438a      	bics	r2, r1
 8006740:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2101      	movs	r1, #1
 800674e:	430a      	orrs	r2, r1
 8006750:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0018      	movs	r0, r3
 8006756:	f000 fa9b 	bl	8006c90 <UART_CheckIdleState>
 800675a:	0003      	movs	r3, r0
}
 800675c:	0018      	movs	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	b002      	add	sp, #8
 8006762:	bd80      	pop	{r7, pc}
 8006764:	fffff7ff 	.word	0xfffff7ff

08006768 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	@ 0x28
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	1dbb      	adds	r3, r7, #6
 8006776:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800677c:	2b20      	cmp	r3, #32
 800677e:	d000      	beq.n	8006782 <HAL_UART_Transmit+0x1a>
 8006780:	e08c      	b.n	800689c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <HAL_UART_Transmit+0x28>
 8006788:	1dbb      	adds	r3, r7, #6
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e084      	b.n	800689e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	2380      	movs	r3, #128	@ 0x80
 800679a:	015b      	lsls	r3, r3, #5
 800679c:	429a      	cmp	r2, r3
 800679e:	d109      	bne.n	80067b4 <HAL_UART_Transmit+0x4c>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2201      	movs	r2, #1
 80067ac:	4013      	ands	r3, r2
 80067ae:	d001      	beq.n	80067b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e074      	b.n	800689e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2284      	movs	r2, #132	@ 0x84
 80067b8:	2100      	movs	r1, #0
 80067ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2221      	movs	r2, #33	@ 0x21
 80067c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067c2:	f7fc fe6b 	bl	800349c <HAL_GetTick>
 80067c6:	0003      	movs	r3, r0
 80067c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1dba      	adds	r2, r7, #6
 80067ce:	2150      	movs	r1, #80	@ 0x50
 80067d0:	8812      	ldrh	r2, [r2, #0]
 80067d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	1dba      	adds	r2, r7, #6
 80067d8:	2152      	movs	r1, #82	@ 0x52
 80067da:	8812      	ldrh	r2, [r2, #0]
 80067dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	2380      	movs	r3, #128	@ 0x80
 80067e4:	015b      	lsls	r3, r3, #5
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d108      	bne.n	80067fc <HAL_UART_Transmit+0x94>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e003      	b.n	8006804 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006804:	e02f      	b.n	8006866 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	0013      	movs	r3, r2
 8006810:	2200      	movs	r2, #0
 8006812:	2180      	movs	r1, #128	@ 0x80
 8006814:	f000 fae4 	bl	8006de0 <UART_WaitOnFlagUntilTimeout>
 8006818:	1e03      	subs	r3, r0, #0
 800681a:	d004      	beq.n	8006826 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e03b      	b.n	800689e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	881a      	ldrh	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	05d2      	lsls	r2, r2, #23
 8006836:	0dd2      	lsrs	r2, r2, #23
 8006838:	b292      	uxth	r2, r2
 800683a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	3302      	adds	r3, #2
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	e007      	b.n	8006854 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	781a      	ldrb	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	3301      	adds	r3, #1
 8006852:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2252      	movs	r2, #82	@ 0x52
 8006858:	5a9b      	ldrh	r3, [r3, r2]
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b299      	uxth	r1, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2252      	movs	r2, #82	@ 0x52
 8006864:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2252      	movs	r2, #82	@ 0x52
 800686a:	5a9b      	ldrh	r3, [r3, r2]
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1c9      	bne.n	8006806 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	0013      	movs	r3, r2
 800687c:	2200      	movs	r2, #0
 800687e:	2140      	movs	r1, #64	@ 0x40
 8006880:	f000 faae 	bl	8006de0 <UART_WaitOnFlagUntilTimeout>
 8006884:	1e03      	subs	r3, r0, #0
 8006886:	d004      	beq.n	8006892 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e005      	b.n	800689e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b008      	add	sp, #32
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b0:	231e      	movs	r3, #30
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a8d      	ldr	r2, [pc, #564]	@ (8006b0c <UART_SetConfig+0x264>)
 80068d8:	4013      	ands	r3, r2
 80068da:	0019      	movs	r1, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4a88      	ldr	r2, [pc, #544]	@ (8006b10 <UART_SetConfig+0x268>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	0019      	movs	r1, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	4a7f      	ldr	r2, [pc, #508]	@ (8006b14 <UART_SetConfig+0x26c>)
 8006916:	4013      	ands	r3, r2
 8006918:	0019      	movs	r1, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	430a      	orrs	r2, r1
 8006922:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a7b      	ldr	r2, [pc, #492]	@ (8006b18 <UART_SetConfig+0x270>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d127      	bne.n	800697e <UART_SetConfig+0xd6>
 800692e:	4b7b      	ldr	r3, [pc, #492]	@ (8006b1c <UART_SetConfig+0x274>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006932:	2203      	movs	r2, #3
 8006934:	4013      	ands	r3, r2
 8006936:	2b03      	cmp	r3, #3
 8006938:	d00d      	beq.n	8006956 <UART_SetConfig+0xae>
 800693a:	d81b      	bhi.n	8006974 <UART_SetConfig+0xcc>
 800693c:	2b02      	cmp	r3, #2
 800693e:	d014      	beq.n	800696a <UART_SetConfig+0xc2>
 8006940:	d818      	bhi.n	8006974 <UART_SetConfig+0xcc>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <UART_SetConfig+0xa4>
 8006946:	2b01      	cmp	r3, #1
 8006948:	d00a      	beq.n	8006960 <UART_SetConfig+0xb8>
 800694a:	e013      	b.n	8006974 <UART_SetConfig+0xcc>
 800694c:	231f      	movs	r3, #31
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	2200      	movs	r2, #0
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	e021      	b.n	800699a <UART_SetConfig+0xf2>
 8006956:	231f      	movs	r3, #31
 8006958:	18fb      	adds	r3, r7, r3
 800695a:	2202      	movs	r2, #2
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	e01c      	b.n	800699a <UART_SetConfig+0xf2>
 8006960:	231f      	movs	r3, #31
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	2204      	movs	r2, #4
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	e017      	b.n	800699a <UART_SetConfig+0xf2>
 800696a:	231f      	movs	r3, #31
 800696c:	18fb      	adds	r3, r7, r3
 800696e:	2208      	movs	r2, #8
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	e012      	b.n	800699a <UART_SetConfig+0xf2>
 8006974:	231f      	movs	r3, #31
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	2210      	movs	r2, #16
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	e00d      	b.n	800699a <UART_SetConfig+0xf2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a67      	ldr	r2, [pc, #412]	@ (8006b20 <UART_SetConfig+0x278>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d104      	bne.n	8006992 <UART_SetConfig+0xea>
 8006988:	231f      	movs	r3, #31
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	e003      	b.n	800699a <UART_SetConfig+0xf2>
 8006992:	231f      	movs	r3, #31
 8006994:	18fb      	adds	r3, r7, r3
 8006996:	2210      	movs	r2, #16
 8006998:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69da      	ldr	r2, [r3, #28]
 800699e:	2380      	movs	r3, #128	@ 0x80
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d15c      	bne.n	8006a60 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80069a6:	231f      	movs	r3, #31
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d015      	beq.n	80069dc <UART_SetConfig+0x134>
 80069b0:	dc18      	bgt.n	80069e4 <UART_SetConfig+0x13c>
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d00d      	beq.n	80069d2 <UART_SetConfig+0x12a>
 80069b6:	dc15      	bgt.n	80069e4 <UART_SetConfig+0x13c>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <UART_SetConfig+0x11a>
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d005      	beq.n	80069cc <UART_SetConfig+0x124>
 80069c0:	e010      	b.n	80069e4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069c2:	f7fe fb9b 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 80069c6:	0003      	movs	r3, r0
 80069c8:	61bb      	str	r3, [r7, #24]
        break;
 80069ca:	e012      	b.n	80069f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069cc:	4b55      	ldr	r3, [pc, #340]	@ (8006b24 <UART_SetConfig+0x27c>)
 80069ce:	61bb      	str	r3, [r7, #24]
        break;
 80069d0:	e00f      	b.n	80069f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069d2:	f7fe fb33 	bl	800503c <HAL_RCC_GetSysClockFreq>
 80069d6:	0003      	movs	r3, r0
 80069d8:	61bb      	str	r3, [r7, #24]
        break;
 80069da:	e00a      	b.n	80069f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069dc:	2380      	movs	r3, #128	@ 0x80
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	61bb      	str	r3, [r7, #24]
        break;
 80069e2:	e006      	b.n	80069f2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069e8:	231e      	movs	r3, #30
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
        break;
 80069f0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d100      	bne.n	80069fa <UART_SetConfig+0x152>
 80069f8:	e07a      	b.n	8006af0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	005a      	lsls	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	18d2      	adds	r2, r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	0010      	movs	r0, r2
 8006a0e:	f7f9 fb97 	bl	8000140 <__udivsi3>
 8006a12:	0003      	movs	r3, r0
 8006a14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b0f      	cmp	r3, #15
 8006a1a:	d91c      	bls.n	8006a56 <UART_SetConfig+0x1ae>
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	2380      	movs	r3, #128	@ 0x80
 8006a20:	025b      	lsls	r3, r3, #9
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d217      	bcs.n	8006a56 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	200e      	movs	r0, #14
 8006a2c:	183b      	adds	r3, r7, r0
 8006a2e:	210f      	movs	r1, #15
 8006a30:	438a      	bics	r2, r1
 8006a32:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2207      	movs	r2, #7
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	b299      	uxth	r1, r3
 8006a40:	183b      	adds	r3, r7, r0
 8006a42:	183a      	adds	r2, r7, r0
 8006a44:	8812      	ldrh	r2, [r2, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	183a      	adds	r2, r7, r0
 8006a50:	8812      	ldrh	r2, [r2, #0]
 8006a52:	60da      	str	r2, [r3, #12]
 8006a54:	e04c      	b.n	8006af0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8006a56:	231e      	movs	r3, #30
 8006a58:	18fb      	adds	r3, r7, r3
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e047      	b.n	8006af0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a60:	231f      	movs	r3, #31
 8006a62:	18fb      	adds	r3, r7, r3
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d015      	beq.n	8006a96 <UART_SetConfig+0x1ee>
 8006a6a:	dc18      	bgt.n	8006a9e <UART_SetConfig+0x1f6>
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d00d      	beq.n	8006a8c <UART_SetConfig+0x1e4>
 8006a70:	dc15      	bgt.n	8006a9e <UART_SetConfig+0x1f6>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <UART_SetConfig+0x1d4>
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d005      	beq.n	8006a86 <UART_SetConfig+0x1de>
 8006a7a:	e010      	b.n	8006a9e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7fe fb3e 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8006a80:	0003      	movs	r3, r0
 8006a82:	61bb      	str	r3, [r7, #24]
        break;
 8006a84:	e012      	b.n	8006aac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a86:	4b27      	ldr	r3, [pc, #156]	@ (8006b24 <UART_SetConfig+0x27c>)
 8006a88:	61bb      	str	r3, [r7, #24]
        break;
 8006a8a:	e00f      	b.n	8006aac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8c:	f7fe fad6 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8006a90:	0003      	movs	r3, r0
 8006a92:	61bb      	str	r3, [r7, #24]
        break;
 8006a94:	e00a      	b.n	8006aac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a96:	2380      	movs	r3, #128	@ 0x80
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	61bb      	str	r3, [r7, #24]
        break;
 8006a9c:	e006      	b.n	8006aac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006aa2:	231e      	movs	r3, #30
 8006aa4:	18fb      	adds	r3, r7, r3
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]
        break;
 8006aaa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01e      	beq.n	8006af0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	085a      	lsrs	r2, r3, #1
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	18d2      	adds	r2, r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	0010      	movs	r0, r2
 8006ac4:	f7f9 fb3c 	bl	8000140 <__udivsi3>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b0f      	cmp	r3, #15
 8006ad0:	d90a      	bls.n	8006ae8 <UART_SetConfig+0x240>
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	2380      	movs	r3, #128	@ 0x80
 8006ad6:	025b      	lsls	r3, r3, #9
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d205      	bcs.n	8006ae8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60da      	str	r2, [r3, #12]
 8006ae6:	e003      	b.n	8006af0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae8:	231e      	movs	r3, #30
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	2201      	movs	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006afc:	231e      	movs	r3, #30
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	781b      	ldrb	r3, [r3, #0]
}
 8006b02:	0018      	movs	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b008      	add	sp, #32
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	ffff69f3 	.word	0xffff69f3
 8006b10:	ffffcfff 	.word	0xffffcfff
 8006b14:	fffff4ff 	.word	0xfffff4ff
 8006b18:	40013800 	.word	0x40013800
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	40004400 	.word	0x40004400
 8006b24:	007a1200 	.word	0x007a1200

08006b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b34:	2208      	movs	r2, #8
 8006b36:	4013      	ands	r3, r2
 8006b38:	d00b      	beq.n	8006b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a4a      	ldr	r2, [pc, #296]	@ (8006c6c <UART_AdvFeatureConfig+0x144>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	0019      	movs	r1, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b56:	2201      	movs	r2, #1
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d00b      	beq.n	8006b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	4a43      	ldr	r2, [pc, #268]	@ (8006c70 <UART_AdvFeatureConfig+0x148>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	0019      	movs	r1, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b78:	2202      	movs	r2, #2
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	4a3b      	ldr	r2, [pc, #236]	@ (8006c74 <UART_AdvFeatureConfig+0x14c>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	0019      	movs	r1, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	4a34      	ldr	r2, [pc, #208]	@ (8006c78 <UART_AdvFeatureConfig+0x150>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	0019      	movs	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbc:	2210      	movs	r2, #16
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c7c <UART_AdvFeatureConfig+0x154>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	0019      	movs	r1, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	2220      	movs	r2, #32
 8006be0:	4013      	ands	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	4a25      	ldr	r2, [pc, #148]	@ (8006c80 <UART_AdvFeatureConfig+0x158>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	0019      	movs	r1, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c00:	2240      	movs	r2, #64	@ 0x40
 8006c02:	4013      	ands	r3, r2
 8006c04:	d01d      	beq.n	8006c42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c84 <UART_AdvFeatureConfig+0x15c>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	0019      	movs	r1, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c22:	2380      	movs	r3, #128	@ 0x80
 8006c24:	035b      	lsls	r3, r3, #13
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d10b      	bne.n	8006c42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a15      	ldr	r2, [pc, #84]	@ (8006c88 <UART_AdvFeatureConfig+0x160>)
 8006c32:	4013      	ands	r3, r2
 8006c34:	0019      	movs	r1, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	2280      	movs	r2, #128	@ 0x80
 8006c48:	4013      	ands	r3, r2
 8006c4a:	d00b      	beq.n	8006c64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4a0e      	ldr	r2, [pc, #56]	@ (8006c8c <UART_AdvFeatureConfig+0x164>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	0019      	movs	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }
}
 8006c64:	46c0      	nop			@ (mov r8, r8)
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b002      	add	sp, #8
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	ffff7fff 	.word	0xffff7fff
 8006c70:	fffdffff 	.word	0xfffdffff
 8006c74:	fffeffff 	.word	0xfffeffff
 8006c78:	fffbffff 	.word	0xfffbffff
 8006c7c:	ffffefff 	.word	0xffffefff
 8006c80:	ffffdfff 	.word	0xffffdfff
 8006c84:	ffefffff 	.word	0xffefffff
 8006c88:	ff9fffff 	.word	0xff9fffff
 8006c8c:	fff7ffff 	.word	0xfff7ffff

08006c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b092      	sub	sp, #72	@ 0x48
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2284      	movs	r2, #132	@ 0x84
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ca0:	f7fc fbfc 	bl	800349c <HAL_GetTick>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2208      	movs	r2, #8
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d12c      	bne.n	8006d10 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb8:	2280      	movs	r2, #128	@ 0x80
 8006cba:	0391      	lsls	r1, r2, #14
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4a46      	ldr	r2, [pc, #280]	@ (8006dd8 <UART_CheckIdleState+0x148>)
 8006cc0:	9200      	str	r2, [sp, #0]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f000 f88c 	bl	8006de0 <UART_WaitOnFlagUntilTimeout>
 8006cc8:	1e03      	subs	r3, r0, #0
 8006cca:	d021      	beq.n	8006d10 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	f383 8810 	msr	PRIMASK, r3
}
 8006ce0:	46c0      	nop			@ (mov r8, r8)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2180      	movs	r1, #128	@ 0x80
 8006cee:	438a      	bics	r2, r1
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	f383 8810 	msr	PRIMASK, r3
}
 8006cfc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2278      	movs	r2, #120	@ 0x78
 8006d08:	2100      	movs	r1, #0
 8006d0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e05f      	b.n	8006dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2204      	movs	r2, #4
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d146      	bne.n	8006dac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d20:	2280      	movs	r2, #128	@ 0x80
 8006d22:	03d1      	lsls	r1, r2, #15
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd8 <UART_CheckIdleState+0x148>)
 8006d28:	9200      	str	r2, [sp, #0]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f000 f858 	bl	8006de0 <UART_WaitOnFlagUntilTimeout>
 8006d30:	1e03      	subs	r3, r0, #0
 8006d32:	d03b      	beq.n	8006dac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d34:	f3ef 8310 	mrs	r3, PRIMASK
 8006d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	2301      	movs	r3, #1
 8006d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f383 8810 	msr	PRIMASK, r3
}
 8006d48:	46c0      	nop			@ (mov r8, r8)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4921      	ldr	r1, [pc, #132]	@ (8006ddc <UART_CheckIdleState+0x14c>)
 8006d56:	400a      	ands	r2, r1
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f383 8810 	msr	PRIMASK, r3
}
 8006d64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d66:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d6c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d70:	2301      	movs	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f383 8810 	msr	PRIMASK, r3
}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2101      	movs	r1, #1
 8006d88:	438a      	bics	r2, r1
 8006d8a:	609a      	str	r2, [r3, #8]
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	f383 8810 	msr	PRIMASK, r3
}
 8006d96:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2280      	movs	r2, #128	@ 0x80
 8006d9c:	2120      	movs	r1, #32
 8006d9e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2278      	movs	r2, #120	@ 0x78
 8006da4:	2100      	movs	r1, #0
 8006da6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e011      	b.n	8006dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2280      	movs	r2, #128	@ 0x80
 8006db6:	2120      	movs	r1, #32
 8006db8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2278      	movs	r2, #120	@ 0x78
 8006dca:	2100      	movs	r1, #0
 8006dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	b010      	add	sp, #64	@ 0x40
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	01ffffff 	.word	0x01ffffff
 8006ddc:	fffffedf 	.word	0xfffffedf

08006de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	1dfb      	adds	r3, r7, #7
 8006dee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df0:	e051      	b.n	8006e96 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	3301      	adds	r3, #1
 8006df6:	d04e      	beq.n	8006e96 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df8:	f7fc fb50 	bl	800349c <HAL_GetTick>
 8006dfc:	0002      	movs	r2, r0
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d302      	bcc.n	8006e0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e051      	b.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2204      	movs	r2, #4
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	d03b      	beq.n	8006e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b80      	cmp	r3, #128	@ 0x80
 8006e22:	d038      	beq.n	8006e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b40      	cmp	r3, #64	@ 0x40
 8006e28:	d035      	beq.n	8006e96 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	2208      	movs	r2, #8
 8006e32:	4013      	ands	r3, r2
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d111      	bne.n	8006e5c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 f83c 	bl	8006ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2284      	movs	r2, #132	@ 0x84
 8006e4c:	2108      	movs	r1, #8
 8006e4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2278      	movs	r2, #120	@ 0x78
 8006e54:	2100      	movs	r1, #0
 8006e56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e02c      	b.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	2380      	movs	r3, #128	@ 0x80
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	401a      	ands	r2, r3
 8006e68:	2380      	movs	r3, #128	@ 0x80
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d112      	bne.n	8006e96 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2280      	movs	r2, #128	@ 0x80
 8006e76:	0112      	lsls	r2, r2, #4
 8006e78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f000 f81f 	bl	8006ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2284      	movs	r2, #132	@ 0x84
 8006e86:	2120      	movs	r1, #32
 8006e88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2278      	movs	r2, #120	@ 0x78
 8006e8e:	2100      	movs	r1, #0
 8006e90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e00f      	b.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	425a      	negs	r2, r3
 8006ea6:	4153      	adcs	r3, r2
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	001a      	movs	r2, r3
 8006eac:	1dfb      	adds	r3, r7, #7
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d09e      	beq.n	8006df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b004      	add	sp, #16
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08e      	sub	sp, #56	@ 0x38
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8006ece:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	f383 8810 	msr	PRIMASK, r3
}
 8006edc:	46c0      	nop			@ (mov r8, r8)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4926      	ldr	r1, [pc, #152]	@ (8006f84 <UART_EndRxTransfer+0xc4>)
 8006eea:	400a      	ands	r2, r1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	f383 8810 	msr	PRIMASK, r3
}
 8006ef8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006efa:	f3ef 8310 	mrs	r3, PRIMASK
 8006efe:	623b      	str	r3, [r7, #32]
  return(result);
 8006f00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f04:	2301      	movs	r3, #1
 8006f06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	f383 8810 	msr	PRIMASK, r3
}
 8006f0e:	46c0      	nop			@ (mov r8, r8)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	438a      	bics	r2, r1
 8006f1e:	609a      	str	r2, [r3, #8]
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d118      	bne.n	8006f66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f34:	f3ef 8310 	mrs	r3, PRIMASK
 8006f38:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f3e:	2301      	movs	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f383 8810 	msr	PRIMASK, r3
}
 8006f48:	46c0      	nop			@ (mov r8, r8)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2110      	movs	r1, #16
 8006f56:	438a      	bics	r2, r1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f383 8810 	msr	PRIMASK, r3
}
 8006f64:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2280      	movs	r2, #128	@ 0x80
 8006f6a:	2120      	movs	r1, #32
 8006f6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f7a:	46c0      	nop			@ (mov r8, r8)
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	b00e      	add	sp, #56	@ 0x38
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	46c0      	nop			@ (mov r8, r8)
 8006f84:	fffffedf 	.word	0xfffffedf

08006f88 <__cvt>:
 8006f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8a:	001f      	movs	r7, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	0016      	movs	r6, r2
 8006f90:	b08b      	sub	sp, #44	@ 0x2c
 8006f92:	429f      	cmp	r7, r3
 8006f94:	da04      	bge.n	8006fa0 <__cvt+0x18>
 8006f96:	2180      	movs	r1, #128	@ 0x80
 8006f98:	0609      	lsls	r1, r1, #24
 8006f9a:	187b      	adds	r3, r7, r1
 8006f9c:	001f      	movs	r7, r3
 8006f9e:	232d      	movs	r3, #45	@ 0x2d
 8006fa0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006fa2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006fa4:	7013      	strb	r3, [r2, #0]
 8006fa6:	2320      	movs	r3, #32
 8006fa8:	2203      	movs	r2, #3
 8006faa:	439d      	bics	r5, r3
 8006fac:	2d46      	cmp	r5, #70	@ 0x46
 8006fae:	d007      	beq.n	8006fc0 <__cvt+0x38>
 8006fb0:	002b      	movs	r3, r5
 8006fb2:	3b45      	subs	r3, #69	@ 0x45
 8006fb4:	4259      	negs	r1, r3
 8006fb6:	414b      	adcs	r3, r1
 8006fb8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006fba:	3a01      	subs	r2, #1
 8006fbc:	18cb      	adds	r3, r1, r3
 8006fbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fc0:	ab09      	add	r3, sp, #36	@ 0x24
 8006fc2:	9304      	str	r3, [sp, #16]
 8006fc4:	ab08      	add	r3, sp, #32
 8006fc6:	9303      	str	r3, [sp, #12]
 8006fc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006fca:	9200      	str	r2, [sp, #0]
 8006fcc:	9302      	str	r3, [sp, #8]
 8006fce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fd0:	0032      	movs	r2, r6
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	003b      	movs	r3, r7
 8006fd6:	f000 fe89 	bl	8007cec <_dtoa_r>
 8006fda:	0004      	movs	r4, r0
 8006fdc:	2d47      	cmp	r5, #71	@ 0x47
 8006fde:	d11b      	bne.n	8007018 <__cvt+0x90>
 8006fe0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fe2:	07db      	lsls	r3, r3, #31
 8006fe4:	d511      	bpl.n	800700a <__cvt+0x82>
 8006fe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fe8:	18c3      	adds	r3, r0, r3
 8006fea:	9307      	str	r3, [sp, #28]
 8006fec:	2200      	movs	r2, #0
 8006fee:	2300      	movs	r3, #0
 8006ff0:	0030      	movs	r0, r6
 8006ff2:	0039      	movs	r1, r7
 8006ff4:	f7f9 fa2a 	bl	800044c <__aeabi_dcmpeq>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d001      	beq.n	8007000 <__cvt+0x78>
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007000:	2230      	movs	r2, #48	@ 0x30
 8007002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007004:	9907      	ldr	r1, [sp, #28]
 8007006:	428b      	cmp	r3, r1
 8007008:	d320      	bcc.n	800704c <__cvt+0xc4>
 800700a:	0020      	movs	r0, r4
 800700c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800700e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007010:	1b1b      	subs	r3, r3, r4
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	b00b      	add	sp, #44	@ 0x2c
 8007016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007018:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800701a:	18c3      	adds	r3, r0, r3
 800701c:	9307      	str	r3, [sp, #28]
 800701e:	2d46      	cmp	r5, #70	@ 0x46
 8007020:	d1e4      	bne.n	8006fec <__cvt+0x64>
 8007022:	7803      	ldrb	r3, [r0, #0]
 8007024:	2b30      	cmp	r3, #48	@ 0x30
 8007026:	d10c      	bne.n	8007042 <__cvt+0xba>
 8007028:	2200      	movs	r2, #0
 800702a:	2300      	movs	r3, #0
 800702c:	0030      	movs	r0, r6
 800702e:	0039      	movs	r1, r7
 8007030:	f7f9 fa0c 	bl	800044c <__aeabi_dcmpeq>
 8007034:	2800      	cmp	r0, #0
 8007036:	d104      	bne.n	8007042 <__cvt+0xba>
 8007038:	2301      	movs	r3, #1
 800703a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800703c:	1a9b      	subs	r3, r3, r2
 800703e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007044:	9a07      	ldr	r2, [sp, #28]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	18d3      	adds	r3, r2, r3
 800704a:	e7ce      	b.n	8006fea <__cvt+0x62>
 800704c:	1c59      	adds	r1, r3, #1
 800704e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e7d6      	b.n	8007002 <__cvt+0x7a>

08007054 <__exponent>:
 8007054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007056:	232b      	movs	r3, #43	@ 0x2b
 8007058:	0005      	movs	r5, r0
 800705a:	000c      	movs	r4, r1
 800705c:	b085      	sub	sp, #20
 800705e:	7002      	strb	r2, [r0, #0]
 8007060:	2900      	cmp	r1, #0
 8007062:	da01      	bge.n	8007068 <__exponent+0x14>
 8007064:	424c      	negs	r4, r1
 8007066:	3302      	adds	r3, #2
 8007068:	706b      	strb	r3, [r5, #1]
 800706a:	2c09      	cmp	r4, #9
 800706c:	dd2c      	ble.n	80070c8 <__exponent+0x74>
 800706e:	ab02      	add	r3, sp, #8
 8007070:	1dde      	adds	r6, r3, #7
 8007072:	0020      	movs	r0, r4
 8007074:	210a      	movs	r1, #10
 8007076:	f7f9 f9d3 	bl	8000420 <__aeabi_idivmod>
 800707a:	0037      	movs	r7, r6
 800707c:	3130      	adds	r1, #48	@ 0x30
 800707e:	3e01      	subs	r6, #1
 8007080:	0020      	movs	r0, r4
 8007082:	7031      	strb	r1, [r6, #0]
 8007084:	210a      	movs	r1, #10
 8007086:	9401      	str	r4, [sp, #4]
 8007088:	f7f9 f8e4 	bl	8000254 <__divsi3>
 800708c:	9b01      	ldr	r3, [sp, #4]
 800708e:	0004      	movs	r4, r0
 8007090:	2b63      	cmp	r3, #99	@ 0x63
 8007092:	dcee      	bgt.n	8007072 <__exponent+0x1e>
 8007094:	1eba      	subs	r2, r7, #2
 8007096:	1ca8      	adds	r0, r5, #2
 8007098:	0001      	movs	r1, r0
 800709a:	0013      	movs	r3, r2
 800709c:	3430      	adds	r4, #48	@ 0x30
 800709e:	7014      	strb	r4, [r2, #0]
 80070a0:	ac02      	add	r4, sp, #8
 80070a2:	3407      	adds	r4, #7
 80070a4:	429c      	cmp	r4, r3
 80070a6:	d80a      	bhi.n	80070be <__exponent+0x6a>
 80070a8:	2300      	movs	r3, #0
 80070aa:	42a2      	cmp	r2, r4
 80070ac:	d803      	bhi.n	80070b6 <__exponent+0x62>
 80070ae:	3309      	adds	r3, #9
 80070b0:	aa02      	add	r2, sp, #8
 80070b2:	189b      	adds	r3, r3, r2
 80070b4:	1bdb      	subs	r3, r3, r7
 80070b6:	18c0      	adds	r0, r0, r3
 80070b8:	1b40      	subs	r0, r0, r5
 80070ba:	b005      	add	sp, #20
 80070bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070be:	781c      	ldrb	r4, [r3, #0]
 80070c0:	3301      	adds	r3, #1
 80070c2:	700c      	strb	r4, [r1, #0]
 80070c4:	3101      	adds	r1, #1
 80070c6:	e7eb      	b.n	80070a0 <__exponent+0x4c>
 80070c8:	2330      	movs	r3, #48	@ 0x30
 80070ca:	18e4      	adds	r4, r4, r3
 80070cc:	70ab      	strb	r3, [r5, #2]
 80070ce:	1d28      	adds	r0, r5, #4
 80070d0:	70ec      	strb	r4, [r5, #3]
 80070d2:	e7f1      	b.n	80070b8 <__exponent+0x64>

080070d4 <_printf_float>:
 80070d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070d6:	b097      	sub	sp, #92	@ 0x5c
 80070d8:	000d      	movs	r5, r1
 80070da:	920a      	str	r2, [sp, #40]	@ 0x28
 80070dc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80070de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80070e2:	f000 fceb 	bl	8007abc <_localeconv_r>
 80070e6:	6803      	ldr	r3, [r0, #0]
 80070e8:	0018      	movs	r0, r3
 80070ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80070ec:	f7f9 f80c 	bl	8000108 <strlen>
 80070f0:	2300      	movs	r3, #0
 80070f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80070f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80070f6:	7e2b      	ldrb	r3, [r5, #24]
 80070f8:	2207      	movs	r2, #7
 80070fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8007100:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	05c9      	lsls	r1, r1, #23
 8007106:	d545      	bpl.n	8007194 <_printf_float+0xc0>
 8007108:	189b      	adds	r3, r3, r2
 800710a:	4393      	bics	r3, r2
 800710c:	001a      	movs	r2, r3
 800710e:	3208      	adds	r2, #8
 8007110:	6022      	str	r2, [r4, #0]
 8007112:	2201      	movs	r2, #1
 8007114:	681e      	ldr	r6, [r3, #0]
 8007116:	685f      	ldr	r7, [r3, #4]
 8007118:	007b      	lsls	r3, r7, #1
 800711a:	085b      	lsrs	r3, r3, #1
 800711c:	9311      	str	r3, [sp, #68]	@ 0x44
 800711e:	9610      	str	r6, [sp, #64]	@ 0x40
 8007120:	64ae      	str	r6, [r5, #72]	@ 0x48
 8007122:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8007124:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007126:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007128:	4ba7      	ldr	r3, [pc, #668]	@ (80073c8 <_printf_float+0x2f4>)
 800712a:	4252      	negs	r2, r2
 800712c:	f7fa ffc8 	bl	80020c0 <__aeabi_dcmpun>
 8007130:	2800      	cmp	r0, #0
 8007132:	d131      	bne.n	8007198 <_printf_float+0xc4>
 8007134:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007136:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007138:	2201      	movs	r2, #1
 800713a:	4ba3      	ldr	r3, [pc, #652]	@ (80073c8 <_printf_float+0x2f4>)
 800713c:	4252      	negs	r2, r2
 800713e:	f7f9 f995 	bl	800046c <__aeabi_dcmple>
 8007142:	2800      	cmp	r0, #0
 8007144:	d128      	bne.n	8007198 <_printf_float+0xc4>
 8007146:	2200      	movs	r2, #0
 8007148:	2300      	movs	r3, #0
 800714a:	0030      	movs	r0, r6
 800714c:	0039      	movs	r1, r7
 800714e:	f7f9 f983 	bl	8000458 <__aeabi_dcmplt>
 8007152:	2800      	cmp	r0, #0
 8007154:	d003      	beq.n	800715e <_printf_float+0x8a>
 8007156:	002b      	movs	r3, r5
 8007158:	222d      	movs	r2, #45	@ 0x2d
 800715a:	3343      	adds	r3, #67	@ 0x43
 800715c:	701a      	strb	r2, [r3, #0]
 800715e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007160:	4f9a      	ldr	r7, [pc, #616]	@ (80073cc <_printf_float+0x2f8>)
 8007162:	2b47      	cmp	r3, #71	@ 0x47
 8007164:	d900      	bls.n	8007168 <_printf_float+0x94>
 8007166:	4f9a      	ldr	r7, [pc, #616]	@ (80073d0 <_printf_float+0x2fc>)
 8007168:	2303      	movs	r3, #3
 800716a:	2400      	movs	r4, #0
 800716c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800716e:	612b      	str	r3, [r5, #16]
 8007170:	3301      	adds	r3, #1
 8007172:	439a      	bics	r2, r3
 8007174:	602a      	str	r2, [r5, #0]
 8007176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007178:	0029      	movs	r1, r5
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800717e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007180:	aa15      	add	r2, sp, #84	@ 0x54
 8007182:	f000 f9e5 	bl	8007550 <_printf_common>
 8007186:	3001      	adds	r0, #1
 8007188:	d000      	beq.n	800718c <_printf_float+0xb8>
 800718a:	e09f      	b.n	80072cc <_printf_float+0x1f8>
 800718c:	2001      	movs	r0, #1
 800718e:	4240      	negs	r0, r0
 8007190:	b017      	add	sp, #92	@ 0x5c
 8007192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007194:	3307      	adds	r3, #7
 8007196:	e7b8      	b.n	800710a <_printf_float+0x36>
 8007198:	0032      	movs	r2, r6
 800719a:	003b      	movs	r3, r7
 800719c:	0030      	movs	r0, r6
 800719e:	0039      	movs	r1, r7
 80071a0:	f7fa ff8e 	bl	80020c0 <__aeabi_dcmpun>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d00b      	beq.n	80071c0 <_printf_float+0xec>
 80071a8:	2f00      	cmp	r7, #0
 80071aa:	da03      	bge.n	80071b4 <_printf_float+0xe0>
 80071ac:	002b      	movs	r3, r5
 80071ae:	222d      	movs	r2, #45	@ 0x2d
 80071b0:	3343      	adds	r3, #67	@ 0x43
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071b6:	4f87      	ldr	r7, [pc, #540]	@ (80073d4 <_printf_float+0x300>)
 80071b8:	2b47      	cmp	r3, #71	@ 0x47
 80071ba:	d9d5      	bls.n	8007168 <_printf_float+0x94>
 80071bc:	4f86      	ldr	r7, [pc, #536]	@ (80073d8 <_printf_float+0x304>)
 80071be:	e7d3      	b.n	8007168 <_printf_float+0x94>
 80071c0:	2220      	movs	r2, #32
 80071c2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80071c4:	686b      	ldr	r3, [r5, #4]
 80071c6:	4394      	bics	r4, r2
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	d146      	bne.n	800725a <_printf_float+0x186>
 80071cc:	3307      	adds	r3, #7
 80071ce:	606b      	str	r3, [r5, #4]
 80071d0:	2380      	movs	r3, #128	@ 0x80
 80071d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	4313      	orrs	r3, r2
 80071d8:	2200      	movs	r2, #0
 80071da:	602b      	str	r3, [r5, #0]
 80071dc:	9206      	str	r2, [sp, #24]
 80071de:	aa14      	add	r2, sp, #80	@ 0x50
 80071e0:	9205      	str	r2, [sp, #20]
 80071e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071e4:	a90a      	add	r1, sp, #40	@ 0x28
 80071e6:	9204      	str	r2, [sp, #16]
 80071e8:	aa13      	add	r2, sp, #76	@ 0x4c
 80071ea:	9203      	str	r2, [sp, #12]
 80071ec:	2223      	movs	r2, #35	@ 0x23
 80071ee:	1852      	adds	r2, r2, r1
 80071f0:	9202      	str	r2, [sp, #8]
 80071f2:	9301      	str	r3, [sp, #4]
 80071f4:	686b      	ldr	r3, [r5, #4]
 80071f6:	0032      	movs	r2, r6
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071fc:	003b      	movs	r3, r7
 80071fe:	f7ff fec3 	bl	8006f88 <__cvt>
 8007202:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007204:	0007      	movs	r7, r0
 8007206:	2c47      	cmp	r4, #71	@ 0x47
 8007208:	d12d      	bne.n	8007266 <_printf_float+0x192>
 800720a:	1cd3      	adds	r3, r2, #3
 800720c:	db02      	blt.n	8007214 <_printf_float+0x140>
 800720e:	686b      	ldr	r3, [r5, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	dd48      	ble.n	80072a6 <_printf_float+0x1d2>
 8007214:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007216:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007218:	3b02      	subs	r3, #2
 800721a:	b2db      	uxtb	r3, r3
 800721c:	930c      	str	r3, [sp, #48]	@ 0x30
 800721e:	0028      	movs	r0, r5
 8007220:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007222:	3901      	subs	r1, #1
 8007224:	3050      	adds	r0, #80	@ 0x50
 8007226:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007228:	f7ff ff14 	bl	8007054 <__exponent>
 800722c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800722e:	0004      	movs	r4, r0
 8007230:	1813      	adds	r3, r2, r0
 8007232:	612b      	str	r3, [r5, #16]
 8007234:	2a01      	cmp	r2, #1
 8007236:	dc02      	bgt.n	800723e <_printf_float+0x16a>
 8007238:	682a      	ldr	r2, [r5, #0]
 800723a:	07d2      	lsls	r2, r2, #31
 800723c:	d501      	bpl.n	8007242 <_printf_float+0x16e>
 800723e:	3301      	adds	r3, #1
 8007240:	612b      	str	r3, [r5, #16]
 8007242:	2323      	movs	r3, #35	@ 0x23
 8007244:	aa0a      	add	r2, sp, #40	@ 0x28
 8007246:	189b      	adds	r3, r3, r2
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d100      	bne.n	8007250 <_printf_float+0x17c>
 800724e:	e792      	b.n	8007176 <_printf_float+0xa2>
 8007250:	002b      	movs	r3, r5
 8007252:	222d      	movs	r2, #45	@ 0x2d
 8007254:	3343      	adds	r3, #67	@ 0x43
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	e78d      	b.n	8007176 <_printf_float+0xa2>
 800725a:	2c47      	cmp	r4, #71	@ 0x47
 800725c:	d1b8      	bne.n	80071d0 <_printf_float+0xfc>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1b6      	bne.n	80071d0 <_printf_float+0xfc>
 8007262:	3301      	adds	r3, #1
 8007264:	e7b3      	b.n	80071ce <_printf_float+0xfa>
 8007266:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007268:	0011      	movs	r1, r2
 800726a:	2b65      	cmp	r3, #101	@ 0x65
 800726c:	d9d7      	bls.n	800721e <_printf_float+0x14a>
 800726e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007270:	2b66      	cmp	r3, #102	@ 0x66
 8007272:	d11a      	bne.n	80072aa <_printf_float+0x1d6>
 8007274:	686b      	ldr	r3, [r5, #4]
 8007276:	2a00      	cmp	r2, #0
 8007278:	dd09      	ble.n	800728e <_printf_float+0x1ba>
 800727a:	612a      	str	r2, [r5, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <_printf_float+0x1b2>
 8007280:	6829      	ldr	r1, [r5, #0]
 8007282:	07c9      	lsls	r1, r1, #31
 8007284:	d50b      	bpl.n	800729e <_printf_float+0x1ca>
 8007286:	3301      	adds	r3, #1
 8007288:	189b      	adds	r3, r3, r2
 800728a:	612b      	str	r3, [r5, #16]
 800728c:	e007      	b.n	800729e <_printf_float+0x1ca>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d103      	bne.n	800729a <_printf_float+0x1c6>
 8007292:	2201      	movs	r2, #1
 8007294:	6829      	ldr	r1, [r5, #0]
 8007296:	4211      	tst	r1, r2
 8007298:	d000      	beq.n	800729c <_printf_float+0x1c8>
 800729a:	1c9a      	adds	r2, r3, #2
 800729c:	612a      	str	r2, [r5, #16]
 800729e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072a0:	2400      	movs	r4, #0
 80072a2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80072a4:	e7cd      	b.n	8007242 <_printf_float+0x16e>
 80072a6:	2367      	movs	r3, #103	@ 0x67
 80072a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80072aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80072ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072ae:	4299      	cmp	r1, r3
 80072b0:	db06      	blt.n	80072c0 <_printf_float+0x1ec>
 80072b2:	682b      	ldr	r3, [r5, #0]
 80072b4:	6129      	str	r1, [r5, #16]
 80072b6:	07db      	lsls	r3, r3, #31
 80072b8:	d5f1      	bpl.n	800729e <_printf_float+0x1ca>
 80072ba:	3101      	adds	r1, #1
 80072bc:	6129      	str	r1, [r5, #16]
 80072be:	e7ee      	b.n	800729e <_printf_float+0x1ca>
 80072c0:	2201      	movs	r2, #1
 80072c2:	2900      	cmp	r1, #0
 80072c4:	dce0      	bgt.n	8007288 <_printf_float+0x1b4>
 80072c6:	1892      	adds	r2, r2, r2
 80072c8:	1a52      	subs	r2, r2, r1
 80072ca:	e7dd      	b.n	8007288 <_printf_float+0x1b4>
 80072cc:	682a      	ldr	r2, [r5, #0]
 80072ce:	0553      	lsls	r3, r2, #21
 80072d0:	d408      	bmi.n	80072e4 <_printf_float+0x210>
 80072d2:	692b      	ldr	r3, [r5, #16]
 80072d4:	003a      	movs	r2, r7
 80072d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80072dc:	47a0      	blx	r4
 80072de:	3001      	adds	r0, #1
 80072e0:	d129      	bne.n	8007336 <_printf_float+0x262>
 80072e2:	e753      	b.n	800718c <_printf_float+0xb8>
 80072e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072e6:	2b65      	cmp	r3, #101	@ 0x65
 80072e8:	d800      	bhi.n	80072ec <_printf_float+0x218>
 80072ea:	e0da      	b.n	80074a2 <_printf_float+0x3ce>
 80072ec:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80072ee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80072f0:	2200      	movs	r2, #0
 80072f2:	2300      	movs	r3, #0
 80072f4:	f7f9 f8aa 	bl	800044c <__aeabi_dcmpeq>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d033      	beq.n	8007364 <_printf_float+0x290>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4a37      	ldr	r2, [pc, #220]	@ (80073dc <_printf_float+0x308>)
 8007300:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007304:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007306:	47a0      	blx	r4
 8007308:	3001      	adds	r0, #1
 800730a:	d100      	bne.n	800730e <_printf_float+0x23a>
 800730c:	e73e      	b.n	800718c <_printf_float+0xb8>
 800730e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007310:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007312:	42b3      	cmp	r3, r6
 8007314:	db02      	blt.n	800731c <_printf_float+0x248>
 8007316:	682b      	ldr	r3, [r5, #0]
 8007318:	07db      	lsls	r3, r3, #31
 800731a:	d50c      	bpl.n	8007336 <_printf_float+0x262>
 800731c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800731e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007320:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007324:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007326:	47a0      	blx	r4
 8007328:	2400      	movs	r4, #0
 800732a:	3001      	adds	r0, #1
 800732c:	d100      	bne.n	8007330 <_printf_float+0x25c>
 800732e:	e72d      	b.n	800718c <_printf_float+0xb8>
 8007330:	1e73      	subs	r3, r6, #1
 8007332:	42a3      	cmp	r3, r4
 8007334:	dc0a      	bgt.n	800734c <_printf_float+0x278>
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	079b      	lsls	r3, r3, #30
 800733a:	d500      	bpl.n	800733e <_printf_float+0x26a>
 800733c:	e105      	b.n	800754a <_printf_float+0x476>
 800733e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007340:	68e8      	ldr	r0, [r5, #12]
 8007342:	4298      	cmp	r0, r3
 8007344:	db00      	blt.n	8007348 <_printf_float+0x274>
 8007346:	e723      	b.n	8007190 <_printf_float+0xbc>
 8007348:	0018      	movs	r0, r3
 800734a:	e721      	b.n	8007190 <_printf_float+0xbc>
 800734c:	002a      	movs	r2, r5
 800734e:	2301      	movs	r3, #1
 8007350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007354:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007356:	321a      	adds	r2, #26
 8007358:	47b8      	blx	r7
 800735a:	3001      	adds	r0, #1
 800735c:	d100      	bne.n	8007360 <_printf_float+0x28c>
 800735e:	e715      	b.n	800718c <_printf_float+0xb8>
 8007360:	3401      	adds	r4, #1
 8007362:	e7e5      	b.n	8007330 <_printf_float+0x25c>
 8007364:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007366:	2b00      	cmp	r3, #0
 8007368:	dc3a      	bgt.n	80073e0 <_printf_float+0x30c>
 800736a:	2301      	movs	r3, #1
 800736c:	4a1b      	ldr	r2, [pc, #108]	@ (80073dc <_printf_float+0x308>)
 800736e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007370:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007372:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007374:	47a0      	blx	r4
 8007376:	3001      	adds	r0, #1
 8007378:	d100      	bne.n	800737c <_printf_float+0x2a8>
 800737a:	e707      	b.n	800718c <_printf_float+0xb8>
 800737c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800737e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007380:	4333      	orrs	r3, r6
 8007382:	d102      	bne.n	800738a <_printf_float+0x2b6>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	07db      	lsls	r3, r3, #31
 8007388:	d5d5      	bpl.n	8007336 <_printf_float+0x262>
 800738a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800738c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800738e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007390:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007392:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007394:	47a0      	blx	r4
 8007396:	2300      	movs	r3, #0
 8007398:	3001      	adds	r0, #1
 800739a:	d100      	bne.n	800739e <_printf_float+0x2ca>
 800739c:	e6f6      	b.n	800718c <_printf_float+0xb8>
 800739e:	930c      	str	r3, [sp, #48]	@ 0x30
 80073a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073a4:	425b      	negs	r3, r3
 80073a6:	4293      	cmp	r3, r2
 80073a8:	dc01      	bgt.n	80073ae <_printf_float+0x2da>
 80073aa:	0033      	movs	r3, r6
 80073ac:	e792      	b.n	80072d4 <_printf_float+0x200>
 80073ae:	002a      	movs	r2, r5
 80073b0:	2301      	movs	r3, #1
 80073b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80073b8:	321a      	adds	r2, #26
 80073ba:	47a0      	blx	r4
 80073bc:	3001      	adds	r0, #1
 80073be:	d100      	bne.n	80073c2 <_printf_float+0x2ee>
 80073c0:	e6e4      	b.n	800718c <_printf_float+0xb8>
 80073c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073c4:	3301      	adds	r3, #1
 80073c6:	e7ea      	b.n	800739e <_printf_float+0x2ca>
 80073c8:	7fefffff 	.word	0x7fefffff
 80073cc:	08009e50 	.word	0x08009e50
 80073d0:	08009e54 	.word	0x08009e54
 80073d4:	08009e58 	.word	0x08009e58
 80073d8:	08009e5c 	.word	0x08009e5c
 80073dc:	08009e60 	.word	0x08009e60
 80073e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80073e2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80073e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80073e6:	429e      	cmp	r6, r3
 80073e8:	dd00      	ble.n	80073ec <_printf_float+0x318>
 80073ea:	001e      	movs	r6, r3
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	dc31      	bgt.n	8007454 <_printf_float+0x380>
 80073f0:	43f3      	mvns	r3, r6
 80073f2:	2400      	movs	r4, #0
 80073f4:	17db      	asrs	r3, r3, #31
 80073f6:	4033      	ands	r3, r6
 80073f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80073fa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80073fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073fe:	1af3      	subs	r3, r6, r3
 8007400:	42a3      	cmp	r3, r4
 8007402:	dc30      	bgt.n	8007466 <_printf_float+0x392>
 8007404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007406:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007408:	429a      	cmp	r2, r3
 800740a:	dc38      	bgt.n	800747e <_printf_float+0x3aa>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	07db      	lsls	r3, r3, #31
 8007410:	d435      	bmi.n	800747e <_printf_float+0x3aa>
 8007412:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007414:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007416:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007418:	1b9b      	subs	r3, r3, r6
 800741a:	1b14      	subs	r4, r2, r4
 800741c:	429c      	cmp	r4, r3
 800741e:	dd00      	ble.n	8007422 <_printf_float+0x34e>
 8007420:	001c      	movs	r4, r3
 8007422:	2c00      	cmp	r4, #0
 8007424:	dc34      	bgt.n	8007490 <_printf_float+0x3bc>
 8007426:	43e3      	mvns	r3, r4
 8007428:	2600      	movs	r6, #0
 800742a:	17db      	asrs	r3, r3, #31
 800742c:	401c      	ands	r4, r3
 800742e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007430:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	1b1b      	subs	r3, r3, r4
 8007436:	42b3      	cmp	r3, r6
 8007438:	dc00      	bgt.n	800743c <_printf_float+0x368>
 800743a:	e77c      	b.n	8007336 <_printf_float+0x262>
 800743c:	002a      	movs	r2, r5
 800743e:	2301      	movs	r3, #1
 8007440:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007444:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007446:	321a      	adds	r2, #26
 8007448:	47b8      	blx	r7
 800744a:	3001      	adds	r0, #1
 800744c:	d100      	bne.n	8007450 <_printf_float+0x37c>
 800744e:	e69d      	b.n	800718c <_printf_float+0xb8>
 8007450:	3601      	adds	r6, #1
 8007452:	e7ec      	b.n	800742e <_printf_float+0x35a>
 8007454:	0033      	movs	r3, r6
 8007456:	003a      	movs	r2, r7
 8007458:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800745a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800745c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800745e:	47a0      	blx	r4
 8007460:	3001      	adds	r0, #1
 8007462:	d1c5      	bne.n	80073f0 <_printf_float+0x31c>
 8007464:	e692      	b.n	800718c <_printf_float+0xb8>
 8007466:	002a      	movs	r2, r5
 8007468:	2301      	movs	r3, #1
 800746a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800746c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800746e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007470:	321a      	adds	r2, #26
 8007472:	47b0      	blx	r6
 8007474:	3001      	adds	r0, #1
 8007476:	d100      	bne.n	800747a <_printf_float+0x3a6>
 8007478:	e688      	b.n	800718c <_printf_float+0xb8>
 800747a:	3401      	adds	r4, #1
 800747c:	e7bd      	b.n	80073fa <_printf_float+0x326>
 800747e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007480:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007482:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007484:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007486:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007488:	47a0      	blx	r4
 800748a:	3001      	adds	r0, #1
 800748c:	d1c1      	bne.n	8007412 <_printf_float+0x33e>
 800748e:	e67d      	b.n	800718c <_printf_float+0xb8>
 8007490:	19ba      	adds	r2, r7, r6
 8007492:	0023      	movs	r3, r4
 8007494:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007498:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800749a:	47b0      	blx	r6
 800749c:	3001      	adds	r0, #1
 800749e:	d1c2      	bne.n	8007426 <_printf_float+0x352>
 80074a0:	e674      	b.n	800718c <_printf_float+0xb8>
 80074a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	dc02      	bgt.n	80074b0 <_printf_float+0x3dc>
 80074aa:	2301      	movs	r3, #1
 80074ac:	421a      	tst	r2, r3
 80074ae:	d039      	beq.n	8007524 <_printf_float+0x450>
 80074b0:	2301      	movs	r3, #1
 80074b2:	003a      	movs	r2, r7
 80074b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80074ba:	47b0      	blx	r6
 80074bc:	3001      	adds	r0, #1
 80074be:	d100      	bne.n	80074c2 <_printf_float+0x3ee>
 80074c0:	e664      	b.n	800718c <_printf_float+0xb8>
 80074c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074ca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80074cc:	47b0      	blx	r6
 80074ce:	3001      	adds	r0, #1
 80074d0:	d100      	bne.n	80074d4 <_printf_float+0x400>
 80074d2:	e65b      	b.n	800718c <_printf_float+0xb8>
 80074d4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80074d6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80074d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074da:	2200      	movs	r2, #0
 80074dc:	3b01      	subs	r3, #1
 80074de:	930c      	str	r3, [sp, #48]	@ 0x30
 80074e0:	2300      	movs	r3, #0
 80074e2:	f7f8 ffb3 	bl	800044c <__aeabi_dcmpeq>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d11a      	bne.n	8007520 <_printf_float+0x44c>
 80074ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074ec:	1c7a      	adds	r2, r7, #1
 80074ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80074f4:	47b0      	blx	r6
 80074f6:	3001      	adds	r0, #1
 80074f8:	d10e      	bne.n	8007518 <_printf_float+0x444>
 80074fa:	e647      	b.n	800718c <_printf_float+0xb8>
 80074fc:	002a      	movs	r2, r5
 80074fe:	2301      	movs	r3, #1
 8007500:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007504:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007506:	321a      	adds	r2, #26
 8007508:	47b8      	blx	r7
 800750a:	3001      	adds	r0, #1
 800750c:	d100      	bne.n	8007510 <_printf_float+0x43c>
 800750e:	e63d      	b.n	800718c <_printf_float+0xb8>
 8007510:	3601      	adds	r6, #1
 8007512:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007514:	429e      	cmp	r6, r3
 8007516:	dbf1      	blt.n	80074fc <_printf_float+0x428>
 8007518:	002a      	movs	r2, r5
 800751a:	0023      	movs	r3, r4
 800751c:	3250      	adds	r2, #80	@ 0x50
 800751e:	e6da      	b.n	80072d6 <_printf_float+0x202>
 8007520:	2600      	movs	r6, #0
 8007522:	e7f6      	b.n	8007512 <_printf_float+0x43e>
 8007524:	003a      	movs	r2, r7
 8007526:	e7e2      	b.n	80074ee <_printf_float+0x41a>
 8007528:	002a      	movs	r2, r5
 800752a:	2301      	movs	r3, #1
 800752c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800752e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007530:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007532:	3219      	adds	r2, #25
 8007534:	47b0      	blx	r6
 8007536:	3001      	adds	r0, #1
 8007538:	d100      	bne.n	800753c <_printf_float+0x468>
 800753a:	e627      	b.n	800718c <_printf_float+0xb8>
 800753c:	3401      	adds	r4, #1
 800753e:	68eb      	ldr	r3, [r5, #12]
 8007540:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007542:	1a9b      	subs	r3, r3, r2
 8007544:	42a3      	cmp	r3, r4
 8007546:	dcef      	bgt.n	8007528 <_printf_float+0x454>
 8007548:	e6f9      	b.n	800733e <_printf_float+0x26a>
 800754a:	2400      	movs	r4, #0
 800754c:	e7f7      	b.n	800753e <_printf_float+0x46a>
 800754e:	46c0      	nop			@ (mov r8, r8)

08007550 <_printf_common>:
 8007550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007552:	0016      	movs	r6, r2
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	688a      	ldr	r2, [r1, #8]
 8007558:	690b      	ldr	r3, [r1, #16]
 800755a:	000c      	movs	r4, r1
 800755c:	9000      	str	r0, [sp, #0]
 800755e:	4293      	cmp	r3, r2
 8007560:	da00      	bge.n	8007564 <_printf_common+0x14>
 8007562:	0013      	movs	r3, r2
 8007564:	0022      	movs	r2, r4
 8007566:	6033      	str	r3, [r6, #0]
 8007568:	3243      	adds	r2, #67	@ 0x43
 800756a:	7812      	ldrb	r2, [r2, #0]
 800756c:	2a00      	cmp	r2, #0
 800756e:	d001      	beq.n	8007574 <_printf_common+0x24>
 8007570:	3301      	adds	r3, #1
 8007572:	6033      	str	r3, [r6, #0]
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	069b      	lsls	r3, r3, #26
 8007578:	d502      	bpl.n	8007580 <_printf_common+0x30>
 800757a:	6833      	ldr	r3, [r6, #0]
 800757c:	3302      	adds	r3, #2
 800757e:	6033      	str	r3, [r6, #0]
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	2306      	movs	r3, #6
 8007584:	0015      	movs	r5, r2
 8007586:	401d      	ands	r5, r3
 8007588:	421a      	tst	r2, r3
 800758a:	d027      	beq.n	80075dc <_printf_common+0x8c>
 800758c:	0023      	movs	r3, r4
 800758e:	3343      	adds	r3, #67	@ 0x43
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	1e5a      	subs	r2, r3, #1
 8007594:	4193      	sbcs	r3, r2
 8007596:	6822      	ldr	r2, [r4, #0]
 8007598:	0692      	lsls	r2, r2, #26
 800759a:	d430      	bmi.n	80075fe <_printf_common+0xae>
 800759c:	0022      	movs	r2, r4
 800759e:	9901      	ldr	r1, [sp, #4]
 80075a0:	9800      	ldr	r0, [sp, #0]
 80075a2:	9d08      	ldr	r5, [sp, #32]
 80075a4:	3243      	adds	r2, #67	@ 0x43
 80075a6:	47a8      	blx	r5
 80075a8:	3001      	adds	r0, #1
 80075aa:	d025      	beq.n	80075f8 <_printf_common+0xa8>
 80075ac:	2206      	movs	r2, #6
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	2500      	movs	r5, #0
 80075b2:	4013      	ands	r3, r2
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d105      	bne.n	80075c4 <_printf_common+0x74>
 80075b8:	6833      	ldr	r3, [r6, #0]
 80075ba:	68e5      	ldr	r5, [r4, #12]
 80075bc:	1aed      	subs	r5, r5, r3
 80075be:	43eb      	mvns	r3, r5
 80075c0:	17db      	asrs	r3, r3, #31
 80075c2:	401d      	ands	r5, r3
 80075c4:	68a3      	ldr	r3, [r4, #8]
 80075c6:	6922      	ldr	r2, [r4, #16]
 80075c8:	4293      	cmp	r3, r2
 80075ca:	dd01      	ble.n	80075d0 <_printf_common+0x80>
 80075cc:	1a9b      	subs	r3, r3, r2
 80075ce:	18ed      	adds	r5, r5, r3
 80075d0:	2600      	movs	r6, #0
 80075d2:	42b5      	cmp	r5, r6
 80075d4:	d120      	bne.n	8007618 <_printf_common+0xc8>
 80075d6:	2000      	movs	r0, #0
 80075d8:	e010      	b.n	80075fc <_printf_common+0xac>
 80075da:	3501      	adds	r5, #1
 80075dc:	68e3      	ldr	r3, [r4, #12]
 80075de:	6832      	ldr	r2, [r6, #0]
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	42ab      	cmp	r3, r5
 80075e4:	ddd2      	ble.n	800758c <_printf_common+0x3c>
 80075e6:	0022      	movs	r2, r4
 80075e8:	2301      	movs	r3, #1
 80075ea:	9901      	ldr	r1, [sp, #4]
 80075ec:	9800      	ldr	r0, [sp, #0]
 80075ee:	9f08      	ldr	r7, [sp, #32]
 80075f0:	3219      	adds	r2, #25
 80075f2:	47b8      	blx	r7
 80075f4:	3001      	adds	r0, #1
 80075f6:	d1f0      	bne.n	80075da <_printf_common+0x8a>
 80075f8:	2001      	movs	r0, #1
 80075fa:	4240      	negs	r0, r0
 80075fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075fe:	2030      	movs	r0, #48	@ 0x30
 8007600:	18e1      	adds	r1, r4, r3
 8007602:	3143      	adds	r1, #67	@ 0x43
 8007604:	7008      	strb	r0, [r1, #0]
 8007606:	0021      	movs	r1, r4
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	3145      	adds	r1, #69	@ 0x45
 800760c:	7809      	ldrb	r1, [r1, #0]
 800760e:	18a2      	adds	r2, r4, r2
 8007610:	3243      	adds	r2, #67	@ 0x43
 8007612:	3302      	adds	r3, #2
 8007614:	7011      	strb	r1, [r2, #0]
 8007616:	e7c1      	b.n	800759c <_printf_common+0x4c>
 8007618:	0022      	movs	r2, r4
 800761a:	2301      	movs	r3, #1
 800761c:	9901      	ldr	r1, [sp, #4]
 800761e:	9800      	ldr	r0, [sp, #0]
 8007620:	9f08      	ldr	r7, [sp, #32]
 8007622:	321a      	adds	r2, #26
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	d0e6      	beq.n	80075f8 <_printf_common+0xa8>
 800762a:	3601      	adds	r6, #1
 800762c:	e7d1      	b.n	80075d2 <_printf_common+0x82>
	...

08007630 <_printf_i>:
 8007630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007632:	b08b      	sub	sp, #44	@ 0x2c
 8007634:	9206      	str	r2, [sp, #24]
 8007636:	000a      	movs	r2, r1
 8007638:	3243      	adds	r2, #67	@ 0x43
 800763a:	9307      	str	r3, [sp, #28]
 800763c:	9005      	str	r0, [sp, #20]
 800763e:	9203      	str	r2, [sp, #12]
 8007640:	7e0a      	ldrb	r2, [r1, #24]
 8007642:	000c      	movs	r4, r1
 8007644:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007646:	2a78      	cmp	r2, #120	@ 0x78
 8007648:	d809      	bhi.n	800765e <_printf_i+0x2e>
 800764a:	2a62      	cmp	r2, #98	@ 0x62
 800764c:	d80b      	bhi.n	8007666 <_printf_i+0x36>
 800764e:	2a00      	cmp	r2, #0
 8007650:	d100      	bne.n	8007654 <_printf_i+0x24>
 8007652:	e0bc      	b.n	80077ce <_printf_i+0x19e>
 8007654:	497b      	ldr	r1, [pc, #492]	@ (8007844 <_printf_i+0x214>)
 8007656:	9104      	str	r1, [sp, #16]
 8007658:	2a58      	cmp	r2, #88	@ 0x58
 800765a:	d100      	bne.n	800765e <_printf_i+0x2e>
 800765c:	e090      	b.n	8007780 <_printf_i+0x150>
 800765e:	0025      	movs	r5, r4
 8007660:	3542      	adds	r5, #66	@ 0x42
 8007662:	702a      	strb	r2, [r5, #0]
 8007664:	e022      	b.n	80076ac <_printf_i+0x7c>
 8007666:	0010      	movs	r0, r2
 8007668:	3863      	subs	r0, #99	@ 0x63
 800766a:	2815      	cmp	r0, #21
 800766c:	d8f7      	bhi.n	800765e <_printf_i+0x2e>
 800766e:	f7f8 fd5d 	bl	800012c <__gnu_thumb1_case_shi>
 8007672:	0016      	.short	0x0016
 8007674:	fff6001f 	.word	0xfff6001f
 8007678:	fff6fff6 	.word	0xfff6fff6
 800767c:	001ffff6 	.word	0x001ffff6
 8007680:	fff6fff6 	.word	0xfff6fff6
 8007684:	fff6fff6 	.word	0xfff6fff6
 8007688:	003600a1 	.word	0x003600a1
 800768c:	fff60080 	.word	0xfff60080
 8007690:	00b2fff6 	.word	0x00b2fff6
 8007694:	0036fff6 	.word	0x0036fff6
 8007698:	fff6fff6 	.word	0xfff6fff6
 800769c:	0084      	.short	0x0084
 800769e:	0025      	movs	r5, r4
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	3542      	adds	r5, #66	@ 0x42
 80076a4:	1d11      	adds	r1, r2, #4
 80076a6:	6019      	str	r1, [r3, #0]
 80076a8:	6813      	ldr	r3, [r2, #0]
 80076aa:	702b      	strb	r3, [r5, #0]
 80076ac:	2301      	movs	r3, #1
 80076ae:	e0a0      	b.n	80077f2 <_printf_i+0x1c2>
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	6809      	ldr	r1, [r1, #0]
 80076b4:	1d02      	adds	r2, r0, #4
 80076b6:	060d      	lsls	r5, r1, #24
 80076b8:	d50b      	bpl.n	80076d2 <_printf_i+0xa2>
 80076ba:	6806      	ldr	r6, [r0, #0]
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	2e00      	cmp	r6, #0
 80076c0:	da03      	bge.n	80076ca <_printf_i+0x9a>
 80076c2:	232d      	movs	r3, #45	@ 0x2d
 80076c4:	9a03      	ldr	r2, [sp, #12]
 80076c6:	4276      	negs	r6, r6
 80076c8:	7013      	strb	r3, [r2, #0]
 80076ca:	4b5e      	ldr	r3, [pc, #376]	@ (8007844 <_printf_i+0x214>)
 80076cc:	270a      	movs	r7, #10
 80076ce:	9304      	str	r3, [sp, #16]
 80076d0:	e018      	b.n	8007704 <_printf_i+0xd4>
 80076d2:	6806      	ldr	r6, [r0, #0]
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	0649      	lsls	r1, r1, #25
 80076d8:	d5f1      	bpl.n	80076be <_printf_i+0x8e>
 80076da:	b236      	sxth	r6, r6
 80076dc:	e7ef      	b.n	80076be <_printf_i+0x8e>
 80076de:	6808      	ldr	r0, [r1, #0]
 80076e0:	6819      	ldr	r1, [r3, #0]
 80076e2:	c940      	ldmia	r1!, {r6}
 80076e4:	0605      	lsls	r5, r0, #24
 80076e6:	d402      	bmi.n	80076ee <_printf_i+0xbe>
 80076e8:	0640      	lsls	r0, r0, #25
 80076ea:	d500      	bpl.n	80076ee <_printf_i+0xbe>
 80076ec:	b2b6      	uxth	r6, r6
 80076ee:	6019      	str	r1, [r3, #0]
 80076f0:	4b54      	ldr	r3, [pc, #336]	@ (8007844 <_printf_i+0x214>)
 80076f2:	270a      	movs	r7, #10
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	2a6f      	cmp	r2, #111	@ 0x6f
 80076f8:	d100      	bne.n	80076fc <_printf_i+0xcc>
 80076fa:	3f02      	subs	r7, #2
 80076fc:	0023      	movs	r3, r4
 80076fe:	2200      	movs	r2, #0
 8007700:	3343      	adds	r3, #67	@ 0x43
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	60a3      	str	r3, [r4, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	db03      	blt.n	8007714 <_printf_i+0xe4>
 800770c:	2104      	movs	r1, #4
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	438a      	bics	r2, r1
 8007712:	6022      	str	r2, [r4, #0]
 8007714:	2e00      	cmp	r6, #0
 8007716:	d102      	bne.n	800771e <_printf_i+0xee>
 8007718:	9d03      	ldr	r5, [sp, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00c      	beq.n	8007738 <_printf_i+0x108>
 800771e:	9d03      	ldr	r5, [sp, #12]
 8007720:	0030      	movs	r0, r6
 8007722:	0039      	movs	r1, r7
 8007724:	f7f8 fd92 	bl	800024c <__aeabi_uidivmod>
 8007728:	9b04      	ldr	r3, [sp, #16]
 800772a:	3d01      	subs	r5, #1
 800772c:	5c5b      	ldrb	r3, [r3, r1]
 800772e:	702b      	strb	r3, [r5, #0]
 8007730:	0033      	movs	r3, r6
 8007732:	0006      	movs	r6, r0
 8007734:	429f      	cmp	r7, r3
 8007736:	d9f3      	bls.n	8007720 <_printf_i+0xf0>
 8007738:	2f08      	cmp	r7, #8
 800773a:	d109      	bne.n	8007750 <_printf_i+0x120>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	07db      	lsls	r3, r3, #31
 8007740:	d506      	bpl.n	8007750 <_printf_i+0x120>
 8007742:	6862      	ldr	r2, [r4, #4]
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	429a      	cmp	r2, r3
 8007748:	dc02      	bgt.n	8007750 <_printf_i+0x120>
 800774a:	2330      	movs	r3, #48	@ 0x30
 800774c:	3d01      	subs	r5, #1
 800774e:	702b      	strb	r3, [r5, #0]
 8007750:	9b03      	ldr	r3, [sp, #12]
 8007752:	1b5b      	subs	r3, r3, r5
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	9b07      	ldr	r3, [sp, #28]
 8007758:	0021      	movs	r1, r4
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	9805      	ldr	r0, [sp, #20]
 800775e:	9b06      	ldr	r3, [sp, #24]
 8007760:	aa09      	add	r2, sp, #36	@ 0x24
 8007762:	f7ff fef5 	bl	8007550 <_printf_common>
 8007766:	3001      	adds	r0, #1
 8007768:	d148      	bne.n	80077fc <_printf_i+0x1cc>
 800776a:	2001      	movs	r0, #1
 800776c:	4240      	negs	r0, r0
 800776e:	b00b      	add	sp, #44	@ 0x2c
 8007770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007772:	2220      	movs	r2, #32
 8007774:	6809      	ldr	r1, [r1, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	6022      	str	r2, [r4, #0]
 800777a:	2278      	movs	r2, #120	@ 0x78
 800777c:	4932      	ldr	r1, [pc, #200]	@ (8007848 <_printf_i+0x218>)
 800777e:	9104      	str	r1, [sp, #16]
 8007780:	0021      	movs	r1, r4
 8007782:	3145      	adds	r1, #69	@ 0x45
 8007784:	700a      	strb	r2, [r1, #0]
 8007786:	6819      	ldr	r1, [r3, #0]
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	c940      	ldmia	r1!, {r6}
 800778c:	0610      	lsls	r0, r2, #24
 800778e:	d402      	bmi.n	8007796 <_printf_i+0x166>
 8007790:	0650      	lsls	r0, r2, #25
 8007792:	d500      	bpl.n	8007796 <_printf_i+0x166>
 8007794:	b2b6      	uxth	r6, r6
 8007796:	6019      	str	r1, [r3, #0]
 8007798:	07d3      	lsls	r3, r2, #31
 800779a:	d502      	bpl.n	80077a2 <_printf_i+0x172>
 800779c:	2320      	movs	r3, #32
 800779e:	4313      	orrs	r3, r2
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	d001      	beq.n	80077aa <_printf_i+0x17a>
 80077a6:	2710      	movs	r7, #16
 80077a8:	e7a8      	b.n	80076fc <_printf_i+0xcc>
 80077aa:	2220      	movs	r2, #32
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	4393      	bics	r3, r2
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	e7f8      	b.n	80077a6 <_printf_i+0x176>
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	680d      	ldr	r5, [r1, #0]
 80077b8:	1d10      	adds	r0, r2, #4
 80077ba:	6949      	ldr	r1, [r1, #20]
 80077bc:	6018      	str	r0, [r3, #0]
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	062e      	lsls	r6, r5, #24
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0x198>
 80077c4:	6019      	str	r1, [r3, #0]
 80077c6:	e002      	b.n	80077ce <_printf_i+0x19e>
 80077c8:	066d      	lsls	r5, r5, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0x194>
 80077cc:	8019      	strh	r1, [r3, #0]
 80077ce:	2300      	movs	r3, #0
 80077d0:	9d03      	ldr	r5, [sp, #12]
 80077d2:	6123      	str	r3, [r4, #16]
 80077d4:	e7bf      	b.n	8007756 <_printf_i+0x126>
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	1d11      	adds	r1, r2, #4
 80077da:	6019      	str	r1, [r3, #0]
 80077dc:	6815      	ldr	r5, [r2, #0]
 80077de:	2100      	movs	r1, #0
 80077e0:	0028      	movs	r0, r5
 80077e2:	6862      	ldr	r2, [r4, #4]
 80077e4:	f000 f9e9 	bl	8007bba <memchr>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d001      	beq.n	80077f0 <_printf_i+0x1c0>
 80077ec:	1b40      	subs	r0, r0, r5
 80077ee:	6060      	str	r0, [r4, #4]
 80077f0:	6863      	ldr	r3, [r4, #4]
 80077f2:	6123      	str	r3, [r4, #16]
 80077f4:	2300      	movs	r3, #0
 80077f6:	9a03      	ldr	r2, [sp, #12]
 80077f8:	7013      	strb	r3, [r2, #0]
 80077fa:	e7ac      	b.n	8007756 <_printf_i+0x126>
 80077fc:	002a      	movs	r2, r5
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	9906      	ldr	r1, [sp, #24]
 8007802:	9805      	ldr	r0, [sp, #20]
 8007804:	9d07      	ldr	r5, [sp, #28]
 8007806:	47a8      	blx	r5
 8007808:	3001      	adds	r0, #1
 800780a:	d0ae      	beq.n	800776a <_printf_i+0x13a>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	079b      	lsls	r3, r3, #30
 8007810:	d415      	bmi.n	800783e <_printf_i+0x20e>
 8007812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007814:	68e0      	ldr	r0, [r4, #12]
 8007816:	4298      	cmp	r0, r3
 8007818:	daa9      	bge.n	800776e <_printf_i+0x13e>
 800781a:	0018      	movs	r0, r3
 800781c:	e7a7      	b.n	800776e <_printf_i+0x13e>
 800781e:	0022      	movs	r2, r4
 8007820:	2301      	movs	r3, #1
 8007822:	9906      	ldr	r1, [sp, #24]
 8007824:	9805      	ldr	r0, [sp, #20]
 8007826:	9e07      	ldr	r6, [sp, #28]
 8007828:	3219      	adds	r2, #25
 800782a:	47b0      	blx	r6
 800782c:	3001      	adds	r0, #1
 800782e:	d09c      	beq.n	800776a <_printf_i+0x13a>
 8007830:	3501      	adds	r5, #1
 8007832:	68e3      	ldr	r3, [r4, #12]
 8007834:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	42ab      	cmp	r3, r5
 800783a:	dcf0      	bgt.n	800781e <_printf_i+0x1ee>
 800783c:	e7e9      	b.n	8007812 <_printf_i+0x1e2>
 800783e:	2500      	movs	r5, #0
 8007840:	e7f7      	b.n	8007832 <_printf_i+0x202>
 8007842:	46c0      	nop			@ (mov r8, r8)
 8007844:	08009e62 	.word	0x08009e62
 8007848:	08009e73 	.word	0x08009e73

0800784c <std>:
 800784c:	2300      	movs	r3, #0
 800784e:	b510      	push	{r4, lr}
 8007850:	0004      	movs	r4, r0
 8007852:	6003      	str	r3, [r0, #0]
 8007854:	6043      	str	r3, [r0, #4]
 8007856:	6083      	str	r3, [r0, #8]
 8007858:	8181      	strh	r1, [r0, #12]
 800785a:	6643      	str	r3, [r0, #100]	@ 0x64
 800785c:	81c2      	strh	r2, [r0, #14]
 800785e:	6103      	str	r3, [r0, #16]
 8007860:	6143      	str	r3, [r0, #20]
 8007862:	6183      	str	r3, [r0, #24]
 8007864:	0019      	movs	r1, r3
 8007866:	2208      	movs	r2, #8
 8007868:	305c      	adds	r0, #92	@ 0x5c
 800786a:	f000 f91f 	bl	8007aac <memset>
 800786e:	4b0b      	ldr	r3, [pc, #44]	@ (800789c <std+0x50>)
 8007870:	6224      	str	r4, [r4, #32]
 8007872:	6263      	str	r3, [r4, #36]	@ 0x24
 8007874:	4b0a      	ldr	r3, [pc, #40]	@ (80078a0 <std+0x54>)
 8007876:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007878:	4b0a      	ldr	r3, [pc, #40]	@ (80078a4 <std+0x58>)
 800787a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800787c:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <std+0x5c>)
 800787e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007880:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <std+0x60>)
 8007882:	429c      	cmp	r4, r3
 8007884:	d005      	beq.n	8007892 <std+0x46>
 8007886:	4b0a      	ldr	r3, [pc, #40]	@ (80078b0 <std+0x64>)
 8007888:	429c      	cmp	r4, r3
 800788a:	d002      	beq.n	8007892 <std+0x46>
 800788c:	4b09      	ldr	r3, [pc, #36]	@ (80078b4 <std+0x68>)
 800788e:	429c      	cmp	r4, r3
 8007890:	d103      	bne.n	800789a <std+0x4e>
 8007892:	0020      	movs	r0, r4
 8007894:	3058      	adds	r0, #88	@ 0x58
 8007896:	f000 f98d 	bl	8007bb4 <__retarget_lock_init_recursive>
 800789a:	bd10      	pop	{r4, pc}
 800789c:	08007a15 	.word	0x08007a15
 80078a0:	08007a3d 	.word	0x08007a3d
 80078a4:	08007a75 	.word	0x08007a75
 80078a8:	08007aa1 	.word	0x08007aa1
 80078ac:	2000051c 	.word	0x2000051c
 80078b0:	20000584 	.word	0x20000584
 80078b4:	200005ec 	.word	0x200005ec

080078b8 <stdio_exit_handler>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	4a03      	ldr	r2, [pc, #12]	@ (80078c8 <stdio_exit_handler+0x10>)
 80078bc:	4903      	ldr	r1, [pc, #12]	@ (80078cc <stdio_exit_handler+0x14>)
 80078be:	4804      	ldr	r0, [pc, #16]	@ (80078d0 <stdio_exit_handler+0x18>)
 80078c0:	f000 f86c 	bl	800799c <_fwalk_sglue>
 80078c4:	bd10      	pop	{r4, pc}
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	2000000c 	.word	0x2000000c
 80078cc:	080095f1 	.word	0x080095f1
 80078d0:	2000001c 	.word	0x2000001c

080078d4 <cleanup_stdio>:
 80078d4:	6841      	ldr	r1, [r0, #4]
 80078d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007904 <cleanup_stdio+0x30>)
 80078d8:	b510      	push	{r4, lr}
 80078da:	0004      	movs	r4, r0
 80078dc:	4299      	cmp	r1, r3
 80078de:	d001      	beq.n	80078e4 <cleanup_stdio+0x10>
 80078e0:	f001 fe86 	bl	80095f0 <_fflush_r>
 80078e4:	68a1      	ldr	r1, [r4, #8]
 80078e6:	4b08      	ldr	r3, [pc, #32]	@ (8007908 <cleanup_stdio+0x34>)
 80078e8:	4299      	cmp	r1, r3
 80078ea:	d002      	beq.n	80078f2 <cleanup_stdio+0x1e>
 80078ec:	0020      	movs	r0, r4
 80078ee:	f001 fe7f 	bl	80095f0 <_fflush_r>
 80078f2:	68e1      	ldr	r1, [r4, #12]
 80078f4:	4b05      	ldr	r3, [pc, #20]	@ (800790c <cleanup_stdio+0x38>)
 80078f6:	4299      	cmp	r1, r3
 80078f8:	d002      	beq.n	8007900 <cleanup_stdio+0x2c>
 80078fa:	0020      	movs	r0, r4
 80078fc:	f001 fe78 	bl	80095f0 <_fflush_r>
 8007900:	bd10      	pop	{r4, pc}
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	2000051c 	.word	0x2000051c
 8007908:	20000584 	.word	0x20000584
 800790c:	200005ec 	.word	0x200005ec

08007910 <global_stdio_init.part.0>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4b09      	ldr	r3, [pc, #36]	@ (8007938 <global_stdio_init.part.0+0x28>)
 8007914:	4a09      	ldr	r2, [pc, #36]	@ (800793c <global_stdio_init.part.0+0x2c>)
 8007916:	2104      	movs	r1, #4
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	4809      	ldr	r0, [pc, #36]	@ (8007940 <global_stdio_init.part.0+0x30>)
 800791c:	2200      	movs	r2, #0
 800791e:	f7ff ff95 	bl	800784c <std>
 8007922:	2201      	movs	r2, #1
 8007924:	2109      	movs	r1, #9
 8007926:	4807      	ldr	r0, [pc, #28]	@ (8007944 <global_stdio_init.part.0+0x34>)
 8007928:	f7ff ff90 	bl	800784c <std>
 800792c:	2202      	movs	r2, #2
 800792e:	2112      	movs	r1, #18
 8007930:	4805      	ldr	r0, [pc, #20]	@ (8007948 <global_stdio_init.part.0+0x38>)
 8007932:	f7ff ff8b 	bl	800784c <std>
 8007936:	bd10      	pop	{r4, pc}
 8007938:	20000654 	.word	0x20000654
 800793c:	080078b9 	.word	0x080078b9
 8007940:	2000051c 	.word	0x2000051c
 8007944:	20000584 	.word	0x20000584
 8007948:	200005ec 	.word	0x200005ec

0800794c <__sfp_lock_acquire>:
 800794c:	b510      	push	{r4, lr}
 800794e:	4802      	ldr	r0, [pc, #8]	@ (8007958 <__sfp_lock_acquire+0xc>)
 8007950:	f000 f931 	bl	8007bb6 <__retarget_lock_acquire_recursive>
 8007954:	bd10      	pop	{r4, pc}
 8007956:	46c0      	nop			@ (mov r8, r8)
 8007958:	2000065d 	.word	0x2000065d

0800795c <__sfp_lock_release>:
 800795c:	b510      	push	{r4, lr}
 800795e:	4802      	ldr	r0, [pc, #8]	@ (8007968 <__sfp_lock_release+0xc>)
 8007960:	f000 f92a 	bl	8007bb8 <__retarget_lock_release_recursive>
 8007964:	bd10      	pop	{r4, pc}
 8007966:	46c0      	nop			@ (mov r8, r8)
 8007968:	2000065d 	.word	0x2000065d

0800796c <__sinit>:
 800796c:	b510      	push	{r4, lr}
 800796e:	0004      	movs	r4, r0
 8007970:	f7ff ffec 	bl	800794c <__sfp_lock_acquire>
 8007974:	6a23      	ldr	r3, [r4, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <__sinit+0x14>
 800797a:	f7ff ffef 	bl	800795c <__sfp_lock_release>
 800797e:	bd10      	pop	{r4, pc}
 8007980:	4b04      	ldr	r3, [pc, #16]	@ (8007994 <__sinit+0x28>)
 8007982:	6223      	str	r3, [r4, #32]
 8007984:	4b04      	ldr	r3, [pc, #16]	@ (8007998 <__sinit+0x2c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f6      	bne.n	800797a <__sinit+0xe>
 800798c:	f7ff ffc0 	bl	8007910 <global_stdio_init.part.0>
 8007990:	e7f3      	b.n	800797a <__sinit+0xe>
 8007992:	46c0      	nop			@ (mov r8, r8)
 8007994:	080078d5 	.word	0x080078d5
 8007998:	20000654 	.word	0x20000654

0800799c <_fwalk_sglue>:
 800799c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799e:	0014      	movs	r4, r2
 80079a0:	2600      	movs	r6, #0
 80079a2:	9000      	str	r0, [sp, #0]
 80079a4:	9101      	str	r1, [sp, #4]
 80079a6:	68a5      	ldr	r5, [r4, #8]
 80079a8:	6867      	ldr	r7, [r4, #4]
 80079aa:	3f01      	subs	r7, #1
 80079ac:	d504      	bpl.n	80079b8 <_fwalk_sglue+0x1c>
 80079ae:	6824      	ldr	r4, [r4, #0]
 80079b0:	2c00      	cmp	r4, #0
 80079b2:	d1f8      	bne.n	80079a6 <_fwalk_sglue+0xa>
 80079b4:	0030      	movs	r0, r6
 80079b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079b8:	89ab      	ldrh	r3, [r5, #12]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d908      	bls.n	80079d0 <_fwalk_sglue+0x34>
 80079be:	220e      	movs	r2, #14
 80079c0:	5eab      	ldrsh	r3, [r5, r2]
 80079c2:	3301      	adds	r3, #1
 80079c4:	d004      	beq.n	80079d0 <_fwalk_sglue+0x34>
 80079c6:	0029      	movs	r1, r5
 80079c8:	9800      	ldr	r0, [sp, #0]
 80079ca:	9b01      	ldr	r3, [sp, #4]
 80079cc:	4798      	blx	r3
 80079ce:	4306      	orrs	r6, r0
 80079d0:	3568      	adds	r5, #104	@ 0x68
 80079d2:	e7ea      	b.n	80079aa <_fwalk_sglue+0xe>

080079d4 <siprintf>:
 80079d4:	b40e      	push	{r1, r2, r3}
 80079d6:	b500      	push	{lr}
 80079d8:	490b      	ldr	r1, [pc, #44]	@ (8007a08 <siprintf+0x34>)
 80079da:	b09c      	sub	sp, #112	@ 0x70
 80079dc:	ab1d      	add	r3, sp, #116	@ 0x74
 80079de:	9002      	str	r0, [sp, #8]
 80079e0:	9006      	str	r0, [sp, #24]
 80079e2:	9107      	str	r1, [sp, #28]
 80079e4:	9104      	str	r1, [sp, #16]
 80079e6:	4809      	ldr	r0, [pc, #36]	@ (8007a0c <siprintf+0x38>)
 80079e8:	4909      	ldr	r1, [pc, #36]	@ (8007a10 <siprintf+0x3c>)
 80079ea:	cb04      	ldmia	r3!, {r2}
 80079ec:	9105      	str	r1, [sp, #20]
 80079ee:	6800      	ldr	r0, [r0, #0]
 80079f0:	a902      	add	r1, sp, #8
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	f001 fc78 	bl	80092e8 <_svfiprintf_r>
 80079f8:	2200      	movs	r2, #0
 80079fa:	9b02      	ldr	r3, [sp, #8]
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	b01c      	add	sp, #112	@ 0x70
 8007a00:	bc08      	pop	{r3}
 8007a02:	b003      	add	sp, #12
 8007a04:	4718      	bx	r3
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	7fffffff 	.word	0x7fffffff
 8007a0c:	20000018 	.word	0x20000018
 8007a10:	ffff0208 	.word	0xffff0208

08007a14 <__sread>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	000c      	movs	r4, r1
 8007a18:	250e      	movs	r5, #14
 8007a1a:	5f49      	ldrsh	r1, [r1, r5]
 8007a1c:	f000 f878 	bl	8007b10 <_read_r>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	db03      	blt.n	8007a2c <__sread+0x18>
 8007a24:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007a26:	181b      	adds	r3, r3, r0
 8007a28:	6563      	str	r3, [r4, #84]	@ 0x54
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	4a02      	ldr	r2, [pc, #8]	@ (8007a38 <__sread+0x24>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	e7f9      	b.n	8007a2a <__sread+0x16>
 8007a36:	46c0      	nop			@ (mov r8, r8)
 8007a38:	ffffefff 	.word	0xffffefff

08007a3c <__swrite>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	001f      	movs	r7, r3
 8007a40:	898b      	ldrh	r3, [r1, #12]
 8007a42:	0005      	movs	r5, r0
 8007a44:	000c      	movs	r4, r1
 8007a46:	0016      	movs	r6, r2
 8007a48:	05db      	lsls	r3, r3, #23
 8007a4a:	d505      	bpl.n	8007a58 <__swrite+0x1c>
 8007a4c:	230e      	movs	r3, #14
 8007a4e:	5ec9      	ldrsh	r1, [r1, r3]
 8007a50:	2200      	movs	r2, #0
 8007a52:	2302      	movs	r3, #2
 8007a54:	f000 f848 	bl	8007ae8 <_lseek_r>
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	4a05      	ldr	r2, [pc, #20]	@ (8007a70 <__swrite+0x34>)
 8007a5c:	0028      	movs	r0, r5
 8007a5e:	4013      	ands	r3, r2
 8007a60:	81a3      	strh	r3, [r4, #12]
 8007a62:	0032      	movs	r2, r6
 8007a64:	230e      	movs	r3, #14
 8007a66:	5ee1      	ldrsh	r1, [r4, r3]
 8007a68:	003b      	movs	r3, r7
 8007a6a:	f000 f865 	bl	8007b38 <_write_r>
 8007a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a70:	ffffefff 	.word	0xffffefff

08007a74 <__sseek>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	000c      	movs	r4, r1
 8007a78:	250e      	movs	r5, #14
 8007a7a:	5f49      	ldrsh	r1, [r1, r5]
 8007a7c:	f000 f834 	bl	8007ae8 <_lseek_r>
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	1c42      	adds	r2, r0, #1
 8007a84:	d103      	bne.n	8007a8e <__sseek+0x1a>
 8007a86:	4a05      	ldr	r2, [pc, #20]	@ (8007a9c <__sseek+0x28>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	2280      	movs	r2, #128	@ 0x80
 8007a90:	0152      	lsls	r2, r2, #5
 8007a92:	4313      	orrs	r3, r2
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a98:	e7f8      	b.n	8007a8c <__sseek+0x18>
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	ffffefff 	.word	0xffffefff

08007aa0 <__sclose>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	230e      	movs	r3, #14
 8007aa4:	5ec9      	ldrsh	r1, [r1, r3]
 8007aa6:	f000 f80d 	bl	8007ac4 <_close_r>
 8007aaa:	bd10      	pop	{r4, pc}

08007aac <memset>:
 8007aac:	0003      	movs	r3, r0
 8007aae:	1882      	adds	r2, r0, r2
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d100      	bne.n	8007ab6 <memset+0xa>
 8007ab4:	4770      	bx	lr
 8007ab6:	7019      	strb	r1, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	e7f9      	b.n	8007ab0 <memset+0x4>

08007abc <_localeconv_r>:
 8007abc:	4800      	ldr	r0, [pc, #0]	@ (8007ac0 <_localeconv_r+0x4>)
 8007abe:	4770      	bx	lr
 8007ac0:	20000158 	.word	0x20000158

08007ac4 <_close_r>:
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	b570      	push	{r4, r5, r6, lr}
 8007ac8:	4d06      	ldr	r5, [pc, #24]	@ (8007ae4 <_close_r+0x20>)
 8007aca:	0004      	movs	r4, r0
 8007acc:	0008      	movs	r0, r1
 8007ace:	602b      	str	r3, [r5, #0]
 8007ad0:	f7fb fbf7 	bl	80032c2 <_close>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d103      	bne.n	8007ae0 <_close_r+0x1c>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d000      	beq.n	8007ae0 <_close_r+0x1c>
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
 8007ae2:	46c0      	nop			@ (mov r8, r8)
 8007ae4:	20000658 	.word	0x20000658

08007ae8 <_lseek_r>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	0004      	movs	r4, r0
 8007aec:	0008      	movs	r0, r1
 8007aee:	0011      	movs	r1, r2
 8007af0:	001a      	movs	r2, r3
 8007af2:	2300      	movs	r3, #0
 8007af4:	4d05      	ldr	r5, [pc, #20]	@ (8007b0c <_lseek_r+0x24>)
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	f7fb fc04 	bl	8003304 <_lseek>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d103      	bne.n	8007b08 <_lseek_r+0x20>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d000      	beq.n	8007b08 <_lseek_r+0x20>
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	bd70      	pop	{r4, r5, r6, pc}
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	20000658 	.word	0x20000658

08007b10 <_read_r>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	0004      	movs	r4, r0
 8007b14:	0008      	movs	r0, r1
 8007b16:	0011      	movs	r1, r2
 8007b18:	001a      	movs	r2, r3
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4d05      	ldr	r5, [pc, #20]	@ (8007b34 <_read_r+0x24>)
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	f7fb fb96 	bl	8003250 <_read>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d103      	bne.n	8007b30 <_read_r+0x20>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d000      	beq.n	8007b30 <_read_r+0x20>
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	46c0      	nop			@ (mov r8, r8)
 8007b34:	20000658 	.word	0x20000658

08007b38 <_write_r>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	0004      	movs	r4, r0
 8007b3c:	0008      	movs	r0, r1
 8007b3e:	0011      	movs	r1, r2
 8007b40:	001a      	movs	r2, r3
 8007b42:	2300      	movs	r3, #0
 8007b44:	4d05      	ldr	r5, [pc, #20]	@ (8007b5c <_write_r+0x24>)
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	f7fb fb9f 	bl	800328a <_write>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d103      	bne.n	8007b58 <_write_r+0x20>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d000      	beq.n	8007b58 <_write_r+0x20>
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	bd70      	pop	{r4, r5, r6, pc}
 8007b5a:	46c0      	nop			@ (mov r8, r8)
 8007b5c:	20000658 	.word	0x20000658

08007b60 <__errno>:
 8007b60:	4b01      	ldr	r3, [pc, #4]	@ (8007b68 <__errno+0x8>)
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	4770      	bx	lr
 8007b66:	46c0      	nop			@ (mov r8, r8)
 8007b68:	20000018 	.word	0x20000018

08007b6c <__libc_init_array>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	2600      	movs	r6, #0
 8007b70:	4c0c      	ldr	r4, [pc, #48]	@ (8007ba4 <__libc_init_array+0x38>)
 8007b72:	4d0d      	ldr	r5, [pc, #52]	@ (8007ba8 <__libc_init_array+0x3c>)
 8007b74:	1b64      	subs	r4, r4, r5
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	42a6      	cmp	r6, r4
 8007b7a:	d109      	bne.n	8007b90 <__libc_init_array+0x24>
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	f002 f907 	bl	8009d90 <_init>
 8007b82:	4c0a      	ldr	r4, [pc, #40]	@ (8007bac <__libc_init_array+0x40>)
 8007b84:	4d0a      	ldr	r5, [pc, #40]	@ (8007bb0 <__libc_init_array+0x44>)
 8007b86:	1b64      	subs	r4, r4, r5
 8007b88:	10a4      	asrs	r4, r4, #2
 8007b8a:	42a6      	cmp	r6, r4
 8007b8c:	d105      	bne.n	8007b9a <__libc_init_array+0x2e>
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	00b3      	lsls	r3, r6, #2
 8007b92:	58eb      	ldr	r3, [r5, r3]
 8007b94:	4798      	blx	r3
 8007b96:	3601      	adds	r6, #1
 8007b98:	e7ee      	b.n	8007b78 <__libc_init_array+0xc>
 8007b9a:	00b3      	lsls	r3, r6, #2
 8007b9c:	58eb      	ldr	r3, [r5, r3]
 8007b9e:	4798      	blx	r3
 8007ba0:	3601      	adds	r6, #1
 8007ba2:	e7f2      	b.n	8007b8a <__libc_init_array+0x1e>
 8007ba4:	0800a1c0 	.word	0x0800a1c0
 8007ba8:	0800a1c0 	.word	0x0800a1c0
 8007bac:	0800a1c4 	.word	0x0800a1c4
 8007bb0:	0800a1c0 	.word	0x0800a1c0

08007bb4 <__retarget_lock_init_recursive>:
 8007bb4:	4770      	bx	lr

08007bb6 <__retarget_lock_acquire_recursive>:
 8007bb6:	4770      	bx	lr

08007bb8 <__retarget_lock_release_recursive>:
 8007bb8:	4770      	bx	lr

08007bba <memchr>:
 8007bba:	b2c9      	uxtb	r1, r1
 8007bbc:	1882      	adds	r2, r0, r2
 8007bbe:	4290      	cmp	r0, r2
 8007bc0:	d101      	bne.n	8007bc6 <memchr+0xc>
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	4770      	bx	lr
 8007bc6:	7803      	ldrb	r3, [r0, #0]
 8007bc8:	428b      	cmp	r3, r1
 8007bca:	d0fb      	beq.n	8007bc4 <memchr+0xa>
 8007bcc:	3001      	adds	r0, #1
 8007bce:	e7f6      	b.n	8007bbe <memchr+0x4>

08007bd0 <quorem>:
 8007bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bd2:	6902      	ldr	r2, [r0, #16]
 8007bd4:	690f      	ldr	r7, [r1, #16]
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	0006      	movs	r6, r0
 8007bda:	000b      	movs	r3, r1
 8007bdc:	2000      	movs	r0, #0
 8007bde:	9102      	str	r1, [sp, #8]
 8007be0:	42ba      	cmp	r2, r7
 8007be2:	db6d      	blt.n	8007cc0 <quorem+0xf0>
 8007be4:	3f01      	subs	r7, #1
 8007be6:	00bc      	lsls	r4, r7, #2
 8007be8:	3314      	adds	r3, #20
 8007bea:	9305      	str	r3, [sp, #20]
 8007bec:	191b      	adds	r3, r3, r4
 8007bee:	9303      	str	r3, [sp, #12]
 8007bf0:	0033      	movs	r3, r6
 8007bf2:	3314      	adds	r3, #20
 8007bf4:	191c      	adds	r4, r3, r4
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	9804      	ldr	r0, [sp, #16]
 8007c00:	681d      	ldr	r5, [r3, #0]
 8007c02:	3501      	adds	r5, #1
 8007c04:	0029      	movs	r1, r5
 8007c06:	f7f8 fa9b 	bl	8000140 <__udivsi3>
 8007c0a:	9b04      	ldr	r3, [sp, #16]
 8007c0c:	9000      	str	r0, [sp, #0]
 8007c0e:	42ab      	cmp	r3, r5
 8007c10:	d32b      	bcc.n	8007c6a <quorem+0x9a>
 8007c12:	9b05      	ldr	r3, [sp, #20]
 8007c14:	9d01      	ldr	r5, [sp, #4]
 8007c16:	469c      	mov	ip, r3
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	4662      	mov	r2, ip
 8007c20:	ca08      	ldmia	r2!, {r3}
 8007c22:	6828      	ldr	r0, [r5, #0]
 8007c24:	4694      	mov	ip, r2
 8007c26:	9a00      	ldr	r2, [sp, #0]
 8007c28:	b299      	uxth	r1, r3
 8007c2a:	4351      	muls	r1, r2
 8007c2c:	9a05      	ldr	r2, [sp, #20]
 8007c2e:	0c1b      	lsrs	r3, r3, #16
 8007c30:	1889      	adds	r1, r1, r2
 8007c32:	9a00      	ldr	r2, [sp, #0]
 8007c34:	4353      	muls	r3, r2
 8007c36:	0c0a      	lsrs	r2, r1, #16
 8007c38:	189b      	adds	r3, r3, r2
 8007c3a:	0c1a      	lsrs	r2, r3, #16
 8007c3c:	b289      	uxth	r1, r1
 8007c3e:	9205      	str	r2, [sp, #20]
 8007c40:	b282      	uxth	r2, r0
 8007c42:	1a52      	subs	r2, r2, r1
 8007c44:	9904      	ldr	r1, [sp, #16]
 8007c46:	0c00      	lsrs	r0, r0, #16
 8007c48:	1852      	adds	r2, r2, r1
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	1411      	asrs	r1, r2, #16
 8007c4e:	1ac3      	subs	r3, r0, r3
 8007c50:	185b      	adds	r3, r3, r1
 8007c52:	1419      	asrs	r1, r3, #16
 8007c54:	b292      	uxth	r2, r2
 8007c56:	041b      	lsls	r3, r3, #16
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	9104      	str	r1, [sp, #16]
 8007c5e:	c504      	stmia	r5!, {r2}
 8007c60:	4563      	cmp	r3, ip
 8007c62:	d2dc      	bcs.n	8007c1e <quorem+0x4e>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d030      	beq.n	8007ccc <quorem+0xfc>
 8007c6a:	0030      	movs	r0, r6
 8007c6c:	9902      	ldr	r1, [sp, #8]
 8007c6e:	f001 f9c5 	bl	8008ffc <__mcmp>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	db23      	blt.n	8007cbe <quorem+0xee>
 8007c76:	0034      	movs	r4, r6
 8007c78:	2500      	movs	r5, #0
 8007c7a:	9902      	ldr	r1, [sp, #8]
 8007c7c:	3414      	adds	r4, #20
 8007c7e:	3114      	adds	r1, #20
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	c901      	ldmia	r1!, {r0}
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	466b      	mov	r3, sp
 8007c88:	891b      	ldrh	r3, [r3, #8]
 8007c8a:	b282      	uxth	r2, r0
 8007c8c:	1a9a      	subs	r2, r3, r2
 8007c8e:	9b02      	ldr	r3, [sp, #8]
 8007c90:	1952      	adds	r2, r2, r5
 8007c92:	0c00      	lsrs	r0, r0, #16
 8007c94:	0c1b      	lsrs	r3, r3, #16
 8007c96:	1a1b      	subs	r3, r3, r0
 8007c98:	1410      	asrs	r0, r2, #16
 8007c9a:	181b      	adds	r3, r3, r0
 8007c9c:	141d      	asrs	r5, r3, #16
 8007c9e:	b292      	uxth	r2, r2
 8007ca0:	041b      	lsls	r3, r3, #16
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	c404      	stmia	r4!, {r2}
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	d2e9      	bcs.n	8007c80 <quorem+0xb0>
 8007cac:	9a01      	ldr	r2, [sp, #4]
 8007cae:	00bb      	lsls	r3, r7, #2
 8007cb0:	18d3      	adds	r3, r2, r3
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	d013      	beq.n	8007ce0 <quorem+0x110>
 8007cb8:	9b00      	ldr	r3, [sp, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	9800      	ldr	r0, [sp, #0]
 8007cc0:	b007      	add	sp, #28
 8007cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d104      	bne.n	8007cd4 <quorem+0x104>
 8007cca:	3f01      	subs	r7, #1
 8007ccc:	9b01      	ldr	r3, [sp, #4]
 8007cce:	3c04      	subs	r4, #4
 8007cd0:	42a3      	cmp	r3, r4
 8007cd2:	d3f7      	bcc.n	8007cc4 <quorem+0xf4>
 8007cd4:	6137      	str	r7, [r6, #16]
 8007cd6:	e7c8      	b.n	8007c6a <quorem+0x9a>
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	d104      	bne.n	8007ce8 <quorem+0x118>
 8007cde:	3f01      	subs	r7, #1
 8007ce0:	9a01      	ldr	r2, [sp, #4]
 8007ce2:	3b04      	subs	r3, #4
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d3f7      	bcc.n	8007cd8 <quorem+0x108>
 8007ce8:	6137      	str	r7, [r6, #16]
 8007cea:	e7e5      	b.n	8007cb8 <quorem+0xe8>

08007cec <_dtoa_r>:
 8007cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cee:	0014      	movs	r4, r2
 8007cf0:	001d      	movs	r5, r3
 8007cf2:	69c6      	ldr	r6, [r0, #28]
 8007cf4:	b09d      	sub	sp, #116	@ 0x74
 8007cf6:	940a      	str	r4, [sp, #40]	@ 0x28
 8007cf8:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007cfa:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007cfc:	9003      	str	r0, [sp, #12]
 8007cfe:	2e00      	cmp	r6, #0
 8007d00:	d10f      	bne.n	8007d22 <_dtoa_r+0x36>
 8007d02:	2010      	movs	r0, #16
 8007d04:	f000 fe30 	bl	8008968 <malloc>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	1e02      	subs	r2, r0, #0
 8007d0c:	61d8      	str	r0, [r3, #28]
 8007d0e:	d104      	bne.n	8007d1a <_dtoa_r+0x2e>
 8007d10:	21ef      	movs	r1, #239	@ 0xef
 8007d12:	4bc7      	ldr	r3, [pc, #796]	@ (8008030 <_dtoa_r+0x344>)
 8007d14:	48c7      	ldr	r0, [pc, #796]	@ (8008034 <_dtoa_r+0x348>)
 8007d16:	f001 fcc5 	bl	80096a4 <__assert_func>
 8007d1a:	6046      	str	r6, [r0, #4]
 8007d1c:	6086      	str	r6, [r0, #8]
 8007d1e:	6006      	str	r6, [r0, #0]
 8007d20:	60c6      	str	r6, [r0, #12]
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	6819      	ldr	r1, [r3, #0]
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	d00b      	beq.n	8007d44 <_dtoa_r+0x58>
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4093      	lsls	r3, r2
 8007d32:	604a      	str	r2, [r1, #4]
 8007d34:	608b      	str	r3, [r1, #8]
 8007d36:	9803      	ldr	r0, [sp, #12]
 8007d38:	f000 ff16 	bl	8008b68 <_Bfree>
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	2d00      	cmp	r5, #0
 8007d46:	da1e      	bge.n	8007d86 <_dtoa_r+0x9a>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	006b      	lsls	r3, r5, #1
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d52:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007d54:	4bb8      	ldr	r3, [pc, #736]	@ (8008038 <_dtoa_r+0x34c>)
 8007d56:	4ab8      	ldr	r2, [pc, #736]	@ (8008038 <_dtoa_r+0x34c>)
 8007d58:	403b      	ands	r3, r7
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d116      	bne.n	8007d8c <_dtoa_r+0xa0>
 8007d5e:	4bb7      	ldr	r3, [pc, #732]	@ (800803c <_dtoa_r+0x350>)
 8007d60:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	033b      	lsls	r3, r7, #12
 8007d66:	0b1b      	lsrs	r3, r3, #12
 8007d68:	4323      	orrs	r3, r4
 8007d6a:	d101      	bne.n	8007d70 <_dtoa_r+0x84>
 8007d6c:	f000 fd83 	bl	8008876 <_dtoa_r+0xb8a>
 8007d70:	4bb3      	ldr	r3, [pc, #716]	@ (8008040 <_dtoa_r+0x354>)
 8007d72:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007d74:	9308      	str	r3, [sp, #32]
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	d002      	beq.n	8007d80 <_dtoa_r+0x94>
 8007d7a:	4bb2      	ldr	r3, [pc, #712]	@ (8008044 <_dtoa_r+0x358>)
 8007d7c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	9808      	ldr	r0, [sp, #32]
 8007d82:	b01d      	add	sp, #116	@ 0x74
 8007d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d86:	2300      	movs	r3, #0
 8007d88:	603b      	str	r3, [r7, #0]
 8007d8a:	e7e2      	b.n	8007d52 <_dtoa_r+0x66>
 8007d8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d90:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007d96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f7f8 fb56 	bl	800044c <__aeabi_dcmpeq>
 8007da0:	1e06      	subs	r6, r0, #0
 8007da2:	d00b      	beq.n	8007dbc <_dtoa_r+0xd0>
 8007da4:	2301      	movs	r3, #1
 8007da6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007da8:	6013      	str	r3, [r2, #0]
 8007daa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <_dtoa_r+0xca>
 8007db0:	4ba5      	ldr	r3, [pc, #660]	@ (8008048 <_dtoa_r+0x35c>)
 8007db2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	4ba5      	ldr	r3, [pc, #660]	@ (800804c <_dtoa_r+0x360>)
 8007db8:	9308      	str	r3, [sp, #32]
 8007dba:	e7e1      	b.n	8007d80 <_dtoa_r+0x94>
 8007dbc:	ab1a      	add	r3, sp, #104	@ 0x68
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	9803      	ldr	r0, [sp, #12]
 8007dc6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007dc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007dca:	f001 f9cd 	bl	8009168 <__d2b>
 8007dce:	007a      	lsls	r2, r7, #1
 8007dd0:	9005      	str	r0, [sp, #20]
 8007dd2:	0d52      	lsrs	r2, r2, #21
 8007dd4:	d100      	bne.n	8007dd8 <_dtoa_r+0xec>
 8007dd6:	e07b      	b.n	8007ed0 <_dtoa_r+0x1e4>
 8007dd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007dda:	9618      	str	r6, [sp, #96]	@ 0x60
 8007ddc:	0319      	lsls	r1, r3, #12
 8007dde:	4b9c      	ldr	r3, [pc, #624]	@ (8008050 <_dtoa_r+0x364>)
 8007de0:	0b09      	lsrs	r1, r1, #12
 8007de2:	430b      	orrs	r3, r1
 8007de4:	499b      	ldr	r1, [pc, #620]	@ (8008054 <_dtoa_r+0x368>)
 8007de6:	1857      	adds	r7, r2, r1
 8007de8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007dea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007dec:	0019      	movs	r1, r3
 8007dee:	2200      	movs	r2, #0
 8007df0:	4b99      	ldr	r3, [pc, #612]	@ (8008058 <_dtoa_r+0x36c>)
 8007df2:	f7f9 fdc9 	bl	8001988 <__aeabi_dsub>
 8007df6:	4a99      	ldr	r2, [pc, #612]	@ (800805c <_dtoa_r+0x370>)
 8007df8:	4b99      	ldr	r3, [pc, #612]	@ (8008060 <_dtoa_r+0x374>)
 8007dfa:	f7f9 fafd 	bl	80013f8 <__aeabi_dmul>
 8007dfe:	4a99      	ldr	r2, [pc, #612]	@ (8008064 <_dtoa_r+0x378>)
 8007e00:	4b99      	ldr	r3, [pc, #612]	@ (8008068 <_dtoa_r+0x37c>)
 8007e02:	f7f8 fb51 	bl	80004a8 <__aeabi_dadd>
 8007e06:	0004      	movs	r4, r0
 8007e08:	0038      	movs	r0, r7
 8007e0a:	000d      	movs	r5, r1
 8007e0c:	f7fa f9b6 	bl	800217c <__aeabi_i2d>
 8007e10:	4a96      	ldr	r2, [pc, #600]	@ (800806c <_dtoa_r+0x380>)
 8007e12:	4b97      	ldr	r3, [pc, #604]	@ (8008070 <_dtoa_r+0x384>)
 8007e14:	f7f9 faf0 	bl	80013f8 <__aeabi_dmul>
 8007e18:	0002      	movs	r2, r0
 8007e1a:	000b      	movs	r3, r1
 8007e1c:	0020      	movs	r0, r4
 8007e1e:	0029      	movs	r1, r5
 8007e20:	f7f8 fb42 	bl	80004a8 <__aeabi_dadd>
 8007e24:	0004      	movs	r4, r0
 8007e26:	000d      	movs	r5, r1
 8007e28:	f7fa f96c 	bl	8002104 <__aeabi_d2iz>
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	9004      	str	r0, [sp, #16]
 8007e30:	2300      	movs	r3, #0
 8007e32:	0020      	movs	r0, r4
 8007e34:	0029      	movs	r1, r5
 8007e36:	f7f8 fb0f 	bl	8000458 <__aeabi_dcmplt>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d00b      	beq.n	8007e56 <_dtoa_r+0x16a>
 8007e3e:	9804      	ldr	r0, [sp, #16]
 8007e40:	f7fa f99c 	bl	800217c <__aeabi_i2d>
 8007e44:	002b      	movs	r3, r5
 8007e46:	0022      	movs	r2, r4
 8007e48:	f7f8 fb00 	bl	800044c <__aeabi_dcmpeq>
 8007e4c:	4243      	negs	r3, r0
 8007e4e:	4158      	adcs	r0, r3
 8007e50:	9b04      	ldr	r3, [sp, #16]
 8007e52:	1a1b      	subs	r3, r3, r0
 8007e54:	9304      	str	r3, [sp, #16]
 8007e56:	2301      	movs	r3, #1
 8007e58:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	2b16      	cmp	r3, #22
 8007e5e:	d810      	bhi.n	8007e82 <_dtoa_r+0x196>
 8007e60:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007e62:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007e64:	9a04      	ldr	r2, [sp, #16]
 8007e66:	4b83      	ldr	r3, [pc, #524]	@ (8008074 <_dtoa_r+0x388>)
 8007e68:	00d2      	lsls	r2, r2, #3
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f7f8 faf2 	bl	8000458 <__aeabi_dcmplt>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d047      	beq.n	8007f08 <_dtoa_r+0x21c>
 8007e78:	9b04      	ldr	r3, [sp, #16]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	9304      	str	r3, [sp, #16]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e82:	2200      	movs	r2, #0
 8007e84:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007e86:	9206      	str	r2, [sp, #24]
 8007e88:	1bdb      	subs	r3, r3, r7
 8007e8a:	1e5a      	subs	r2, r3, #1
 8007e8c:	d53e      	bpl.n	8007f0c <_dtoa_r+0x220>
 8007e8e:	2201      	movs	r2, #1
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	9306      	str	r3, [sp, #24]
 8007e94:	2300      	movs	r3, #0
 8007e96:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e98:	9b04      	ldr	r3, [sp, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	db38      	blt.n	8007f10 <_dtoa_r+0x224>
 8007e9e:	9a04      	ldr	r2, [sp, #16]
 8007ea0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ea2:	4694      	mov	ip, r2
 8007ea4:	4463      	add	r3, ip
 8007ea6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9214      	str	r2, [sp, #80]	@ 0x50
 8007eac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007eae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007eb0:	2401      	movs	r4, #1
 8007eb2:	2b09      	cmp	r3, #9
 8007eb4:	d867      	bhi.n	8007f86 <_dtoa_r+0x29a>
 8007eb6:	2b05      	cmp	r3, #5
 8007eb8:	dd02      	ble.n	8007ec0 <_dtoa_r+0x1d4>
 8007eba:	2400      	movs	r4, #0
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	9322      	str	r3, [sp, #136]	@ 0x88
 8007ec0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ec2:	1e98      	subs	r0, r3, #2
 8007ec4:	2803      	cmp	r0, #3
 8007ec6:	d867      	bhi.n	8007f98 <_dtoa_r+0x2ac>
 8007ec8:	f7f8 f926 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007ecc:	5b383a2b 	.word	0x5b383a2b
 8007ed0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007ed2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007ed4:	18f6      	adds	r6, r6, r3
 8007ed6:	4b68      	ldr	r3, [pc, #416]	@ (8008078 <_dtoa_r+0x38c>)
 8007ed8:	18f2      	adds	r2, r6, r3
 8007eda:	2a20      	cmp	r2, #32
 8007edc:	dd0f      	ble.n	8007efe <_dtoa_r+0x212>
 8007ede:	2340      	movs	r3, #64	@ 0x40
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	409f      	lsls	r7, r3
 8007ee4:	4b65      	ldr	r3, [pc, #404]	@ (800807c <_dtoa_r+0x390>)
 8007ee6:	0038      	movs	r0, r7
 8007ee8:	18f3      	adds	r3, r6, r3
 8007eea:	40dc      	lsrs	r4, r3
 8007eec:	4320      	orrs	r0, r4
 8007eee:	f7fa f973 	bl	80021d8 <__aeabi_ui2d>
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	4b62      	ldr	r3, [pc, #392]	@ (8008080 <_dtoa_r+0x394>)
 8007ef6:	1e77      	subs	r7, r6, #1
 8007ef8:	18cb      	adds	r3, r1, r3
 8007efa:	9218      	str	r2, [sp, #96]	@ 0x60
 8007efc:	e776      	b.n	8007dec <_dtoa_r+0x100>
 8007efe:	2320      	movs	r3, #32
 8007f00:	0020      	movs	r0, r4
 8007f02:	1a9b      	subs	r3, r3, r2
 8007f04:	4098      	lsls	r0, r3
 8007f06:	e7f2      	b.n	8007eee <_dtoa_r+0x202>
 8007f08:	9015      	str	r0, [sp, #84]	@ 0x54
 8007f0a:	e7ba      	b.n	8007e82 <_dtoa_r+0x196>
 8007f0c:	920d      	str	r2, [sp, #52]	@ 0x34
 8007f0e:	e7c3      	b.n	8007e98 <_dtoa_r+0x1ac>
 8007f10:	9b06      	ldr	r3, [sp, #24]
 8007f12:	9a04      	ldr	r2, [sp, #16]
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	9306      	str	r3, [sp, #24]
 8007f18:	4253      	negs	r3, r2
 8007f1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9314      	str	r3, [sp, #80]	@ 0x50
 8007f20:	e7c5      	b.n	8007eae <_dtoa_r+0x1c2>
 8007f22:	2300      	movs	r3, #0
 8007f24:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f28:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dc13      	bgt.n	8007f58 <_dtoa_r+0x26c>
 8007f30:	2301      	movs	r3, #1
 8007f32:	001a      	movs	r2, r3
 8007f34:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f38:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007f3a:	e00d      	b.n	8007f58 <_dtoa_r+0x26c>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e7f1      	b.n	8007f24 <_dtoa_r+0x238>
 8007f40:	2300      	movs	r3, #0
 8007f42:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f44:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f46:	4694      	mov	ip, r2
 8007f48:	9b04      	ldr	r3, [sp, #16]
 8007f4a:	4463      	add	r3, ip
 8007f4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f4e:	3301      	adds	r3, #1
 8007f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dc00      	bgt.n	8007f58 <_dtoa_r+0x26c>
 8007f56:	2301      	movs	r3, #1
 8007f58:	9a03      	ldr	r2, [sp, #12]
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	69d0      	ldr	r0, [r2, #28]
 8007f5e:	2204      	movs	r2, #4
 8007f60:	0015      	movs	r5, r2
 8007f62:	3514      	adds	r5, #20
 8007f64:	429d      	cmp	r5, r3
 8007f66:	d91b      	bls.n	8007fa0 <_dtoa_r+0x2b4>
 8007f68:	6041      	str	r1, [r0, #4]
 8007f6a:	9803      	ldr	r0, [sp, #12]
 8007f6c:	f000 fdb8 	bl	8008ae0 <_Balloc>
 8007f70:	9008      	str	r0, [sp, #32]
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d117      	bne.n	8007fa6 <_dtoa_r+0x2ba>
 8007f76:	21b0      	movs	r1, #176	@ 0xb0
 8007f78:	4b42      	ldr	r3, [pc, #264]	@ (8008084 <_dtoa_r+0x398>)
 8007f7a:	482e      	ldr	r0, [pc, #184]	@ (8008034 <_dtoa_r+0x348>)
 8007f7c:	9a08      	ldr	r2, [sp, #32]
 8007f7e:	31ff      	adds	r1, #255	@ 0xff
 8007f80:	e6c9      	b.n	8007d16 <_dtoa_r+0x2a>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e7dd      	b.n	8007f42 <_dtoa_r+0x256>
 8007f86:	2300      	movs	r3, #0
 8007f88:	9410      	str	r4, [sp, #64]	@ 0x40
 8007f8a:	9322      	str	r3, [sp, #136]	@ 0x88
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f92:	2200      	movs	r2, #0
 8007f94:	3313      	adds	r3, #19
 8007f96:	e7cf      	b.n	8007f38 <_dtoa_r+0x24c>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f9c:	3b02      	subs	r3, #2
 8007f9e:	e7f6      	b.n	8007f8e <_dtoa_r+0x2a2>
 8007fa0:	3101      	adds	r1, #1
 8007fa2:	0052      	lsls	r2, r2, #1
 8007fa4:	e7dc      	b.n	8007f60 <_dtoa_r+0x274>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	9a08      	ldr	r2, [sp, #32]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb0:	2b0e      	cmp	r3, #14
 8007fb2:	d900      	bls.n	8007fb6 <_dtoa_r+0x2ca>
 8007fb4:	e0d9      	b.n	800816a <_dtoa_r+0x47e>
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	d100      	bne.n	8007fbc <_dtoa_r+0x2d0>
 8007fba:	e0d6      	b.n	800816a <_dtoa_r+0x47e>
 8007fbc:	9b04      	ldr	r3, [sp, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd64      	ble.n	800808c <_dtoa_r+0x3a0>
 8007fc2:	210f      	movs	r1, #15
 8007fc4:	9a04      	ldr	r2, [sp, #16]
 8007fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8008074 <_dtoa_r+0x388>)
 8007fc8:	400a      	ands	r2, r1
 8007fca:	00d2      	lsls	r2, r2, #3
 8007fcc:	189b      	adds	r3, r3, r2
 8007fce:	681e      	ldr	r6, [r3, #0]
 8007fd0:	685f      	ldr	r7, [r3, #4]
 8007fd2:	9b04      	ldr	r3, [sp, #16]
 8007fd4:	2402      	movs	r4, #2
 8007fd6:	111d      	asrs	r5, r3, #4
 8007fd8:	05db      	lsls	r3, r3, #23
 8007fda:	d50a      	bpl.n	8007ff2 <_dtoa_r+0x306>
 8007fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8008088 <_dtoa_r+0x39c>)
 8007fde:	400d      	ands	r5, r1
 8007fe0:	6a1a      	ldr	r2, [r3, #32]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007fe6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007fe8:	f7f8 fdc2 	bl	8000b70 <__aeabi_ddiv>
 8007fec:	900a      	str	r0, [sp, #40]	@ 0x28
 8007fee:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007ff0:	3401      	adds	r4, #1
 8007ff2:	4b25      	ldr	r3, [pc, #148]	@ (8008088 <_dtoa_r+0x39c>)
 8007ff4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ff6:	2d00      	cmp	r5, #0
 8007ff8:	d108      	bne.n	800800c <_dtoa_r+0x320>
 8007ffa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ffc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ffe:	0032      	movs	r2, r6
 8008000:	003b      	movs	r3, r7
 8008002:	f7f8 fdb5 	bl	8000b70 <__aeabi_ddiv>
 8008006:	900a      	str	r0, [sp, #40]	@ 0x28
 8008008:	910b      	str	r1, [sp, #44]	@ 0x2c
 800800a:	e05a      	b.n	80080c2 <_dtoa_r+0x3d6>
 800800c:	2301      	movs	r3, #1
 800800e:	421d      	tst	r5, r3
 8008010:	d009      	beq.n	8008026 <_dtoa_r+0x33a>
 8008012:	18e4      	adds	r4, r4, r3
 8008014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008016:	0030      	movs	r0, r6
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	0039      	movs	r1, r7
 800801e:	f7f9 f9eb 	bl	80013f8 <__aeabi_dmul>
 8008022:	0006      	movs	r6, r0
 8008024:	000f      	movs	r7, r1
 8008026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008028:	106d      	asrs	r5, r5, #1
 800802a:	3308      	adds	r3, #8
 800802c:	e7e2      	b.n	8007ff4 <_dtoa_r+0x308>
 800802e:	46c0      	nop			@ (mov r8, r8)
 8008030:	08009e91 	.word	0x08009e91
 8008034:	08009ea8 	.word	0x08009ea8
 8008038:	7ff00000 	.word	0x7ff00000
 800803c:	0000270f 	.word	0x0000270f
 8008040:	08009e8d 	.word	0x08009e8d
 8008044:	08009e90 	.word	0x08009e90
 8008048:	08009e61 	.word	0x08009e61
 800804c:	08009e60 	.word	0x08009e60
 8008050:	3ff00000 	.word	0x3ff00000
 8008054:	fffffc01 	.word	0xfffffc01
 8008058:	3ff80000 	.word	0x3ff80000
 800805c:	636f4361 	.word	0x636f4361
 8008060:	3fd287a7 	.word	0x3fd287a7
 8008064:	8b60c8b3 	.word	0x8b60c8b3
 8008068:	3fc68a28 	.word	0x3fc68a28
 800806c:	509f79fb 	.word	0x509f79fb
 8008070:	3fd34413 	.word	0x3fd34413
 8008074:	08009fa0 	.word	0x08009fa0
 8008078:	00000432 	.word	0x00000432
 800807c:	00000412 	.word	0x00000412
 8008080:	fe100000 	.word	0xfe100000
 8008084:	08009f00 	.word	0x08009f00
 8008088:	08009f78 	.word	0x08009f78
 800808c:	9b04      	ldr	r3, [sp, #16]
 800808e:	2402      	movs	r4, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d016      	beq.n	80080c2 <_dtoa_r+0x3d6>
 8008094:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008096:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008098:	220f      	movs	r2, #15
 800809a:	425d      	negs	r5, r3
 800809c:	402a      	ands	r2, r5
 800809e:	4bd7      	ldr	r3, [pc, #860]	@ (80083fc <_dtoa_r+0x710>)
 80080a0:	00d2      	lsls	r2, r2, #3
 80080a2:	189b      	adds	r3, r3, r2
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f7f9 f9a6 	bl	80013f8 <__aeabi_dmul>
 80080ac:	2701      	movs	r7, #1
 80080ae:	2300      	movs	r3, #0
 80080b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80080b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080b4:	4ed2      	ldr	r6, [pc, #840]	@ (8008400 <_dtoa_r+0x714>)
 80080b6:	112d      	asrs	r5, r5, #4
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	d000      	beq.n	80080be <_dtoa_r+0x3d2>
 80080bc:	e0ba      	b.n	8008234 <_dtoa_r+0x548>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1a1      	bne.n	8008006 <_dtoa_r+0x31a>
 80080c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80080c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80080c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d100      	bne.n	80080ce <_dtoa_r+0x3e2>
 80080cc:	e0bd      	b.n	800824a <_dtoa_r+0x55e>
 80080ce:	2200      	movs	r2, #0
 80080d0:	0030      	movs	r0, r6
 80080d2:	0039      	movs	r1, r7
 80080d4:	4bcb      	ldr	r3, [pc, #812]	@ (8008404 <_dtoa_r+0x718>)
 80080d6:	f7f8 f9bf 	bl	8000458 <__aeabi_dcmplt>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d100      	bne.n	80080e0 <_dtoa_r+0x3f4>
 80080de:	e0b4      	b.n	800824a <_dtoa_r+0x55e>
 80080e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d100      	bne.n	80080e8 <_dtoa_r+0x3fc>
 80080e6:	e0b0      	b.n	800824a <_dtoa_r+0x55e>
 80080e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dd39      	ble.n	8008162 <_dtoa_r+0x476>
 80080ee:	9b04      	ldr	r3, [sp, #16]
 80080f0:	2200      	movs	r2, #0
 80080f2:	3b01      	subs	r3, #1
 80080f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80080f6:	0030      	movs	r0, r6
 80080f8:	4bc3      	ldr	r3, [pc, #780]	@ (8008408 <_dtoa_r+0x71c>)
 80080fa:	0039      	movs	r1, r7
 80080fc:	f7f9 f97c 	bl	80013f8 <__aeabi_dmul>
 8008100:	900a      	str	r0, [sp, #40]	@ 0x28
 8008102:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008106:	3401      	adds	r4, #1
 8008108:	0020      	movs	r0, r4
 800810a:	9311      	str	r3, [sp, #68]	@ 0x44
 800810c:	f7fa f836 	bl	800217c <__aeabi_i2d>
 8008110:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008114:	f7f9 f970 	bl	80013f8 <__aeabi_dmul>
 8008118:	4bbc      	ldr	r3, [pc, #752]	@ (800840c <_dtoa_r+0x720>)
 800811a:	2200      	movs	r2, #0
 800811c:	f7f8 f9c4 	bl	80004a8 <__aeabi_dadd>
 8008120:	4bbb      	ldr	r3, [pc, #748]	@ (8008410 <_dtoa_r+0x724>)
 8008122:	0006      	movs	r6, r0
 8008124:	18cf      	adds	r7, r1, r3
 8008126:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008128:	2b00      	cmp	r3, #0
 800812a:	d000      	beq.n	800812e <_dtoa_r+0x442>
 800812c:	e091      	b.n	8008252 <_dtoa_r+0x566>
 800812e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008130:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008132:	2200      	movs	r2, #0
 8008134:	4bb7      	ldr	r3, [pc, #732]	@ (8008414 <_dtoa_r+0x728>)
 8008136:	f7f9 fc27 	bl	8001988 <__aeabi_dsub>
 800813a:	0032      	movs	r2, r6
 800813c:	003b      	movs	r3, r7
 800813e:	0004      	movs	r4, r0
 8008140:	000d      	movs	r5, r1
 8008142:	f7f8 f99d 	bl	8000480 <__aeabi_dcmpgt>
 8008146:	2800      	cmp	r0, #0
 8008148:	d000      	beq.n	800814c <_dtoa_r+0x460>
 800814a:	e29d      	b.n	8008688 <_dtoa_r+0x99c>
 800814c:	2180      	movs	r1, #128	@ 0x80
 800814e:	0609      	lsls	r1, r1, #24
 8008150:	187b      	adds	r3, r7, r1
 8008152:	0032      	movs	r2, r6
 8008154:	0020      	movs	r0, r4
 8008156:	0029      	movs	r1, r5
 8008158:	f7f8 f97e 	bl	8000458 <__aeabi_dcmplt>
 800815c:	2800      	cmp	r0, #0
 800815e:	d000      	beq.n	8008162 <_dtoa_r+0x476>
 8008160:	e130      	b.n	80083c4 <_dtoa_r+0x6d8>
 8008162:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008164:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008166:	930a      	str	r3, [sp, #40]	@ 0x28
 8008168:	940b      	str	r4, [sp, #44]	@ 0x2c
 800816a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800816c:	2b00      	cmp	r3, #0
 800816e:	da00      	bge.n	8008172 <_dtoa_r+0x486>
 8008170:	e177      	b.n	8008462 <_dtoa_r+0x776>
 8008172:	9a04      	ldr	r2, [sp, #16]
 8008174:	2a0e      	cmp	r2, #14
 8008176:	dd00      	ble.n	800817a <_dtoa_r+0x48e>
 8008178:	e173      	b.n	8008462 <_dtoa_r+0x776>
 800817a:	4ba0      	ldr	r3, [pc, #640]	@ (80083fc <_dtoa_r+0x710>)
 800817c:	00d2      	lsls	r2, r2, #3
 800817e:	189b      	adds	r3, r3, r2
 8008180:	685c      	ldr	r4, [r3, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	9306      	str	r3, [sp, #24]
 8008186:	9407      	str	r4, [sp, #28]
 8008188:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800818a:	2b00      	cmp	r3, #0
 800818c:	da03      	bge.n	8008196 <_dtoa_r+0x4aa>
 800818e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008190:	2b00      	cmp	r3, #0
 8008192:	dc00      	bgt.n	8008196 <_dtoa_r+0x4aa>
 8008194:	e106      	b.n	80083a4 <_dtoa_r+0x6b8>
 8008196:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008198:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800819a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819c:	9d08      	ldr	r5, [sp, #32]
 800819e:	3b01      	subs	r3, #1
 80081a0:	195b      	adds	r3, r3, r5
 80081a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80081a4:	9a06      	ldr	r2, [sp, #24]
 80081a6:	9b07      	ldr	r3, [sp, #28]
 80081a8:	0030      	movs	r0, r6
 80081aa:	0039      	movs	r1, r7
 80081ac:	f7f8 fce0 	bl	8000b70 <__aeabi_ddiv>
 80081b0:	f7f9 ffa8 	bl	8002104 <__aeabi_d2iz>
 80081b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80081b6:	f7f9 ffe1 	bl	800217c <__aeabi_i2d>
 80081ba:	9a06      	ldr	r2, [sp, #24]
 80081bc:	9b07      	ldr	r3, [sp, #28]
 80081be:	f7f9 f91b 	bl	80013f8 <__aeabi_dmul>
 80081c2:	0002      	movs	r2, r0
 80081c4:	000b      	movs	r3, r1
 80081c6:	0030      	movs	r0, r6
 80081c8:	0039      	movs	r1, r7
 80081ca:	f7f9 fbdd 	bl	8001988 <__aeabi_dsub>
 80081ce:	002b      	movs	r3, r5
 80081d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081d2:	3501      	adds	r5, #1
 80081d4:	3230      	adds	r2, #48	@ 0x30
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081da:	002c      	movs	r4, r5
 80081dc:	429a      	cmp	r2, r3
 80081de:	d000      	beq.n	80081e2 <_dtoa_r+0x4f6>
 80081e0:	e131      	b.n	8008446 <_dtoa_r+0x75a>
 80081e2:	0002      	movs	r2, r0
 80081e4:	000b      	movs	r3, r1
 80081e6:	f7f8 f95f 	bl	80004a8 <__aeabi_dadd>
 80081ea:	9a06      	ldr	r2, [sp, #24]
 80081ec:	9b07      	ldr	r3, [sp, #28]
 80081ee:	0006      	movs	r6, r0
 80081f0:	000f      	movs	r7, r1
 80081f2:	f7f8 f945 	bl	8000480 <__aeabi_dcmpgt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d000      	beq.n	80081fc <_dtoa_r+0x510>
 80081fa:	e10f      	b.n	800841c <_dtoa_r+0x730>
 80081fc:	9a06      	ldr	r2, [sp, #24]
 80081fe:	9b07      	ldr	r3, [sp, #28]
 8008200:	0030      	movs	r0, r6
 8008202:	0039      	movs	r1, r7
 8008204:	f7f8 f922 	bl	800044c <__aeabi_dcmpeq>
 8008208:	2800      	cmp	r0, #0
 800820a:	d003      	beq.n	8008214 <_dtoa_r+0x528>
 800820c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800820e:	07dd      	lsls	r5, r3, #31
 8008210:	d500      	bpl.n	8008214 <_dtoa_r+0x528>
 8008212:	e103      	b.n	800841c <_dtoa_r+0x730>
 8008214:	9905      	ldr	r1, [sp, #20]
 8008216:	9803      	ldr	r0, [sp, #12]
 8008218:	f000 fca6 	bl	8008b68 <_Bfree>
 800821c:	2300      	movs	r3, #0
 800821e:	7023      	strb	r3, [r4, #0]
 8008220:	9b04      	ldr	r3, [sp, #16]
 8008222:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008224:	3301      	adds	r3, #1
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800822a:	2b00      	cmp	r3, #0
 800822c:	d100      	bne.n	8008230 <_dtoa_r+0x544>
 800822e:	e5a7      	b.n	8007d80 <_dtoa_r+0x94>
 8008230:	601c      	str	r4, [r3, #0]
 8008232:	e5a5      	b.n	8007d80 <_dtoa_r+0x94>
 8008234:	423d      	tst	r5, r7
 8008236:	d005      	beq.n	8008244 <_dtoa_r+0x558>
 8008238:	6832      	ldr	r2, [r6, #0]
 800823a:	6873      	ldr	r3, [r6, #4]
 800823c:	f7f9 f8dc 	bl	80013f8 <__aeabi_dmul>
 8008240:	003b      	movs	r3, r7
 8008242:	3401      	adds	r4, #1
 8008244:	106d      	asrs	r5, r5, #1
 8008246:	3608      	adds	r6, #8
 8008248:	e736      	b.n	80080b8 <_dtoa_r+0x3cc>
 800824a:	9b04      	ldr	r3, [sp, #16]
 800824c:	930c      	str	r3, [sp, #48]	@ 0x30
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	e75a      	b.n	8008108 <_dtoa_r+0x41c>
 8008252:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008254:	4b69      	ldr	r3, [pc, #420]	@ (80083fc <_dtoa_r+0x710>)
 8008256:	3a01      	subs	r2, #1
 8008258:	00d2      	lsls	r2, r2, #3
 800825a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800825c:	189b      	adds	r3, r3, r2
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2900      	cmp	r1, #0
 8008264:	d04c      	beq.n	8008300 <_dtoa_r+0x614>
 8008266:	2000      	movs	r0, #0
 8008268:	496b      	ldr	r1, [pc, #428]	@ (8008418 <_dtoa_r+0x72c>)
 800826a:	f7f8 fc81 	bl	8000b70 <__aeabi_ddiv>
 800826e:	0032      	movs	r2, r6
 8008270:	003b      	movs	r3, r7
 8008272:	f7f9 fb89 	bl	8001988 <__aeabi_dsub>
 8008276:	9a08      	ldr	r2, [sp, #32]
 8008278:	0006      	movs	r6, r0
 800827a:	4694      	mov	ip, r2
 800827c:	000f      	movs	r7, r1
 800827e:	9b08      	ldr	r3, [sp, #32]
 8008280:	9316      	str	r3, [sp, #88]	@ 0x58
 8008282:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008284:	4463      	add	r3, ip
 8008286:	9311      	str	r3, [sp, #68]	@ 0x44
 8008288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800828a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800828c:	f7f9 ff3a 	bl	8002104 <__aeabi_d2iz>
 8008290:	0005      	movs	r5, r0
 8008292:	f7f9 ff73 	bl	800217c <__aeabi_i2d>
 8008296:	0002      	movs	r2, r0
 8008298:	000b      	movs	r3, r1
 800829a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800829c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800829e:	f7f9 fb73 	bl	8001988 <__aeabi_dsub>
 80082a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80082a4:	3530      	adds	r5, #48	@ 0x30
 80082a6:	1c5c      	adds	r4, r3, #1
 80082a8:	701d      	strb	r5, [r3, #0]
 80082aa:	0032      	movs	r2, r6
 80082ac:	003b      	movs	r3, r7
 80082ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80082b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082b2:	f7f8 f8d1 	bl	8000458 <__aeabi_dcmplt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d16a      	bne.n	8008390 <_dtoa_r+0x6a4>
 80082ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082be:	2000      	movs	r0, #0
 80082c0:	4950      	ldr	r1, [pc, #320]	@ (8008404 <_dtoa_r+0x718>)
 80082c2:	f7f9 fb61 	bl	8001988 <__aeabi_dsub>
 80082c6:	0032      	movs	r2, r6
 80082c8:	003b      	movs	r3, r7
 80082ca:	f7f8 f8c5 	bl	8000458 <__aeabi_dcmplt>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d000      	beq.n	80082d4 <_dtoa_r+0x5e8>
 80082d2:	e0a5      	b.n	8008420 <_dtoa_r+0x734>
 80082d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082d6:	42a3      	cmp	r3, r4
 80082d8:	d100      	bne.n	80082dc <_dtoa_r+0x5f0>
 80082da:	e742      	b.n	8008162 <_dtoa_r+0x476>
 80082dc:	2200      	movs	r2, #0
 80082de:	0030      	movs	r0, r6
 80082e0:	0039      	movs	r1, r7
 80082e2:	4b49      	ldr	r3, [pc, #292]	@ (8008408 <_dtoa_r+0x71c>)
 80082e4:	f7f9 f888 	bl	80013f8 <__aeabi_dmul>
 80082e8:	2200      	movs	r2, #0
 80082ea:	0006      	movs	r6, r0
 80082ec:	000f      	movs	r7, r1
 80082ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80082f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082f2:	4b45      	ldr	r3, [pc, #276]	@ (8008408 <_dtoa_r+0x71c>)
 80082f4:	f7f9 f880 	bl	80013f8 <__aeabi_dmul>
 80082f8:	9416      	str	r4, [sp, #88]	@ 0x58
 80082fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80082fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082fe:	e7c3      	b.n	8008288 <_dtoa_r+0x59c>
 8008300:	0030      	movs	r0, r6
 8008302:	0039      	movs	r1, r7
 8008304:	f7f9 f878 	bl	80013f8 <__aeabi_dmul>
 8008308:	9d08      	ldr	r5, [sp, #32]
 800830a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800830c:	002b      	movs	r3, r5
 800830e:	4694      	mov	ip, r2
 8008310:	9016      	str	r0, [sp, #88]	@ 0x58
 8008312:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008314:	4463      	add	r3, ip
 8008316:	9319      	str	r3, [sp, #100]	@ 0x64
 8008318:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800831a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800831c:	f7f9 fef2 	bl	8002104 <__aeabi_d2iz>
 8008320:	0004      	movs	r4, r0
 8008322:	f7f9 ff2b 	bl	800217c <__aeabi_i2d>
 8008326:	000b      	movs	r3, r1
 8008328:	0002      	movs	r2, r0
 800832a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800832c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800832e:	f7f9 fb2b 	bl	8001988 <__aeabi_dsub>
 8008332:	3430      	adds	r4, #48	@ 0x30
 8008334:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008336:	702c      	strb	r4, [r5, #0]
 8008338:	3501      	adds	r5, #1
 800833a:	0006      	movs	r6, r0
 800833c:	000f      	movs	r7, r1
 800833e:	42ab      	cmp	r3, r5
 8008340:	d129      	bne.n	8008396 <_dtoa_r+0x6aa>
 8008342:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008344:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008346:	9b08      	ldr	r3, [sp, #32]
 8008348:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800834a:	469c      	mov	ip, r3
 800834c:	2200      	movs	r2, #0
 800834e:	4b32      	ldr	r3, [pc, #200]	@ (8008418 <_dtoa_r+0x72c>)
 8008350:	4464      	add	r4, ip
 8008352:	f7f8 f8a9 	bl	80004a8 <__aeabi_dadd>
 8008356:	0002      	movs	r2, r0
 8008358:	000b      	movs	r3, r1
 800835a:	0030      	movs	r0, r6
 800835c:	0039      	movs	r1, r7
 800835e:	f7f8 f88f 	bl	8000480 <__aeabi_dcmpgt>
 8008362:	2800      	cmp	r0, #0
 8008364:	d15c      	bne.n	8008420 <_dtoa_r+0x734>
 8008366:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008368:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800836a:	2000      	movs	r0, #0
 800836c:	492a      	ldr	r1, [pc, #168]	@ (8008418 <_dtoa_r+0x72c>)
 800836e:	f7f9 fb0b 	bl	8001988 <__aeabi_dsub>
 8008372:	0002      	movs	r2, r0
 8008374:	000b      	movs	r3, r1
 8008376:	0030      	movs	r0, r6
 8008378:	0039      	movs	r1, r7
 800837a:	f7f8 f86d 	bl	8000458 <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	d100      	bne.n	8008384 <_dtoa_r+0x698>
 8008382:	e6ee      	b.n	8008162 <_dtoa_r+0x476>
 8008384:	0023      	movs	r3, r4
 8008386:	3c01      	subs	r4, #1
 8008388:	7822      	ldrb	r2, [r4, #0]
 800838a:	2a30      	cmp	r2, #48	@ 0x30
 800838c:	d0fa      	beq.n	8008384 <_dtoa_r+0x698>
 800838e:	001c      	movs	r4, r3
 8008390:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	e73e      	b.n	8008214 <_dtoa_r+0x528>
 8008396:	2200      	movs	r2, #0
 8008398:	4b1b      	ldr	r3, [pc, #108]	@ (8008408 <_dtoa_r+0x71c>)
 800839a:	f7f9 f82d 	bl	80013f8 <__aeabi_dmul>
 800839e:	900a      	str	r0, [sp, #40]	@ 0x28
 80083a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80083a2:	e7b9      	b.n	8008318 <_dtoa_r+0x62c>
 80083a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10c      	bne.n	80083c4 <_dtoa_r+0x6d8>
 80083aa:	9806      	ldr	r0, [sp, #24]
 80083ac:	9907      	ldr	r1, [sp, #28]
 80083ae:	2200      	movs	r2, #0
 80083b0:	4b18      	ldr	r3, [pc, #96]	@ (8008414 <_dtoa_r+0x728>)
 80083b2:	f7f9 f821 	bl	80013f8 <__aeabi_dmul>
 80083b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083ba:	f7f8 f86b 	bl	8000494 <__aeabi_dcmpge>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d100      	bne.n	80083c4 <_dtoa_r+0x6d8>
 80083c2:	e164      	b.n	800868e <_dtoa_r+0x9a2>
 80083c4:	2600      	movs	r6, #0
 80083c6:	0037      	movs	r7, r6
 80083c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083ca:	9c08      	ldr	r4, [sp, #32]
 80083cc:	43db      	mvns	r3, r3
 80083ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80083d0:	2300      	movs	r3, #0
 80083d2:	9304      	str	r3, [sp, #16]
 80083d4:	0031      	movs	r1, r6
 80083d6:	9803      	ldr	r0, [sp, #12]
 80083d8:	f000 fbc6 	bl	8008b68 <_Bfree>
 80083dc:	2f00      	cmp	r7, #0
 80083de:	d0d7      	beq.n	8008390 <_dtoa_r+0x6a4>
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <_dtoa_r+0x706>
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	d003      	beq.n	80083f2 <_dtoa_r+0x706>
 80083ea:	0019      	movs	r1, r3
 80083ec:	9803      	ldr	r0, [sp, #12]
 80083ee:	f000 fbbb 	bl	8008b68 <_Bfree>
 80083f2:	0039      	movs	r1, r7
 80083f4:	9803      	ldr	r0, [sp, #12]
 80083f6:	f000 fbb7 	bl	8008b68 <_Bfree>
 80083fa:	e7c9      	b.n	8008390 <_dtoa_r+0x6a4>
 80083fc:	08009fa0 	.word	0x08009fa0
 8008400:	08009f78 	.word	0x08009f78
 8008404:	3ff00000 	.word	0x3ff00000
 8008408:	40240000 	.word	0x40240000
 800840c:	401c0000 	.word	0x401c0000
 8008410:	fcc00000 	.word	0xfcc00000
 8008414:	40140000 	.word	0x40140000
 8008418:	3fe00000 	.word	0x3fe00000
 800841c:	9b04      	ldr	r3, [sp, #16]
 800841e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008420:	0023      	movs	r3, r4
 8008422:	001c      	movs	r4, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	781a      	ldrb	r2, [r3, #0]
 8008428:	2a39      	cmp	r2, #57	@ 0x39
 800842a:	d108      	bne.n	800843e <_dtoa_r+0x752>
 800842c:	9a08      	ldr	r2, [sp, #32]
 800842e:	429a      	cmp	r2, r3
 8008430:	d1f7      	bne.n	8008422 <_dtoa_r+0x736>
 8008432:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008434:	9908      	ldr	r1, [sp, #32]
 8008436:	3201      	adds	r2, #1
 8008438:	920c      	str	r2, [sp, #48]	@ 0x30
 800843a:	2230      	movs	r2, #48	@ 0x30
 800843c:	700a      	strb	r2, [r1, #0]
 800843e:	781a      	ldrb	r2, [r3, #0]
 8008440:	3201      	adds	r2, #1
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	e7a4      	b.n	8008390 <_dtoa_r+0x6a4>
 8008446:	2200      	movs	r2, #0
 8008448:	4bc6      	ldr	r3, [pc, #792]	@ (8008764 <_dtoa_r+0xa78>)
 800844a:	f7f8 ffd5 	bl	80013f8 <__aeabi_dmul>
 800844e:	2200      	movs	r2, #0
 8008450:	2300      	movs	r3, #0
 8008452:	0006      	movs	r6, r0
 8008454:	000f      	movs	r7, r1
 8008456:	f7f7 fff9 	bl	800044c <__aeabi_dcmpeq>
 800845a:	2800      	cmp	r0, #0
 800845c:	d100      	bne.n	8008460 <_dtoa_r+0x774>
 800845e:	e6a1      	b.n	80081a4 <_dtoa_r+0x4b8>
 8008460:	e6d8      	b.n	8008214 <_dtoa_r+0x528>
 8008462:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008464:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008466:	9c06      	ldr	r4, [sp, #24]
 8008468:	2f00      	cmp	r7, #0
 800846a:	d014      	beq.n	8008496 <_dtoa_r+0x7aa>
 800846c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800846e:	2a01      	cmp	r2, #1
 8008470:	dd00      	ble.n	8008474 <_dtoa_r+0x788>
 8008472:	e0c8      	b.n	8008606 <_dtoa_r+0x91a>
 8008474:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008476:	2a00      	cmp	r2, #0
 8008478:	d100      	bne.n	800847c <_dtoa_r+0x790>
 800847a:	e0be      	b.n	80085fa <_dtoa_r+0x90e>
 800847c:	4aba      	ldr	r2, [pc, #744]	@ (8008768 <_dtoa_r+0xa7c>)
 800847e:	189b      	adds	r3, r3, r2
 8008480:	9a06      	ldr	r2, [sp, #24]
 8008482:	2101      	movs	r1, #1
 8008484:	18d2      	adds	r2, r2, r3
 8008486:	9206      	str	r2, [sp, #24]
 8008488:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800848a:	9803      	ldr	r0, [sp, #12]
 800848c:	18d3      	adds	r3, r2, r3
 800848e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008490:	f000 fc22 	bl	8008cd8 <__i2b>
 8008494:	0007      	movs	r7, r0
 8008496:	2c00      	cmp	r4, #0
 8008498:	d00e      	beq.n	80084b8 <_dtoa_r+0x7cc>
 800849a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd0b      	ble.n	80084b8 <_dtoa_r+0x7cc>
 80084a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084a2:	0023      	movs	r3, r4
 80084a4:	4294      	cmp	r4, r2
 80084a6:	dd00      	ble.n	80084aa <_dtoa_r+0x7be>
 80084a8:	0013      	movs	r3, r2
 80084aa:	9a06      	ldr	r2, [sp, #24]
 80084ac:	1ae4      	subs	r4, r4, r3
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	9206      	str	r2, [sp, #24]
 80084b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80084b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d01f      	beq.n	80084fe <_dtoa_r+0x812>
 80084be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d100      	bne.n	80084c6 <_dtoa_r+0x7da>
 80084c4:	e0b5      	b.n	8008632 <_dtoa_r+0x946>
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	d010      	beq.n	80084ec <_dtoa_r+0x800>
 80084ca:	0039      	movs	r1, r7
 80084cc:	002a      	movs	r2, r5
 80084ce:	9803      	ldr	r0, [sp, #12]
 80084d0:	f000 fccc 	bl	8008e6c <__pow5mult>
 80084d4:	9a05      	ldr	r2, [sp, #20]
 80084d6:	0001      	movs	r1, r0
 80084d8:	0007      	movs	r7, r0
 80084da:	9803      	ldr	r0, [sp, #12]
 80084dc:	f000 fc14 	bl	8008d08 <__multiply>
 80084e0:	0006      	movs	r6, r0
 80084e2:	9905      	ldr	r1, [sp, #20]
 80084e4:	9803      	ldr	r0, [sp, #12]
 80084e6:	f000 fb3f 	bl	8008b68 <_Bfree>
 80084ea:	9605      	str	r6, [sp, #20]
 80084ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ee:	1b5a      	subs	r2, r3, r5
 80084f0:	42ab      	cmp	r3, r5
 80084f2:	d004      	beq.n	80084fe <_dtoa_r+0x812>
 80084f4:	9905      	ldr	r1, [sp, #20]
 80084f6:	9803      	ldr	r0, [sp, #12]
 80084f8:	f000 fcb8 	bl	8008e6c <__pow5mult>
 80084fc:	9005      	str	r0, [sp, #20]
 80084fe:	2101      	movs	r1, #1
 8008500:	9803      	ldr	r0, [sp, #12]
 8008502:	f000 fbe9 	bl	8008cd8 <__i2b>
 8008506:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008508:	0006      	movs	r6, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d100      	bne.n	8008510 <_dtoa_r+0x824>
 800850e:	e1bc      	b.n	800888a <_dtoa_r+0xb9e>
 8008510:	001a      	movs	r2, r3
 8008512:	0001      	movs	r1, r0
 8008514:	9803      	ldr	r0, [sp, #12]
 8008516:	f000 fca9 	bl	8008e6c <__pow5mult>
 800851a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800851c:	0006      	movs	r6, r0
 800851e:	2500      	movs	r5, #0
 8008520:	2b01      	cmp	r3, #1
 8008522:	dc16      	bgt.n	8008552 <_dtoa_r+0x866>
 8008524:	2500      	movs	r5, #0
 8008526:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008528:	42ab      	cmp	r3, r5
 800852a:	d10e      	bne.n	800854a <_dtoa_r+0x85e>
 800852c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800852e:	031b      	lsls	r3, r3, #12
 8008530:	42ab      	cmp	r3, r5
 8008532:	d10a      	bne.n	800854a <_dtoa_r+0x85e>
 8008534:	4b8d      	ldr	r3, [pc, #564]	@ (800876c <_dtoa_r+0xa80>)
 8008536:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008538:	4213      	tst	r3, r2
 800853a:	d006      	beq.n	800854a <_dtoa_r+0x85e>
 800853c:	9b06      	ldr	r3, [sp, #24]
 800853e:	3501      	adds	r5, #1
 8008540:	3301      	adds	r3, #1
 8008542:	9306      	str	r3, [sp, #24]
 8008544:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008546:	3301      	adds	r3, #1
 8008548:	930d      	str	r3, [sp, #52]	@ 0x34
 800854a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800854c:	2001      	movs	r0, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <_dtoa_r+0x878>
 8008552:	6933      	ldr	r3, [r6, #16]
 8008554:	3303      	adds	r3, #3
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	18f3      	adds	r3, r6, r3
 800855a:	6858      	ldr	r0, [r3, #4]
 800855c:	f000 fb6c 	bl	8008c38 <__hi0bits>
 8008560:	2320      	movs	r3, #32
 8008562:	1a18      	subs	r0, r3, r0
 8008564:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008566:	1818      	adds	r0, r3, r0
 8008568:	0002      	movs	r2, r0
 800856a:	231f      	movs	r3, #31
 800856c:	401a      	ands	r2, r3
 800856e:	4218      	tst	r0, r3
 8008570:	d065      	beq.n	800863e <_dtoa_r+0x952>
 8008572:	3301      	adds	r3, #1
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	2b04      	cmp	r3, #4
 8008578:	dd5d      	ble.n	8008636 <_dtoa_r+0x94a>
 800857a:	231c      	movs	r3, #28
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	9a06      	ldr	r2, [sp, #24]
 8008580:	18e4      	adds	r4, r4, r3
 8008582:	18d2      	adds	r2, r2, r3
 8008584:	9206      	str	r2, [sp, #24]
 8008586:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008588:	18d3      	adds	r3, r2, r3
 800858a:	930d      	str	r3, [sp, #52]	@ 0x34
 800858c:	9b06      	ldr	r3, [sp, #24]
 800858e:	2b00      	cmp	r3, #0
 8008590:	dd05      	ble.n	800859e <_dtoa_r+0x8b2>
 8008592:	001a      	movs	r2, r3
 8008594:	9905      	ldr	r1, [sp, #20]
 8008596:	9803      	ldr	r0, [sp, #12]
 8008598:	f000 fcc4 	bl	8008f24 <__lshift>
 800859c:	9005      	str	r0, [sp, #20]
 800859e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dd05      	ble.n	80085b0 <_dtoa_r+0x8c4>
 80085a4:	0031      	movs	r1, r6
 80085a6:	001a      	movs	r2, r3
 80085a8:	9803      	ldr	r0, [sp, #12]
 80085aa:	f000 fcbb 	bl	8008f24 <__lshift>
 80085ae:	0006      	movs	r6, r0
 80085b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d045      	beq.n	8008642 <_dtoa_r+0x956>
 80085b6:	0031      	movs	r1, r6
 80085b8:	9805      	ldr	r0, [sp, #20]
 80085ba:	f000 fd1f 	bl	8008ffc <__mcmp>
 80085be:	2800      	cmp	r0, #0
 80085c0:	da3f      	bge.n	8008642 <_dtoa_r+0x956>
 80085c2:	9b04      	ldr	r3, [sp, #16]
 80085c4:	220a      	movs	r2, #10
 80085c6:	3b01      	subs	r3, #1
 80085c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80085ca:	9905      	ldr	r1, [sp, #20]
 80085cc:	2300      	movs	r3, #0
 80085ce:	9803      	ldr	r0, [sp, #12]
 80085d0:	f000 faee 	bl	8008bb0 <__multadd>
 80085d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80085d6:	9005      	str	r0, [sp, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d100      	bne.n	80085de <_dtoa_r+0x8f2>
 80085dc:	e15c      	b.n	8008898 <_dtoa_r+0xbac>
 80085de:	2300      	movs	r3, #0
 80085e0:	0039      	movs	r1, r7
 80085e2:	220a      	movs	r2, #10
 80085e4:	9803      	ldr	r0, [sp, #12]
 80085e6:	f000 fae3 	bl	8008bb0 <__multadd>
 80085ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ec:	0007      	movs	r7, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dc55      	bgt.n	800869e <_dtoa_r+0x9b2>
 80085f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	dc2d      	bgt.n	8008654 <_dtoa_r+0x968>
 80085f8:	e051      	b.n	800869e <_dtoa_r+0x9b2>
 80085fa:	2336      	movs	r3, #54	@ 0x36
 80085fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008600:	9c06      	ldr	r4, [sp, #24]
 8008602:	1a9b      	subs	r3, r3, r2
 8008604:	e73c      	b.n	8008480 <_dtoa_r+0x794>
 8008606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008608:	1e5d      	subs	r5, r3, #1
 800860a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800860c:	42ab      	cmp	r3, r5
 800860e:	db08      	blt.n	8008622 <_dtoa_r+0x936>
 8008610:	1b5d      	subs	r5, r3, r5
 8008612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008614:	9c06      	ldr	r4, [sp, #24]
 8008616:	2b00      	cmp	r3, #0
 8008618:	db00      	blt.n	800861c <_dtoa_r+0x930>
 800861a:	e731      	b.n	8008480 <_dtoa_r+0x794>
 800861c:	1ae4      	subs	r4, r4, r3
 800861e:	2300      	movs	r3, #0
 8008620:	e72e      	b.n	8008480 <_dtoa_r+0x794>
 8008622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008624:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008626:	1aeb      	subs	r3, r5, r3
 8008628:	18d3      	adds	r3, r2, r3
 800862a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800862c:	9314      	str	r3, [sp, #80]	@ 0x50
 800862e:	2500      	movs	r5, #0
 8008630:	e7ef      	b.n	8008612 <_dtoa_r+0x926>
 8008632:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008634:	e75e      	b.n	80084f4 <_dtoa_r+0x808>
 8008636:	2b04      	cmp	r3, #4
 8008638:	d0a8      	beq.n	800858c <_dtoa_r+0x8a0>
 800863a:	331c      	adds	r3, #28
 800863c:	e79f      	b.n	800857e <_dtoa_r+0x892>
 800863e:	0013      	movs	r3, r2
 8008640:	e7fb      	b.n	800863a <_dtoa_r+0x94e>
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	930c      	str	r3, [sp, #48]	@ 0x30
 8008646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008648:	930e      	str	r3, [sp, #56]	@ 0x38
 800864a:	2b00      	cmp	r3, #0
 800864c:	dc23      	bgt.n	8008696 <_dtoa_r+0x9aa>
 800864e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008650:	2b02      	cmp	r3, #2
 8008652:	dd20      	ble.n	8008696 <_dtoa_r+0x9aa>
 8008654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008656:	2b00      	cmp	r3, #0
 8008658:	d000      	beq.n	800865c <_dtoa_r+0x970>
 800865a:	e6b5      	b.n	80083c8 <_dtoa_r+0x6dc>
 800865c:	0031      	movs	r1, r6
 800865e:	2205      	movs	r2, #5
 8008660:	9803      	ldr	r0, [sp, #12]
 8008662:	f000 faa5 	bl	8008bb0 <__multadd>
 8008666:	0006      	movs	r6, r0
 8008668:	0001      	movs	r1, r0
 800866a:	9805      	ldr	r0, [sp, #20]
 800866c:	f000 fcc6 	bl	8008ffc <__mcmp>
 8008670:	2800      	cmp	r0, #0
 8008672:	dc00      	bgt.n	8008676 <_dtoa_r+0x98a>
 8008674:	e6a8      	b.n	80083c8 <_dtoa_r+0x6dc>
 8008676:	9b08      	ldr	r3, [sp, #32]
 8008678:	9a08      	ldr	r2, [sp, #32]
 800867a:	1c5c      	adds	r4, r3, #1
 800867c:	2331      	movs	r3, #49	@ 0x31
 800867e:	7013      	strb	r3, [r2, #0]
 8008680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008682:	3301      	adds	r3, #1
 8008684:	930c      	str	r3, [sp, #48]	@ 0x30
 8008686:	e6a3      	b.n	80083d0 <_dtoa_r+0x6e4>
 8008688:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800868a:	0037      	movs	r7, r6
 800868c:	e7f3      	b.n	8008676 <_dtoa_r+0x98a>
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008692:	930c      	str	r3, [sp, #48]	@ 0x30
 8008694:	e7f9      	b.n	800868a <_dtoa_r+0x99e>
 8008696:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008698:	2b00      	cmp	r3, #0
 800869a:	d100      	bne.n	800869e <_dtoa_r+0x9b2>
 800869c:	e100      	b.n	80088a0 <_dtoa_r+0xbb4>
 800869e:	2c00      	cmp	r4, #0
 80086a0:	dd05      	ble.n	80086ae <_dtoa_r+0x9c2>
 80086a2:	0039      	movs	r1, r7
 80086a4:	0022      	movs	r2, r4
 80086a6:	9803      	ldr	r0, [sp, #12]
 80086a8:	f000 fc3c 	bl	8008f24 <__lshift>
 80086ac:	0007      	movs	r7, r0
 80086ae:	0038      	movs	r0, r7
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	d018      	beq.n	80086e6 <_dtoa_r+0x9fa>
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	9803      	ldr	r0, [sp, #12]
 80086b8:	f000 fa12 	bl	8008ae0 <_Balloc>
 80086bc:	1e04      	subs	r4, r0, #0
 80086be:	d105      	bne.n	80086cc <_dtoa_r+0x9e0>
 80086c0:	0022      	movs	r2, r4
 80086c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008770 <_dtoa_r+0xa84>)
 80086c4:	482b      	ldr	r0, [pc, #172]	@ (8008774 <_dtoa_r+0xa88>)
 80086c6:	492c      	ldr	r1, [pc, #176]	@ (8008778 <_dtoa_r+0xa8c>)
 80086c8:	f7ff fb25 	bl	8007d16 <_dtoa_r+0x2a>
 80086cc:	0039      	movs	r1, r7
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	310c      	adds	r1, #12
 80086d2:	3202      	adds	r2, #2
 80086d4:	0092      	lsls	r2, r2, #2
 80086d6:	300c      	adds	r0, #12
 80086d8:	f000 ffda 	bl	8009690 <memcpy>
 80086dc:	2201      	movs	r2, #1
 80086de:	0021      	movs	r1, r4
 80086e0:	9803      	ldr	r0, [sp, #12]
 80086e2:	f000 fc1f 	bl	8008f24 <__lshift>
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086ea:	9306      	str	r3, [sp, #24]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	189b      	adds	r3, r3, r2
 80086f0:	2201      	movs	r2, #1
 80086f2:	9704      	str	r7, [sp, #16]
 80086f4:	0007      	movs	r7, r0
 80086f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086fa:	4013      	ands	r3, r2
 80086fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80086fe:	0031      	movs	r1, r6
 8008700:	9805      	ldr	r0, [sp, #20]
 8008702:	f7ff fa65 	bl	8007bd0 <quorem>
 8008706:	9904      	ldr	r1, [sp, #16]
 8008708:	0005      	movs	r5, r0
 800870a:	900a      	str	r0, [sp, #40]	@ 0x28
 800870c:	9805      	ldr	r0, [sp, #20]
 800870e:	f000 fc75 	bl	8008ffc <__mcmp>
 8008712:	003a      	movs	r2, r7
 8008714:	900d      	str	r0, [sp, #52]	@ 0x34
 8008716:	0031      	movs	r1, r6
 8008718:	9803      	ldr	r0, [sp, #12]
 800871a:	f000 fc8b 	bl	8009034 <__mdiff>
 800871e:	2201      	movs	r2, #1
 8008720:	68c3      	ldr	r3, [r0, #12]
 8008722:	0004      	movs	r4, r0
 8008724:	3530      	adds	r5, #48	@ 0x30
 8008726:	9209      	str	r2, [sp, #36]	@ 0x24
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <_dtoa_r+0xa4a>
 800872c:	0001      	movs	r1, r0
 800872e:	9805      	ldr	r0, [sp, #20]
 8008730:	f000 fc64 	bl	8008ffc <__mcmp>
 8008734:	9009      	str	r0, [sp, #36]	@ 0x24
 8008736:	0021      	movs	r1, r4
 8008738:	9803      	ldr	r0, [sp, #12]
 800873a:	f000 fa15 	bl	8008b68 <_Bfree>
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008742:	1c5c      	adds	r4, r3, #1
 8008744:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008746:	4313      	orrs	r3, r2
 8008748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800874a:	4313      	orrs	r3, r2
 800874c:	d116      	bne.n	800877c <_dtoa_r+0xa90>
 800874e:	2d39      	cmp	r5, #57	@ 0x39
 8008750:	d02f      	beq.n	80087b2 <_dtoa_r+0xac6>
 8008752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008754:	2b00      	cmp	r3, #0
 8008756:	dd01      	ble.n	800875c <_dtoa_r+0xa70>
 8008758:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800875a:	3531      	adds	r5, #49	@ 0x31
 800875c:	9b06      	ldr	r3, [sp, #24]
 800875e:	701d      	strb	r5, [r3, #0]
 8008760:	e638      	b.n	80083d4 <_dtoa_r+0x6e8>
 8008762:	46c0      	nop			@ (mov r8, r8)
 8008764:	40240000 	.word	0x40240000
 8008768:	00000433 	.word	0x00000433
 800876c:	7ff00000 	.word	0x7ff00000
 8008770:	08009f00 	.word	0x08009f00
 8008774:	08009ea8 	.word	0x08009ea8
 8008778:	000002ef 	.word	0x000002ef
 800877c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800877e:	2b00      	cmp	r3, #0
 8008780:	db04      	blt.n	800878c <_dtoa_r+0xaa0>
 8008782:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008784:	4313      	orrs	r3, r2
 8008786:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008788:	4313      	orrs	r3, r2
 800878a:	d11e      	bne.n	80087ca <_dtoa_r+0xade>
 800878c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	dde4      	ble.n	800875c <_dtoa_r+0xa70>
 8008792:	9905      	ldr	r1, [sp, #20]
 8008794:	2201      	movs	r2, #1
 8008796:	9803      	ldr	r0, [sp, #12]
 8008798:	f000 fbc4 	bl	8008f24 <__lshift>
 800879c:	0031      	movs	r1, r6
 800879e:	9005      	str	r0, [sp, #20]
 80087a0:	f000 fc2c 	bl	8008ffc <__mcmp>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	dc02      	bgt.n	80087ae <_dtoa_r+0xac2>
 80087a8:	d1d8      	bne.n	800875c <_dtoa_r+0xa70>
 80087aa:	07eb      	lsls	r3, r5, #31
 80087ac:	d5d6      	bpl.n	800875c <_dtoa_r+0xa70>
 80087ae:	2d39      	cmp	r5, #57	@ 0x39
 80087b0:	d1d2      	bne.n	8008758 <_dtoa_r+0xa6c>
 80087b2:	2339      	movs	r3, #57	@ 0x39
 80087b4:	9a06      	ldr	r2, [sp, #24]
 80087b6:	7013      	strb	r3, [r2, #0]
 80087b8:	0023      	movs	r3, r4
 80087ba:	001c      	movs	r4, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	781a      	ldrb	r2, [r3, #0]
 80087c0:	2a39      	cmp	r2, #57	@ 0x39
 80087c2:	d04f      	beq.n	8008864 <_dtoa_r+0xb78>
 80087c4:	3201      	adds	r2, #1
 80087c6:	701a      	strb	r2, [r3, #0]
 80087c8:	e604      	b.n	80083d4 <_dtoa_r+0x6e8>
 80087ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd03      	ble.n	80087d8 <_dtoa_r+0xaec>
 80087d0:	2d39      	cmp	r5, #57	@ 0x39
 80087d2:	d0ee      	beq.n	80087b2 <_dtoa_r+0xac6>
 80087d4:	3501      	adds	r5, #1
 80087d6:	e7c1      	b.n	800875c <_dtoa_r+0xa70>
 80087d8:	9b06      	ldr	r3, [sp, #24]
 80087da:	9a06      	ldr	r2, [sp, #24]
 80087dc:	701d      	strb	r5, [r3, #0]
 80087de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d02a      	beq.n	800883a <_dtoa_r+0xb4e>
 80087e4:	2300      	movs	r3, #0
 80087e6:	220a      	movs	r2, #10
 80087e8:	9905      	ldr	r1, [sp, #20]
 80087ea:	9803      	ldr	r0, [sp, #12]
 80087ec:	f000 f9e0 	bl	8008bb0 <__multadd>
 80087f0:	9b04      	ldr	r3, [sp, #16]
 80087f2:	9005      	str	r0, [sp, #20]
 80087f4:	42bb      	cmp	r3, r7
 80087f6:	d109      	bne.n	800880c <_dtoa_r+0xb20>
 80087f8:	2300      	movs	r3, #0
 80087fa:	220a      	movs	r2, #10
 80087fc:	9904      	ldr	r1, [sp, #16]
 80087fe:	9803      	ldr	r0, [sp, #12]
 8008800:	f000 f9d6 	bl	8008bb0 <__multadd>
 8008804:	9004      	str	r0, [sp, #16]
 8008806:	0007      	movs	r7, r0
 8008808:	9406      	str	r4, [sp, #24]
 800880a:	e778      	b.n	80086fe <_dtoa_r+0xa12>
 800880c:	9904      	ldr	r1, [sp, #16]
 800880e:	2300      	movs	r3, #0
 8008810:	220a      	movs	r2, #10
 8008812:	9803      	ldr	r0, [sp, #12]
 8008814:	f000 f9cc 	bl	8008bb0 <__multadd>
 8008818:	2300      	movs	r3, #0
 800881a:	9004      	str	r0, [sp, #16]
 800881c:	220a      	movs	r2, #10
 800881e:	0039      	movs	r1, r7
 8008820:	9803      	ldr	r0, [sp, #12]
 8008822:	f000 f9c5 	bl	8008bb0 <__multadd>
 8008826:	e7ee      	b.n	8008806 <_dtoa_r+0xb1a>
 8008828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800882a:	2401      	movs	r4, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	dd00      	ble.n	8008832 <_dtoa_r+0xb46>
 8008830:	001c      	movs	r4, r3
 8008832:	9b08      	ldr	r3, [sp, #32]
 8008834:	191c      	adds	r4, r3, r4
 8008836:	2300      	movs	r3, #0
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	9905      	ldr	r1, [sp, #20]
 800883c:	2201      	movs	r2, #1
 800883e:	9803      	ldr	r0, [sp, #12]
 8008840:	f000 fb70 	bl	8008f24 <__lshift>
 8008844:	0031      	movs	r1, r6
 8008846:	9005      	str	r0, [sp, #20]
 8008848:	f000 fbd8 	bl	8008ffc <__mcmp>
 800884c:	2800      	cmp	r0, #0
 800884e:	dcb3      	bgt.n	80087b8 <_dtoa_r+0xacc>
 8008850:	d101      	bne.n	8008856 <_dtoa_r+0xb6a>
 8008852:	07ed      	lsls	r5, r5, #31
 8008854:	d4b0      	bmi.n	80087b8 <_dtoa_r+0xacc>
 8008856:	0023      	movs	r3, r4
 8008858:	001c      	movs	r4, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	781a      	ldrb	r2, [r3, #0]
 800885e:	2a30      	cmp	r2, #48	@ 0x30
 8008860:	d0fa      	beq.n	8008858 <_dtoa_r+0xb6c>
 8008862:	e5b7      	b.n	80083d4 <_dtoa_r+0x6e8>
 8008864:	9a08      	ldr	r2, [sp, #32]
 8008866:	429a      	cmp	r2, r3
 8008868:	d1a7      	bne.n	80087ba <_dtoa_r+0xace>
 800886a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800886c:	3301      	adds	r3, #1
 800886e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008870:	2331      	movs	r3, #49	@ 0x31
 8008872:	7013      	strb	r3, [r2, #0]
 8008874:	e5ae      	b.n	80083d4 <_dtoa_r+0x6e8>
 8008876:	4b15      	ldr	r3, [pc, #84]	@ (80088cc <_dtoa_r+0xbe0>)
 8008878:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800887a:	9308      	str	r3, [sp, #32]
 800887c:	4b14      	ldr	r3, [pc, #80]	@ (80088d0 <_dtoa_r+0xbe4>)
 800887e:	2a00      	cmp	r2, #0
 8008880:	d001      	beq.n	8008886 <_dtoa_r+0xb9a>
 8008882:	f7ff fa7b 	bl	8007d7c <_dtoa_r+0x90>
 8008886:	f7ff fa7b 	bl	8007d80 <_dtoa_r+0x94>
 800888a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800888c:	2b01      	cmp	r3, #1
 800888e:	dc00      	bgt.n	8008892 <_dtoa_r+0xba6>
 8008890:	e648      	b.n	8008524 <_dtoa_r+0x838>
 8008892:	2001      	movs	r0, #1
 8008894:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008896:	e665      	b.n	8008564 <_dtoa_r+0x878>
 8008898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800889a:	2b00      	cmp	r3, #0
 800889c:	dc00      	bgt.n	80088a0 <_dtoa_r+0xbb4>
 800889e:	e6d6      	b.n	800864e <_dtoa_r+0x962>
 80088a0:	2400      	movs	r4, #0
 80088a2:	0031      	movs	r1, r6
 80088a4:	9805      	ldr	r0, [sp, #20]
 80088a6:	f7ff f993 	bl	8007bd0 <quorem>
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	3030      	adds	r0, #48	@ 0x30
 80088ae:	5518      	strb	r0, [r3, r4]
 80088b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088b2:	3401      	adds	r4, #1
 80088b4:	0005      	movs	r5, r0
 80088b6:	429c      	cmp	r4, r3
 80088b8:	dab6      	bge.n	8008828 <_dtoa_r+0xb3c>
 80088ba:	2300      	movs	r3, #0
 80088bc:	220a      	movs	r2, #10
 80088be:	9905      	ldr	r1, [sp, #20]
 80088c0:	9803      	ldr	r0, [sp, #12]
 80088c2:	f000 f975 	bl	8008bb0 <__multadd>
 80088c6:	9005      	str	r0, [sp, #20]
 80088c8:	e7eb      	b.n	80088a2 <_dtoa_r+0xbb6>
 80088ca:	46c0      	nop			@ (mov r8, r8)
 80088cc:	08009e84 	.word	0x08009e84
 80088d0:	08009e8c 	.word	0x08009e8c

080088d4 <_free_r>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	0005      	movs	r5, r0
 80088d8:	1e0c      	subs	r4, r1, #0
 80088da:	d010      	beq.n	80088fe <_free_r+0x2a>
 80088dc:	3c04      	subs	r4, #4
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	da00      	bge.n	80088e6 <_free_r+0x12>
 80088e4:	18e4      	adds	r4, r4, r3
 80088e6:	0028      	movs	r0, r5
 80088e8:	f000 f8ea 	bl	8008ac0 <__malloc_lock>
 80088ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008964 <_free_r+0x90>)
 80088ee:	6813      	ldr	r3, [r2, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d105      	bne.n	8008900 <_free_r+0x2c>
 80088f4:	6063      	str	r3, [r4, #4]
 80088f6:	6014      	str	r4, [r2, #0]
 80088f8:	0028      	movs	r0, r5
 80088fa:	f000 f8e9 	bl	8008ad0 <__malloc_unlock>
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	42a3      	cmp	r3, r4
 8008902:	d908      	bls.n	8008916 <_free_r+0x42>
 8008904:	6820      	ldr	r0, [r4, #0]
 8008906:	1821      	adds	r1, r4, r0
 8008908:	428b      	cmp	r3, r1
 800890a:	d1f3      	bne.n	80088f4 <_free_r+0x20>
 800890c:	6819      	ldr	r1, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	1809      	adds	r1, r1, r0
 8008912:	6021      	str	r1, [r4, #0]
 8008914:	e7ee      	b.n	80088f4 <_free_r+0x20>
 8008916:	001a      	movs	r2, r3
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <_free_r+0x4e>
 800891e:	42a3      	cmp	r3, r4
 8008920:	d9f9      	bls.n	8008916 <_free_r+0x42>
 8008922:	6811      	ldr	r1, [r2, #0]
 8008924:	1850      	adds	r0, r2, r1
 8008926:	42a0      	cmp	r0, r4
 8008928:	d10b      	bne.n	8008942 <_free_r+0x6e>
 800892a:	6820      	ldr	r0, [r4, #0]
 800892c:	1809      	adds	r1, r1, r0
 800892e:	1850      	adds	r0, r2, r1
 8008930:	6011      	str	r1, [r2, #0]
 8008932:	4283      	cmp	r3, r0
 8008934:	d1e0      	bne.n	80088f8 <_free_r+0x24>
 8008936:	6818      	ldr	r0, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	1841      	adds	r1, r0, r1
 800893c:	6011      	str	r1, [r2, #0]
 800893e:	6053      	str	r3, [r2, #4]
 8008940:	e7da      	b.n	80088f8 <_free_r+0x24>
 8008942:	42a0      	cmp	r0, r4
 8008944:	d902      	bls.n	800894c <_free_r+0x78>
 8008946:	230c      	movs	r3, #12
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	e7d5      	b.n	80088f8 <_free_r+0x24>
 800894c:	6820      	ldr	r0, [r4, #0]
 800894e:	1821      	adds	r1, r4, r0
 8008950:	428b      	cmp	r3, r1
 8008952:	d103      	bne.n	800895c <_free_r+0x88>
 8008954:	6819      	ldr	r1, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	1809      	adds	r1, r1, r0
 800895a:	6021      	str	r1, [r4, #0]
 800895c:	6063      	str	r3, [r4, #4]
 800895e:	6054      	str	r4, [r2, #4]
 8008960:	e7ca      	b.n	80088f8 <_free_r+0x24>
 8008962:	46c0      	nop			@ (mov r8, r8)
 8008964:	20000664 	.word	0x20000664

08008968 <malloc>:
 8008968:	b510      	push	{r4, lr}
 800896a:	4b03      	ldr	r3, [pc, #12]	@ (8008978 <malloc+0x10>)
 800896c:	0001      	movs	r1, r0
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	f000 f826 	bl	80089c0 <_malloc_r>
 8008974:	bd10      	pop	{r4, pc}
 8008976:	46c0      	nop			@ (mov r8, r8)
 8008978:	20000018 	.word	0x20000018

0800897c <sbrk_aligned>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	4e0f      	ldr	r6, [pc, #60]	@ (80089bc <sbrk_aligned+0x40>)
 8008980:	000d      	movs	r5, r1
 8008982:	6831      	ldr	r1, [r6, #0]
 8008984:	0004      	movs	r4, r0
 8008986:	2900      	cmp	r1, #0
 8008988:	d102      	bne.n	8008990 <sbrk_aligned+0x14>
 800898a:	f000 fe6f 	bl	800966c <_sbrk_r>
 800898e:	6030      	str	r0, [r6, #0]
 8008990:	0029      	movs	r1, r5
 8008992:	0020      	movs	r0, r4
 8008994:	f000 fe6a 	bl	800966c <_sbrk_r>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d103      	bne.n	80089a4 <sbrk_aligned+0x28>
 800899c:	2501      	movs	r5, #1
 800899e:	426d      	negs	r5, r5
 80089a0:	0028      	movs	r0, r5
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	2303      	movs	r3, #3
 80089a6:	1cc5      	adds	r5, r0, #3
 80089a8:	439d      	bics	r5, r3
 80089aa:	42a8      	cmp	r0, r5
 80089ac:	d0f8      	beq.n	80089a0 <sbrk_aligned+0x24>
 80089ae:	1a29      	subs	r1, r5, r0
 80089b0:	0020      	movs	r0, r4
 80089b2:	f000 fe5b 	bl	800966c <_sbrk_r>
 80089b6:	3001      	adds	r0, #1
 80089b8:	d1f2      	bne.n	80089a0 <sbrk_aligned+0x24>
 80089ba:	e7ef      	b.n	800899c <sbrk_aligned+0x20>
 80089bc:	20000660 	.word	0x20000660

080089c0 <_malloc_r>:
 80089c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089c2:	2203      	movs	r2, #3
 80089c4:	1ccb      	adds	r3, r1, #3
 80089c6:	4393      	bics	r3, r2
 80089c8:	3308      	adds	r3, #8
 80089ca:	0005      	movs	r5, r0
 80089cc:	001f      	movs	r7, r3
 80089ce:	2b0c      	cmp	r3, #12
 80089d0:	d234      	bcs.n	8008a3c <_malloc_r+0x7c>
 80089d2:	270c      	movs	r7, #12
 80089d4:	42b9      	cmp	r1, r7
 80089d6:	d833      	bhi.n	8008a40 <_malloc_r+0x80>
 80089d8:	0028      	movs	r0, r5
 80089da:	f000 f871 	bl	8008ac0 <__malloc_lock>
 80089de:	4e37      	ldr	r6, [pc, #220]	@ (8008abc <_malloc_r+0xfc>)
 80089e0:	6833      	ldr	r3, [r6, #0]
 80089e2:	001c      	movs	r4, r3
 80089e4:	2c00      	cmp	r4, #0
 80089e6:	d12f      	bne.n	8008a48 <_malloc_r+0x88>
 80089e8:	0039      	movs	r1, r7
 80089ea:	0028      	movs	r0, r5
 80089ec:	f7ff ffc6 	bl	800897c <sbrk_aligned>
 80089f0:	0004      	movs	r4, r0
 80089f2:	1c43      	adds	r3, r0, #1
 80089f4:	d15f      	bne.n	8008ab6 <_malloc_r+0xf6>
 80089f6:	6834      	ldr	r4, [r6, #0]
 80089f8:	9400      	str	r4, [sp, #0]
 80089fa:	9b00      	ldr	r3, [sp, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d14a      	bne.n	8008a96 <_malloc_r+0xd6>
 8008a00:	2c00      	cmp	r4, #0
 8008a02:	d052      	beq.n	8008aaa <_malloc_r+0xea>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	0028      	movs	r0, r5
 8008a08:	18e3      	adds	r3, r4, r3
 8008a0a:	9900      	ldr	r1, [sp, #0]
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	f000 fe2d 	bl	800966c <_sbrk_r>
 8008a12:	9b01      	ldr	r3, [sp, #4]
 8008a14:	4283      	cmp	r3, r0
 8008a16:	d148      	bne.n	8008aaa <_malloc_r+0xea>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	0028      	movs	r0, r5
 8008a1c:	1aff      	subs	r7, r7, r3
 8008a1e:	0039      	movs	r1, r7
 8008a20:	f7ff ffac 	bl	800897c <sbrk_aligned>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d040      	beq.n	8008aaa <_malloc_r+0xea>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	19db      	adds	r3, r3, r7
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	6833      	ldr	r3, [r6, #0]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	d133      	bne.n	8008a9e <_malloc_r+0xde>
 8008a36:	9b00      	ldr	r3, [sp, #0]
 8008a38:	6033      	str	r3, [r6, #0]
 8008a3a:	e019      	b.n	8008a70 <_malloc_r+0xb0>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dac9      	bge.n	80089d4 <_malloc_r+0x14>
 8008a40:	230c      	movs	r3, #12
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	2000      	movs	r0, #0
 8008a46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a48:	6821      	ldr	r1, [r4, #0]
 8008a4a:	1bc9      	subs	r1, r1, r7
 8008a4c:	d420      	bmi.n	8008a90 <_malloc_r+0xd0>
 8008a4e:	290b      	cmp	r1, #11
 8008a50:	d90a      	bls.n	8008a68 <_malloc_r+0xa8>
 8008a52:	19e2      	adds	r2, r4, r7
 8008a54:	6027      	str	r7, [r4, #0]
 8008a56:	42a3      	cmp	r3, r4
 8008a58:	d104      	bne.n	8008a64 <_malloc_r+0xa4>
 8008a5a:	6032      	str	r2, [r6, #0]
 8008a5c:	6863      	ldr	r3, [r4, #4]
 8008a5e:	6011      	str	r1, [r2, #0]
 8008a60:	6053      	str	r3, [r2, #4]
 8008a62:	e005      	b.n	8008a70 <_malloc_r+0xb0>
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	e7f9      	b.n	8008a5c <_malloc_r+0x9c>
 8008a68:	6862      	ldr	r2, [r4, #4]
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	d10e      	bne.n	8008a8c <_malloc_r+0xcc>
 8008a6e:	6032      	str	r2, [r6, #0]
 8008a70:	0028      	movs	r0, r5
 8008a72:	f000 f82d 	bl	8008ad0 <__malloc_unlock>
 8008a76:	0020      	movs	r0, r4
 8008a78:	2207      	movs	r2, #7
 8008a7a:	300b      	adds	r0, #11
 8008a7c:	1d23      	adds	r3, r4, #4
 8008a7e:	4390      	bics	r0, r2
 8008a80:	1ac2      	subs	r2, r0, r3
 8008a82:	4298      	cmp	r0, r3
 8008a84:	d0df      	beq.n	8008a46 <_malloc_r+0x86>
 8008a86:	1a1b      	subs	r3, r3, r0
 8008a88:	50a3      	str	r3, [r4, r2]
 8008a8a:	e7dc      	b.n	8008a46 <_malloc_r+0x86>
 8008a8c:	605a      	str	r2, [r3, #4]
 8008a8e:	e7ef      	b.n	8008a70 <_malloc_r+0xb0>
 8008a90:	0023      	movs	r3, r4
 8008a92:	6864      	ldr	r4, [r4, #4]
 8008a94:	e7a6      	b.n	80089e4 <_malloc_r+0x24>
 8008a96:	9c00      	ldr	r4, [sp, #0]
 8008a98:	6863      	ldr	r3, [r4, #4]
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	e7ad      	b.n	80089fa <_malloc_r+0x3a>
 8008a9e:	001a      	movs	r2, r3
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	42a3      	cmp	r3, r4
 8008aa4:	d1fb      	bne.n	8008a9e <_malloc_r+0xde>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	e7da      	b.n	8008a60 <_malloc_r+0xa0>
 8008aaa:	230c      	movs	r3, #12
 8008aac:	0028      	movs	r0, r5
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	f000 f80e 	bl	8008ad0 <__malloc_unlock>
 8008ab4:	e7c6      	b.n	8008a44 <_malloc_r+0x84>
 8008ab6:	6007      	str	r7, [r0, #0]
 8008ab8:	e7da      	b.n	8008a70 <_malloc_r+0xb0>
 8008aba:	46c0      	nop			@ (mov r8, r8)
 8008abc:	20000664 	.word	0x20000664

08008ac0 <__malloc_lock>:
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	4802      	ldr	r0, [pc, #8]	@ (8008acc <__malloc_lock+0xc>)
 8008ac4:	f7ff f877 	bl	8007bb6 <__retarget_lock_acquire_recursive>
 8008ac8:	bd10      	pop	{r4, pc}
 8008aca:	46c0      	nop			@ (mov r8, r8)
 8008acc:	2000065c 	.word	0x2000065c

08008ad0 <__malloc_unlock>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	4802      	ldr	r0, [pc, #8]	@ (8008adc <__malloc_unlock+0xc>)
 8008ad4:	f7ff f870 	bl	8007bb8 <__retarget_lock_release_recursive>
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	46c0      	nop			@ (mov r8, r8)
 8008adc:	2000065c 	.word	0x2000065c

08008ae0 <_Balloc>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	69c5      	ldr	r5, [r0, #28]
 8008ae4:	0006      	movs	r6, r0
 8008ae6:	000c      	movs	r4, r1
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	d10e      	bne.n	8008b0a <_Balloc+0x2a>
 8008aec:	2010      	movs	r0, #16
 8008aee:	f7ff ff3b 	bl	8008968 <malloc>
 8008af2:	1e02      	subs	r2, r0, #0
 8008af4:	61f0      	str	r0, [r6, #28]
 8008af6:	d104      	bne.n	8008b02 <_Balloc+0x22>
 8008af8:	216b      	movs	r1, #107	@ 0x6b
 8008afa:	4b19      	ldr	r3, [pc, #100]	@ (8008b60 <_Balloc+0x80>)
 8008afc:	4819      	ldr	r0, [pc, #100]	@ (8008b64 <_Balloc+0x84>)
 8008afe:	f000 fdd1 	bl	80096a4 <__assert_func>
 8008b02:	6045      	str	r5, [r0, #4]
 8008b04:	6085      	str	r5, [r0, #8]
 8008b06:	6005      	str	r5, [r0, #0]
 8008b08:	60c5      	str	r5, [r0, #12]
 8008b0a:	69f5      	ldr	r5, [r6, #28]
 8008b0c:	68eb      	ldr	r3, [r5, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d013      	beq.n	8008b3a <_Balloc+0x5a>
 8008b12:	69f3      	ldr	r3, [r6, #28]
 8008b14:	00a2      	lsls	r2, r4, #2
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	189b      	adds	r3, r3, r2
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d118      	bne.n	8008b52 <_Balloc+0x72>
 8008b20:	2101      	movs	r1, #1
 8008b22:	000d      	movs	r5, r1
 8008b24:	40a5      	lsls	r5, r4
 8008b26:	1d6a      	adds	r2, r5, #5
 8008b28:	0030      	movs	r0, r6
 8008b2a:	0092      	lsls	r2, r2, #2
 8008b2c:	f000 fdd8 	bl	80096e0 <_calloc_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d00c      	beq.n	8008b4e <_Balloc+0x6e>
 8008b34:	6044      	str	r4, [r0, #4]
 8008b36:	6085      	str	r5, [r0, #8]
 8008b38:	e00d      	b.n	8008b56 <_Balloc+0x76>
 8008b3a:	2221      	movs	r2, #33	@ 0x21
 8008b3c:	2104      	movs	r1, #4
 8008b3e:	0030      	movs	r0, r6
 8008b40:	f000 fdce 	bl	80096e0 <_calloc_r>
 8008b44:	69f3      	ldr	r3, [r6, #28]
 8008b46:	60e8      	str	r0, [r5, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e1      	bne.n	8008b12 <_Balloc+0x32>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	bd70      	pop	{r4, r5, r6, pc}
 8008b52:	6802      	ldr	r2, [r0, #0]
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	2300      	movs	r3, #0
 8008b58:	6103      	str	r3, [r0, #16]
 8008b5a:	60c3      	str	r3, [r0, #12]
 8008b5c:	e7f8      	b.n	8008b50 <_Balloc+0x70>
 8008b5e:	46c0      	nop			@ (mov r8, r8)
 8008b60:	08009e91 	.word	0x08009e91
 8008b64:	08009f11 	.word	0x08009f11

08008b68 <_Bfree>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	69c6      	ldr	r6, [r0, #28]
 8008b6c:	0005      	movs	r5, r0
 8008b6e:	000c      	movs	r4, r1
 8008b70:	2e00      	cmp	r6, #0
 8008b72:	d10e      	bne.n	8008b92 <_Bfree+0x2a>
 8008b74:	2010      	movs	r0, #16
 8008b76:	f7ff fef7 	bl	8008968 <malloc>
 8008b7a:	1e02      	subs	r2, r0, #0
 8008b7c:	61e8      	str	r0, [r5, #28]
 8008b7e:	d104      	bne.n	8008b8a <_Bfree+0x22>
 8008b80:	218f      	movs	r1, #143	@ 0x8f
 8008b82:	4b09      	ldr	r3, [pc, #36]	@ (8008ba8 <_Bfree+0x40>)
 8008b84:	4809      	ldr	r0, [pc, #36]	@ (8008bac <_Bfree+0x44>)
 8008b86:	f000 fd8d 	bl	80096a4 <__assert_func>
 8008b8a:	6046      	str	r6, [r0, #4]
 8008b8c:	6086      	str	r6, [r0, #8]
 8008b8e:	6006      	str	r6, [r0, #0]
 8008b90:	60c6      	str	r6, [r0, #12]
 8008b92:	2c00      	cmp	r4, #0
 8008b94:	d007      	beq.n	8008ba6 <_Bfree+0x3e>
 8008b96:	69eb      	ldr	r3, [r5, #28]
 8008b98:	6862      	ldr	r2, [r4, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	0092      	lsls	r2, r2, #2
 8008b9e:	189b      	adds	r3, r3, r2
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	6022      	str	r2, [r4, #0]
 8008ba4:	601c      	str	r4, [r3, #0]
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	08009e91 	.word	0x08009e91
 8008bac:	08009f11 	.word	0x08009f11

08008bb0 <__multadd>:
 8008bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb2:	000f      	movs	r7, r1
 8008bb4:	9001      	str	r0, [sp, #4]
 8008bb6:	000c      	movs	r4, r1
 8008bb8:	001e      	movs	r6, r3
 8008bba:	2000      	movs	r0, #0
 8008bbc:	690d      	ldr	r5, [r1, #16]
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	b299      	uxth	r1, r3
 8008bc6:	4351      	muls	r1, r2
 8008bc8:	0c1b      	lsrs	r3, r3, #16
 8008bca:	4353      	muls	r3, r2
 8008bcc:	1989      	adds	r1, r1, r6
 8008bce:	0c0e      	lsrs	r6, r1, #16
 8008bd0:	199b      	adds	r3, r3, r6
 8008bd2:	0c1e      	lsrs	r6, r3, #16
 8008bd4:	b289      	uxth	r1, r1
 8008bd6:	041b      	lsls	r3, r3, #16
 8008bd8:	185b      	adds	r3, r3, r1
 8008bda:	c708      	stmia	r7!, {r3}
 8008bdc:	4285      	cmp	r5, r0
 8008bde:	dcef      	bgt.n	8008bc0 <__multadd+0x10>
 8008be0:	2e00      	cmp	r6, #0
 8008be2:	d022      	beq.n	8008c2a <__multadd+0x7a>
 8008be4:	68a3      	ldr	r3, [r4, #8]
 8008be6:	42ab      	cmp	r3, r5
 8008be8:	dc19      	bgt.n	8008c1e <__multadd+0x6e>
 8008bea:	6861      	ldr	r1, [r4, #4]
 8008bec:	9801      	ldr	r0, [sp, #4]
 8008bee:	3101      	adds	r1, #1
 8008bf0:	f7ff ff76 	bl	8008ae0 <_Balloc>
 8008bf4:	1e07      	subs	r7, r0, #0
 8008bf6:	d105      	bne.n	8008c04 <__multadd+0x54>
 8008bf8:	003a      	movs	r2, r7
 8008bfa:	21ba      	movs	r1, #186	@ 0xba
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008c30 <__multadd+0x80>)
 8008bfe:	480d      	ldr	r0, [pc, #52]	@ (8008c34 <__multadd+0x84>)
 8008c00:	f000 fd50 	bl	80096a4 <__assert_func>
 8008c04:	0021      	movs	r1, r4
 8008c06:	6922      	ldr	r2, [r4, #16]
 8008c08:	310c      	adds	r1, #12
 8008c0a:	3202      	adds	r2, #2
 8008c0c:	0092      	lsls	r2, r2, #2
 8008c0e:	300c      	adds	r0, #12
 8008c10:	f000 fd3e 	bl	8009690 <memcpy>
 8008c14:	0021      	movs	r1, r4
 8008c16:	9801      	ldr	r0, [sp, #4]
 8008c18:	f7ff ffa6 	bl	8008b68 <_Bfree>
 8008c1c:	003c      	movs	r4, r7
 8008c1e:	1d2b      	adds	r3, r5, #4
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	18e3      	adds	r3, r4, r3
 8008c24:	3501      	adds	r5, #1
 8008c26:	605e      	str	r6, [r3, #4]
 8008c28:	6125      	str	r5, [r4, #16]
 8008c2a:	0020      	movs	r0, r4
 8008c2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c2e:	46c0      	nop			@ (mov r8, r8)
 8008c30:	08009f00 	.word	0x08009f00
 8008c34:	08009f11 	.word	0x08009f11

08008c38 <__hi0bits>:
 8008c38:	2280      	movs	r2, #128	@ 0x80
 8008c3a:	0003      	movs	r3, r0
 8008c3c:	0252      	lsls	r2, r2, #9
 8008c3e:	2000      	movs	r0, #0
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d201      	bcs.n	8008c48 <__hi0bits+0x10>
 8008c44:	041b      	lsls	r3, r3, #16
 8008c46:	3010      	adds	r0, #16
 8008c48:	2280      	movs	r2, #128	@ 0x80
 8008c4a:	0452      	lsls	r2, r2, #17
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d201      	bcs.n	8008c54 <__hi0bits+0x1c>
 8008c50:	3008      	adds	r0, #8
 8008c52:	021b      	lsls	r3, r3, #8
 8008c54:	2280      	movs	r2, #128	@ 0x80
 8008c56:	0552      	lsls	r2, r2, #21
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d201      	bcs.n	8008c60 <__hi0bits+0x28>
 8008c5c:	3004      	adds	r0, #4
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	2280      	movs	r2, #128	@ 0x80
 8008c62:	05d2      	lsls	r2, r2, #23
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d201      	bcs.n	8008c6c <__hi0bits+0x34>
 8008c68:	3002      	adds	r0, #2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	db03      	blt.n	8008c78 <__hi0bits+0x40>
 8008c70:	3001      	adds	r0, #1
 8008c72:	4213      	tst	r3, r2
 8008c74:	d100      	bne.n	8008c78 <__hi0bits+0x40>
 8008c76:	2020      	movs	r0, #32
 8008c78:	4770      	bx	lr

08008c7a <__lo0bits>:
 8008c7a:	6803      	ldr	r3, [r0, #0]
 8008c7c:	0001      	movs	r1, r0
 8008c7e:	2207      	movs	r2, #7
 8008c80:	0018      	movs	r0, r3
 8008c82:	4010      	ands	r0, r2
 8008c84:	4213      	tst	r3, r2
 8008c86:	d00d      	beq.n	8008ca4 <__lo0bits+0x2a>
 8008c88:	3a06      	subs	r2, #6
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	4213      	tst	r3, r2
 8008c8e:	d105      	bne.n	8008c9c <__lo0bits+0x22>
 8008c90:	3002      	adds	r0, #2
 8008c92:	4203      	tst	r3, r0
 8008c94:	d003      	beq.n	8008c9e <__lo0bits+0x24>
 8008c96:	40d3      	lsrs	r3, r2
 8008c98:	0010      	movs	r0, r2
 8008c9a:	600b      	str	r3, [r1, #0]
 8008c9c:	4770      	bx	lr
 8008c9e:	089b      	lsrs	r3, r3, #2
 8008ca0:	600b      	str	r3, [r1, #0]
 8008ca2:	e7fb      	b.n	8008c9c <__lo0bits+0x22>
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	2a00      	cmp	r2, #0
 8008ca8:	d101      	bne.n	8008cae <__lo0bits+0x34>
 8008caa:	2010      	movs	r0, #16
 8008cac:	0c1b      	lsrs	r3, r3, #16
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	d101      	bne.n	8008cb8 <__lo0bits+0x3e>
 8008cb4:	3008      	adds	r0, #8
 8008cb6:	0a1b      	lsrs	r3, r3, #8
 8008cb8:	071a      	lsls	r2, r3, #28
 8008cba:	d101      	bne.n	8008cc0 <__lo0bits+0x46>
 8008cbc:	3004      	adds	r0, #4
 8008cbe:	091b      	lsrs	r3, r3, #4
 8008cc0:	079a      	lsls	r2, r3, #30
 8008cc2:	d101      	bne.n	8008cc8 <__lo0bits+0x4e>
 8008cc4:	3002      	adds	r0, #2
 8008cc6:	089b      	lsrs	r3, r3, #2
 8008cc8:	07da      	lsls	r2, r3, #31
 8008cca:	d4e9      	bmi.n	8008ca0 <__lo0bits+0x26>
 8008ccc:	3001      	adds	r0, #1
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	d1e6      	bne.n	8008ca0 <__lo0bits+0x26>
 8008cd2:	2020      	movs	r0, #32
 8008cd4:	e7e2      	b.n	8008c9c <__lo0bits+0x22>
	...

08008cd8 <__i2b>:
 8008cd8:	b510      	push	{r4, lr}
 8008cda:	000c      	movs	r4, r1
 8008cdc:	2101      	movs	r1, #1
 8008cde:	f7ff feff 	bl	8008ae0 <_Balloc>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d107      	bne.n	8008cf6 <__i2b+0x1e>
 8008ce6:	2146      	movs	r1, #70	@ 0x46
 8008ce8:	4c05      	ldr	r4, [pc, #20]	@ (8008d00 <__i2b+0x28>)
 8008cea:	0002      	movs	r2, r0
 8008cec:	4b05      	ldr	r3, [pc, #20]	@ (8008d04 <__i2b+0x2c>)
 8008cee:	0020      	movs	r0, r4
 8008cf0:	31ff      	adds	r1, #255	@ 0xff
 8008cf2:	f000 fcd7 	bl	80096a4 <__assert_func>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	6144      	str	r4, [r0, #20]
 8008cfa:	6103      	str	r3, [r0, #16]
 8008cfc:	bd10      	pop	{r4, pc}
 8008cfe:	46c0      	nop			@ (mov r8, r8)
 8008d00:	08009f11 	.word	0x08009f11
 8008d04:	08009f00 	.word	0x08009f00

08008d08 <__multiply>:
 8008d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0a:	0014      	movs	r4, r2
 8008d0c:	690a      	ldr	r2, [r1, #16]
 8008d0e:	6923      	ldr	r3, [r4, #16]
 8008d10:	000d      	movs	r5, r1
 8008d12:	b08b      	sub	sp, #44	@ 0x2c
 8008d14:	429a      	cmp	r2, r3
 8008d16:	db02      	blt.n	8008d1e <__multiply+0x16>
 8008d18:	0023      	movs	r3, r4
 8008d1a:	000c      	movs	r4, r1
 8008d1c:	001d      	movs	r5, r3
 8008d1e:	6927      	ldr	r7, [r4, #16]
 8008d20:	692e      	ldr	r6, [r5, #16]
 8008d22:	6861      	ldr	r1, [r4, #4]
 8008d24:	19bb      	adds	r3, r7, r6
 8008d26:	9303      	str	r3, [sp, #12]
 8008d28:	68a3      	ldr	r3, [r4, #8]
 8008d2a:	19ba      	adds	r2, r7, r6
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	da00      	bge.n	8008d32 <__multiply+0x2a>
 8008d30:	3101      	adds	r1, #1
 8008d32:	f7ff fed5 	bl	8008ae0 <_Balloc>
 8008d36:	9002      	str	r0, [sp, #8]
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d106      	bne.n	8008d4a <__multiply+0x42>
 8008d3c:	21b1      	movs	r1, #177	@ 0xb1
 8008d3e:	4b49      	ldr	r3, [pc, #292]	@ (8008e64 <__multiply+0x15c>)
 8008d40:	4849      	ldr	r0, [pc, #292]	@ (8008e68 <__multiply+0x160>)
 8008d42:	9a02      	ldr	r2, [sp, #8]
 8008d44:	0049      	lsls	r1, r1, #1
 8008d46:	f000 fcad 	bl	80096a4 <__assert_func>
 8008d4a:	9b02      	ldr	r3, [sp, #8]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	3314      	adds	r3, #20
 8008d50:	469c      	mov	ip, r3
 8008d52:	19bb      	adds	r3, r7, r6
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4463      	add	r3, ip
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	4663      	mov	r3, ip
 8008d5c:	9904      	ldr	r1, [sp, #16]
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d32a      	bcc.n	8008db8 <__multiply+0xb0>
 8008d62:	0023      	movs	r3, r4
 8008d64:	00bf      	lsls	r7, r7, #2
 8008d66:	3314      	adds	r3, #20
 8008d68:	3514      	adds	r5, #20
 8008d6a:	9308      	str	r3, [sp, #32]
 8008d6c:	00b6      	lsls	r6, r6, #2
 8008d6e:	19db      	adds	r3, r3, r7
 8008d70:	9305      	str	r3, [sp, #20]
 8008d72:	19ab      	adds	r3, r5, r6
 8008d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d76:	2304      	movs	r3, #4
 8008d78:	9306      	str	r3, [sp, #24]
 8008d7a:	0023      	movs	r3, r4
 8008d7c:	9a05      	ldr	r2, [sp, #20]
 8008d7e:	3315      	adds	r3, #21
 8008d80:	9501      	str	r5, [sp, #4]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d305      	bcc.n	8008d92 <__multiply+0x8a>
 8008d86:	1b13      	subs	r3, r2, r4
 8008d88:	3b15      	subs	r3, #21
 8008d8a:	089b      	lsrs	r3, r3, #2
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	9306      	str	r3, [sp, #24]
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d310      	bcc.n	8008dbc <__multiply+0xb4>
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	dd05      	ble.n	8008dac <__multiply+0xa4>
 8008da0:	9b04      	ldr	r3, [sp, #16]
 8008da2:	3b04      	subs	r3, #4
 8008da4:	9304      	str	r3, [sp, #16]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d056      	beq.n	8008e5a <__multiply+0x152>
 8008dac:	9b02      	ldr	r3, [sp, #8]
 8008dae:	9a03      	ldr	r2, [sp, #12]
 8008db0:	0018      	movs	r0, r3
 8008db2:	611a      	str	r2, [r3, #16]
 8008db4:	b00b      	add	sp, #44	@ 0x2c
 8008db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db8:	c304      	stmia	r3!, {r2}
 8008dba:	e7cf      	b.n	8008d5c <__multiply+0x54>
 8008dbc:	9b01      	ldr	r3, [sp, #4]
 8008dbe:	6818      	ldr	r0, [r3, #0]
 8008dc0:	b280      	uxth	r0, r0
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d01e      	beq.n	8008e04 <__multiply+0xfc>
 8008dc6:	4667      	mov	r7, ip
 8008dc8:	2500      	movs	r5, #0
 8008dca:	9e08      	ldr	r6, [sp, #32]
 8008dcc:	ce02      	ldmia	r6!, {r1}
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	9307      	str	r3, [sp, #28]
 8008dd2:	b28b      	uxth	r3, r1
 8008dd4:	4343      	muls	r3, r0
 8008dd6:	001a      	movs	r2, r3
 8008dd8:	466b      	mov	r3, sp
 8008dda:	0c09      	lsrs	r1, r1, #16
 8008ddc:	8b9b      	ldrh	r3, [r3, #28]
 8008dde:	4341      	muls	r1, r0
 8008de0:	18d3      	adds	r3, r2, r3
 8008de2:	9a07      	ldr	r2, [sp, #28]
 8008de4:	195b      	adds	r3, r3, r5
 8008de6:	0c12      	lsrs	r2, r2, #16
 8008de8:	1889      	adds	r1, r1, r2
 8008dea:	0c1a      	lsrs	r2, r3, #16
 8008dec:	188a      	adds	r2, r1, r2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	0c15      	lsrs	r5, r2, #16
 8008df2:	0412      	lsls	r2, r2, #16
 8008df4:	431a      	orrs	r2, r3
 8008df6:	9b05      	ldr	r3, [sp, #20]
 8008df8:	c704      	stmia	r7!, {r2}
 8008dfa:	42b3      	cmp	r3, r6
 8008dfc:	d8e6      	bhi.n	8008dcc <__multiply+0xc4>
 8008dfe:	4663      	mov	r3, ip
 8008e00:	9a06      	ldr	r2, [sp, #24]
 8008e02:	509d      	str	r5, [r3, r2]
 8008e04:	9b01      	ldr	r3, [sp, #4]
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	0c00      	lsrs	r0, r0, #16
 8008e0a:	d020      	beq.n	8008e4e <__multiply+0x146>
 8008e0c:	4663      	mov	r3, ip
 8008e0e:	0025      	movs	r5, r4
 8008e10:	4661      	mov	r1, ip
 8008e12:	2700      	movs	r7, #0
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3514      	adds	r5, #20
 8008e18:	682a      	ldr	r2, [r5, #0]
 8008e1a:	680e      	ldr	r6, [r1, #0]
 8008e1c:	b292      	uxth	r2, r2
 8008e1e:	4342      	muls	r2, r0
 8008e20:	0c36      	lsrs	r6, r6, #16
 8008e22:	1992      	adds	r2, r2, r6
 8008e24:	19d2      	adds	r2, r2, r7
 8008e26:	0416      	lsls	r6, r2, #16
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	431e      	orrs	r6, r3
 8008e2c:	600e      	str	r6, [r1, #0]
 8008e2e:	cd40      	ldmia	r5!, {r6}
 8008e30:	684b      	ldr	r3, [r1, #4]
 8008e32:	0c36      	lsrs	r6, r6, #16
 8008e34:	4346      	muls	r6, r0
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	0c12      	lsrs	r2, r2, #16
 8008e3a:	18f3      	adds	r3, r6, r3
 8008e3c:	189b      	adds	r3, r3, r2
 8008e3e:	9a05      	ldr	r2, [sp, #20]
 8008e40:	0c1f      	lsrs	r7, r3, #16
 8008e42:	3104      	adds	r1, #4
 8008e44:	42aa      	cmp	r2, r5
 8008e46:	d8e7      	bhi.n	8008e18 <__multiply+0x110>
 8008e48:	4662      	mov	r2, ip
 8008e4a:	9906      	ldr	r1, [sp, #24]
 8008e4c:	5053      	str	r3, [r2, r1]
 8008e4e:	9b01      	ldr	r3, [sp, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	2304      	movs	r3, #4
 8008e56:	449c      	add	ip, r3
 8008e58:	e79b      	b.n	8008d92 <__multiply+0x8a>
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	9303      	str	r3, [sp, #12]
 8008e60:	e79b      	b.n	8008d9a <__multiply+0x92>
 8008e62:	46c0      	nop			@ (mov r8, r8)
 8008e64:	08009f00 	.word	0x08009f00
 8008e68:	08009f11 	.word	0x08009f11

08008e6c <__pow5mult>:
 8008e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e6e:	2303      	movs	r3, #3
 8008e70:	0015      	movs	r5, r2
 8008e72:	0007      	movs	r7, r0
 8008e74:	000e      	movs	r6, r1
 8008e76:	401a      	ands	r2, r3
 8008e78:	421d      	tst	r5, r3
 8008e7a:	d008      	beq.n	8008e8e <__pow5mult+0x22>
 8008e7c:	4925      	ldr	r1, [pc, #148]	@ (8008f14 <__pow5mult+0xa8>)
 8008e7e:	3a01      	subs	r2, #1
 8008e80:	0092      	lsls	r2, r2, #2
 8008e82:	5852      	ldr	r2, [r2, r1]
 8008e84:	2300      	movs	r3, #0
 8008e86:	0031      	movs	r1, r6
 8008e88:	f7ff fe92 	bl	8008bb0 <__multadd>
 8008e8c:	0006      	movs	r6, r0
 8008e8e:	10ad      	asrs	r5, r5, #2
 8008e90:	d03d      	beq.n	8008f0e <__pow5mult+0xa2>
 8008e92:	69fc      	ldr	r4, [r7, #28]
 8008e94:	2c00      	cmp	r4, #0
 8008e96:	d10f      	bne.n	8008eb8 <__pow5mult+0x4c>
 8008e98:	2010      	movs	r0, #16
 8008e9a:	f7ff fd65 	bl	8008968 <malloc>
 8008e9e:	1e02      	subs	r2, r0, #0
 8008ea0:	61f8      	str	r0, [r7, #28]
 8008ea2:	d105      	bne.n	8008eb0 <__pow5mult+0x44>
 8008ea4:	21b4      	movs	r1, #180	@ 0xb4
 8008ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8008f18 <__pow5mult+0xac>)
 8008ea8:	481c      	ldr	r0, [pc, #112]	@ (8008f1c <__pow5mult+0xb0>)
 8008eaa:	31ff      	adds	r1, #255	@ 0xff
 8008eac:	f000 fbfa 	bl	80096a4 <__assert_func>
 8008eb0:	6044      	str	r4, [r0, #4]
 8008eb2:	6084      	str	r4, [r0, #8]
 8008eb4:	6004      	str	r4, [r0, #0]
 8008eb6:	60c4      	str	r4, [r0, #12]
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	689c      	ldr	r4, [r3, #8]
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	2c00      	cmp	r4, #0
 8008ec0:	d108      	bne.n	8008ed4 <__pow5mult+0x68>
 8008ec2:	0038      	movs	r0, r7
 8008ec4:	4916      	ldr	r1, [pc, #88]	@ (8008f20 <__pow5mult+0xb4>)
 8008ec6:	f7ff ff07 	bl	8008cd8 <__i2b>
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	0004      	movs	r4, r0
 8008ece:	6098      	str	r0, [r3, #8]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	6003      	str	r3, [r0, #0]
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	421d      	tst	r5, r3
 8008ed8:	d00a      	beq.n	8008ef0 <__pow5mult+0x84>
 8008eda:	0031      	movs	r1, r6
 8008edc:	0022      	movs	r2, r4
 8008ede:	0038      	movs	r0, r7
 8008ee0:	f7ff ff12 	bl	8008d08 <__multiply>
 8008ee4:	0031      	movs	r1, r6
 8008ee6:	9001      	str	r0, [sp, #4]
 8008ee8:	0038      	movs	r0, r7
 8008eea:	f7ff fe3d 	bl	8008b68 <_Bfree>
 8008eee:	9e01      	ldr	r6, [sp, #4]
 8008ef0:	106d      	asrs	r5, r5, #1
 8008ef2:	d00c      	beq.n	8008f0e <__pow5mult+0xa2>
 8008ef4:	6820      	ldr	r0, [r4, #0]
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d107      	bne.n	8008f0a <__pow5mult+0x9e>
 8008efa:	0022      	movs	r2, r4
 8008efc:	0021      	movs	r1, r4
 8008efe:	0038      	movs	r0, r7
 8008f00:	f7ff ff02 	bl	8008d08 <__multiply>
 8008f04:	2300      	movs	r3, #0
 8008f06:	6020      	str	r0, [r4, #0]
 8008f08:	6003      	str	r3, [r0, #0]
 8008f0a:	0004      	movs	r4, r0
 8008f0c:	e7e2      	b.n	8008ed4 <__pow5mult+0x68>
 8008f0e:	0030      	movs	r0, r6
 8008f10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f12:	46c0      	nop			@ (mov r8, r8)
 8008f14:	08009f6c 	.word	0x08009f6c
 8008f18:	08009e91 	.word	0x08009e91
 8008f1c:	08009f11 	.word	0x08009f11
 8008f20:	00000271 	.word	0x00000271

08008f24 <__lshift>:
 8008f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f26:	000c      	movs	r4, r1
 8008f28:	0016      	movs	r6, r2
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	1157      	asrs	r7, r2, #5
 8008f2e:	b085      	sub	sp, #20
 8008f30:	18fb      	adds	r3, r7, r3
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	3301      	adds	r3, #1
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	6849      	ldr	r1, [r1, #4]
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	9002      	str	r0, [sp, #8]
 8008f3e:	9a00      	ldr	r2, [sp, #0]
 8008f40:	4293      	cmp	r3, r2
 8008f42:	db10      	blt.n	8008f66 <__lshift+0x42>
 8008f44:	9802      	ldr	r0, [sp, #8]
 8008f46:	f7ff fdcb 	bl	8008ae0 <_Balloc>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	0001      	movs	r1, r0
 8008f4e:	0005      	movs	r5, r0
 8008f50:	001a      	movs	r2, r3
 8008f52:	3114      	adds	r1, #20
 8008f54:	4298      	cmp	r0, r3
 8008f56:	d10c      	bne.n	8008f72 <__lshift+0x4e>
 8008f58:	21ef      	movs	r1, #239	@ 0xef
 8008f5a:	002a      	movs	r2, r5
 8008f5c:	4b25      	ldr	r3, [pc, #148]	@ (8008ff4 <__lshift+0xd0>)
 8008f5e:	4826      	ldr	r0, [pc, #152]	@ (8008ff8 <__lshift+0xd4>)
 8008f60:	0049      	lsls	r1, r1, #1
 8008f62:	f000 fb9f 	bl	80096a4 <__assert_func>
 8008f66:	3101      	adds	r1, #1
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	e7e8      	b.n	8008f3e <__lshift+0x1a>
 8008f6c:	0098      	lsls	r0, r3, #2
 8008f6e:	500a      	str	r2, [r1, r0]
 8008f70:	3301      	adds	r3, #1
 8008f72:	42bb      	cmp	r3, r7
 8008f74:	dbfa      	blt.n	8008f6c <__lshift+0x48>
 8008f76:	43fb      	mvns	r3, r7
 8008f78:	17db      	asrs	r3, r3, #31
 8008f7a:	401f      	ands	r7, r3
 8008f7c:	00bf      	lsls	r7, r7, #2
 8008f7e:	0023      	movs	r3, r4
 8008f80:	201f      	movs	r0, #31
 8008f82:	19c9      	adds	r1, r1, r7
 8008f84:	0037      	movs	r7, r6
 8008f86:	6922      	ldr	r2, [r4, #16]
 8008f88:	3314      	adds	r3, #20
 8008f8a:	0092      	lsls	r2, r2, #2
 8008f8c:	189a      	adds	r2, r3, r2
 8008f8e:	4007      	ands	r7, r0
 8008f90:	4206      	tst	r6, r0
 8008f92:	d029      	beq.n	8008fe8 <__lshift+0xc4>
 8008f94:	3001      	adds	r0, #1
 8008f96:	1bc0      	subs	r0, r0, r7
 8008f98:	9003      	str	r0, [sp, #12]
 8008f9a:	468c      	mov	ip, r1
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	681e      	ldr	r6, [r3, #0]
 8008fa0:	40be      	lsls	r6, r7
 8008fa2:	4306      	orrs	r6, r0
 8008fa4:	4660      	mov	r0, ip
 8008fa6:	c040      	stmia	r0!, {r6}
 8008fa8:	4684      	mov	ip, r0
 8008faa:	9e03      	ldr	r6, [sp, #12]
 8008fac:	cb01      	ldmia	r3!, {r0}
 8008fae:	40f0      	lsrs	r0, r6
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d8f4      	bhi.n	8008f9e <__lshift+0x7a>
 8008fb4:	0026      	movs	r6, r4
 8008fb6:	3615      	adds	r6, #21
 8008fb8:	2304      	movs	r3, #4
 8008fba:	42b2      	cmp	r2, r6
 8008fbc:	d304      	bcc.n	8008fc8 <__lshift+0xa4>
 8008fbe:	1b13      	subs	r3, r2, r4
 8008fc0:	3b15      	subs	r3, #21
 8008fc2:	089b      	lsrs	r3, r3, #2
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	50c8      	str	r0, [r1, r3]
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d002      	beq.n	8008fd4 <__lshift+0xb0>
 8008fce:	9b01      	ldr	r3, [sp, #4]
 8008fd0:	3302      	adds	r3, #2
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	9b00      	ldr	r3, [sp, #0]
 8008fd6:	9802      	ldr	r0, [sp, #8]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	0021      	movs	r1, r4
 8008fdc:	612b      	str	r3, [r5, #16]
 8008fde:	f7ff fdc3 	bl	8008b68 <_Bfree>
 8008fe2:	0028      	movs	r0, r5
 8008fe4:	b005      	add	sp, #20
 8008fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe8:	cb01      	ldmia	r3!, {r0}
 8008fea:	c101      	stmia	r1!, {r0}
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d8fb      	bhi.n	8008fe8 <__lshift+0xc4>
 8008ff0:	e7f0      	b.n	8008fd4 <__lshift+0xb0>
 8008ff2:	46c0      	nop			@ (mov r8, r8)
 8008ff4:	08009f00 	.word	0x08009f00
 8008ff8:	08009f11 	.word	0x08009f11

08008ffc <__mcmp>:
 8008ffc:	b530      	push	{r4, r5, lr}
 8008ffe:	690b      	ldr	r3, [r1, #16]
 8009000:	6904      	ldr	r4, [r0, #16]
 8009002:	0002      	movs	r2, r0
 8009004:	1ae0      	subs	r0, r4, r3
 8009006:	429c      	cmp	r4, r3
 8009008:	d10f      	bne.n	800902a <__mcmp+0x2e>
 800900a:	3214      	adds	r2, #20
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	3114      	adds	r1, #20
 8009010:	0014      	movs	r4, r2
 8009012:	18c9      	adds	r1, r1, r3
 8009014:	18d2      	adds	r2, r2, r3
 8009016:	3a04      	subs	r2, #4
 8009018:	3904      	subs	r1, #4
 800901a:	6815      	ldr	r5, [r2, #0]
 800901c:	680b      	ldr	r3, [r1, #0]
 800901e:	429d      	cmp	r5, r3
 8009020:	d004      	beq.n	800902c <__mcmp+0x30>
 8009022:	2001      	movs	r0, #1
 8009024:	429d      	cmp	r5, r3
 8009026:	d200      	bcs.n	800902a <__mcmp+0x2e>
 8009028:	3802      	subs	r0, #2
 800902a:	bd30      	pop	{r4, r5, pc}
 800902c:	4294      	cmp	r4, r2
 800902e:	d3f2      	bcc.n	8009016 <__mcmp+0x1a>
 8009030:	e7fb      	b.n	800902a <__mcmp+0x2e>
	...

08009034 <__mdiff>:
 8009034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009036:	000c      	movs	r4, r1
 8009038:	b087      	sub	sp, #28
 800903a:	9000      	str	r0, [sp, #0]
 800903c:	0011      	movs	r1, r2
 800903e:	0020      	movs	r0, r4
 8009040:	0017      	movs	r7, r2
 8009042:	f7ff ffdb 	bl	8008ffc <__mcmp>
 8009046:	1e05      	subs	r5, r0, #0
 8009048:	d110      	bne.n	800906c <__mdiff+0x38>
 800904a:	0001      	movs	r1, r0
 800904c:	9800      	ldr	r0, [sp, #0]
 800904e:	f7ff fd47 	bl	8008ae0 <_Balloc>
 8009052:	1e02      	subs	r2, r0, #0
 8009054:	d104      	bne.n	8009060 <__mdiff+0x2c>
 8009056:	4b40      	ldr	r3, [pc, #256]	@ (8009158 <__mdiff+0x124>)
 8009058:	4840      	ldr	r0, [pc, #256]	@ (800915c <__mdiff+0x128>)
 800905a:	4941      	ldr	r1, [pc, #260]	@ (8009160 <__mdiff+0x12c>)
 800905c:	f000 fb22 	bl	80096a4 <__assert_func>
 8009060:	2301      	movs	r3, #1
 8009062:	6145      	str	r5, [r0, #20]
 8009064:	6103      	str	r3, [r0, #16]
 8009066:	0010      	movs	r0, r2
 8009068:	b007      	add	sp, #28
 800906a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800906c:	2600      	movs	r6, #0
 800906e:	42b0      	cmp	r0, r6
 8009070:	da03      	bge.n	800907a <__mdiff+0x46>
 8009072:	0023      	movs	r3, r4
 8009074:	003c      	movs	r4, r7
 8009076:	001f      	movs	r7, r3
 8009078:	3601      	adds	r6, #1
 800907a:	6861      	ldr	r1, [r4, #4]
 800907c:	9800      	ldr	r0, [sp, #0]
 800907e:	f7ff fd2f 	bl	8008ae0 <_Balloc>
 8009082:	1e02      	subs	r2, r0, #0
 8009084:	d103      	bne.n	800908e <__mdiff+0x5a>
 8009086:	4b34      	ldr	r3, [pc, #208]	@ (8009158 <__mdiff+0x124>)
 8009088:	4834      	ldr	r0, [pc, #208]	@ (800915c <__mdiff+0x128>)
 800908a:	4936      	ldr	r1, [pc, #216]	@ (8009164 <__mdiff+0x130>)
 800908c:	e7e6      	b.n	800905c <__mdiff+0x28>
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	3414      	adds	r4, #20
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	18e3      	adds	r3, r4, r3
 8009098:	0021      	movs	r1, r4
 800909a:	9401      	str	r4, [sp, #4]
 800909c:	003c      	movs	r4, r7
 800909e:	9302      	str	r3, [sp, #8]
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	3414      	adds	r4, #20
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	18e3      	adds	r3, r4, r3
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	0003      	movs	r3, r0
 80090ac:	60c6      	str	r6, [r0, #12]
 80090ae:	468c      	mov	ip, r1
 80090b0:	2000      	movs	r0, #0
 80090b2:	3314      	adds	r3, #20
 80090b4:	9304      	str	r3, [sp, #16]
 80090b6:	9305      	str	r3, [sp, #20]
 80090b8:	4663      	mov	r3, ip
 80090ba:	cb20      	ldmia	r3!, {r5}
 80090bc:	b2a9      	uxth	r1, r5
 80090be:	000e      	movs	r6, r1
 80090c0:	469c      	mov	ip, r3
 80090c2:	cc08      	ldmia	r4!, {r3}
 80090c4:	0c2d      	lsrs	r5, r5, #16
 80090c6:	b299      	uxth	r1, r3
 80090c8:	1a71      	subs	r1, r6, r1
 80090ca:	1809      	adds	r1, r1, r0
 80090cc:	0c1b      	lsrs	r3, r3, #16
 80090ce:	1408      	asrs	r0, r1, #16
 80090d0:	1aeb      	subs	r3, r5, r3
 80090d2:	181b      	adds	r3, r3, r0
 80090d4:	1418      	asrs	r0, r3, #16
 80090d6:	b289      	uxth	r1, r1
 80090d8:	041b      	lsls	r3, r3, #16
 80090da:	4319      	orrs	r1, r3
 80090dc:	9b05      	ldr	r3, [sp, #20]
 80090de:	c302      	stmia	r3!, {r1}
 80090e0:	9305      	str	r3, [sp, #20]
 80090e2:	9b03      	ldr	r3, [sp, #12]
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	d8e7      	bhi.n	80090b8 <__mdiff+0x84>
 80090e8:	0039      	movs	r1, r7
 80090ea:	9c03      	ldr	r4, [sp, #12]
 80090ec:	3115      	adds	r1, #21
 80090ee:	2304      	movs	r3, #4
 80090f0:	428c      	cmp	r4, r1
 80090f2:	d304      	bcc.n	80090fe <__mdiff+0xca>
 80090f4:	1be3      	subs	r3, r4, r7
 80090f6:	3b15      	subs	r3, #21
 80090f8:	089b      	lsrs	r3, r3, #2
 80090fa:	3301      	adds	r3, #1
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	9901      	ldr	r1, [sp, #4]
 8009100:	18cd      	adds	r5, r1, r3
 8009102:	9904      	ldr	r1, [sp, #16]
 8009104:	002e      	movs	r6, r5
 8009106:	18cb      	adds	r3, r1, r3
 8009108:	001f      	movs	r7, r3
 800910a:	9902      	ldr	r1, [sp, #8]
 800910c:	428e      	cmp	r6, r1
 800910e:	d311      	bcc.n	8009134 <__mdiff+0x100>
 8009110:	9c02      	ldr	r4, [sp, #8]
 8009112:	1ee9      	subs	r1, r5, #3
 8009114:	2000      	movs	r0, #0
 8009116:	428c      	cmp	r4, r1
 8009118:	d304      	bcc.n	8009124 <__mdiff+0xf0>
 800911a:	0021      	movs	r1, r4
 800911c:	3103      	adds	r1, #3
 800911e:	1b49      	subs	r1, r1, r5
 8009120:	0889      	lsrs	r1, r1, #2
 8009122:	0088      	lsls	r0, r1, #2
 8009124:	181b      	adds	r3, r3, r0
 8009126:	3b04      	subs	r3, #4
 8009128:	6819      	ldr	r1, [r3, #0]
 800912a:	2900      	cmp	r1, #0
 800912c:	d010      	beq.n	8009150 <__mdiff+0x11c>
 800912e:	9b00      	ldr	r3, [sp, #0]
 8009130:	6113      	str	r3, [r2, #16]
 8009132:	e798      	b.n	8009066 <__mdiff+0x32>
 8009134:	4684      	mov	ip, r0
 8009136:	ce02      	ldmia	r6!, {r1}
 8009138:	b288      	uxth	r0, r1
 800913a:	4460      	add	r0, ip
 800913c:	1400      	asrs	r0, r0, #16
 800913e:	0c0c      	lsrs	r4, r1, #16
 8009140:	1904      	adds	r4, r0, r4
 8009142:	4461      	add	r1, ip
 8009144:	1420      	asrs	r0, r4, #16
 8009146:	b289      	uxth	r1, r1
 8009148:	0424      	lsls	r4, r4, #16
 800914a:	4321      	orrs	r1, r4
 800914c:	c702      	stmia	r7!, {r1}
 800914e:	e7dc      	b.n	800910a <__mdiff+0xd6>
 8009150:	9900      	ldr	r1, [sp, #0]
 8009152:	3901      	subs	r1, #1
 8009154:	9100      	str	r1, [sp, #0]
 8009156:	e7e6      	b.n	8009126 <__mdiff+0xf2>
 8009158:	08009f00 	.word	0x08009f00
 800915c:	08009f11 	.word	0x08009f11
 8009160:	00000237 	.word	0x00000237
 8009164:	00000245 	.word	0x00000245

08009168 <__d2b>:
 8009168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800916a:	2101      	movs	r1, #1
 800916c:	0016      	movs	r6, r2
 800916e:	001f      	movs	r7, r3
 8009170:	f7ff fcb6 	bl	8008ae0 <_Balloc>
 8009174:	1e04      	subs	r4, r0, #0
 8009176:	d105      	bne.n	8009184 <__d2b+0x1c>
 8009178:	0022      	movs	r2, r4
 800917a:	4b25      	ldr	r3, [pc, #148]	@ (8009210 <__d2b+0xa8>)
 800917c:	4825      	ldr	r0, [pc, #148]	@ (8009214 <__d2b+0xac>)
 800917e:	4926      	ldr	r1, [pc, #152]	@ (8009218 <__d2b+0xb0>)
 8009180:	f000 fa90 	bl	80096a4 <__assert_func>
 8009184:	033b      	lsls	r3, r7, #12
 8009186:	007d      	lsls	r5, r7, #1
 8009188:	0b1b      	lsrs	r3, r3, #12
 800918a:	0d6d      	lsrs	r5, r5, #21
 800918c:	d002      	beq.n	8009194 <__d2b+0x2c>
 800918e:	2280      	movs	r2, #128	@ 0x80
 8009190:	0352      	lsls	r2, r2, #13
 8009192:	4313      	orrs	r3, r2
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	2e00      	cmp	r6, #0
 8009198:	d025      	beq.n	80091e6 <__d2b+0x7e>
 800919a:	4668      	mov	r0, sp
 800919c:	9600      	str	r6, [sp, #0]
 800919e:	f7ff fd6c 	bl	8008c7a <__lo0bits>
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	9900      	ldr	r1, [sp, #0]
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d01b      	beq.n	80091e2 <__d2b+0x7a>
 80091aa:	2220      	movs	r2, #32
 80091ac:	001e      	movs	r6, r3
 80091ae:	1a12      	subs	r2, r2, r0
 80091b0:	4096      	lsls	r6, r2
 80091b2:	0032      	movs	r2, r6
 80091b4:	40c3      	lsrs	r3, r0
 80091b6:	430a      	orrs	r2, r1
 80091b8:	6162      	str	r2, [r4, #20]
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	9e01      	ldr	r6, [sp, #4]
 80091be:	61a6      	str	r6, [r4, #24]
 80091c0:	1e73      	subs	r3, r6, #1
 80091c2:	419e      	sbcs	r6, r3
 80091c4:	3601      	adds	r6, #1
 80091c6:	6126      	str	r6, [r4, #16]
 80091c8:	2d00      	cmp	r5, #0
 80091ca:	d014      	beq.n	80091f6 <__d2b+0x8e>
 80091cc:	2635      	movs	r6, #53	@ 0x35
 80091ce:	4b13      	ldr	r3, [pc, #76]	@ (800921c <__d2b+0xb4>)
 80091d0:	18ed      	adds	r5, r5, r3
 80091d2:	9b08      	ldr	r3, [sp, #32]
 80091d4:	182d      	adds	r5, r5, r0
 80091d6:	601d      	str	r5, [r3, #0]
 80091d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091da:	1a36      	subs	r6, r6, r0
 80091dc:	601e      	str	r6, [r3, #0]
 80091de:	0020      	movs	r0, r4
 80091e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091e2:	6161      	str	r1, [r4, #20]
 80091e4:	e7ea      	b.n	80091bc <__d2b+0x54>
 80091e6:	a801      	add	r0, sp, #4
 80091e8:	f7ff fd47 	bl	8008c7a <__lo0bits>
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	2601      	movs	r6, #1
 80091f0:	6163      	str	r3, [r4, #20]
 80091f2:	3020      	adds	r0, #32
 80091f4:	e7e7      	b.n	80091c6 <__d2b+0x5e>
 80091f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009220 <__d2b+0xb8>)
 80091f8:	18c0      	adds	r0, r0, r3
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	6018      	str	r0, [r3, #0]
 80091fe:	4b09      	ldr	r3, [pc, #36]	@ (8009224 <__d2b+0xbc>)
 8009200:	18f3      	adds	r3, r6, r3
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	18e3      	adds	r3, r4, r3
 8009206:	6958      	ldr	r0, [r3, #20]
 8009208:	f7ff fd16 	bl	8008c38 <__hi0bits>
 800920c:	0176      	lsls	r6, r6, #5
 800920e:	e7e3      	b.n	80091d8 <__d2b+0x70>
 8009210:	08009f00 	.word	0x08009f00
 8009214:	08009f11 	.word	0x08009f11
 8009218:	0000030f 	.word	0x0000030f
 800921c:	fffffbcd 	.word	0xfffffbcd
 8009220:	fffffbce 	.word	0xfffffbce
 8009224:	3fffffff 	.word	0x3fffffff

08009228 <__ssputs_r>:
 8009228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922a:	688e      	ldr	r6, [r1, #8]
 800922c:	b085      	sub	sp, #20
 800922e:	001f      	movs	r7, r3
 8009230:	000c      	movs	r4, r1
 8009232:	680b      	ldr	r3, [r1, #0]
 8009234:	9002      	str	r0, [sp, #8]
 8009236:	9203      	str	r2, [sp, #12]
 8009238:	42be      	cmp	r6, r7
 800923a:	d830      	bhi.n	800929e <__ssputs_r+0x76>
 800923c:	210c      	movs	r1, #12
 800923e:	5e62      	ldrsh	r2, [r4, r1]
 8009240:	2190      	movs	r1, #144	@ 0x90
 8009242:	00c9      	lsls	r1, r1, #3
 8009244:	420a      	tst	r2, r1
 8009246:	d028      	beq.n	800929a <__ssputs_r+0x72>
 8009248:	2003      	movs	r0, #3
 800924a:	6921      	ldr	r1, [r4, #16]
 800924c:	1a5b      	subs	r3, r3, r1
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	6963      	ldr	r3, [r4, #20]
 8009252:	4343      	muls	r3, r0
 8009254:	9801      	ldr	r0, [sp, #4]
 8009256:	0fdd      	lsrs	r5, r3, #31
 8009258:	18ed      	adds	r5, r5, r3
 800925a:	1c7b      	adds	r3, r7, #1
 800925c:	181b      	adds	r3, r3, r0
 800925e:	106d      	asrs	r5, r5, #1
 8009260:	42ab      	cmp	r3, r5
 8009262:	d900      	bls.n	8009266 <__ssputs_r+0x3e>
 8009264:	001d      	movs	r5, r3
 8009266:	0552      	lsls	r2, r2, #21
 8009268:	d528      	bpl.n	80092bc <__ssputs_r+0x94>
 800926a:	0029      	movs	r1, r5
 800926c:	9802      	ldr	r0, [sp, #8]
 800926e:	f7ff fba7 	bl	80089c0 <_malloc_r>
 8009272:	1e06      	subs	r6, r0, #0
 8009274:	d02c      	beq.n	80092d0 <__ssputs_r+0xa8>
 8009276:	9a01      	ldr	r2, [sp, #4]
 8009278:	6921      	ldr	r1, [r4, #16]
 800927a:	f000 fa09 	bl	8009690 <memcpy>
 800927e:	89a2      	ldrh	r2, [r4, #12]
 8009280:	4b18      	ldr	r3, [pc, #96]	@ (80092e4 <__ssputs_r+0xbc>)
 8009282:	401a      	ands	r2, r3
 8009284:	2380      	movs	r3, #128	@ 0x80
 8009286:	4313      	orrs	r3, r2
 8009288:	81a3      	strh	r3, [r4, #12]
 800928a:	9b01      	ldr	r3, [sp, #4]
 800928c:	6126      	str	r6, [r4, #16]
 800928e:	18f6      	adds	r6, r6, r3
 8009290:	6026      	str	r6, [r4, #0]
 8009292:	003e      	movs	r6, r7
 8009294:	6165      	str	r5, [r4, #20]
 8009296:	1aed      	subs	r5, r5, r3
 8009298:	60a5      	str	r5, [r4, #8]
 800929a:	42be      	cmp	r6, r7
 800929c:	d900      	bls.n	80092a0 <__ssputs_r+0x78>
 800929e:	003e      	movs	r6, r7
 80092a0:	0032      	movs	r2, r6
 80092a2:	9903      	ldr	r1, [sp, #12]
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	f000 f9ce 	bl	8009646 <memmove>
 80092aa:	2000      	movs	r0, #0
 80092ac:	68a3      	ldr	r3, [r4, #8]
 80092ae:	1b9b      	subs	r3, r3, r6
 80092b0:	60a3      	str	r3, [r4, #8]
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	199b      	adds	r3, r3, r6
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	b005      	add	sp, #20
 80092ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092bc:	002a      	movs	r2, r5
 80092be:	9802      	ldr	r0, [sp, #8]
 80092c0:	f000 fa4d 	bl	800975e <_realloc_r>
 80092c4:	1e06      	subs	r6, r0, #0
 80092c6:	d1e0      	bne.n	800928a <__ssputs_r+0x62>
 80092c8:	6921      	ldr	r1, [r4, #16]
 80092ca:	9802      	ldr	r0, [sp, #8]
 80092cc:	f7ff fb02 	bl	80088d4 <_free_r>
 80092d0:	230c      	movs	r3, #12
 80092d2:	2001      	movs	r0, #1
 80092d4:	9a02      	ldr	r2, [sp, #8]
 80092d6:	4240      	negs	r0, r0
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	89a2      	ldrh	r2, [r4, #12]
 80092dc:	3334      	adds	r3, #52	@ 0x34
 80092de:	4313      	orrs	r3, r2
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	e7e9      	b.n	80092b8 <__ssputs_r+0x90>
 80092e4:	fffffb7f 	.word	0xfffffb7f

080092e8 <_svfiprintf_r>:
 80092e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ea:	b0a1      	sub	sp, #132	@ 0x84
 80092ec:	9003      	str	r0, [sp, #12]
 80092ee:	001d      	movs	r5, r3
 80092f0:	898b      	ldrh	r3, [r1, #12]
 80092f2:	000f      	movs	r7, r1
 80092f4:	0016      	movs	r6, r2
 80092f6:	061b      	lsls	r3, r3, #24
 80092f8:	d511      	bpl.n	800931e <_svfiprintf_r+0x36>
 80092fa:	690b      	ldr	r3, [r1, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10e      	bne.n	800931e <_svfiprintf_r+0x36>
 8009300:	2140      	movs	r1, #64	@ 0x40
 8009302:	f7ff fb5d 	bl	80089c0 <_malloc_r>
 8009306:	6038      	str	r0, [r7, #0]
 8009308:	6138      	str	r0, [r7, #16]
 800930a:	2800      	cmp	r0, #0
 800930c:	d105      	bne.n	800931a <_svfiprintf_r+0x32>
 800930e:	230c      	movs	r3, #12
 8009310:	9a03      	ldr	r2, [sp, #12]
 8009312:	6013      	str	r3, [r2, #0]
 8009314:	2001      	movs	r0, #1
 8009316:	4240      	negs	r0, r0
 8009318:	e0cf      	b.n	80094ba <_svfiprintf_r+0x1d2>
 800931a:	2340      	movs	r3, #64	@ 0x40
 800931c:	617b      	str	r3, [r7, #20]
 800931e:	2300      	movs	r3, #0
 8009320:	ac08      	add	r4, sp, #32
 8009322:	6163      	str	r3, [r4, #20]
 8009324:	3320      	adds	r3, #32
 8009326:	7663      	strb	r3, [r4, #25]
 8009328:	3310      	adds	r3, #16
 800932a:	76a3      	strb	r3, [r4, #26]
 800932c:	9507      	str	r5, [sp, #28]
 800932e:	0035      	movs	r5, r6
 8009330:	782b      	ldrb	r3, [r5, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <_svfiprintf_r+0x52>
 8009336:	2b25      	cmp	r3, #37	@ 0x25
 8009338:	d148      	bne.n	80093cc <_svfiprintf_r+0xe4>
 800933a:	1bab      	subs	r3, r5, r6
 800933c:	9305      	str	r3, [sp, #20]
 800933e:	42b5      	cmp	r5, r6
 8009340:	d00b      	beq.n	800935a <_svfiprintf_r+0x72>
 8009342:	0032      	movs	r2, r6
 8009344:	0039      	movs	r1, r7
 8009346:	9803      	ldr	r0, [sp, #12]
 8009348:	f7ff ff6e 	bl	8009228 <__ssputs_r>
 800934c:	3001      	adds	r0, #1
 800934e:	d100      	bne.n	8009352 <_svfiprintf_r+0x6a>
 8009350:	e0ae      	b.n	80094b0 <_svfiprintf_r+0x1c8>
 8009352:	6963      	ldr	r3, [r4, #20]
 8009354:	9a05      	ldr	r2, [sp, #20]
 8009356:	189b      	adds	r3, r3, r2
 8009358:	6163      	str	r3, [r4, #20]
 800935a:	782b      	ldrb	r3, [r5, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d100      	bne.n	8009362 <_svfiprintf_r+0x7a>
 8009360:	e0a6      	b.n	80094b0 <_svfiprintf_r+0x1c8>
 8009362:	2201      	movs	r2, #1
 8009364:	2300      	movs	r3, #0
 8009366:	4252      	negs	r2, r2
 8009368:	6062      	str	r2, [r4, #4]
 800936a:	a904      	add	r1, sp, #16
 800936c:	3254      	adds	r2, #84	@ 0x54
 800936e:	1852      	adds	r2, r2, r1
 8009370:	1c6e      	adds	r6, r5, #1
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	60e3      	str	r3, [r4, #12]
 8009376:	60a3      	str	r3, [r4, #8]
 8009378:	7013      	strb	r3, [r2, #0]
 800937a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800937c:	4b54      	ldr	r3, [pc, #336]	@ (80094d0 <_svfiprintf_r+0x1e8>)
 800937e:	2205      	movs	r2, #5
 8009380:	0018      	movs	r0, r3
 8009382:	7831      	ldrb	r1, [r6, #0]
 8009384:	9305      	str	r3, [sp, #20]
 8009386:	f7fe fc18 	bl	8007bba <memchr>
 800938a:	1c75      	adds	r5, r6, #1
 800938c:	2800      	cmp	r0, #0
 800938e:	d11f      	bne.n	80093d0 <_svfiprintf_r+0xe8>
 8009390:	6822      	ldr	r2, [r4, #0]
 8009392:	06d3      	lsls	r3, r2, #27
 8009394:	d504      	bpl.n	80093a0 <_svfiprintf_r+0xb8>
 8009396:	2353      	movs	r3, #83	@ 0x53
 8009398:	a904      	add	r1, sp, #16
 800939a:	185b      	adds	r3, r3, r1
 800939c:	2120      	movs	r1, #32
 800939e:	7019      	strb	r1, [r3, #0]
 80093a0:	0713      	lsls	r3, r2, #28
 80093a2:	d504      	bpl.n	80093ae <_svfiprintf_r+0xc6>
 80093a4:	2353      	movs	r3, #83	@ 0x53
 80093a6:	a904      	add	r1, sp, #16
 80093a8:	185b      	adds	r3, r3, r1
 80093aa:	212b      	movs	r1, #43	@ 0x2b
 80093ac:	7019      	strb	r1, [r3, #0]
 80093ae:	7833      	ldrb	r3, [r6, #0]
 80093b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093b2:	d016      	beq.n	80093e2 <_svfiprintf_r+0xfa>
 80093b4:	0035      	movs	r5, r6
 80093b6:	2100      	movs	r1, #0
 80093b8:	200a      	movs	r0, #10
 80093ba:	68e3      	ldr	r3, [r4, #12]
 80093bc:	782a      	ldrb	r2, [r5, #0]
 80093be:	1c6e      	adds	r6, r5, #1
 80093c0:	3a30      	subs	r2, #48	@ 0x30
 80093c2:	2a09      	cmp	r2, #9
 80093c4:	d950      	bls.n	8009468 <_svfiprintf_r+0x180>
 80093c6:	2900      	cmp	r1, #0
 80093c8:	d111      	bne.n	80093ee <_svfiprintf_r+0x106>
 80093ca:	e017      	b.n	80093fc <_svfiprintf_r+0x114>
 80093cc:	3501      	adds	r5, #1
 80093ce:	e7af      	b.n	8009330 <_svfiprintf_r+0x48>
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	1ac0      	subs	r0, r0, r3
 80093d6:	2301      	movs	r3, #1
 80093d8:	4083      	lsls	r3, r0
 80093da:	4313      	orrs	r3, r2
 80093dc:	002e      	movs	r6, r5
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	e7cc      	b.n	800937c <_svfiprintf_r+0x94>
 80093e2:	9b07      	ldr	r3, [sp, #28]
 80093e4:	1d19      	adds	r1, r3, #4
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	9107      	str	r1, [sp, #28]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	db01      	blt.n	80093f2 <_svfiprintf_r+0x10a>
 80093ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093f0:	e004      	b.n	80093fc <_svfiprintf_r+0x114>
 80093f2:	425b      	negs	r3, r3
 80093f4:	60e3      	str	r3, [r4, #12]
 80093f6:	2302      	movs	r3, #2
 80093f8:	4313      	orrs	r3, r2
 80093fa:	6023      	str	r3, [r4, #0]
 80093fc:	782b      	ldrb	r3, [r5, #0]
 80093fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009400:	d10c      	bne.n	800941c <_svfiprintf_r+0x134>
 8009402:	786b      	ldrb	r3, [r5, #1]
 8009404:	2b2a      	cmp	r3, #42	@ 0x2a
 8009406:	d134      	bne.n	8009472 <_svfiprintf_r+0x18a>
 8009408:	9b07      	ldr	r3, [sp, #28]
 800940a:	3502      	adds	r5, #2
 800940c:	1d1a      	adds	r2, r3, #4
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	9207      	str	r2, [sp, #28]
 8009412:	2b00      	cmp	r3, #0
 8009414:	da01      	bge.n	800941a <_svfiprintf_r+0x132>
 8009416:	2301      	movs	r3, #1
 8009418:	425b      	negs	r3, r3
 800941a:	9309      	str	r3, [sp, #36]	@ 0x24
 800941c:	4e2d      	ldr	r6, [pc, #180]	@ (80094d4 <_svfiprintf_r+0x1ec>)
 800941e:	2203      	movs	r2, #3
 8009420:	0030      	movs	r0, r6
 8009422:	7829      	ldrb	r1, [r5, #0]
 8009424:	f7fe fbc9 	bl	8007bba <memchr>
 8009428:	2800      	cmp	r0, #0
 800942a:	d006      	beq.n	800943a <_svfiprintf_r+0x152>
 800942c:	2340      	movs	r3, #64	@ 0x40
 800942e:	1b80      	subs	r0, r0, r6
 8009430:	4083      	lsls	r3, r0
 8009432:	6822      	ldr	r2, [r4, #0]
 8009434:	3501      	adds	r5, #1
 8009436:	4313      	orrs	r3, r2
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	7829      	ldrb	r1, [r5, #0]
 800943c:	2206      	movs	r2, #6
 800943e:	4826      	ldr	r0, [pc, #152]	@ (80094d8 <_svfiprintf_r+0x1f0>)
 8009440:	1c6e      	adds	r6, r5, #1
 8009442:	7621      	strb	r1, [r4, #24]
 8009444:	f7fe fbb9 	bl	8007bba <memchr>
 8009448:	2800      	cmp	r0, #0
 800944a:	d038      	beq.n	80094be <_svfiprintf_r+0x1d6>
 800944c:	4b23      	ldr	r3, [pc, #140]	@ (80094dc <_svfiprintf_r+0x1f4>)
 800944e:	2b00      	cmp	r3, #0
 8009450:	d122      	bne.n	8009498 <_svfiprintf_r+0x1b0>
 8009452:	2207      	movs	r2, #7
 8009454:	9b07      	ldr	r3, [sp, #28]
 8009456:	3307      	adds	r3, #7
 8009458:	4393      	bics	r3, r2
 800945a:	3308      	adds	r3, #8
 800945c:	9307      	str	r3, [sp, #28]
 800945e:	6963      	ldr	r3, [r4, #20]
 8009460:	9a04      	ldr	r2, [sp, #16]
 8009462:	189b      	adds	r3, r3, r2
 8009464:	6163      	str	r3, [r4, #20]
 8009466:	e762      	b.n	800932e <_svfiprintf_r+0x46>
 8009468:	4343      	muls	r3, r0
 800946a:	0035      	movs	r5, r6
 800946c:	2101      	movs	r1, #1
 800946e:	189b      	adds	r3, r3, r2
 8009470:	e7a4      	b.n	80093bc <_svfiprintf_r+0xd4>
 8009472:	2300      	movs	r3, #0
 8009474:	200a      	movs	r0, #10
 8009476:	0019      	movs	r1, r3
 8009478:	3501      	adds	r5, #1
 800947a:	6063      	str	r3, [r4, #4]
 800947c:	782a      	ldrb	r2, [r5, #0]
 800947e:	1c6e      	adds	r6, r5, #1
 8009480:	3a30      	subs	r2, #48	@ 0x30
 8009482:	2a09      	cmp	r2, #9
 8009484:	d903      	bls.n	800948e <_svfiprintf_r+0x1a6>
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0c8      	beq.n	800941c <_svfiprintf_r+0x134>
 800948a:	9109      	str	r1, [sp, #36]	@ 0x24
 800948c:	e7c6      	b.n	800941c <_svfiprintf_r+0x134>
 800948e:	4341      	muls	r1, r0
 8009490:	0035      	movs	r5, r6
 8009492:	2301      	movs	r3, #1
 8009494:	1889      	adds	r1, r1, r2
 8009496:	e7f1      	b.n	800947c <_svfiprintf_r+0x194>
 8009498:	aa07      	add	r2, sp, #28
 800949a:	9200      	str	r2, [sp, #0]
 800949c:	0021      	movs	r1, r4
 800949e:	003a      	movs	r2, r7
 80094a0:	4b0f      	ldr	r3, [pc, #60]	@ (80094e0 <_svfiprintf_r+0x1f8>)
 80094a2:	9803      	ldr	r0, [sp, #12]
 80094a4:	f7fd fe16 	bl	80070d4 <_printf_float>
 80094a8:	9004      	str	r0, [sp, #16]
 80094aa:	9b04      	ldr	r3, [sp, #16]
 80094ac:	3301      	adds	r3, #1
 80094ae:	d1d6      	bne.n	800945e <_svfiprintf_r+0x176>
 80094b0:	89bb      	ldrh	r3, [r7, #12]
 80094b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80094b4:	065b      	lsls	r3, r3, #25
 80094b6:	d500      	bpl.n	80094ba <_svfiprintf_r+0x1d2>
 80094b8:	e72c      	b.n	8009314 <_svfiprintf_r+0x2c>
 80094ba:	b021      	add	sp, #132	@ 0x84
 80094bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094be:	aa07      	add	r2, sp, #28
 80094c0:	9200      	str	r2, [sp, #0]
 80094c2:	0021      	movs	r1, r4
 80094c4:	003a      	movs	r2, r7
 80094c6:	4b06      	ldr	r3, [pc, #24]	@ (80094e0 <_svfiprintf_r+0x1f8>)
 80094c8:	9803      	ldr	r0, [sp, #12]
 80094ca:	f7fe f8b1 	bl	8007630 <_printf_i>
 80094ce:	e7eb      	b.n	80094a8 <_svfiprintf_r+0x1c0>
 80094d0:	0800a068 	.word	0x0800a068
 80094d4:	0800a06e 	.word	0x0800a06e
 80094d8:	0800a072 	.word	0x0800a072
 80094dc:	080070d5 	.word	0x080070d5
 80094e0:	08009229 	.word	0x08009229

080094e4 <__sflush_r>:
 80094e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094e6:	220c      	movs	r2, #12
 80094e8:	5e8b      	ldrsh	r3, [r1, r2]
 80094ea:	0005      	movs	r5, r0
 80094ec:	000c      	movs	r4, r1
 80094ee:	071a      	lsls	r2, r3, #28
 80094f0:	d456      	bmi.n	80095a0 <__sflush_r+0xbc>
 80094f2:	684a      	ldr	r2, [r1, #4]
 80094f4:	2a00      	cmp	r2, #0
 80094f6:	dc02      	bgt.n	80094fe <__sflush_r+0x1a>
 80094f8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	dd4e      	ble.n	800959c <__sflush_r+0xb8>
 80094fe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009500:	2f00      	cmp	r7, #0
 8009502:	d04b      	beq.n	800959c <__sflush_r+0xb8>
 8009504:	2200      	movs	r2, #0
 8009506:	2080      	movs	r0, #128	@ 0x80
 8009508:	682e      	ldr	r6, [r5, #0]
 800950a:	602a      	str	r2, [r5, #0]
 800950c:	001a      	movs	r2, r3
 800950e:	0140      	lsls	r0, r0, #5
 8009510:	6a21      	ldr	r1, [r4, #32]
 8009512:	4002      	ands	r2, r0
 8009514:	4203      	tst	r3, r0
 8009516:	d033      	beq.n	8009580 <__sflush_r+0x9c>
 8009518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	075b      	lsls	r3, r3, #29
 800951e:	d506      	bpl.n	800952e <__sflush_r+0x4a>
 8009520:	6863      	ldr	r3, [r4, #4]
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <__sflush_r+0x4a>
 800952a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800952c:	1ad2      	subs	r2, r2, r3
 800952e:	2300      	movs	r3, #0
 8009530:	0028      	movs	r0, r5
 8009532:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009534:	6a21      	ldr	r1, [r4, #32]
 8009536:	47b8      	blx	r7
 8009538:	89a2      	ldrh	r2, [r4, #12]
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	d106      	bne.n	800954c <__sflush_r+0x68>
 800953e:	6829      	ldr	r1, [r5, #0]
 8009540:	291d      	cmp	r1, #29
 8009542:	d846      	bhi.n	80095d2 <__sflush_r+0xee>
 8009544:	4b29      	ldr	r3, [pc, #164]	@ (80095ec <__sflush_r+0x108>)
 8009546:	410b      	asrs	r3, r1
 8009548:	07db      	lsls	r3, r3, #31
 800954a:	d442      	bmi.n	80095d2 <__sflush_r+0xee>
 800954c:	2300      	movs	r3, #0
 800954e:	6063      	str	r3, [r4, #4]
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	04d2      	lsls	r2, r2, #19
 8009556:	d505      	bpl.n	8009564 <__sflush_r+0x80>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <__sflush_r+0x7e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d100      	bne.n	8009564 <__sflush_r+0x80>
 8009562:	6560      	str	r0, [r4, #84]	@ 0x54
 8009564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009566:	602e      	str	r6, [r5, #0]
 8009568:	2900      	cmp	r1, #0
 800956a:	d017      	beq.n	800959c <__sflush_r+0xb8>
 800956c:	0023      	movs	r3, r4
 800956e:	3344      	adds	r3, #68	@ 0x44
 8009570:	4299      	cmp	r1, r3
 8009572:	d002      	beq.n	800957a <__sflush_r+0x96>
 8009574:	0028      	movs	r0, r5
 8009576:	f7ff f9ad 	bl	80088d4 <_free_r>
 800957a:	2300      	movs	r3, #0
 800957c:	6363      	str	r3, [r4, #52]	@ 0x34
 800957e:	e00d      	b.n	800959c <__sflush_r+0xb8>
 8009580:	2301      	movs	r3, #1
 8009582:	0028      	movs	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	0002      	movs	r2, r0
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d1c6      	bne.n	800951a <__sflush_r+0x36>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0c3      	beq.n	800951a <__sflush_r+0x36>
 8009592:	2b1d      	cmp	r3, #29
 8009594:	d001      	beq.n	800959a <__sflush_r+0xb6>
 8009596:	2b16      	cmp	r3, #22
 8009598:	d11a      	bne.n	80095d0 <__sflush_r+0xec>
 800959a:	602e      	str	r6, [r5, #0]
 800959c:	2000      	movs	r0, #0
 800959e:	e01e      	b.n	80095de <__sflush_r+0xfa>
 80095a0:	690e      	ldr	r6, [r1, #16]
 80095a2:	2e00      	cmp	r6, #0
 80095a4:	d0fa      	beq.n	800959c <__sflush_r+0xb8>
 80095a6:	680f      	ldr	r7, [r1, #0]
 80095a8:	600e      	str	r6, [r1, #0]
 80095aa:	1bba      	subs	r2, r7, r6
 80095ac:	9201      	str	r2, [sp, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	079b      	lsls	r3, r3, #30
 80095b2:	d100      	bne.n	80095b6 <__sflush_r+0xd2>
 80095b4:	694a      	ldr	r2, [r1, #20]
 80095b6:	60a2      	str	r2, [r4, #8]
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	ddee      	ble.n	800959c <__sflush_r+0xb8>
 80095be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80095c0:	0032      	movs	r2, r6
 80095c2:	001f      	movs	r7, r3
 80095c4:	0028      	movs	r0, r5
 80095c6:	9b01      	ldr	r3, [sp, #4]
 80095c8:	6a21      	ldr	r1, [r4, #32]
 80095ca:	47b8      	blx	r7
 80095cc:	2800      	cmp	r0, #0
 80095ce:	dc07      	bgt.n	80095e0 <__sflush_r+0xfc>
 80095d0:	89a2      	ldrh	r2, [r4, #12]
 80095d2:	2340      	movs	r3, #64	@ 0x40
 80095d4:	2001      	movs	r0, #1
 80095d6:	4313      	orrs	r3, r2
 80095d8:	b21b      	sxth	r3, r3
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	4240      	negs	r0, r0
 80095de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095e0:	9b01      	ldr	r3, [sp, #4]
 80095e2:	1836      	adds	r6, r6, r0
 80095e4:	1a1b      	subs	r3, r3, r0
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	e7e6      	b.n	80095b8 <__sflush_r+0xd4>
 80095ea:	46c0      	nop			@ (mov r8, r8)
 80095ec:	dfbffffe 	.word	0xdfbffffe

080095f0 <_fflush_r>:
 80095f0:	690b      	ldr	r3, [r1, #16]
 80095f2:	b570      	push	{r4, r5, r6, lr}
 80095f4:	0005      	movs	r5, r0
 80095f6:	000c      	movs	r4, r1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <_fflush_r+0x12>
 80095fc:	2500      	movs	r5, #0
 80095fe:	0028      	movs	r0, r5
 8009600:	bd70      	pop	{r4, r5, r6, pc}
 8009602:	2800      	cmp	r0, #0
 8009604:	d004      	beq.n	8009610 <_fflush_r+0x20>
 8009606:	6a03      	ldr	r3, [r0, #32]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <_fflush_r+0x20>
 800960c:	f7fe f9ae 	bl	800796c <__sinit>
 8009610:	220c      	movs	r2, #12
 8009612:	5ea3      	ldrsh	r3, [r4, r2]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0f1      	beq.n	80095fc <_fflush_r+0xc>
 8009618:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800961a:	07d2      	lsls	r2, r2, #31
 800961c:	d404      	bmi.n	8009628 <_fflush_r+0x38>
 800961e:	059b      	lsls	r3, r3, #22
 8009620:	d402      	bmi.n	8009628 <_fflush_r+0x38>
 8009622:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009624:	f7fe fac7 	bl	8007bb6 <__retarget_lock_acquire_recursive>
 8009628:	0028      	movs	r0, r5
 800962a:	0021      	movs	r1, r4
 800962c:	f7ff ff5a 	bl	80094e4 <__sflush_r>
 8009630:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009632:	0005      	movs	r5, r0
 8009634:	07db      	lsls	r3, r3, #31
 8009636:	d4e2      	bmi.n	80095fe <_fflush_r+0xe>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	059b      	lsls	r3, r3, #22
 800963c:	d4df      	bmi.n	80095fe <_fflush_r+0xe>
 800963e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009640:	f7fe faba 	bl	8007bb8 <__retarget_lock_release_recursive>
 8009644:	e7db      	b.n	80095fe <_fflush_r+0xe>

08009646 <memmove>:
 8009646:	b510      	push	{r4, lr}
 8009648:	4288      	cmp	r0, r1
 800964a:	d806      	bhi.n	800965a <memmove+0x14>
 800964c:	2300      	movs	r3, #0
 800964e:	429a      	cmp	r2, r3
 8009650:	d008      	beq.n	8009664 <memmove+0x1e>
 8009652:	5ccc      	ldrb	r4, [r1, r3]
 8009654:	54c4      	strb	r4, [r0, r3]
 8009656:	3301      	adds	r3, #1
 8009658:	e7f9      	b.n	800964e <memmove+0x8>
 800965a:	188b      	adds	r3, r1, r2
 800965c:	4298      	cmp	r0, r3
 800965e:	d2f5      	bcs.n	800964c <memmove+0x6>
 8009660:	3a01      	subs	r2, #1
 8009662:	d200      	bcs.n	8009666 <memmove+0x20>
 8009664:	bd10      	pop	{r4, pc}
 8009666:	5c8b      	ldrb	r3, [r1, r2]
 8009668:	5483      	strb	r3, [r0, r2]
 800966a:	e7f9      	b.n	8009660 <memmove+0x1a>

0800966c <_sbrk_r>:
 800966c:	2300      	movs	r3, #0
 800966e:	b570      	push	{r4, r5, r6, lr}
 8009670:	4d06      	ldr	r5, [pc, #24]	@ (800968c <_sbrk_r+0x20>)
 8009672:	0004      	movs	r4, r0
 8009674:	0008      	movs	r0, r1
 8009676:	602b      	str	r3, [r5, #0]
 8009678:	f7f9 fe50 	bl	800331c <_sbrk>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	d103      	bne.n	8009688 <_sbrk_r+0x1c>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d000      	beq.n	8009688 <_sbrk_r+0x1c>
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	bd70      	pop	{r4, r5, r6, pc}
 800968a:	46c0      	nop			@ (mov r8, r8)
 800968c:	20000658 	.word	0x20000658

08009690 <memcpy>:
 8009690:	2300      	movs	r3, #0
 8009692:	b510      	push	{r4, lr}
 8009694:	429a      	cmp	r2, r3
 8009696:	d100      	bne.n	800969a <memcpy+0xa>
 8009698:	bd10      	pop	{r4, pc}
 800969a:	5ccc      	ldrb	r4, [r1, r3]
 800969c:	54c4      	strb	r4, [r0, r3]
 800969e:	3301      	adds	r3, #1
 80096a0:	e7f8      	b.n	8009694 <memcpy+0x4>
	...

080096a4 <__assert_func>:
 80096a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80096a6:	0014      	movs	r4, r2
 80096a8:	001a      	movs	r2, r3
 80096aa:	4b09      	ldr	r3, [pc, #36]	@ (80096d0 <__assert_func+0x2c>)
 80096ac:	0005      	movs	r5, r0
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	000e      	movs	r6, r1
 80096b2:	68d8      	ldr	r0, [r3, #12]
 80096b4:	4b07      	ldr	r3, [pc, #28]	@ (80096d4 <__assert_func+0x30>)
 80096b6:	2c00      	cmp	r4, #0
 80096b8:	d101      	bne.n	80096be <__assert_func+0x1a>
 80096ba:	4b07      	ldr	r3, [pc, #28]	@ (80096d8 <__assert_func+0x34>)
 80096bc:	001c      	movs	r4, r3
 80096be:	4907      	ldr	r1, [pc, #28]	@ (80096dc <__assert_func+0x38>)
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	9402      	str	r4, [sp, #8]
 80096c4:	002b      	movs	r3, r5
 80096c6:	9600      	str	r6, [sp, #0]
 80096c8:	f000 f886 	bl	80097d8 <fiprintf>
 80096cc:	f000 f894 	bl	80097f8 <abort>
 80096d0:	20000018 	.word	0x20000018
 80096d4:	0800a083 	.word	0x0800a083
 80096d8:	0800a0be 	.word	0x0800a0be
 80096dc:	0800a090 	.word	0x0800a090

080096e0 <_calloc_r>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	0c0b      	lsrs	r3, r1, #16
 80096e4:	0c15      	lsrs	r5, r2, #16
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d11e      	bne.n	8009728 <_calloc_r+0x48>
 80096ea:	2d00      	cmp	r5, #0
 80096ec:	d10c      	bne.n	8009708 <_calloc_r+0x28>
 80096ee:	b289      	uxth	r1, r1
 80096f0:	b294      	uxth	r4, r2
 80096f2:	434c      	muls	r4, r1
 80096f4:	0021      	movs	r1, r4
 80096f6:	f7ff f963 	bl	80089c0 <_malloc_r>
 80096fa:	1e05      	subs	r5, r0, #0
 80096fc:	d01a      	beq.n	8009734 <_calloc_r+0x54>
 80096fe:	0022      	movs	r2, r4
 8009700:	2100      	movs	r1, #0
 8009702:	f7fe f9d3 	bl	8007aac <memset>
 8009706:	e016      	b.n	8009736 <_calloc_r+0x56>
 8009708:	1c2b      	adds	r3, r5, #0
 800970a:	1c0c      	adds	r4, r1, #0
 800970c:	b289      	uxth	r1, r1
 800970e:	b292      	uxth	r2, r2
 8009710:	434a      	muls	r2, r1
 8009712:	b29b      	uxth	r3, r3
 8009714:	b2a1      	uxth	r1, r4
 8009716:	4359      	muls	r1, r3
 8009718:	0c14      	lsrs	r4, r2, #16
 800971a:	190c      	adds	r4, r1, r4
 800971c:	0c23      	lsrs	r3, r4, #16
 800971e:	d107      	bne.n	8009730 <_calloc_r+0x50>
 8009720:	0424      	lsls	r4, r4, #16
 8009722:	b292      	uxth	r2, r2
 8009724:	4314      	orrs	r4, r2
 8009726:	e7e5      	b.n	80096f4 <_calloc_r+0x14>
 8009728:	2d00      	cmp	r5, #0
 800972a:	d101      	bne.n	8009730 <_calloc_r+0x50>
 800972c:	1c14      	adds	r4, r2, #0
 800972e:	e7ed      	b.n	800970c <_calloc_r+0x2c>
 8009730:	230c      	movs	r3, #12
 8009732:	6003      	str	r3, [r0, #0]
 8009734:	2500      	movs	r5, #0
 8009736:	0028      	movs	r0, r5
 8009738:	bd70      	pop	{r4, r5, r6, pc}

0800973a <__ascii_mbtowc>:
 800973a:	b082      	sub	sp, #8
 800973c:	2900      	cmp	r1, #0
 800973e:	d100      	bne.n	8009742 <__ascii_mbtowc+0x8>
 8009740:	a901      	add	r1, sp, #4
 8009742:	1e10      	subs	r0, r2, #0
 8009744:	d006      	beq.n	8009754 <__ascii_mbtowc+0x1a>
 8009746:	2b00      	cmp	r3, #0
 8009748:	d006      	beq.n	8009758 <__ascii_mbtowc+0x1e>
 800974a:	7813      	ldrb	r3, [r2, #0]
 800974c:	600b      	str	r3, [r1, #0]
 800974e:	7810      	ldrb	r0, [r2, #0]
 8009750:	1e43      	subs	r3, r0, #1
 8009752:	4198      	sbcs	r0, r3
 8009754:	b002      	add	sp, #8
 8009756:	4770      	bx	lr
 8009758:	2002      	movs	r0, #2
 800975a:	4240      	negs	r0, r0
 800975c:	e7fa      	b.n	8009754 <__ascii_mbtowc+0x1a>

0800975e <_realloc_r>:
 800975e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009760:	0006      	movs	r6, r0
 8009762:	000c      	movs	r4, r1
 8009764:	0015      	movs	r5, r2
 8009766:	2900      	cmp	r1, #0
 8009768:	d105      	bne.n	8009776 <_realloc_r+0x18>
 800976a:	0011      	movs	r1, r2
 800976c:	f7ff f928 	bl	80089c0 <_malloc_r>
 8009770:	0004      	movs	r4, r0
 8009772:	0020      	movs	r0, r4
 8009774:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009776:	2a00      	cmp	r2, #0
 8009778:	d103      	bne.n	8009782 <_realloc_r+0x24>
 800977a:	f7ff f8ab 	bl	80088d4 <_free_r>
 800977e:	2400      	movs	r4, #0
 8009780:	e7f7      	b.n	8009772 <_realloc_r+0x14>
 8009782:	f000 f840 	bl	8009806 <_malloc_usable_size_r>
 8009786:	0007      	movs	r7, r0
 8009788:	4285      	cmp	r5, r0
 800978a:	d802      	bhi.n	8009792 <_realloc_r+0x34>
 800978c:	0843      	lsrs	r3, r0, #1
 800978e:	42ab      	cmp	r3, r5
 8009790:	d3ef      	bcc.n	8009772 <_realloc_r+0x14>
 8009792:	0029      	movs	r1, r5
 8009794:	0030      	movs	r0, r6
 8009796:	f7ff f913 	bl	80089c0 <_malloc_r>
 800979a:	9001      	str	r0, [sp, #4]
 800979c:	2800      	cmp	r0, #0
 800979e:	d0ee      	beq.n	800977e <_realloc_r+0x20>
 80097a0:	002a      	movs	r2, r5
 80097a2:	42bd      	cmp	r5, r7
 80097a4:	d900      	bls.n	80097a8 <_realloc_r+0x4a>
 80097a6:	003a      	movs	r2, r7
 80097a8:	0021      	movs	r1, r4
 80097aa:	9801      	ldr	r0, [sp, #4]
 80097ac:	f7ff ff70 	bl	8009690 <memcpy>
 80097b0:	0021      	movs	r1, r4
 80097b2:	0030      	movs	r0, r6
 80097b4:	f7ff f88e 	bl	80088d4 <_free_r>
 80097b8:	9c01      	ldr	r4, [sp, #4]
 80097ba:	e7da      	b.n	8009772 <_realloc_r+0x14>

080097bc <__ascii_wctomb>:
 80097bc:	0003      	movs	r3, r0
 80097be:	1e08      	subs	r0, r1, #0
 80097c0:	d005      	beq.n	80097ce <__ascii_wctomb+0x12>
 80097c2:	2aff      	cmp	r2, #255	@ 0xff
 80097c4:	d904      	bls.n	80097d0 <__ascii_wctomb+0x14>
 80097c6:	228a      	movs	r2, #138	@ 0x8a
 80097c8:	2001      	movs	r0, #1
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	4240      	negs	r0, r0
 80097ce:	4770      	bx	lr
 80097d0:	2001      	movs	r0, #1
 80097d2:	700a      	strb	r2, [r1, #0]
 80097d4:	e7fb      	b.n	80097ce <__ascii_wctomb+0x12>
	...

080097d8 <fiprintf>:
 80097d8:	b40e      	push	{r1, r2, r3}
 80097da:	b517      	push	{r0, r1, r2, r4, lr}
 80097dc:	4c05      	ldr	r4, [pc, #20]	@ (80097f4 <fiprintf+0x1c>)
 80097de:	ab05      	add	r3, sp, #20
 80097e0:	cb04      	ldmia	r3!, {r2}
 80097e2:	0001      	movs	r1, r0
 80097e4:	6820      	ldr	r0, [r4, #0]
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	f000 f83c 	bl	8009864 <_vfiprintf_r>
 80097ec:	bc1e      	pop	{r1, r2, r3, r4}
 80097ee:	bc08      	pop	{r3}
 80097f0:	b003      	add	sp, #12
 80097f2:	4718      	bx	r3
 80097f4:	20000018 	.word	0x20000018

080097f8 <abort>:
 80097f8:	2006      	movs	r0, #6
 80097fa:	b510      	push	{r4, lr}
 80097fc:	f000 fa18 	bl	8009c30 <raise>
 8009800:	2001      	movs	r0, #1
 8009802:	f7f9 fd18 	bl	8003236 <_exit>

08009806 <_malloc_usable_size_r>:
 8009806:	1f0b      	subs	r3, r1, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	1f18      	subs	r0, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	da01      	bge.n	8009814 <_malloc_usable_size_r+0xe>
 8009810:	580b      	ldr	r3, [r1, r0]
 8009812:	18c0      	adds	r0, r0, r3
 8009814:	4770      	bx	lr

08009816 <__sfputc_r>:
 8009816:	6893      	ldr	r3, [r2, #8]
 8009818:	b510      	push	{r4, lr}
 800981a:	3b01      	subs	r3, #1
 800981c:	6093      	str	r3, [r2, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	da04      	bge.n	800982c <__sfputc_r+0x16>
 8009822:	6994      	ldr	r4, [r2, #24]
 8009824:	42a3      	cmp	r3, r4
 8009826:	db07      	blt.n	8009838 <__sfputc_r+0x22>
 8009828:	290a      	cmp	r1, #10
 800982a:	d005      	beq.n	8009838 <__sfputc_r+0x22>
 800982c:	6813      	ldr	r3, [r2, #0]
 800982e:	1c58      	adds	r0, r3, #1
 8009830:	6010      	str	r0, [r2, #0]
 8009832:	7019      	strb	r1, [r3, #0]
 8009834:	0008      	movs	r0, r1
 8009836:	bd10      	pop	{r4, pc}
 8009838:	f000 f930 	bl	8009a9c <__swbuf_r>
 800983c:	0001      	movs	r1, r0
 800983e:	e7f9      	b.n	8009834 <__sfputc_r+0x1e>

08009840 <__sfputs_r>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	0006      	movs	r6, r0
 8009844:	000f      	movs	r7, r1
 8009846:	0014      	movs	r4, r2
 8009848:	18d5      	adds	r5, r2, r3
 800984a:	42ac      	cmp	r4, r5
 800984c:	d101      	bne.n	8009852 <__sfputs_r+0x12>
 800984e:	2000      	movs	r0, #0
 8009850:	e007      	b.n	8009862 <__sfputs_r+0x22>
 8009852:	7821      	ldrb	r1, [r4, #0]
 8009854:	003a      	movs	r2, r7
 8009856:	0030      	movs	r0, r6
 8009858:	f7ff ffdd 	bl	8009816 <__sfputc_r>
 800985c:	3401      	adds	r4, #1
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	d1f3      	bne.n	800984a <__sfputs_r+0xa>
 8009862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009864 <_vfiprintf_r>:
 8009864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009866:	b0a1      	sub	sp, #132	@ 0x84
 8009868:	000f      	movs	r7, r1
 800986a:	0015      	movs	r5, r2
 800986c:	001e      	movs	r6, r3
 800986e:	9003      	str	r0, [sp, #12]
 8009870:	2800      	cmp	r0, #0
 8009872:	d004      	beq.n	800987e <_vfiprintf_r+0x1a>
 8009874:	6a03      	ldr	r3, [r0, #32]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <_vfiprintf_r+0x1a>
 800987a:	f7fe f877 	bl	800796c <__sinit>
 800987e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009880:	07db      	lsls	r3, r3, #31
 8009882:	d405      	bmi.n	8009890 <_vfiprintf_r+0x2c>
 8009884:	89bb      	ldrh	r3, [r7, #12]
 8009886:	059b      	lsls	r3, r3, #22
 8009888:	d402      	bmi.n	8009890 <_vfiprintf_r+0x2c>
 800988a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800988c:	f7fe f993 	bl	8007bb6 <__retarget_lock_acquire_recursive>
 8009890:	89bb      	ldrh	r3, [r7, #12]
 8009892:	071b      	lsls	r3, r3, #28
 8009894:	d502      	bpl.n	800989c <_vfiprintf_r+0x38>
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d113      	bne.n	80098c4 <_vfiprintf_r+0x60>
 800989c:	0039      	movs	r1, r7
 800989e:	9803      	ldr	r0, [sp, #12]
 80098a0:	f000 f93e 	bl	8009b20 <__swsetup_r>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d00d      	beq.n	80098c4 <_vfiprintf_r+0x60>
 80098a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098aa:	07db      	lsls	r3, r3, #31
 80098ac:	d503      	bpl.n	80098b6 <_vfiprintf_r+0x52>
 80098ae:	2001      	movs	r0, #1
 80098b0:	4240      	negs	r0, r0
 80098b2:	b021      	add	sp, #132	@ 0x84
 80098b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098b6:	89bb      	ldrh	r3, [r7, #12]
 80098b8:	059b      	lsls	r3, r3, #22
 80098ba:	d4f8      	bmi.n	80098ae <_vfiprintf_r+0x4a>
 80098bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80098be:	f7fe f97b 	bl	8007bb8 <__retarget_lock_release_recursive>
 80098c2:	e7f4      	b.n	80098ae <_vfiprintf_r+0x4a>
 80098c4:	2300      	movs	r3, #0
 80098c6:	ac08      	add	r4, sp, #32
 80098c8:	6163      	str	r3, [r4, #20]
 80098ca:	3320      	adds	r3, #32
 80098cc:	7663      	strb	r3, [r4, #25]
 80098ce:	3310      	adds	r3, #16
 80098d0:	76a3      	strb	r3, [r4, #26]
 80098d2:	9607      	str	r6, [sp, #28]
 80098d4:	002e      	movs	r6, r5
 80098d6:	7833      	ldrb	r3, [r6, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <_vfiprintf_r+0x7c>
 80098dc:	2b25      	cmp	r3, #37	@ 0x25
 80098de:	d148      	bne.n	8009972 <_vfiprintf_r+0x10e>
 80098e0:	1b73      	subs	r3, r6, r5
 80098e2:	9305      	str	r3, [sp, #20]
 80098e4:	42ae      	cmp	r6, r5
 80098e6:	d00b      	beq.n	8009900 <_vfiprintf_r+0x9c>
 80098e8:	002a      	movs	r2, r5
 80098ea:	0039      	movs	r1, r7
 80098ec:	9803      	ldr	r0, [sp, #12]
 80098ee:	f7ff ffa7 	bl	8009840 <__sfputs_r>
 80098f2:	3001      	adds	r0, #1
 80098f4:	d100      	bne.n	80098f8 <_vfiprintf_r+0x94>
 80098f6:	e0ae      	b.n	8009a56 <_vfiprintf_r+0x1f2>
 80098f8:	6963      	ldr	r3, [r4, #20]
 80098fa:	9a05      	ldr	r2, [sp, #20]
 80098fc:	189b      	adds	r3, r3, r2
 80098fe:	6163      	str	r3, [r4, #20]
 8009900:	7833      	ldrb	r3, [r6, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d100      	bne.n	8009908 <_vfiprintf_r+0xa4>
 8009906:	e0a6      	b.n	8009a56 <_vfiprintf_r+0x1f2>
 8009908:	2201      	movs	r2, #1
 800990a:	2300      	movs	r3, #0
 800990c:	4252      	negs	r2, r2
 800990e:	6062      	str	r2, [r4, #4]
 8009910:	a904      	add	r1, sp, #16
 8009912:	3254      	adds	r2, #84	@ 0x54
 8009914:	1852      	adds	r2, r2, r1
 8009916:	1c75      	adds	r5, r6, #1
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	60e3      	str	r3, [r4, #12]
 800991c:	60a3      	str	r3, [r4, #8]
 800991e:	7013      	strb	r3, [r2, #0]
 8009920:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009922:	4b59      	ldr	r3, [pc, #356]	@ (8009a88 <_vfiprintf_r+0x224>)
 8009924:	2205      	movs	r2, #5
 8009926:	0018      	movs	r0, r3
 8009928:	7829      	ldrb	r1, [r5, #0]
 800992a:	9305      	str	r3, [sp, #20]
 800992c:	f7fe f945 	bl	8007bba <memchr>
 8009930:	1c6e      	adds	r6, r5, #1
 8009932:	2800      	cmp	r0, #0
 8009934:	d11f      	bne.n	8009976 <_vfiprintf_r+0x112>
 8009936:	6822      	ldr	r2, [r4, #0]
 8009938:	06d3      	lsls	r3, r2, #27
 800993a:	d504      	bpl.n	8009946 <_vfiprintf_r+0xe2>
 800993c:	2353      	movs	r3, #83	@ 0x53
 800993e:	a904      	add	r1, sp, #16
 8009940:	185b      	adds	r3, r3, r1
 8009942:	2120      	movs	r1, #32
 8009944:	7019      	strb	r1, [r3, #0]
 8009946:	0713      	lsls	r3, r2, #28
 8009948:	d504      	bpl.n	8009954 <_vfiprintf_r+0xf0>
 800994a:	2353      	movs	r3, #83	@ 0x53
 800994c:	a904      	add	r1, sp, #16
 800994e:	185b      	adds	r3, r3, r1
 8009950:	212b      	movs	r1, #43	@ 0x2b
 8009952:	7019      	strb	r1, [r3, #0]
 8009954:	782b      	ldrb	r3, [r5, #0]
 8009956:	2b2a      	cmp	r3, #42	@ 0x2a
 8009958:	d016      	beq.n	8009988 <_vfiprintf_r+0x124>
 800995a:	002e      	movs	r6, r5
 800995c:	2100      	movs	r1, #0
 800995e:	200a      	movs	r0, #10
 8009960:	68e3      	ldr	r3, [r4, #12]
 8009962:	7832      	ldrb	r2, [r6, #0]
 8009964:	1c75      	adds	r5, r6, #1
 8009966:	3a30      	subs	r2, #48	@ 0x30
 8009968:	2a09      	cmp	r2, #9
 800996a:	d950      	bls.n	8009a0e <_vfiprintf_r+0x1aa>
 800996c:	2900      	cmp	r1, #0
 800996e:	d111      	bne.n	8009994 <_vfiprintf_r+0x130>
 8009970:	e017      	b.n	80099a2 <_vfiprintf_r+0x13e>
 8009972:	3601      	adds	r6, #1
 8009974:	e7af      	b.n	80098d6 <_vfiprintf_r+0x72>
 8009976:	9b05      	ldr	r3, [sp, #20]
 8009978:	6822      	ldr	r2, [r4, #0]
 800997a:	1ac0      	subs	r0, r0, r3
 800997c:	2301      	movs	r3, #1
 800997e:	4083      	lsls	r3, r0
 8009980:	4313      	orrs	r3, r2
 8009982:	0035      	movs	r5, r6
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	e7cc      	b.n	8009922 <_vfiprintf_r+0xbe>
 8009988:	9b07      	ldr	r3, [sp, #28]
 800998a:	1d19      	adds	r1, r3, #4
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	9107      	str	r1, [sp, #28]
 8009990:	2b00      	cmp	r3, #0
 8009992:	db01      	blt.n	8009998 <_vfiprintf_r+0x134>
 8009994:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009996:	e004      	b.n	80099a2 <_vfiprintf_r+0x13e>
 8009998:	425b      	negs	r3, r3
 800999a:	60e3      	str	r3, [r4, #12]
 800999c:	2302      	movs	r3, #2
 800999e:	4313      	orrs	r3, r2
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	7833      	ldrb	r3, [r6, #0]
 80099a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80099a6:	d10c      	bne.n	80099c2 <_vfiprintf_r+0x15e>
 80099a8:	7873      	ldrb	r3, [r6, #1]
 80099aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80099ac:	d134      	bne.n	8009a18 <_vfiprintf_r+0x1b4>
 80099ae:	9b07      	ldr	r3, [sp, #28]
 80099b0:	3602      	adds	r6, #2
 80099b2:	1d1a      	adds	r2, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9207      	str	r2, [sp, #28]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	da01      	bge.n	80099c0 <_vfiprintf_r+0x15c>
 80099bc:	2301      	movs	r3, #1
 80099be:	425b      	negs	r3, r3
 80099c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80099c2:	4d32      	ldr	r5, [pc, #200]	@ (8009a8c <_vfiprintf_r+0x228>)
 80099c4:	2203      	movs	r2, #3
 80099c6:	0028      	movs	r0, r5
 80099c8:	7831      	ldrb	r1, [r6, #0]
 80099ca:	f7fe f8f6 	bl	8007bba <memchr>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d006      	beq.n	80099e0 <_vfiprintf_r+0x17c>
 80099d2:	2340      	movs	r3, #64	@ 0x40
 80099d4:	1b40      	subs	r0, r0, r5
 80099d6:	4083      	lsls	r3, r0
 80099d8:	6822      	ldr	r2, [r4, #0]
 80099da:	3601      	adds	r6, #1
 80099dc:	4313      	orrs	r3, r2
 80099de:	6023      	str	r3, [r4, #0]
 80099e0:	7831      	ldrb	r1, [r6, #0]
 80099e2:	2206      	movs	r2, #6
 80099e4:	482a      	ldr	r0, [pc, #168]	@ (8009a90 <_vfiprintf_r+0x22c>)
 80099e6:	1c75      	adds	r5, r6, #1
 80099e8:	7621      	strb	r1, [r4, #24]
 80099ea:	f7fe f8e6 	bl	8007bba <memchr>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d040      	beq.n	8009a74 <_vfiprintf_r+0x210>
 80099f2:	4b28      	ldr	r3, [pc, #160]	@ (8009a94 <_vfiprintf_r+0x230>)
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d122      	bne.n	8009a3e <_vfiprintf_r+0x1da>
 80099f8:	2207      	movs	r2, #7
 80099fa:	9b07      	ldr	r3, [sp, #28]
 80099fc:	3307      	adds	r3, #7
 80099fe:	4393      	bics	r3, r2
 8009a00:	3308      	adds	r3, #8
 8009a02:	9307      	str	r3, [sp, #28]
 8009a04:	6963      	ldr	r3, [r4, #20]
 8009a06:	9a04      	ldr	r2, [sp, #16]
 8009a08:	189b      	adds	r3, r3, r2
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	e762      	b.n	80098d4 <_vfiprintf_r+0x70>
 8009a0e:	4343      	muls	r3, r0
 8009a10:	002e      	movs	r6, r5
 8009a12:	2101      	movs	r1, #1
 8009a14:	189b      	adds	r3, r3, r2
 8009a16:	e7a4      	b.n	8009962 <_vfiprintf_r+0xfe>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	200a      	movs	r0, #10
 8009a1c:	0019      	movs	r1, r3
 8009a1e:	3601      	adds	r6, #1
 8009a20:	6063      	str	r3, [r4, #4]
 8009a22:	7832      	ldrb	r2, [r6, #0]
 8009a24:	1c75      	adds	r5, r6, #1
 8009a26:	3a30      	subs	r2, #48	@ 0x30
 8009a28:	2a09      	cmp	r2, #9
 8009a2a:	d903      	bls.n	8009a34 <_vfiprintf_r+0x1d0>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0c8      	beq.n	80099c2 <_vfiprintf_r+0x15e>
 8009a30:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a32:	e7c6      	b.n	80099c2 <_vfiprintf_r+0x15e>
 8009a34:	4341      	muls	r1, r0
 8009a36:	002e      	movs	r6, r5
 8009a38:	2301      	movs	r3, #1
 8009a3a:	1889      	adds	r1, r1, r2
 8009a3c:	e7f1      	b.n	8009a22 <_vfiprintf_r+0x1be>
 8009a3e:	aa07      	add	r2, sp, #28
 8009a40:	9200      	str	r2, [sp, #0]
 8009a42:	0021      	movs	r1, r4
 8009a44:	003a      	movs	r2, r7
 8009a46:	4b14      	ldr	r3, [pc, #80]	@ (8009a98 <_vfiprintf_r+0x234>)
 8009a48:	9803      	ldr	r0, [sp, #12]
 8009a4a:	f7fd fb43 	bl	80070d4 <_printf_float>
 8009a4e:	9004      	str	r0, [sp, #16]
 8009a50:	9b04      	ldr	r3, [sp, #16]
 8009a52:	3301      	adds	r3, #1
 8009a54:	d1d6      	bne.n	8009a04 <_vfiprintf_r+0x1a0>
 8009a56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a58:	07db      	lsls	r3, r3, #31
 8009a5a:	d405      	bmi.n	8009a68 <_vfiprintf_r+0x204>
 8009a5c:	89bb      	ldrh	r3, [r7, #12]
 8009a5e:	059b      	lsls	r3, r3, #22
 8009a60:	d402      	bmi.n	8009a68 <_vfiprintf_r+0x204>
 8009a62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009a64:	f7fe f8a8 	bl	8007bb8 <__retarget_lock_release_recursive>
 8009a68:	89bb      	ldrh	r3, [r7, #12]
 8009a6a:	065b      	lsls	r3, r3, #25
 8009a6c:	d500      	bpl.n	8009a70 <_vfiprintf_r+0x20c>
 8009a6e:	e71e      	b.n	80098ae <_vfiprintf_r+0x4a>
 8009a70:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009a72:	e71e      	b.n	80098b2 <_vfiprintf_r+0x4e>
 8009a74:	aa07      	add	r2, sp, #28
 8009a76:	9200      	str	r2, [sp, #0]
 8009a78:	0021      	movs	r1, r4
 8009a7a:	003a      	movs	r2, r7
 8009a7c:	4b06      	ldr	r3, [pc, #24]	@ (8009a98 <_vfiprintf_r+0x234>)
 8009a7e:	9803      	ldr	r0, [sp, #12]
 8009a80:	f7fd fdd6 	bl	8007630 <_printf_i>
 8009a84:	e7e3      	b.n	8009a4e <_vfiprintf_r+0x1ea>
 8009a86:	46c0      	nop			@ (mov r8, r8)
 8009a88:	0800a068 	.word	0x0800a068
 8009a8c:	0800a06e 	.word	0x0800a06e
 8009a90:	0800a072 	.word	0x0800a072
 8009a94:	080070d5 	.word	0x080070d5
 8009a98:	08009841 	.word	0x08009841

08009a9c <__swbuf_r>:
 8009a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9e:	0006      	movs	r6, r0
 8009aa0:	000d      	movs	r5, r1
 8009aa2:	0014      	movs	r4, r2
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d004      	beq.n	8009ab2 <__swbuf_r+0x16>
 8009aa8:	6a03      	ldr	r3, [r0, #32]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <__swbuf_r+0x16>
 8009aae:	f7fd ff5d 	bl	800796c <__sinit>
 8009ab2:	69a3      	ldr	r3, [r4, #24]
 8009ab4:	60a3      	str	r3, [r4, #8]
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	071b      	lsls	r3, r3, #28
 8009aba:	d502      	bpl.n	8009ac2 <__swbuf_r+0x26>
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d109      	bne.n	8009ad6 <__swbuf_r+0x3a>
 8009ac2:	0021      	movs	r1, r4
 8009ac4:	0030      	movs	r0, r6
 8009ac6:	f000 f82b 	bl	8009b20 <__swsetup_r>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d003      	beq.n	8009ad6 <__swbuf_r+0x3a>
 8009ace:	2501      	movs	r5, #1
 8009ad0:	426d      	negs	r5, r5
 8009ad2:	0028      	movs	r0, r5
 8009ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad6:	6923      	ldr	r3, [r4, #16]
 8009ad8:	6820      	ldr	r0, [r4, #0]
 8009ada:	b2ef      	uxtb	r7, r5
 8009adc:	1ac0      	subs	r0, r0, r3
 8009ade:	6963      	ldr	r3, [r4, #20]
 8009ae0:	b2ed      	uxtb	r5, r5
 8009ae2:	4283      	cmp	r3, r0
 8009ae4:	dc05      	bgt.n	8009af2 <__swbuf_r+0x56>
 8009ae6:	0021      	movs	r1, r4
 8009ae8:	0030      	movs	r0, r6
 8009aea:	f7ff fd81 	bl	80095f0 <_fflush_r>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d1ed      	bne.n	8009ace <__swbuf_r+0x32>
 8009af2:	68a3      	ldr	r3, [r4, #8]
 8009af4:	3001      	adds	r0, #1
 8009af6:	3b01      	subs	r3, #1
 8009af8:	60a3      	str	r3, [r4, #8]
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	6022      	str	r2, [r4, #0]
 8009b00:	701f      	strb	r7, [r3, #0]
 8009b02:	6963      	ldr	r3, [r4, #20]
 8009b04:	4283      	cmp	r3, r0
 8009b06:	d004      	beq.n	8009b12 <__swbuf_r+0x76>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	07db      	lsls	r3, r3, #31
 8009b0c:	d5e1      	bpl.n	8009ad2 <__swbuf_r+0x36>
 8009b0e:	2d0a      	cmp	r5, #10
 8009b10:	d1df      	bne.n	8009ad2 <__swbuf_r+0x36>
 8009b12:	0021      	movs	r1, r4
 8009b14:	0030      	movs	r0, r6
 8009b16:	f7ff fd6b 	bl	80095f0 <_fflush_r>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d0d9      	beq.n	8009ad2 <__swbuf_r+0x36>
 8009b1e:	e7d6      	b.n	8009ace <__swbuf_r+0x32>

08009b20 <__swsetup_r>:
 8009b20:	4b2d      	ldr	r3, [pc, #180]	@ (8009bd8 <__swsetup_r+0xb8>)
 8009b22:	b570      	push	{r4, r5, r6, lr}
 8009b24:	0005      	movs	r5, r0
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	000c      	movs	r4, r1
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d004      	beq.n	8009b38 <__swsetup_r+0x18>
 8009b2e:	6a03      	ldr	r3, [r0, #32]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <__swsetup_r+0x18>
 8009b34:	f7fd ff1a 	bl	800796c <__sinit>
 8009b38:	230c      	movs	r3, #12
 8009b3a:	5ee2      	ldrsh	r2, [r4, r3]
 8009b3c:	0713      	lsls	r3, r2, #28
 8009b3e:	d423      	bmi.n	8009b88 <__swsetup_r+0x68>
 8009b40:	06d3      	lsls	r3, r2, #27
 8009b42:	d407      	bmi.n	8009b54 <__swsetup_r+0x34>
 8009b44:	2309      	movs	r3, #9
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	2340      	movs	r3, #64	@ 0x40
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	81a3      	strh	r3, [r4, #12]
 8009b50:	4240      	negs	r0, r0
 8009b52:	e03a      	b.n	8009bca <__swsetup_r+0xaa>
 8009b54:	0752      	lsls	r2, r2, #29
 8009b56:	d513      	bpl.n	8009b80 <__swsetup_r+0x60>
 8009b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	d008      	beq.n	8009b70 <__swsetup_r+0x50>
 8009b5e:	0023      	movs	r3, r4
 8009b60:	3344      	adds	r3, #68	@ 0x44
 8009b62:	4299      	cmp	r1, r3
 8009b64:	d002      	beq.n	8009b6c <__swsetup_r+0x4c>
 8009b66:	0028      	movs	r0, r5
 8009b68:	f7fe feb4 	bl	80088d4 <_free_r>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b70:	2224      	movs	r2, #36	@ 0x24
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	4393      	bics	r3, r2
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	6063      	str	r3, [r4, #4]
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	6023      	str	r3, [r4, #0]
 8009b80:	2308      	movs	r3, #8
 8009b82:	89a2      	ldrh	r2, [r4, #12]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10b      	bne.n	8009ba6 <__swsetup_r+0x86>
 8009b8e:	21a0      	movs	r1, #160	@ 0xa0
 8009b90:	2280      	movs	r2, #128	@ 0x80
 8009b92:	89a3      	ldrh	r3, [r4, #12]
 8009b94:	0089      	lsls	r1, r1, #2
 8009b96:	0092      	lsls	r2, r2, #2
 8009b98:	400b      	ands	r3, r1
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d003      	beq.n	8009ba6 <__swsetup_r+0x86>
 8009b9e:	0021      	movs	r1, r4
 8009ba0:	0028      	movs	r0, r5
 8009ba2:	f000 f88f 	bl	8009cc4 <__smakebuf_r>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	5ee2      	ldrsh	r2, [r4, r3]
 8009baa:	2101      	movs	r1, #1
 8009bac:	0013      	movs	r3, r2
 8009bae:	400b      	ands	r3, r1
 8009bb0:	420a      	tst	r2, r1
 8009bb2:	d00b      	beq.n	8009bcc <__swsetup_r+0xac>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60a3      	str	r3, [r4, #8]
 8009bb8:	6963      	ldr	r3, [r4, #20]
 8009bba:	425b      	negs	r3, r3
 8009bbc:	61a3      	str	r3, [r4, #24]
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	4283      	cmp	r3, r0
 8009bc4:	d101      	bne.n	8009bca <__swsetup_r+0xaa>
 8009bc6:	0613      	lsls	r3, r2, #24
 8009bc8:	d4be      	bmi.n	8009b48 <__swsetup_r+0x28>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	0791      	lsls	r1, r2, #30
 8009bce:	d400      	bmi.n	8009bd2 <__swsetup_r+0xb2>
 8009bd0:	6963      	ldr	r3, [r4, #20]
 8009bd2:	60a3      	str	r3, [r4, #8]
 8009bd4:	e7f3      	b.n	8009bbe <__swsetup_r+0x9e>
 8009bd6:	46c0      	nop			@ (mov r8, r8)
 8009bd8:	20000018 	.word	0x20000018

08009bdc <_raise_r>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	0004      	movs	r4, r0
 8009be0:	000d      	movs	r5, r1
 8009be2:	291f      	cmp	r1, #31
 8009be4:	d904      	bls.n	8009bf0 <_raise_r+0x14>
 8009be6:	2316      	movs	r3, #22
 8009be8:	6003      	str	r3, [r0, #0]
 8009bea:	2001      	movs	r0, #1
 8009bec:	4240      	negs	r0, r0
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d004      	beq.n	8009c00 <_raise_r+0x24>
 8009bf6:	008a      	lsls	r2, r1, #2
 8009bf8:	189b      	adds	r3, r3, r2
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	d108      	bne.n	8009c12 <_raise_r+0x36>
 8009c00:	0020      	movs	r0, r4
 8009c02:	f000 f831 	bl	8009c68 <_getpid_r>
 8009c06:	002a      	movs	r2, r5
 8009c08:	0001      	movs	r1, r0
 8009c0a:	0020      	movs	r0, r4
 8009c0c:	f000 f81a 	bl	8009c44 <_kill_r>
 8009c10:	e7ed      	b.n	8009bee <_raise_r+0x12>
 8009c12:	2a01      	cmp	r2, #1
 8009c14:	d009      	beq.n	8009c2a <_raise_r+0x4e>
 8009c16:	1c51      	adds	r1, r2, #1
 8009c18:	d103      	bne.n	8009c22 <_raise_r+0x46>
 8009c1a:	2316      	movs	r3, #22
 8009c1c:	6003      	str	r3, [r0, #0]
 8009c1e:	2001      	movs	r0, #1
 8009c20:	e7e5      	b.n	8009bee <_raise_r+0x12>
 8009c22:	2100      	movs	r1, #0
 8009c24:	0028      	movs	r0, r5
 8009c26:	6019      	str	r1, [r3, #0]
 8009c28:	4790      	blx	r2
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e7df      	b.n	8009bee <_raise_r+0x12>
	...

08009c30 <raise>:
 8009c30:	b510      	push	{r4, lr}
 8009c32:	4b03      	ldr	r3, [pc, #12]	@ (8009c40 <raise+0x10>)
 8009c34:	0001      	movs	r1, r0
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	f7ff ffd0 	bl	8009bdc <_raise_r>
 8009c3c:	bd10      	pop	{r4, pc}
 8009c3e:	46c0      	nop			@ (mov r8, r8)
 8009c40:	20000018 	.word	0x20000018

08009c44 <_kill_r>:
 8009c44:	2300      	movs	r3, #0
 8009c46:	b570      	push	{r4, r5, r6, lr}
 8009c48:	4d06      	ldr	r5, [pc, #24]	@ (8009c64 <_kill_r+0x20>)
 8009c4a:	0004      	movs	r4, r0
 8009c4c:	0008      	movs	r0, r1
 8009c4e:	0011      	movs	r1, r2
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	f7f9 fae0 	bl	8003216 <_kill>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d103      	bne.n	8009c62 <_kill_r+0x1e>
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d000      	beq.n	8009c62 <_kill_r+0x1e>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	20000658 	.word	0x20000658

08009c68 <_getpid_r>:
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	f7f9 face 	bl	800320a <_getpid>
 8009c6e:	bd10      	pop	{r4, pc}

08009c70 <__swhatbuf_r>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	000e      	movs	r6, r1
 8009c74:	001d      	movs	r5, r3
 8009c76:	230e      	movs	r3, #14
 8009c78:	5ec9      	ldrsh	r1, [r1, r3]
 8009c7a:	0014      	movs	r4, r2
 8009c7c:	b096      	sub	sp, #88	@ 0x58
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	da0c      	bge.n	8009c9c <__swhatbuf_r+0x2c>
 8009c82:	89b2      	ldrh	r2, [r6, #12]
 8009c84:	2380      	movs	r3, #128	@ 0x80
 8009c86:	0011      	movs	r1, r2
 8009c88:	4019      	ands	r1, r3
 8009c8a:	421a      	tst	r2, r3
 8009c8c:	d114      	bne.n	8009cb8 <__swhatbuf_r+0x48>
 8009c8e:	2380      	movs	r3, #128	@ 0x80
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	2000      	movs	r0, #0
 8009c94:	6029      	str	r1, [r5, #0]
 8009c96:	6023      	str	r3, [r4, #0]
 8009c98:	b016      	add	sp, #88	@ 0x58
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	466a      	mov	r2, sp
 8009c9e:	f000 f853 	bl	8009d48 <_fstat_r>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	dbed      	blt.n	8009c82 <__swhatbuf_r+0x12>
 8009ca6:	23f0      	movs	r3, #240	@ 0xf0
 8009ca8:	9901      	ldr	r1, [sp, #4]
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	4019      	ands	r1, r3
 8009cae:	4b04      	ldr	r3, [pc, #16]	@ (8009cc0 <__swhatbuf_r+0x50>)
 8009cb0:	18c9      	adds	r1, r1, r3
 8009cb2:	424b      	negs	r3, r1
 8009cb4:	4159      	adcs	r1, r3
 8009cb6:	e7ea      	b.n	8009c8e <__swhatbuf_r+0x1e>
 8009cb8:	2100      	movs	r1, #0
 8009cba:	2340      	movs	r3, #64	@ 0x40
 8009cbc:	e7e9      	b.n	8009c92 <__swhatbuf_r+0x22>
 8009cbe:	46c0      	nop			@ (mov r8, r8)
 8009cc0:	ffffe000 	.word	0xffffe000

08009cc4 <__smakebuf_r>:
 8009cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc6:	2602      	movs	r6, #2
 8009cc8:	898b      	ldrh	r3, [r1, #12]
 8009cca:	0005      	movs	r5, r0
 8009ccc:	000c      	movs	r4, r1
 8009cce:	b085      	sub	sp, #20
 8009cd0:	4233      	tst	r3, r6
 8009cd2:	d007      	beq.n	8009ce4 <__smakebuf_r+0x20>
 8009cd4:	0023      	movs	r3, r4
 8009cd6:	3347      	adds	r3, #71	@ 0x47
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	6123      	str	r3, [r4, #16]
 8009cdc:	2301      	movs	r3, #1
 8009cde:	6163      	str	r3, [r4, #20]
 8009ce0:	b005      	add	sp, #20
 8009ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce4:	ab03      	add	r3, sp, #12
 8009ce6:	aa02      	add	r2, sp, #8
 8009ce8:	f7ff ffc2 	bl	8009c70 <__swhatbuf_r>
 8009cec:	9f02      	ldr	r7, [sp, #8]
 8009cee:	9001      	str	r0, [sp, #4]
 8009cf0:	0039      	movs	r1, r7
 8009cf2:	0028      	movs	r0, r5
 8009cf4:	f7fe fe64 	bl	80089c0 <_malloc_r>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d108      	bne.n	8009d0e <__smakebuf_r+0x4a>
 8009cfc:	220c      	movs	r2, #12
 8009cfe:	5ea3      	ldrsh	r3, [r4, r2]
 8009d00:	059a      	lsls	r2, r3, #22
 8009d02:	d4ed      	bmi.n	8009ce0 <__smakebuf_r+0x1c>
 8009d04:	2203      	movs	r2, #3
 8009d06:	4393      	bics	r3, r2
 8009d08:	431e      	orrs	r6, r3
 8009d0a:	81a6      	strh	r6, [r4, #12]
 8009d0c:	e7e2      	b.n	8009cd4 <__smakebuf_r+0x10>
 8009d0e:	2380      	movs	r3, #128	@ 0x80
 8009d10:	89a2      	ldrh	r2, [r4, #12]
 8009d12:	6020      	str	r0, [r4, #0]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	81a3      	strh	r3, [r4, #12]
 8009d18:	9b03      	ldr	r3, [sp, #12]
 8009d1a:	6120      	str	r0, [r4, #16]
 8009d1c:	6167      	str	r7, [r4, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00c      	beq.n	8009d3c <__smakebuf_r+0x78>
 8009d22:	0028      	movs	r0, r5
 8009d24:	230e      	movs	r3, #14
 8009d26:	5ee1      	ldrsh	r1, [r4, r3]
 8009d28:	f000 f820 	bl	8009d6c <_isatty_r>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d005      	beq.n	8009d3c <__smakebuf_r+0x78>
 8009d30:	2303      	movs	r3, #3
 8009d32:	89a2      	ldrh	r2, [r4, #12]
 8009d34:	439a      	bics	r2, r3
 8009d36:	3b02      	subs	r3, #2
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	81a3      	strh	r3, [r4, #12]
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	9a01      	ldr	r2, [sp, #4]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	e7cc      	b.n	8009ce0 <__smakebuf_r+0x1c>
	...

08009d48 <_fstat_r>:
 8009d48:	2300      	movs	r3, #0
 8009d4a:	b570      	push	{r4, r5, r6, lr}
 8009d4c:	4d06      	ldr	r5, [pc, #24]	@ (8009d68 <_fstat_r+0x20>)
 8009d4e:	0004      	movs	r4, r0
 8009d50:	0008      	movs	r0, r1
 8009d52:	0011      	movs	r1, r2
 8009d54:	602b      	str	r3, [r5, #0]
 8009d56:	f7f9 fabe 	bl	80032d6 <_fstat>
 8009d5a:	1c43      	adds	r3, r0, #1
 8009d5c:	d103      	bne.n	8009d66 <_fstat_r+0x1e>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d000      	beq.n	8009d66 <_fstat_r+0x1e>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	20000658 	.word	0x20000658

08009d6c <_isatty_r>:
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	b570      	push	{r4, r5, r6, lr}
 8009d70:	4d06      	ldr	r5, [pc, #24]	@ (8009d8c <_isatty_r+0x20>)
 8009d72:	0004      	movs	r4, r0
 8009d74:	0008      	movs	r0, r1
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	f7f9 fabb 	bl	80032f2 <_isatty>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d103      	bne.n	8009d88 <_isatty_r+0x1c>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d000      	beq.n	8009d88 <_isatty_r+0x1c>
 8009d86:	6023      	str	r3, [r4, #0]
 8009d88:	bd70      	pop	{r4, r5, r6, pc}
 8009d8a:	46c0      	nop			@ (mov r8, r8)
 8009d8c:	20000658 	.word	0x20000658

08009d90 <_init>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	46c0      	nop			@ (mov r8, r8)
 8009d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d96:	bc08      	pop	{r3}
 8009d98:	469e      	mov	lr, r3
 8009d9a:	4770      	bx	lr

08009d9c <_fini>:
 8009d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9e:	46c0      	nop			@ (mov r8, r8)
 8009da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da2:	bc08      	pop	{r3}
 8009da4:	469e      	mov	lr, r3
 8009da6:	4770      	bx	lr
